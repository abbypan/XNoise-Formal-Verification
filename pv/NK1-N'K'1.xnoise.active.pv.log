File "pv/NK1-N'K'1.xnoise.active.pv", line 219, characters 7-8:
Warning: identifier ck rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 228, characters 7-8:
Warning: identifier ck rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 229, characters 7-8:
Warning: identifier cs rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 229, character 36:
Warning: identifier h rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 259, characters 6-7:
Warning: identifier ss rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 265, characters 6-7:
Warning: identifier ss rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 272, character 6:
Warning: identifier e rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 273, characters 6-7:
Warning: identifier ne rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 274, characters 6-7:
Warning: identifier ss rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 276, characters 7-8:
Warning: identifier ss rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 276, characters 26-35:
Warning: identifier ciphertext rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 277, characters 9-10:
Warning: identifier hs rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 284, character 6:
Warning: identifier e rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 285, characters 6-7:
Warning: identifier ne rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 286, characters 6-7:
Warning: identifier ss rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 288, characters 6-7:
Warning: identifier ss rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 289, characters 6-7:
Warning: identifier ss rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 290, characters 6-7:
Warning: identifier ss rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 291, characters 7-8:
Warning: identifier ss rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 291, characters 26-35:
Warning: identifier ciphertext rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 292, characters 9-10:
Warning: identifier hs rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 300, characters 7-8:
Warning: identifier ss rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 300, characters 26-35:
Warning: identifier ciphertext rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 301, characters 9-10:
Warning: identifier hs rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 308, characters 7-8:
Warning: identifier ss rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 308, characters 26-35:
Warning: identifier ciphertext rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 309, characters 9-10:
Warning: identifier hs rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 317, characters 6-7:
Warning: identifier re rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 318, characters 6-7:
Warning: identifier ss rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 320, characters 7-8:
Warning: identifier ss rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 322, characters 13-14:
Warning: identifier hs rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 330, characters 6-7:
Warning: identifier re rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 331, characters 6-7:
Warning: identifier ss rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 333, characters 6-7:
Warning: identifier ss rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 334, characters 6-7:
Warning: identifier ss rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 335, characters 6-7:
Warning: identifier ss rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 336, characters 7-8:
Warning: identifier ss rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 338, characters 13-14:
Warning: identifier hs rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 347, characters 7-8:
Warning: identifier ss rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 349, characters 13-14:
Warning: identifier hs rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 357, characters 7-8:
Warning: identifier ss rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 359, characters 13-14:
Warning: identifier hs rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 518, characters 7-8:
Warning: identifier hs rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 520, characters 8-9:
Warning: identifier hs rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 511, characters 7-8:
Warning: identifier hs rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 512, characters 8-9:
Warning: identifier hs rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 505, characters 8-9:
Warning: identifier hs rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 498, characters 8-9:
Warning: identifier hs rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 561, characters 7-8:
Warning: identifier hs rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 562, characters 8-9:
Warning: identifier hs rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 553, characters 7-8:
Warning: identifier hs rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 555, characters 8-9:
Warning: identifier hs rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 547, characters 8-9:
Warning: identifier hs rebound.
File "pv/NK1-N'K'1.xnoise.active.pv", line 541, characters 8-9:
Warning: identifier hs rebound.
Linear part:
dhexp_real(b,dhexp_real(a,g)) = dhexp_real(a,dhexp_real(b,g))
Completing equations...
Completed equations:
dhexp_real(b,dhexp_real(a,g)) = dhexp_real(a,dhexp_real(b,g))
Convergent part: No equation.
Process 0 (that is, the initial process):
{1}out(pub, (key_s(charlie),key_m(charlie)));
{2}!
{3}new sid: sessionid;
(
    {4}let me: principal = alice in
    {5}let them: principal = bob in
    {6}let sid_1: sessionid = sid in
    {7}let s: keypair = keypairpack(empty,empty) in
    {8}let m: keypair = keypairpack(empty,empty) in
    (
        {9}let e: keypair = keypairpack(empty,empty) in
        {10}let basis: key = key_s(them) in
        {11}let public_key: key = catch-fail(dhexp(basis,validkey(g))) in
        {12}let v: bool = not-caught-fail(public_key) in
        {13}let rs: key = getpublickey((if v then keypairpack(validkey(public_key),basis) else fail-any)) in
        {14}let basis_1: key = key_m(them) in
        {15}let public_key_1: key = catch-fail(dhexp(basis_1,validkey(g))) in
        {16}let v_1: bool = not-caught-fail(public_key_1) in
        {17}let rm: key = getpublickey((if v_1 then keypairpack(validkey(public_key_1),basis_1) else fail-any)) in
        {18}let re: key = empty in
        {19}let prologue: bitstring = empty in
        {20}let psk: key = empty in
        {21}let protocol_name: bitstring = somename in
        {22}let h: bitstring = hash(protocol_name,empty) in
        {23}let ck: key = h in
        {24}let k: key = empty in
        {25}let cs: cipherstate = cipherstatepack(k,minnonce) in
        {26}let ss: symmetricstate = symmetricstatepack(cs,ck,h) in
        {27}let v_2: bitstring = catch-fail(symmetricstateunpack(ss)) in
        {28}let v_3: bool = (not-caught-fail(v_2) && success?(1-proj-3-tuple(v_2))) in
        {29}let h_1: bitstring = (if v_3 then 3-proj-3-tuple(v_2) else caught-fail) in
        {30}let ck_1: key = (if v_3 then 2-proj-3-tuple(v_2) else caught-fail) in
        {31}let cs_1: cipherstate = (if v_3 then 1-proj-3-tuple(v_2) else caught-fail) in
        {32}let ss_1: symmetricstate = catch-fail((if v_3 then symmetricstatepack(cs_1,ck_1,hash(h_1,prologue)) else fail-any)) in
        {33}let v_4: bool = not-caught-fail(ss_1) in
        {34}let v_5: bitstring = (if v_4 then catch-fail(symmetricstateunpack(ss_1)) else caught-fail) in
        {35}let v_6: bool = (not-caught-fail(v_5) && success?(1-proj-3-tuple(v_5))) in
        {36}let h_2: bitstring = (if v_6 then 3-proj-3-tuple(v_5) else caught-fail) in
        {37}let ck_2: key = (if v_6 then 2-proj-3-tuple(v_5) else caught-fail) in
        {38}let cs_2: cipherstate = (if v_6 then 1-proj-3-tuple(v_5) else caught-fail) in
        {39}let ss_2: symmetricstate = (if v_4 then catch-fail((if v_6 then symmetricstatepack(cs_2,ck_2,hash(h_2,rs)) else fail-any)) else caught-fail) in
        {40}let v_7: bool = not-caught-fail(ss_2) in
        {41}let v_8: bitstring = (if v_7 then catch-fail(symmetricstateunpack(ss_2)) else caught-fail) in
        {42}let v_9: bool = (not-caught-fail(v_8) && success?(1-proj-3-tuple(v_8))) in
        {43}let h_3: bitstring = (if v_9 then 3-proj-3-tuple(v_8) else caught-fail) in
        {44}let ck_3: key = (if v_9 then 2-proj-3-tuple(v_8) else caught-fail) in
        {45}let cs_3: cipherstate = (if v_9 then 1-proj-3-tuple(v_8) else caught-fail) in
        {46}let ss_3: symmetricstate = (if v_7 then catch-fail((if v_9 then symmetricstatepack(cs_3,ck_3,hash(h_3,rm)) else fail-any)) else caught-fail) in
        {47}let v_10: bool = not-caught-fail(ss_3) in
        {48}let hs: handshakestate = (if v_4 then (if v_7 then (if v_10 then handshakestatepack(ss_3,s,m,e,rs,rm,re,psk,true) else fail-any) else fail-any) else fail-any) in
        {49}insert statestore(me,them,sid_1,statepack_a(hs))
    ) | (
        {120}get statestore(=me,=them,=sid_1,statepack_a(hs_1: handshakestate)) in
        {50}let payload: bitstring = msg_a(me,them,sid_1) in
        {51}let v_11: bitstring = catch-fail(handshakestateunpack(hs_1)) in
        {52}let v_12: bool = (not-caught-fail(v_11) && success?(1-proj-9-tuple(v_11))) in
        {53}let initiator_1: bool = (if v_12 then 9-proj-9-tuple(v_11) else caught-fail) in
        {54}let psk_1: key = (if v_12 then 8-proj-9-tuple(v_11) else caught-fail) in
        {55}let re_1: key = (if v_12 then 7-proj-9-tuple(v_11) else caught-fail) in
        {56}let rm_1: key = (if v_12 then 6-proj-9-tuple(v_11) else caught-fail) in
        {57}let rs_1: key = (if v_12 then 5-proj-9-tuple(v_11) else caught-fail) in
        {58}let e_1: keypair = (if v_12 then 4-proj-9-tuple(v_11) else caught-fail) in
        {59}let m_1: keypair = (if v_12 then 3-proj-9-tuple(v_11) else caught-fail) in
        {60}let s_1: keypair = (if v_12 then 2-proj-9-tuple(v_11) else caught-fail) in
        {61}let ss_4: symmetricstate = (if v_12 then 1-proj-9-tuple(v_11) else caught-fail) in
        {62}let v_13: bitstring = (if v_12 then catch-fail((empty,empty,empty)) else caught-fail) in
        {63}let v_14: bool = (not-caught-fail(v_13) && success?(1-proj-3-tuple(v_13))) in
        {64}let ciphertext: bitstring = (if v_14 then 3-proj-3-tuple(v_13) else caught-fail) in
        {65}let ns: bitstring = (if v_14 then 2-proj-3-tuple(v_13) else caught-fail) in
        {66}let ne: bitstring = (if v_14 then 1-proj-3-tuple(v_13) else caught-fail) in
        {67}let basis_2: key = (if v_14 then key_e(me,them,sid_1) else caught-fail) in
        {68}let public_key_2: key = (if v_14 then catch-fail(dhexp(basis_2,validkey(g))) else caught-fail) in
        {69}let v_15: bool = not-caught-fail(public_key_2) in
        {70}let e_2: keypair = (if v_14 then catch-fail((if v_15 then keypairpack(validkey(public_key_2),basis_2) else fail-any)) else caught-fail) in
        {71}let v_16: bool = not-caught-fail(e_2) in
        {72}let ne_1: bitstring = (if v_16 then catch-fail(getpublickey(e_2)) else caught-fail) in
        {73}let v_17: bool = not-caught-fail(ne_1) in
        {74}let v_18: bitstring = (if v_17 then catch-fail(symmetricstateunpack(ss_4)) else caught-fail) in
        {75}let v_19: bool = (not-caught-fail(v_18) && success?(1-proj-3-tuple(v_18))) in
        {76}let h_4: bitstring = (if v_19 then 3-proj-3-tuple(v_18) else caught-fail) in
        {77}let ck_4: key = (if v_19 then 2-proj-3-tuple(v_18) else caught-fail) in
        {78}let cs_4: cipherstate = (if v_19 then 1-proj-3-tuple(v_18) else caught-fail) in
        {79}let ss_5: symmetricstate = (if v_17 then catch-fail((if v_19 then symmetricstatepack(cs_4,ck_4,hash(h_4,ne_1)) else fail-any)) else caught-fail) in
        {80}let v_20: bool = not-caught-fail(ss_5) in
        {81}let v_21: bitstring = (if v_20 then catch-fail(symmetricstateunpack(ss_5)) else caught-fail) in
        {82}let v_22: bool = (not-caught-fail(v_21) && success?(1-proj-3-tuple(v_21))) in
        {83}let h_5: bitstring = (if v_22 then 3-proj-3-tuple(v_21) else caught-fail) in
        {84}let ck_5: key = (if v_22 then 2-proj-3-tuple(v_21) else caught-fail) in
        {85}let cs_5: cipherstate = (if v_22 then 1-proj-3-tuple(v_21) else caught-fail) in
        {86}let v_23: bitstring = (if v_22 then catch-fail(cipherstateunpack(cs_5)) else caught-fail) in
        {87}let v_24: bool = (not-caught-fail(v_23) && success?(1-proj-2-tuple(v_23))) in
        {88}let n: nonce = (if v_24 then 2-proj-2-tuple(v_23) else caught-fail) in
        {89}let k_1: key = (if v_24 then 1-proj-2-tuple(v_23) else caught-fail) in
        {90}let e_3: bitstring = (if v_24 then encrypt(k_1,n,h_5,payload) else caught-fail) in
        {91}let n_1: nonce = (if v_24 then increment_nonce(n) else caught-fail) in
        {92}let v_25: bitstring = (if v_24 then catch-fail(cipherstateunpack(cs_5)) else caught-fail) in
        {93}let v_26: bool = (not-caught-fail(v_25) && success?(1-proj-2-tuple(v_25))) in
        {94}let o: nonce = (if v_26 then 2-proj-2-tuple(v_25) else caught-fail) in
        {95}let k_2: key = (if v_26 then 1-proj-2-tuple(v_25) else caught-fail) in
        {96}let csi: cipherstate = (if v_24 then catch-fail((if v_26 then cipherstatepack(k_2,n_1) else fail-any)) else caught-fail) in
        {97}let v_27: bool = not-caught-fail(csi) in
        {98}let v_28: bitstring = (if v_22 then catch-fail((if v_24 then (if v_27 then (csi,e_3) else fail-any) else fail-any)) else caught-fail) in
        {99}let v_29: bool = (not-caught-fail(v_28) && success?(1-proj-2-tuple(v_28))) in
        {100}let ciphertext_1: bitstring = (if v_29 then 2-proj-2-tuple(v_28) else caught-fail) in
        {101}let csi_1: cipherstate = (if v_29 then 1-proj-2-tuple(v_28) else caught-fail) in
        {102}let ss_6: symmetricstate = (if v_29 then symmetricstatepack(csi_1,ck_5,h_5) else caught-fail) in
        {103}let v_30: bitstring = (if v_29 then catch-fail(symmetricstateunpack(ss_6)) else caught-fail) in
        {104}let v_31: bool = (not-caught-fail(v_30) && success?(1-proj-3-tuple(v_30))) in
        {105}let h_6: bitstring = (if v_31 then 3-proj-3-tuple(v_30) else caught-fail) in
        {106}let ck_6: key = (if v_31 then 2-proj-3-tuple(v_30) else caught-fail) in
        {107}let cs_6: cipherstate = (if v_31 then 1-proj-3-tuple(v_30) else caught-fail) in
        {108}let ssi: symmetricstate = (if v_29 then catch-fail((if v_31 then symmetricstatepack(cs_6,ck_6,hash(h_6,ciphertext_1)) else fail-any)) else caught-fail) in
        {109}let v_32: bool = not-caught-fail(ssi) in
        {110}let v_33: bitstring = (if v_20 then catch-fail((if v_22 then (if v_29 then (if v_32 then (ssi,ciphertext_1) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {111}let v_34: bool = (not-caught-fail(v_33) && success?(1-proj-2-tuple(v_33))) in
        {112}let ciphertext_2: bitstring = (if v_34 then 2-proj-2-tuple(v_33) else caught-fail) in
        {113}let ss_7: symmetricstate = (if v_34 then 1-proj-2-tuple(v_33) else caught-fail) in
        {114}let hs_2: handshakestate = (if v_34 then handshakestatepack(ss_7,s_1,m_1,e_2,rs_1,rm_1,re_1,psk_1,initiator_1) else caught-fail) in
        {115}let message_buffer: bitstring = (if v_34 then concat3(ne_1,ns,ciphertext_2) else caught-fail) in
        {116}let (hs_3: handshakestate,message_a: bitstring) = (if v_12 then (if v_14 then (if v_16 then (if v_17 then (if v_20 then (if v_34 then (hs_2,message_buffer) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {117}event SendMsg(me,them,stagepack_a(sid_1),msg_a(me,them,sid_1));
        {118}insert statestore(me,them,sid_1,statepack_b(hs_3));
        {119}out(pub, message_a)
    ) | (
        {277}get statestore(=me,=them,=sid_1,statepack_b(hs_4: handshakestate)) in
        {121}in(pub, message_b: bitstring);
        {122}let v_35: bitstring = catch-fail(handshakestateunpack(hs_4)) in
        {123}let v_36: bool = (not-caught-fail(v_35) && success?(1-proj-9-tuple(v_35))) in
        {124}let initiator_2: bool = (if v_36 then 9-proj-9-tuple(v_35) else caught-fail) in
        {125}let psk_2: key = (if v_36 then 8-proj-9-tuple(v_35) else caught-fail) in
        {126}let re_2: key = (if v_36 then 7-proj-9-tuple(v_35) else caught-fail) in
        {127}let rm_2: key = (if v_36 then 6-proj-9-tuple(v_35) else caught-fail) in
        {128}let rs_2: key = (if v_36 then 5-proj-9-tuple(v_35) else caught-fail) in
        {129}let e_4: keypair = (if v_36 then 4-proj-9-tuple(v_35) else caught-fail) in
        {130}let m_2: keypair = (if v_36 then 3-proj-9-tuple(v_35) else caught-fail) in
        {131}let s_2: keypair = (if v_36 then 2-proj-9-tuple(v_35) else caught-fail) in
        {132}let ss_8: symmetricstate = (if v_36 then 1-proj-9-tuple(v_35) else caught-fail) in
        {133}let v_37: bitstring = (if v_36 then catch-fail(deconcat3(message_b)) else caught-fail) in
        {134}let v_38: bool = (not-caught-fail(v_37) && success?(1-proj-3-tuple(v_37))) in
        {135}let ciphertext_3: bitstring = (if v_38 then 3-proj-3-tuple(v_37) else caught-fail) in
        {136}let ns_1: bitstring = (if v_38 then 2-proj-3-tuple(v_37) else caught-fail) in
        {137}let ne_2: bitstring = (if v_38 then 1-proj-3-tuple(v_37) else caught-fail) in
        {138}let valid1: bool = (if v_38 then true else caught-fail) in
        {139}let re_3: key = (if v_38 then ne_2 else caught-fail) in
        {140}let v_39: bitstring = (if v_38 then catch-fail(symmetricstateunpack(ss_8)) else caught-fail) in
        {141}let v_40: bool = (not-caught-fail(v_39) && success?(1-proj-3-tuple(v_39))) in
        {142}let h_7: bitstring = (if v_40 then 3-proj-3-tuple(v_39) else caught-fail) in
        {143}let ck_7: key = (if v_40 then 2-proj-3-tuple(v_39) else caught-fail) in
        {144}let cs_7: cipherstate = (if v_40 then 1-proj-3-tuple(v_39) else caught-fail) in
        {145}let ss_9: symmetricstate = (if v_38 then catch-fail((if v_40 then symmetricstatepack(cs_7,ck_7,hash(h_7,re_3)) else fail-any)) else caught-fail) in
        {146}let v_41: bool = not-caught-fail(ss_9) in
        {147}let v_42: bitstring = (if v_41 then catch-fail(keypairunpack(e_4)) else caught-fail) in
        {148}let v_43: bool = (not-caught-fail(v_42) && success?(1-proj-2-tuple(v_42))) in
        {149}let my_private_key: key = (if v_43 then 2-proj-2-tuple(v_42) else caught-fail) in
        {150}let my_public_key: key = (if v_43 then 1-proj-2-tuple(v_42) else caught-fail) in
        {151}let input_key_material: key = (if v_41 then catch-fail((if v_43 then dhexp(my_private_key,re_3) else fail-any)) else caught-fail) in
        {152}let v_44: bool = not-caught-fail(input_key_material) in
        {153}let v_45: bitstring = (if v_44 then catch-fail(symmetricstateunpack(ss_9)) else caught-fail) in
        {154}let v_46: bool = (not-caught-fail(v_45) && success?(1-proj-3-tuple(v_45))) in
        {155}let h_8: bitstring = (if v_46 then 3-proj-3-tuple(v_45) else caught-fail) in
        {156}let ck_8: key = (if v_46 then 2-proj-3-tuple(v_45) else caught-fail) in
        {157}let cs_8: cipherstate = (if v_46 then 1-proj-3-tuple(v_45) else caught-fail) in
        {158}let output1: key = (if v_46 then hmac_hash1(ck_8,input_key_material) else caught-fail) in
        {159}let output2: key = (if v_46 then hmac_hash2(ck_8,input_key_material) else caught-fail) in
        {160}let output3: key = (if v_46 then hmac_hash3(ck_8,input_key_material) else caught-fail) in
        {161}let v_47: bitstring = (if v_46 then catch-fail((output1,output2,output3)) else caught-fail) in
        {162}let v_48: bool = (not-caught-fail(v_47) && success?(1-proj-3-tuple(v_47))) in
        {163}let output_3: key = (if v_48 then 3-proj-3-tuple(v_47) else caught-fail) in
        {164}let temp_k: key = (if v_48 then 2-proj-3-tuple(v_47) else caught-fail) in
        {165}let ck_9: key = (if v_48 then 1-proj-3-tuple(v_47) else caught-fail) in
        {166}let ss_10: symmetricstate = (if v_41 then catch-fail((if v_44 then (if v_46 then (if v_48 then symmetricstatepack(cipherstatepack(temp_k,minnonce),ck_9,h_8) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {167}let v_49: bool = not-caught-fail(ss_10) in
        {168}let v_50: bitstring = (if v_49 then catch-fail(keypairunpack(e_4)) else caught-fail) in
        {169}let v_51: bool = (not-caught-fail(v_50) && success?(1-proj-2-tuple(v_50))) in
        {170}let my_private_key_1: key = (if v_51 then 2-proj-2-tuple(v_50) else caught-fail) in
        {171}let my_public_key_1: key = (if v_51 then 1-proj-2-tuple(v_50) else caught-fail) in
        {172}let input_key_material_1: key = (if v_49 then catch-fail((if v_51 then dhexp(my_private_key_1,rs_2) else fail-any)) else caught-fail) in
        {173}let v_52: bool = not-caught-fail(input_key_material_1) in
        {174}let v_53: bitstring = (if v_52 then catch-fail(symmetricstateunpack(ss_10)) else caught-fail) in
        {175}let v_54: bool = (not-caught-fail(v_53) && success?(1-proj-3-tuple(v_53))) in
        {176}let h_9: bitstring = (if v_54 then 3-proj-3-tuple(v_53) else caught-fail) in
        {177}let ck_10: key = (if v_54 then 2-proj-3-tuple(v_53) else caught-fail) in
        {178}let cs_9: cipherstate = (if v_54 then 1-proj-3-tuple(v_53) else caught-fail) in
        {179}let output1_1: key = (if v_54 then hmac_hash1(ck_10,input_key_material_1) else caught-fail) in
        {180}let output2_1: key = (if v_54 then hmac_hash2(ck_10,input_key_material_1) else caught-fail) in
        {181}let output3_1: key = (if v_54 then hmac_hash3(ck_10,input_key_material_1) else caught-fail) in
        {182}let v_55: bitstring = (if v_54 then catch-fail((output1_1,output2_1,output3_1)) else caught-fail) in
        {183}let v_56: bool = (not-caught-fail(v_55) && success?(1-proj-3-tuple(v_55))) in
        {184}let output: key = (if v_56 then 3-proj-3-tuple(v_55) else caught-fail) in
        {185}let temp_k_1: key = (if v_56 then 2-proj-3-tuple(v_55) else caught-fail) in
        {186}let ck_11: key = (if v_56 then 1-proj-3-tuple(v_55) else caught-fail) in
        {187}let ss_11: symmetricstate = (if v_49 then catch-fail((if v_52 then (if v_54 then (if v_56 then symmetricstatepack(cipherstatepack(temp_k_1,minnonce),ck_11,h_9) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {188}let v_57: bool = not-caught-fail(ss_11) in
        {189}let v_58: bitstring = (if v_57 then catch-fail(keypairunpack(e_4)) else caught-fail) in
        {190}let v_59: bool = (not-caught-fail(v_58) && success?(1-proj-2-tuple(v_58))) in
        {191}let my_private_key_2: key = (if v_59 then 2-proj-2-tuple(v_58) else caught-fail) in
        {192}let my_public_key_2: key = (if v_59 then 1-proj-2-tuple(v_58) else caught-fail) in
        {193}let input_key_material_2: key = (if v_57 then catch-fail((if v_59 then dhexp(my_private_key_2,rm_2) else fail-any)) else caught-fail) in
        {194}let v_60: bool = not-caught-fail(input_key_material_2) in
        {195}let v_61: bitstring = (if v_60 then catch-fail(symmetricstateunpack(ss_11)) else caught-fail) in
        {196}let v_62: bool = (not-caught-fail(v_61) && success?(1-proj-3-tuple(v_61))) in
        {197}let h_10: bitstring = (if v_62 then 3-proj-3-tuple(v_61) else caught-fail) in
        {198}let ck_12: key = (if v_62 then 2-proj-3-tuple(v_61) else caught-fail) in
        {199}let cs_10: cipherstate = (if v_62 then 1-proj-3-tuple(v_61) else caught-fail) in
        {200}let output1_2: key = (if v_62 then hmac_hash1(ck_12,input_key_material_2) else caught-fail) in
        {201}let output2_2: key = (if v_62 then hmac_hash2(ck_12,input_key_material_2) else caught-fail) in
        {202}let output3_2: key = (if v_62 then hmac_hash3(ck_12,input_key_material_2) else caught-fail) in
        {203}let v_63: bitstring = (if v_62 then catch-fail((output1_2,output2_2,output3_2)) else caught-fail) in
        {204}let v_64: bool = (not-caught-fail(v_63) && success?(1-proj-3-tuple(v_63))) in
        {205}let output_1: key = (if v_64 then 3-proj-3-tuple(v_63) else caught-fail) in
        {206}let temp_k_2: key = (if v_64 then 2-proj-3-tuple(v_63) else caught-fail) in
        {207}let ck_13: key = (if v_64 then 1-proj-3-tuple(v_63) else caught-fail) in
        {208}let ss_12: symmetricstate = (if v_57 then catch-fail((if v_60 then (if v_62 then (if v_64 then symmetricstatepack(cipherstatepack(temp_k_2,minnonce),ck_13,h_10) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {209}let v_65: bool = not-caught-fail(ss_12) in
        {210}let v_66: bitstring = (if v_65 then catch-fail(symmetricstateunpack(ss_12)) else caught-fail) in
        {211}let v_67: bool = (not-caught-fail(v_66) && success?(1-proj-3-tuple(v_66))) in
        {212}let h_11: bitstring = (if v_67 then 3-proj-3-tuple(v_66) else caught-fail) in
        {213}let ck_14: key = (if v_67 then 2-proj-3-tuple(v_66) else caught-fail) in
        {214}let cs_11: cipherstate = (if v_67 then 1-proj-3-tuple(v_66) else caught-fail) in
        {215}let v_68: bitstring = (if v_67 then catch-fail(cipherstateunpack(cs_11)) else caught-fail) in
        {216}let v_69: bool = (not-caught-fail(v_68) && success?(1-proj-2-tuple(v_68))) in
        {217}let n_2: nonce = (if v_69 then 2-proj-2-tuple(v_68) else caught-fail) in
        {218}let k_3: key = (if v_69 then 1-proj-2-tuple(v_68) else caught-fail) in
        {219}let d: aead = (if v_69 then catch-fail(decrypt(k_3,n_2,h_11,ciphertext_3)) else caught-fail) in
        {220}let v_70: bool = not-caught-fail(d) in
        {221}let v_71: bitstring = (if v_70 then catch-fail(aeadunpack(d)) else caught-fail) in
        {222}let v_72: bool = (not-caught-fail(v_71) && success?(1-proj-3-tuple(v_71))) in
        {223}let plaintext: bitstring = (if v_72 then 3-proj-3-tuple(v_71) else caught-fail) in
        {224}let adi: bitstring = (if v_72 then 2-proj-3-tuple(v_71) else caught-fail) in
        {225}let valid: bool = (if v_72 then 1-proj-3-tuple(v_71) else caught-fail) in
        {226}let n_3: nonce = (if v_72 then increment_nonce(n_2) else caught-fail) in
        {227}let v_73: bitstring = (if v_72 then catch-fail(cipherstateunpack(cs_11)) else caught-fail) in
        {228}let v_74: bool = (not-caught-fail(v_73) && success?(1-proj-2-tuple(v_73))) in
        {229}let o_1: nonce = (if v_74 then 2-proj-2-tuple(v_73) else caught-fail) in
        {230}let k_4: key = (if v_74 then 1-proj-2-tuple(v_73) else caught-fail) in
        {231}let csi_2: cipherstate = (if v_72 then catch-fail((if v_74 then cipherstatepack(k_4,n_3) else fail-any)) else caught-fail) in
        {232}let v_75: bool = not-caught-fail(csi_2) in
        {233}let v_76: bitstring = (if v_67 then catch-fail((if v_69 then (if v_70 then (if v_72 then (if v_75 then (csi_2,plaintext,valid) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {234}let v_77: bool = (not-caught-fail(v_76) && success?(1-proj-3-tuple(v_76))) in
        {235}let valid_1: bool = (if v_77 then 3-proj-3-tuple(v_76) else caught-fail) in
        {236}let plaintext_1: bitstring = (if v_77 then 2-proj-3-tuple(v_76) else caught-fail) in
        {237}let csi_3: cipherstate = (if v_77 then 1-proj-3-tuple(v_76) else caught-fail) in
        {238}let ss_13: symmetricstate = (if v_77 then symmetricstatepack(csi_3,ck_14,h_11) else caught-fail) in
        {239}let v_78: bitstring = (if v_77 then catch-fail(symmetricstateunpack(ss_13)) else caught-fail) in
        {240}let v_79: bool = (not-caught-fail(v_78) && success?(1-proj-3-tuple(v_78))) in
        {241}let h_12: bitstring = (if v_79 then 3-proj-3-tuple(v_78) else caught-fail) in
        {242}let ck_15: key = (if v_79 then 2-proj-3-tuple(v_78) else caught-fail) in
        {243}let cs_12: cipherstate = (if v_79 then 1-proj-3-tuple(v_78) else caught-fail) in
        {244}let ssi_1: symmetricstate = (if v_77 then catch-fail((if v_79 then symmetricstatepack(cs_12,ck_15,hash(h_12,ciphertext_3)) else fail-any)) else caught-fail) in
        {245}let v_80: bool = not-caught-fail(ssi_1) in
        {246}let v_81: bitstring = (if v_65 then catch-fail((if v_67 then (if v_77 then (if v_80 then (ssi_1,plaintext_1,valid_1) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {247}let v_82: bool = (not-caught-fail(v_81) && success?(1-proj-3-tuple(v_81))) in
        {248}let valid2: bool = (if v_82 then 3-proj-3-tuple(v_81) else caught-fail) in
        {249}let plaintext_2: bitstring = (if v_82 then 2-proj-3-tuple(v_81) else caught-fail) in
        {250}let ss_14: symmetricstate = (if v_82 then 1-proj-3-tuple(v_81) else caught-fail) in
        {251}let v_83: bool = (if v_82 then catch-fail((valid1 && valid2)) else caught-fail) in
        {252}let hs_5: handshakestate = (if v_83 then handshakestatepack(ss_14,s_2,m_2,e_4,rs_2,rm_2,re_3,psk_2,initiator_2) else caught-fail) in
        {253}let v_84: bitstring = (if v_83 then catch-fail(symmetricstateunpack(ss_14)) else caught-fail) in
        {254}let v_85: bool = (not-caught-fail(v_84) && success?(1-proj-3-tuple(v_84))) in
        {255}let h_13: bitstring = (if v_85 then 3-proj-3-tuple(v_84) else caught-fail) in
        {256}let ck_16: key = (if v_85 then 2-proj-3-tuple(v_84) else caught-fail) in
        {257}let cs_13: cipherstate = (if v_85 then 1-proj-3-tuple(v_84) else caught-fail) in
        {258}let input_key_material_3: key = (if v_85 then zero else caught-fail) in
        {259}let output1_3: key = (if v_85 then hmac_hash1(ck_16,input_key_material_3) else caught-fail) in
        {260}let output2_3: key = (if v_85 then hmac_hash2(ck_16,input_key_material_3) else caught-fail) in
        {261}let output3_3: key = (if v_85 then hmac_hash3(ck_16,input_key_material_3) else caught-fail) in
        {262}let v_86: bitstring = (if v_85 then catch-fail((output1_3,output2_3,output3_3)) else caught-fail) in
        {263}let v_87: bool = (not-caught-fail(v_86) && success?(1-proj-3-tuple(v_86))) in
        {264}let temp_k3: key = (if v_87 then 3-proj-3-tuple(v_86) else caught-fail) in
        {265}let temp_k2: key = (if v_87 then 2-proj-3-tuple(v_86) else caught-fail) in
        {266}let temp_k1: key = (if v_87 then 1-proj-3-tuple(v_86) else caught-fail) in
        {267}let cs1: cipherstate = (if v_87 then cipherstatepack(temp_k1,minnonce) else caught-fail) in
        {268}let cs2: cipherstate = (if v_87 then cipherstatepack(temp_k2,minnonce) else caught-fail) in
        {269}let v_88: bitstring = (if v_83 then catch-fail((if v_85 then (if v_87 then (ss_14,cs1,cs2) else fail-any) else fail-any)) else caught-fail) in
        {270}let v_89: bool = (not-caught-fail(v_88) && success?(1-proj-3-tuple(v_88))) in
        {271}let cs2_1: cipherstate = (if v_89 then 3-proj-3-tuple(v_88) else caught-fail) in
        {272}let cs1_1: cipherstate = (if v_89 then 2-proj-3-tuple(v_88) else caught-fail) in
        {273}let ssi_2: symmetricstate = (if v_89 then 1-proj-3-tuple(v_88) else caught-fail) in
        {274}let (hs_6: handshakestate,plaintext_b: bitstring,valid_2: bool,cs1_2: cipherstate,cs2_2: cipherstate) = (if v_36 then (if v_38 then (if v_41 then (if v_49 then (if v_57 then (if v_65 then (if v_82 then (if undo-catch-fail(v_83) then (if v_89 then (hs_5,plaintext_2,true,cs1_1,cs2_1) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {275}event RecvMsg(me,them,stagepack_b(sid_1),plaintext_b);
        {276}insert statestore(me,them,sid_1,statepack_c(hs_6,cs1_2,cs2_2))
    ) | (
        {278}!
        {336}get statestore(=me,=them,=sid_1,statepack_c(hs_7: handshakestate,cs1_3: cipherstate,cs2_3: cipherstate)) in
        {279}let hs_8: handshakestate = handshakestatesetcs(hs_7,cs1_3) in
        {280}let payload_1: bitstring = msg_c(me,them,sid_1) in
        {281}let v_90: bitstring = catch-fail(handshakestateunpack(hs_8)) in
        {282}let v_91: bool = (not-caught-fail(v_90) && success?(1-proj-9-tuple(v_90))) in
        {283}let initiator_3: bool = (if v_91 then 9-proj-9-tuple(v_90) else caught-fail) in
        {284}let psk_3: key = (if v_91 then 8-proj-9-tuple(v_90) else caught-fail) in
        {285}let re_4: key = (if v_91 then 7-proj-9-tuple(v_90) else caught-fail) in
        {286}let rm_3: key = (if v_91 then 6-proj-9-tuple(v_90) else caught-fail) in
        {287}let rs_3: key = (if v_91 then 5-proj-9-tuple(v_90) else caught-fail) in
        {288}let e_5: keypair = (if v_91 then 4-proj-9-tuple(v_90) else caught-fail) in
        {289}let m_3: keypair = (if v_91 then 3-proj-9-tuple(v_90) else caught-fail) in
        {290}let s_3: keypair = (if v_91 then 2-proj-9-tuple(v_90) else caught-fail) in
        {291}let ss_15: symmetricstate = (if v_91 then 1-proj-9-tuple(v_90) else caught-fail) in
        {292}let v_92: bitstring = (if v_91 then catch-fail((empty,empty,empty)) else caught-fail) in
        {293}let v_93: bool = (not-caught-fail(v_92) && success?(1-proj-3-tuple(v_92))) in
        {294}let ciphertext_4: bitstring = (if v_93 then 3-proj-3-tuple(v_92) else caught-fail) in
        {295}let ns_2: bitstring = (if v_93 then 2-proj-3-tuple(v_92) else caught-fail) in
        {296}let ne_3: bitstring = (if v_93 then 1-proj-3-tuple(v_92) else caught-fail) in
        {297}let v_94: bitstring = (if v_93 then catch-fail(symmetricstateunpack(ss_15)) else caught-fail) in
        {298}let v_95: bool = (not-caught-fail(v_94) && success?(1-proj-3-tuple(v_94))) in
        {299}let h_14: bitstring = (if v_95 then 3-proj-3-tuple(v_94) else caught-fail) in
        {300}let ck_17: key = (if v_95 then 2-proj-3-tuple(v_94) else caught-fail) in
        {301}let cs_14: cipherstate = (if v_95 then 1-proj-3-tuple(v_94) else caught-fail) in
        {302}let v_96: bitstring = (if v_95 then catch-fail(cipherstateunpack(cs_14)) else caught-fail) in
        {303}let v_97: bool = (not-caught-fail(v_96) && success?(1-proj-2-tuple(v_96))) in
        {304}let n_4: nonce = (if v_97 then 2-proj-2-tuple(v_96) else caught-fail) in
        {305}let k_5: key = (if v_97 then 1-proj-2-tuple(v_96) else caught-fail) in
        {306}let e_6: bitstring = (if v_97 then encrypt(k_5,n_4,h_14,payload_1) else caught-fail) in
        {307}let n_5: nonce = (if v_97 then increment_nonce(n_4) else caught-fail) in
        {308}let v_98: bitstring = (if v_97 then catch-fail(cipherstateunpack(cs_14)) else caught-fail) in
        {309}let v_99: bool = (not-caught-fail(v_98) && success?(1-proj-2-tuple(v_98))) in
        {310}let o_2: nonce = (if v_99 then 2-proj-2-tuple(v_98) else caught-fail) in
        {311}let k_6: key = (if v_99 then 1-proj-2-tuple(v_98) else caught-fail) in
        {312}let csi_4: cipherstate = (if v_97 then catch-fail((if v_99 then cipherstatepack(k_6,n_5) else fail-any)) else caught-fail) in
        {313}let v_100: bool = not-caught-fail(csi_4) in
        {314}let v_101: bitstring = (if v_95 then catch-fail((if v_97 then (if v_100 then (csi_4,e_6) else fail-any) else fail-any)) else caught-fail) in
        {315}let v_102: bool = (not-caught-fail(v_101) && success?(1-proj-2-tuple(v_101))) in
        {316}let ciphertext_5: bitstring = (if v_102 then 2-proj-2-tuple(v_101) else caught-fail) in
        {317}let csi_5: cipherstate = (if v_102 then 1-proj-2-tuple(v_101) else caught-fail) in
        {318}let ss_16: symmetricstate = (if v_102 then symmetricstatepack(csi_5,ck_17,h_14) else caught-fail) in
        {319}let v_103: bitstring = (if v_102 then catch-fail(symmetricstateunpack(ss_16)) else caught-fail) in
        {320}let v_104: bool = (not-caught-fail(v_103) && success?(1-proj-3-tuple(v_103))) in
        {321}let h_15: bitstring = (if v_104 then 3-proj-3-tuple(v_103) else caught-fail) in
        {322}let ck_18: key = (if v_104 then 2-proj-3-tuple(v_103) else caught-fail) in
        {323}let cs_15: cipherstate = (if v_104 then 1-proj-3-tuple(v_103) else caught-fail) in
        {324}let ssi_3: symmetricstate = (if v_102 then catch-fail((if v_104 then symmetricstatepack(cs_15,ck_18,hash(h_15,ciphertext_5)) else fail-any)) else caught-fail) in
        {325}let v_105: bool = not-caught-fail(ssi_3) in
        {326}let v_106: bitstring = (if v_93 then catch-fail((if v_95 then (if v_102 then (if v_105 then (ssi_3,ciphertext_5) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {327}let v_107: bool = (not-caught-fail(v_106) && success?(1-proj-2-tuple(v_106))) in
        {328}let ciphertext_6: bitstring = (if v_107 then 2-proj-2-tuple(v_106) else caught-fail) in
        {329}let ss_17: symmetricstate = (if v_107 then 1-proj-2-tuple(v_106) else caught-fail) in
        {330}let hs_9: handshakestate = (if v_107 then handshakestatepack(ss_17,s_3,m_3,e_5,rs_3,rm_3,re_4,psk_3,initiator_3) else caught-fail) in
        {331}let message_buffer_1: bitstring = (if v_107 then concat3(ne_3,ns_2,ciphertext_6) else caught-fail) in
        {332}let (hs_10: handshakestate,message_c: bitstring) = (if v_91 then (if v_93 then (if v_107 then (hs_9,message_buffer_1) else fail-any) else fail-any) else fail-any) in
        {333}event SendMsg(me,them,stagepack_c(sid_1),msg_c(me,them,sid_1));
        {334}insert statestore(me,them,sid_1,statepack_d(hs_10,handshakestategetcs(hs_10),cs2_3));
        {335}out(pub, message_c)
    ) | (
        {337}!
        {403}get statestore(=me,=them,=sid_1,statepack_d(hs_11: handshakestate,cs1_4: cipherstate,cs2_4: cipherstate)) in
        {338}let hs_12: handshakestate = handshakestatesetcs(hs_11,cs2_4) in
        {339}in(pub, message_d: bitstring);
        {340}let v_108: bitstring = catch-fail(handshakestateunpack(hs_12)) in
        {341}let v_109: bool = (not-caught-fail(v_108) && success?(1-proj-9-tuple(v_108))) in
        {342}let initiator_4: bool = (if v_109 then 9-proj-9-tuple(v_108) else caught-fail) in
        {343}let psk_4: key = (if v_109 then 8-proj-9-tuple(v_108) else caught-fail) in
        {344}let re_5: key = (if v_109 then 7-proj-9-tuple(v_108) else caught-fail) in
        {345}let rm_4: key = (if v_109 then 6-proj-9-tuple(v_108) else caught-fail) in
        {346}let rs_4: key = (if v_109 then 5-proj-9-tuple(v_108) else caught-fail) in
        {347}let e_7: keypair = (if v_109 then 4-proj-9-tuple(v_108) else caught-fail) in
        {348}let m_4: keypair = (if v_109 then 3-proj-9-tuple(v_108) else caught-fail) in
        {349}let s_4: keypair = (if v_109 then 2-proj-9-tuple(v_108) else caught-fail) in
        {350}let ss_18: symmetricstate = (if v_109 then 1-proj-9-tuple(v_108) else caught-fail) in
        {351}let v_110: bitstring = (if v_109 then catch-fail(deconcat3(message_d)) else caught-fail) in
        {352}let v_111: bool = (not-caught-fail(v_110) && success?(1-proj-3-tuple(v_110))) in
        {353}let ciphertext_7: bitstring = (if v_111 then 3-proj-3-tuple(v_110) else caught-fail) in
        {354}let ns_3: bitstring = (if v_111 then 2-proj-3-tuple(v_110) else caught-fail) in
        {355}let ne_4: bitstring = (if v_111 then 1-proj-3-tuple(v_110) else caught-fail) in
        {356}let valid1_1: bool = (if v_111 then true else caught-fail) in
        {357}let v_112: bitstring = (if v_111 then catch-fail(symmetricstateunpack(ss_18)) else caught-fail) in
        {358}let v_113: bool = (not-caught-fail(v_112) && success?(1-proj-3-tuple(v_112))) in
        {359}let h_16: bitstring = (if v_113 then 3-proj-3-tuple(v_112) else caught-fail) in
        {360}let ck_19: key = (if v_113 then 2-proj-3-tuple(v_112) else caught-fail) in
        {361}let cs_16: cipherstate = (if v_113 then 1-proj-3-tuple(v_112) else caught-fail) in
        {362}let v_114: bitstring = (if v_113 then catch-fail(cipherstateunpack(cs_16)) else caught-fail) in
        {363}let v_115: bool = (not-caught-fail(v_114) && success?(1-proj-2-tuple(v_114))) in
        {364}let n_6: nonce = (if v_115 then 2-proj-2-tuple(v_114) else caught-fail) in
        {365}let k_7: key = (if v_115 then 1-proj-2-tuple(v_114) else caught-fail) in
        {366}let d_1: aead = (if v_115 then catch-fail(decrypt(k_7,n_6,h_16,ciphertext_7)) else caught-fail) in
        {367}let v_116: bool = not-caught-fail(d_1) in
        {368}let v_117: bitstring = (if v_116 then catch-fail(aeadunpack(d_1)) else caught-fail) in
        {369}let v_118: bool = (not-caught-fail(v_117) && success?(1-proj-3-tuple(v_117))) in
        {370}let plaintext_3: bitstring = (if v_118 then 3-proj-3-tuple(v_117) else caught-fail) in
        {371}let adi_1: bitstring = (if v_118 then 2-proj-3-tuple(v_117) else caught-fail) in
        {372}let valid_3: bool = (if v_118 then 1-proj-3-tuple(v_117) else caught-fail) in
        {373}let n_7: nonce = (if v_118 then increment_nonce(n_6) else caught-fail) in
        {374}let v_119: bitstring = (if v_118 then catch-fail(cipherstateunpack(cs_16)) else caught-fail) in
        {375}let v_120: bool = (not-caught-fail(v_119) && success?(1-proj-2-tuple(v_119))) in
        {376}let o_3: nonce = (if v_120 then 2-proj-2-tuple(v_119) else caught-fail) in
        {377}let k_8: key = (if v_120 then 1-proj-2-tuple(v_119) else caught-fail) in
        {378}let csi_6: cipherstate = (if v_118 then catch-fail((if v_120 then cipherstatepack(k_8,n_7) else fail-any)) else caught-fail) in
        {379}let v_121: bool = not-caught-fail(csi_6) in
        {380}let v_122: bitstring = (if v_113 then catch-fail((if v_115 then (if v_116 then (if v_118 then (if v_121 then (csi_6,plaintext_3,valid_3) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {381}let v_123: bool = (not-caught-fail(v_122) && success?(1-proj-3-tuple(v_122))) in
        {382}let valid_4: bool = (if v_123 then 3-proj-3-tuple(v_122) else caught-fail) in
        {383}let plaintext_4: bitstring = (if v_123 then 2-proj-3-tuple(v_122) else caught-fail) in
        {384}let csi_7: cipherstate = (if v_123 then 1-proj-3-tuple(v_122) else caught-fail) in
        {385}let ss_19: symmetricstate = (if v_123 then symmetricstatepack(csi_7,ck_19,h_16) else caught-fail) in
        {386}let v_124: bitstring = (if v_123 then catch-fail(symmetricstateunpack(ss_19)) else caught-fail) in
        {387}let v_125: bool = (not-caught-fail(v_124) && success?(1-proj-3-tuple(v_124))) in
        {388}let h_17: bitstring = (if v_125 then 3-proj-3-tuple(v_124) else caught-fail) in
        {389}let ck_20: key = (if v_125 then 2-proj-3-tuple(v_124) else caught-fail) in
        {390}let cs_17: cipherstate = (if v_125 then 1-proj-3-tuple(v_124) else caught-fail) in
        {391}let ssi_4: symmetricstate = (if v_123 then catch-fail((if v_125 then symmetricstatepack(cs_17,ck_20,hash(h_17,ciphertext_7)) else fail-any)) else caught-fail) in
        {392}let v_126: bool = not-caught-fail(ssi_4) in
        {393}let v_127: bitstring = (if v_111 then catch-fail((if v_113 then (if v_123 then (if v_126 then (ssi_4,plaintext_4,valid_4) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {394}let v_128: bool = (not-caught-fail(v_127) && success?(1-proj-3-tuple(v_127))) in
        {395}let valid2_1: bool = (if v_128 then 3-proj-3-tuple(v_127) else caught-fail) in
        {396}let plaintext_5: bitstring = (if v_128 then 2-proj-3-tuple(v_127) else caught-fail) in
        {397}let ss_20: symmetricstate = (if v_128 then 1-proj-3-tuple(v_127) else caught-fail) in
        {398}let v_129: bool = (if v_128 then catch-fail((valid1_1 && valid2_1)) else caught-fail) in
        {399}let hs_13: handshakestate = (if v_129 then handshakestatepack(ss_20,s_4,m_4,e_7,rs_4,rm_4,re_5,psk_4,initiator_4) else caught-fail) in
        {400}let (hs_14: handshakestate,plaintext_d: bitstring,valid_5: bool) = (if v_109 then (if v_111 then (if v_128 then (if undo-catch-fail(v_129) then (hs_13,plaintext_5,true) else fail-any) else fail-any) else fail-any) else fail-any) in
        {401}event RecvMsg(me,them,stagepack_d(sid_1),plaintext_d);
        {402}event RecvEnd(valid_5)
    ) | (
        0
    )
) | (
    {404}let me_1: principal = alice in
    {405}let them_1: principal = charlie in
    {406}let sid_2: sessionid = sid in
    {407}let s_5: keypair = keypairpack(empty,empty) in
    {408}let m_5: keypair = keypairpack(empty,empty) in
    (
        {409}let e_8: keypair = keypairpack(empty,empty) in
        {410}let basis_3: key = key_s(them_1) in
        {411}let public_key_3: key = catch-fail(dhexp(basis_3,validkey(g))) in
        {412}let v_130: bool = not-caught-fail(public_key_3) in
        {413}let rs_5: key = getpublickey((if v_130 then keypairpack(validkey(public_key_3),basis_3) else fail-any)) in
        {414}let basis_4: key = key_m(them_1) in
        {415}let public_key_4: key = catch-fail(dhexp(basis_4,validkey(g))) in
        {416}let v_131: bool = not-caught-fail(public_key_4) in
        {417}let rm_5: key = getpublickey((if v_131 then keypairpack(validkey(public_key_4),basis_4) else fail-any)) in
        {418}let re_6: key = empty in
        {419}let prologue_1: bitstring = empty in
        {420}let psk_5: key = empty in
        {421}let protocol_name_1: bitstring = somename in
        {422}let h_18: bitstring = hash(protocol_name_1,empty) in
        {423}let ck_21: key = h_18 in
        {424}let k_9: key = empty in
        {425}let cs_18: cipherstate = cipherstatepack(k_9,minnonce) in
        {426}let ss_21: symmetricstate = symmetricstatepack(cs_18,ck_21,h_18) in
        {427}let v_132: bitstring = catch-fail(symmetricstateunpack(ss_21)) in
        {428}let v_133: bool = (not-caught-fail(v_132) && success?(1-proj-3-tuple(v_132))) in
        {429}let h_19: bitstring = (if v_133 then 3-proj-3-tuple(v_132) else caught-fail) in
        {430}let ck_22: key = (if v_133 then 2-proj-3-tuple(v_132) else caught-fail) in
        {431}let cs_19: cipherstate = (if v_133 then 1-proj-3-tuple(v_132) else caught-fail) in
        {432}let ss_22: symmetricstate = catch-fail((if v_133 then symmetricstatepack(cs_19,ck_22,hash(h_19,prologue_1)) else fail-any)) in
        {433}let v_134: bool = not-caught-fail(ss_22) in
        {434}let v_135: bitstring = (if v_134 then catch-fail(symmetricstateunpack(ss_22)) else caught-fail) in
        {435}let v_136: bool = (not-caught-fail(v_135) && success?(1-proj-3-tuple(v_135))) in
        {436}let h_20: bitstring = (if v_136 then 3-proj-3-tuple(v_135) else caught-fail) in
        {437}let ck_23: key = (if v_136 then 2-proj-3-tuple(v_135) else caught-fail) in
        {438}let cs_20: cipherstate = (if v_136 then 1-proj-3-tuple(v_135) else caught-fail) in
        {439}let ss_23: symmetricstate = (if v_134 then catch-fail((if v_136 then symmetricstatepack(cs_20,ck_23,hash(h_20,rs_5)) else fail-any)) else caught-fail) in
        {440}let v_137: bool = not-caught-fail(ss_23) in
        {441}let v_138: bitstring = (if v_137 then catch-fail(symmetricstateunpack(ss_23)) else caught-fail) in
        {442}let v_139: bool = (not-caught-fail(v_138) && success?(1-proj-3-tuple(v_138))) in
        {443}let h_21: bitstring = (if v_139 then 3-proj-3-tuple(v_138) else caught-fail) in
        {444}let ck_24: key = (if v_139 then 2-proj-3-tuple(v_138) else caught-fail) in
        {445}let cs_21: cipherstate = (if v_139 then 1-proj-3-tuple(v_138) else caught-fail) in
        {446}let ss_24: symmetricstate = (if v_137 then catch-fail((if v_139 then symmetricstatepack(cs_21,ck_24,hash(h_21,rm_5)) else fail-any)) else caught-fail) in
        {447}let v_140: bool = not-caught-fail(ss_24) in
        {448}let hs_15: handshakestate = (if v_134 then (if v_137 then (if v_140 then handshakestatepack(ss_24,s_5,m_5,e_8,rs_5,rm_5,re_6,psk_5,true) else fail-any) else fail-any) else fail-any) in
        {449}insert statestore(me_1,them_1,sid_2,statepack_a(hs_15))
    ) | (
        {520}get statestore(=me_1,=them_1,=sid_2,statepack_a(hs_16: handshakestate)) in
        {450}let payload_2: bitstring = msg_a(me_1,them_1,sid_2) in
        {451}let v_141: bitstring = catch-fail(handshakestateunpack(hs_16)) in
        {452}let v_142: bool = (not-caught-fail(v_141) && success?(1-proj-9-tuple(v_141))) in
        {453}let initiator_5: bool = (if v_142 then 9-proj-9-tuple(v_141) else caught-fail) in
        {454}let psk_6: key = (if v_142 then 8-proj-9-tuple(v_141) else caught-fail) in
        {455}let re_7: key = (if v_142 then 7-proj-9-tuple(v_141) else caught-fail) in
        {456}let rm_6: key = (if v_142 then 6-proj-9-tuple(v_141) else caught-fail) in
        {457}let rs_6: key = (if v_142 then 5-proj-9-tuple(v_141) else caught-fail) in
        {458}let e_9: keypair = (if v_142 then 4-proj-9-tuple(v_141) else caught-fail) in
        {459}let m_6: keypair = (if v_142 then 3-proj-9-tuple(v_141) else caught-fail) in
        {460}let s_6: keypair = (if v_142 then 2-proj-9-tuple(v_141) else caught-fail) in
        {461}let ss_25: symmetricstate = (if v_142 then 1-proj-9-tuple(v_141) else caught-fail) in
        {462}let v_143: bitstring = (if v_142 then catch-fail((empty,empty,empty)) else caught-fail) in
        {463}let v_144: bool = (not-caught-fail(v_143) && success?(1-proj-3-tuple(v_143))) in
        {464}let ciphertext_8: bitstring = (if v_144 then 3-proj-3-tuple(v_143) else caught-fail) in
        {465}let ns_4: bitstring = (if v_144 then 2-proj-3-tuple(v_143) else caught-fail) in
        {466}let ne_5: bitstring = (if v_144 then 1-proj-3-tuple(v_143) else caught-fail) in
        {467}let basis_5: key = (if v_144 then key_e(me_1,them_1,sid_2) else caught-fail) in
        {468}let public_key_5: key = (if v_144 then catch-fail(dhexp(basis_5,validkey(g))) else caught-fail) in
        {469}let v_145: bool = not-caught-fail(public_key_5) in
        {470}let e_10: keypair = (if v_144 then catch-fail((if v_145 then keypairpack(validkey(public_key_5),basis_5) else fail-any)) else caught-fail) in
        {471}let v_146: bool = not-caught-fail(e_10) in
        {472}let ne_6: bitstring = (if v_146 then catch-fail(getpublickey(e_10)) else caught-fail) in
        {473}let v_147: bool = not-caught-fail(ne_6) in
        {474}let v_148: bitstring = (if v_147 then catch-fail(symmetricstateunpack(ss_25)) else caught-fail) in
        {475}let v_149: bool = (not-caught-fail(v_148) && success?(1-proj-3-tuple(v_148))) in
        {476}let h_22: bitstring = (if v_149 then 3-proj-3-tuple(v_148) else caught-fail) in
        {477}let ck_25: key = (if v_149 then 2-proj-3-tuple(v_148) else caught-fail) in
        {478}let cs_22: cipherstate = (if v_149 then 1-proj-3-tuple(v_148) else caught-fail) in
        {479}let ss_26: symmetricstate = (if v_147 then catch-fail((if v_149 then symmetricstatepack(cs_22,ck_25,hash(h_22,ne_6)) else fail-any)) else caught-fail) in
        {480}let v_150: bool = not-caught-fail(ss_26) in
        {481}let v_151: bitstring = (if v_150 then catch-fail(symmetricstateunpack(ss_26)) else caught-fail) in
        {482}let v_152: bool = (not-caught-fail(v_151) && success?(1-proj-3-tuple(v_151))) in
        {483}let h_23: bitstring = (if v_152 then 3-proj-3-tuple(v_151) else caught-fail) in
        {484}let ck_26: key = (if v_152 then 2-proj-3-tuple(v_151) else caught-fail) in
        {485}let cs_23: cipherstate = (if v_152 then 1-proj-3-tuple(v_151) else caught-fail) in
        {486}let v_153: bitstring = (if v_152 then catch-fail(cipherstateunpack(cs_23)) else caught-fail) in
        {487}let v_154: bool = (not-caught-fail(v_153) && success?(1-proj-2-tuple(v_153))) in
        {488}let n_8: nonce = (if v_154 then 2-proj-2-tuple(v_153) else caught-fail) in
        {489}let k_10: key = (if v_154 then 1-proj-2-tuple(v_153) else caught-fail) in
        {490}let e_11: bitstring = (if v_154 then encrypt(k_10,n_8,h_23,payload_2) else caught-fail) in
        {491}let n_9: nonce = (if v_154 then increment_nonce(n_8) else caught-fail) in
        {492}let v_155: bitstring = (if v_154 then catch-fail(cipherstateunpack(cs_23)) else caught-fail) in
        {493}let v_156: bool = (not-caught-fail(v_155) && success?(1-proj-2-tuple(v_155))) in
        {494}let o_4: nonce = (if v_156 then 2-proj-2-tuple(v_155) else caught-fail) in
        {495}let k_11: key = (if v_156 then 1-proj-2-tuple(v_155) else caught-fail) in
        {496}let csi_8: cipherstate = (if v_154 then catch-fail((if v_156 then cipherstatepack(k_11,n_9) else fail-any)) else caught-fail) in
        {497}let v_157: bool = not-caught-fail(csi_8) in
        {498}let v_158: bitstring = (if v_152 then catch-fail((if v_154 then (if v_157 then (csi_8,e_11) else fail-any) else fail-any)) else caught-fail) in
        {499}let v_159: bool = (not-caught-fail(v_158) && success?(1-proj-2-tuple(v_158))) in
        {500}let ciphertext_9: bitstring = (if v_159 then 2-proj-2-tuple(v_158) else caught-fail) in
        {501}let csi_9: cipherstate = (if v_159 then 1-proj-2-tuple(v_158) else caught-fail) in
        {502}let ss_27: symmetricstate = (if v_159 then symmetricstatepack(csi_9,ck_26,h_23) else caught-fail) in
        {503}let v_160: bitstring = (if v_159 then catch-fail(symmetricstateunpack(ss_27)) else caught-fail) in
        {504}let v_161: bool = (not-caught-fail(v_160) && success?(1-proj-3-tuple(v_160))) in
        {505}let h_24: bitstring = (if v_161 then 3-proj-3-tuple(v_160) else caught-fail) in
        {506}let ck_27: key = (if v_161 then 2-proj-3-tuple(v_160) else caught-fail) in
        {507}let cs_24: cipherstate = (if v_161 then 1-proj-3-tuple(v_160) else caught-fail) in
        {508}let ssi_5: symmetricstate = (if v_159 then catch-fail((if v_161 then symmetricstatepack(cs_24,ck_27,hash(h_24,ciphertext_9)) else fail-any)) else caught-fail) in
        {509}let v_162: bool = not-caught-fail(ssi_5) in
        {510}let v_163: bitstring = (if v_150 then catch-fail((if v_152 then (if v_159 then (if v_162 then (ssi_5,ciphertext_9) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {511}let v_164: bool = (not-caught-fail(v_163) && success?(1-proj-2-tuple(v_163))) in
        {512}let ciphertext_10: bitstring = (if v_164 then 2-proj-2-tuple(v_163) else caught-fail) in
        {513}let ss_28: symmetricstate = (if v_164 then 1-proj-2-tuple(v_163) else caught-fail) in
        {514}let hs_17: handshakestate = (if v_164 then handshakestatepack(ss_28,s_6,m_6,e_10,rs_6,rm_6,re_7,psk_6,initiator_5) else caught-fail) in
        {515}let message_buffer_2: bitstring = (if v_164 then concat3(ne_6,ns_4,ciphertext_10) else caught-fail) in
        {516}let (hs_18: handshakestate,message_a_1: bitstring) = (if v_142 then (if v_144 then (if v_146 then (if v_147 then (if v_150 then (if v_164 then (hs_17,message_buffer_2) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {517}event SendMsg(me_1,them_1,stagepack_a(sid_2),msg_a(me_1,them_1,sid_2));
        {518}insert statestore(me_1,them_1,sid_2,statepack_b(hs_18));
        {519}out(pub, message_a_1)
    ) | (
        {677}get statestore(=me_1,=them_1,=sid_2,statepack_b(hs_19: handshakestate)) in
        {521}in(pub, message_b_1: bitstring);
        {522}let v_165: bitstring = catch-fail(handshakestateunpack(hs_19)) in
        {523}let v_166: bool = (not-caught-fail(v_165) && success?(1-proj-9-tuple(v_165))) in
        {524}let initiator_6: bool = (if v_166 then 9-proj-9-tuple(v_165) else caught-fail) in
        {525}let psk_7: key = (if v_166 then 8-proj-9-tuple(v_165) else caught-fail) in
        {526}let re_8: key = (if v_166 then 7-proj-9-tuple(v_165) else caught-fail) in
        {527}let rm_7: key = (if v_166 then 6-proj-9-tuple(v_165) else caught-fail) in
        {528}let rs_7: key = (if v_166 then 5-proj-9-tuple(v_165) else caught-fail) in
        {529}let e_12: keypair = (if v_166 then 4-proj-9-tuple(v_165) else caught-fail) in
        {530}let m_7: keypair = (if v_166 then 3-proj-9-tuple(v_165) else caught-fail) in
        {531}let s_7: keypair = (if v_166 then 2-proj-9-tuple(v_165) else caught-fail) in
        {532}let ss_29: symmetricstate = (if v_166 then 1-proj-9-tuple(v_165) else caught-fail) in
        {533}let v_167: bitstring = (if v_166 then catch-fail(deconcat3(message_b_1)) else caught-fail) in
        {534}let v_168: bool = (not-caught-fail(v_167) && success?(1-proj-3-tuple(v_167))) in
        {535}let ciphertext_11: bitstring = (if v_168 then 3-proj-3-tuple(v_167) else caught-fail) in
        {536}let ns_5: bitstring = (if v_168 then 2-proj-3-tuple(v_167) else caught-fail) in
        {537}let ne_7: bitstring = (if v_168 then 1-proj-3-tuple(v_167) else caught-fail) in
        {538}let valid1_2: bool = (if v_168 then true else caught-fail) in
        {539}let re_9: key = (if v_168 then ne_7 else caught-fail) in
        {540}let v_169: bitstring = (if v_168 then catch-fail(symmetricstateunpack(ss_29)) else caught-fail) in
        {541}let v_170: bool = (not-caught-fail(v_169) && success?(1-proj-3-tuple(v_169))) in
        {542}let h_25: bitstring = (if v_170 then 3-proj-3-tuple(v_169) else caught-fail) in
        {543}let ck_28: key = (if v_170 then 2-proj-3-tuple(v_169) else caught-fail) in
        {544}let cs_25: cipherstate = (if v_170 then 1-proj-3-tuple(v_169) else caught-fail) in
        {545}let ss_30: symmetricstate = (if v_168 then catch-fail((if v_170 then symmetricstatepack(cs_25,ck_28,hash(h_25,re_9)) else fail-any)) else caught-fail) in
        {546}let v_171: bool = not-caught-fail(ss_30) in
        {547}let v_172: bitstring = (if v_171 then catch-fail(keypairunpack(e_12)) else caught-fail) in
        {548}let v_173: bool = (not-caught-fail(v_172) && success?(1-proj-2-tuple(v_172))) in
        {549}let my_private_key_3: key = (if v_173 then 2-proj-2-tuple(v_172) else caught-fail) in
        {550}let my_public_key_3: key = (if v_173 then 1-proj-2-tuple(v_172) else caught-fail) in
        {551}let input_key_material_4: key = (if v_171 then catch-fail((if v_173 then dhexp(my_private_key_3,re_9) else fail-any)) else caught-fail) in
        {552}let v_174: bool = not-caught-fail(input_key_material_4) in
        {553}let v_175: bitstring = (if v_174 then catch-fail(symmetricstateunpack(ss_30)) else caught-fail) in
        {554}let v_176: bool = (not-caught-fail(v_175) && success?(1-proj-3-tuple(v_175))) in
        {555}let h_26: bitstring = (if v_176 then 3-proj-3-tuple(v_175) else caught-fail) in
        {556}let ck_29: key = (if v_176 then 2-proj-3-tuple(v_175) else caught-fail) in
        {557}let cs_26: cipherstate = (if v_176 then 1-proj-3-tuple(v_175) else caught-fail) in
        {558}let output1_4: key = (if v_176 then hmac_hash1(ck_29,input_key_material_4) else caught-fail) in
        {559}let output2_4: key = (if v_176 then hmac_hash2(ck_29,input_key_material_4) else caught-fail) in
        {560}let output3_4: key = (if v_176 then hmac_hash3(ck_29,input_key_material_4) else caught-fail) in
        {561}let v_177: bitstring = (if v_176 then catch-fail((output1_4,output2_4,output3_4)) else caught-fail) in
        {562}let v_178: bool = (not-caught-fail(v_177) && success?(1-proj-3-tuple(v_177))) in
        {563}let output_2: key = (if v_178 then 3-proj-3-tuple(v_177) else caught-fail) in
        {564}let temp_k_3: key = (if v_178 then 2-proj-3-tuple(v_177) else caught-fail) in
        {565}let ck_30: key = (if v_178 then 1-proj-3-tuple(v_177) else caught-fail) in
        {566}let ss_31: symmetricstate = (if v_171 then catch-fail((if v_174 then (if v_176 then (if v_178 then symmetricstatepack(cipherstatepack(temp_k_3,minnonce),ck_30,h_26) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {567}let v_179: bool = not-caught-fail(ss_31) in
        {568}let v_180: bitstring = (if v_179 then catch-fail(keypairunpack(e_12)) else caught-fail) in
        {569}let v_181: bool = (not-caught-fail(v_180) && success?(1-proj-2-tuple(v_180))) in
        {570}let my_private_key_4: key = (if v_181 then 2-proj-2-tuple(v_180) else caught-fail) in
        {571}let my_public_key_4: key = (if v_181 then 1-proj-2-tuple(v_180) else caught-fail) in
        {572}let input_key_material_5: key = (if v_179 then catch-fail((if v_181 then dhexp(my_private_key_4,rs_7) else fail-any)) else caught-fail) in
        {573}let v_182: bool = not-caught-fail(input_key_material_5) in
        {574}let v_183: bitstring = (if v_182 then catch-fail(symmetricstateunpack(ss_31)) else caught-fail) in
        {575}let v_184: bool = (not-caught-fail(v_183) && success?(1-proj-3-tuple(v_183))) in
        {576}let h_27: bitstring = (if v_184 then 3-proj-3-tuple(v_183) else caught-fail) in
        {577}let ck_31: key = (if v_184 then 2-proj-3-tuple(v_183) else caught-fail) in
        {578}let cs_27: cipherstate = (if v_184 then 1-proj-3-tuple(v_183) else caught-fail) in
        {579}let output1_5: key = (if v_184 then hmac_hash1(ck_31,input_key_material_5) else caught-fail) in
        {580}let output2_5: key = (if v_184 then hmac_hash2(ck_31,input_key_material_5) else caught-fail) in
        {581}let output3_5: key = (if v_184 then hmac_hash3(ck_31,input_key_material_5) else caught-fail) in
        {582}let v_185: bitstring = (if v_184 then catch-fail((output1_5,output2_5,output3_5)) else caught-fail) in
        {583}let v_186: bool = (not-caught-fail(v_185) && success?(1-proj-3-tuple(v_185))) in
        {584}let output_4: key = (if v_186 then 3-proj-3-tuple(v_185) else caught-fail) in
        {585}let temp_k_4: key = (if v_186 then 2-proj-3-tuple(v_185) else caught-fail) in
        {586}let ck_32: key = (if v_186 then 1-proj-3-tuple(v_185) else caught-fail) in
        {587}let ss_32: symmetricstate = (if v_179 then catch-fail((if v_182 then (if v_184 then (if v_186 then symmetricstatepack(cipherstatepack(temp_k_4,minnonce),ck_32,h_27) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {588}let v_187: bool = not-caught-fail(ss_32) in
        {589}let v_188: bitstring = (if v_187 then catch-fail(keypairunpack(e_12)) else caught-fail) in
        {590}let v_189: bool = (not-caught-fail(v_188) && success?(1-proj-2-tuple(v_188))) in
        {591}let my_private_key_5: key = (if v_189 then 2-proj-2-tuple(v_188) else caught-fail) in
        {592}let my_public_key_5: key = (if v_189 then 1-proj-2-tuple(v_188) else caught-fail) in
        {593}let input_key_material_6: key = (if v_187 then catch-fail((if v_189 then dhexp(my_private_key_5,rm_7) else fail-any)) else caught-fail) in
        {594}let v_190: bool = not-caught-fail(input_key_material_6) in
        {595}let v_191: bitstring = (if v_190 then catch-fail(symmetricstateunpack(ss_32)) else caught-fail) in
        {596}let v_192: bool = (not-caught-fail(v_191) && success?(1-proj-3-tuple(v_191))) in
        {597}let h_28: bitstring = (if v_192 then 3-proj-3-tuple(v_191) else caught-fail) in
        {598}let ck_33: key = (if v_192 then 2-proj-3-tuple(v_191) else caught-fail) in
        {599}let cs_28: cipherstate = (if v_192 then 1-proj-3-tuple(v_191) else caught-fail) in
        {600}let output1_6: key = (if v_192 then hmac_hash1(ck_33,input_key_material_6) else caught-fail) in
        {601}let output2_6: key = (if v_192 then hmac_hash2(ck_33,input_key_material_6) else caught-fail) in
        {602}let output3_6: key = (if v_192 then hmac_hash3(ck_33,input_key_material_6) else caught-fail) in
        {603}let v_193: bitstring = (if v_192 then catch-fail((output1_6,output2_6,output3_6)) else caught-fail) in
        {604}let v_194: bool = (not-caught-fail(v_193) && success?(1-proj-3-tuple(v_193))) in
        {605}let output_5: key = (if v_194 then 3-proj-3-tuple(v_193) else caught-fail) in
        {606}let temp_k_5: key = (if v_194 then 2-proj-3-tuple(v_193) else caught-fail) in
        {607}let ck_34: key = (if v_194 then 1-proj-3-tuple(v_193) else caught-fail) in
        {608}let ss_33: symmetricstate = (if v_187 then catch-fail((if v_190 then (if v_192 then (if v_194 then symmetricstatepack(cipherstatepack(temp_k_5,minnonce),ck_34,h_28) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {609}let v_195: bool = not-caught-fail(ss_33) in
        {610}let v_196: bitstring = (if v_195 then catch-fail(symmetricstateunpack(ss_33)) else caught-fail) in
        {611}let v_197: bool = (not-caught-fail(v_196) && success?(1-proj-3-tuple(v_196))) in
        {612}let h_29: bitstring = (if v_197 then 3-proj-3-tuple(v_196) else caught-fail) in
        {613}let ck_35: key = (if v_197 then 2-proj-3-tuple(v_196) else caught-fail) in
        {614}let cs_29: cipherstate = (if v_197 then 1-proj-3-tuple(v_196) else caught-fail) in
        {615}let v_198: bitstring = (if v_197 then catch-fail(cipherstateunpack(cs_29)) else caught-fail) in
        {616}let v_199: bool = (not-caught-fail(v_198) && success?(1-proj-2-tuple(v_198))) in
        {617}let n_10: nonce = (if v_199 then 2-proj-2-tuple(v_198) else caught-fail) in
        {618}let k_12: key = (if v_199 then 1-proj-2-tuple(v_198) else caught-fail) in
        {619}let d_2: aead = (if v_199 then catch-fail(decrypt(k_12,n_10,h_29,ciphertext_11)) else caught-fail) in
        {620}let v_200: bool = not-caught-fail(d_2) in
        {621}let v_201: bitstring = (if v_200 then catch-fail(aeadunpack(d_2)) else caught-fail) in
        {622}let v_202: bool = (not-caught-fail(v_201) && success?(1-proj-3-tuple(v_201))) in
        {623}let plaintext_6: bitstring = (if v_202 then 3-proj-3-tuple(v_201) else caught-fail) in
        {624}let adi_2: bitstring = (if v_202 then 2-proj-3-tuple(v_201) else caught-fail) in
        {625}let valid_6: bool = (if v_202 then 1-proj-3-tuple(v_201) else caught-fail) in
        {626}let n_11: nonce = (if v_202 then increment_nonce(n_10) else caught-fail) in
        {627}let v_203: bitstring = (if v_202 then catch-fail(cipherstateunpack(cs_29)) else caught-fail) in
        {628}let v_204: bool = (not-caught-fail(v_203) && success?(1-proj-2-tuple(v_203))) in
        {629}let o_5: nonce = (if v_204 then 2-proj-2-tuple(v_203) else caught-fail) in
        {630}let k_13: key = (if v_204 then 1-proj-2-tuple(v_203) else caught-fail) in
        {631}let csi_10: cipherstate = (if v_202 then catch-fail((if v_204 then cipherstatepack(k_13,n_11) else fail-any)) else caught-fail) in
        {632}let v_205: bool = not-caught-fail(csi_10) in
        {633}let v_206: bitstring = (if v_197 then catch-fail((if v_199 then (if v_200 then (if v_202 then (if v_205 then (csi_10,plaintext_6,valid_6) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {634}let v_207: bool = (not-caught-fail(v_206) && success?(1-proj-3-tuple(v_206))) in
        {635}let valid_7: bool = (if v_207 then 3-proj-3-tuple(v_206) else caught-fail) in
        {636}let plaintext_7: bitstring = (if v_207 then 2-proj-3-tuple(v_206) else caught-fail) in
        {637}let csi_11: cipherstate = (if v_207 then 1-proj-3-tuple(v_206) else caught-fail) in
        {638}let ss_34: symmetricstate = (if v_207 then symmetricstatepack(csi_11,ck_35,h_29) else caught-fail) in
        {639}let v_208: bitstring = (if v_207 then catch-fail(symmetricstateunpack(ss_34)) else caught-fail) in
        {640}let v_209: bool = (not-caught-fail(v_208) && success?(1-proj-3-tuple(v_208))) in
        {641}let h_30: bitstring = (if v_209 then 3-proj-3-tuple(v_208) else caught-fail) in
        {642}let ck_36: key = (if v_209 then 2-proj-3-tuple(v_208) else caught-fail) in
        {643}let cs_30: cipherstate = (if v_209 then 1-proj-3-tuple(v_208) else caught-fail) in
        {644}let ssi_6: symmetricstate = (if v_207 then catch-fail((if v_209 then symmetricstatepack(cs_30,ck_36,hash(h_30,ciphertext_11)) else fail-any)) else caught-fail) in
        {645}let v_210: bool = not-caught-fail(ssi_6) in
        {646}let v_211: bitstring = (if v_195 then catch-fail((if v_197 then (if v_207 then (if v_210 then (ssi_6,plaintext_7,valid_7) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {647}let v_212: bool = (not-caught-fail(v_211) && success?(1-proj-3-tuple(v_211))) in
        {648}let valid2_2: bool = (if v_212 then 3-proj-3-tuple(v_211) else caught-fail) in
        {649}let plaintext_8: bitstring = (if v_212 then 2-proj-3-tuple(v_211) else caught-fail) in
        {650}let ss_35: symmetricstate = (if v_212 then 1-proj-3-tuple(v_211) else caught-fail) in
        {651}let v_213: bool = (if v_212 then catch-fail((valid1_2 && valid2_2)) else caught-fail) in
        {652}let hs_20: handshakestate = (if v_213 then handshakestatepack(ss_35,s_7,m_7,e_12,rs_7,rm_7,re_9,psk_7,initiator_6) else caught-fail) in
        {653}let v_214: bitstring = (if v_213 then catch-fail(symmetricstateunpack(ss_35)) else caught-fail) in
        {654}let v_215: bool = (not-caught-fail(v_214) && success?(1-proj-3-tuple(v_214))) in
        {655}let h_31: bitstring = (if v_215 then 3-proj-3-tuple(v_214) else caught-fail) in
        {656}let ck_37: key = (if v_215 then 2-proj-3-tuple(v_214) else caught-fail) in
        {657}let cs_31: cipherstate = (if v_215 then 1-proj-3-tuple(v_214) else caught-fail) in
        {658}let input_key_material_7: key = (if v_215 then zero else caught-fail) in
        {659}let output1_7: key = (if v_215 then hmac_hash1(ck_37,input_key_material_7) else caught-fail) in
        {660}let output2_7: key = (if v_215 then hmac_hash2(ck_37,input_key_material_7) else caught-fail) in
        {661}let output3_7: key = (if v_215 then hmac_hash3(ck_37,input_key_material_7) else caught-fail) in
        {662}let v_216: bitstring = (if v_215 then catch-fail((output1_7,output2_7,output3_7)) else caught-fail) in
        {663}let v_217: bool = (not-caught-fail(v_216) && success?(1-proj-3-tuple(v_216))) in
        {664}let temp_k3_1: key = (if v_217 then 3-proj-3-tuple(v_216) else caught-fail) in
        {665}let temp_k2_1: key = (if v_217 then 2-proj-3-tuple(v_216) else caught-fail) in
        {666}let temp_k1_1: key = (if v_217 then 1-proj-3-tuple(v_216) else caught-fail) in
        {667}let cs1_5: cipherstate = (if v_217 then cipherstatepack(temp_k1_1,minnonce) else caught-fail) in
        {668}let cs2_5: cipherstate = (if v_217 then cipherstatepack(temp_k2_1,minnonce) else caught-fail) in
        {669}let v_218: bitstring = (if v_213 then catch-fail((if v_215 then (if v_217 then (ss_35,cs1_5,cs2_5) else fail-any) else fail-any)) else caught-fail) in
        {670}let v_219: bool = (not-caught-fail(v_218) && success?(1-proj-3-tuple(v_218))) in
        {671}let cs2_6: cipherstate = (if v_219 then 3-proj-3-tuple(v_218) else caught-fail) in
        {672}let cs1_6: cipherstate = (if v_219 then 2-proj-3-tuple(v_218) else caught-fail) in
        {673}let ssi_7: symmetricstate = (if v_219 then 1-proj-3-tuple(v_218) else caught-fail) in
        {674}let (hs_21: handshakestate,plaintext_b_1: bitstring,valid_8: bool,cs1_7: cipherstate,cs2_7: cipherstate) = (if v_166 then (if v_168 then (if v_171 then (if v_179 then (if v_187 then (if v_195 then (if v_212 then (if undo-catch-fail(v_213) then (if v_219 then (hs_20,plaintext_8,true,cs1_6,cs2_6) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {675}event RecvMsg(me_1,them_1,stagepack_b(sid_2),plaintext_b_1);
        {676}insert statestore(me_1,them_1,sid_2,statepack_c(hs_21,cs1_7,cs2_7))
    ) | (
        {678}!
        {736}get statestore(=me_1,=them_1,=sid_2,statepack_c(hs_22: handshakestate,cs1_8: cipherstate,cs2_8: cipherstate)) in
        {679}let hs_23: handshakestate = handshakestatesetcs(hs_22,cs1_8) in
        {680}let payload_3: bitstring = msg_c(me_1,them_1,sid_2) in
        {681}let v_220: bitstring = catch-fail(handshakestateunpack(hs_23)) in
        {682}let v_221: bool = (not-caught-fail(v_220) && success?(1-proj-9-tuple(v_220))) in
        {683}let initiator_7: bool = (if v_221 then 9-proj-9-tuple(v_220) else caught-fail) in
        {684}let psk_8: key = (if v_221 then 8-proj-9-tuple(v_220) else caught-fail) in
        {685}let re_10: key = (if v_221 then 7-proj-9-tuple(v_220) else caught-fail) in
        {686}let rm_8: key = (if v_221 then 6-proj-9-tuple(v_220) else caught-fail) in
        {687}let rs_8: key = (if v_221 then 5-proj-9-tuple(v_220) else caught-fail) in
        {688}let e_13: keypair = (if v_221 then 4-proj-9-tuple(v_220) else caught-fail) in
        {689}let m_8: keypair = (if v_221 then 3-proj-9-tuple(v_220) else caught-fail) in
        {690}let s_8: keypair = (if v_221 then 2-proj-9-tuple(v_220) else caught-fail) in
        {691}let ss_36: symmetricstate = (if v_221 then 1-proj-9-tuple(v_220) else caught-fail) in
        {692}let v_222: bitstring = (if v_221 then catch-fail((empty,empty,empty)) else caught-fail) in
        {693}let v_223: bool = (not-caught-fail(v_222) && success?(1-proj-3-tuple(v_222))) in
        {694}let ciphertext_12: bitstring = (if v_223 then 3-proj-3-tuple(v_222) else caught-fail) in
        {695}let ns_6: bitstring = (if v_223 then 2-proj-3-tuple(v_222) else caught-fail) in
        {696}let ne_8: bitstring = (if v_223 then 1-proj-3-tuple(v_222) else caught-fail) in
        {697}let v_224: bitstring = (if v_223 then catch-fail(symmetricstateunpack(ss_36)) else caught-fail) in
        {698}let v_225: bool = (not-caught-fail(v_224) && success?(1-proj-3-tuple(v_224))) in
        {699}let h_32: bitstring = (if v_225 then 3-proj-3-tuple(v_224) else caught-fail) in
        {700}let ck_38: key = (if v_225 then 2-proj-3-tuple(v_224) else caught-fail) in
        {701}let cs_32: cipherstate = (if v_225 then 1-proj-3-tuple(v_224) else caught-fail) in
        {702}let v_226: bitstring = (if v_225 then catch-fail(cipherstateunpack(cs_32)) else caught-fail) in
        {703}let v_227: bool = (not-caught-fail(v_226) && success?(1-proj-2-tuple(v_226))) in
        {704}let n_12: nonce = (if v_227 then 2-proj-2-tuple(v_226) else caught-fail) in
        {705}let k_14: key = (if v_227 then 1-proj-2-tuple(v_226) else caught-fail) in
        {706}let e_14: bitstring = (if v_227 then encrypt(k_14,n_12,h_32,payload_3) else caught-fail) in
        {707}let n_13: nonce = (if v_227 then increment_nonce(n_12) else caught-fail) in
        {708}let v_228: bitstring = (if v_227 then catch-fail(cipherstateunpack(cs_32)) else caught-fail) in
        {709}let v_229: bool = (not-caught-fail(v_228) && success?(1-proj-2-tuple(v_228))) in
        {710}let o_6: nonce = (if v_229 then 2-proj-2-tuple(v_228) else caught-fail) in
        {711}let k_15: key = (if v_229 then 1-proj-2-tuple(v_228) else caught-fail) in
        {712}let csi_12: cipherstate = (if v_227 then catch-fail((if v_229 then cipherstatepack(k_15,n_13) else fail-any)) else caught-fail) in
        {713}let v_230: bool = not-caught-fail(csi_12) in
        {714}let v_231: bitstring = (if v_225 then catch-fail((if v_227 then (if v_230 then (csi_12,e_14) else fail-any) else fail-any)) else caught-fail) in
        {715}let v_232: bool = (not-caught-fail(v_231) && success?(1-proj-2-tuple(v_231))) in
        {716}let ciphertext_13: bitstring = (if v_232 then 2-proj-2-tuple(v_231) else caught-fail) in
        {717}let csi_13: cipherstate = (if v_232 then 1-proj-2-tuple(v_231) else caught-fail) in
        {718}let ss_37: symmetricstate = (if v_232 then symmetricstatepack(csi_13,ck_38,h_32) else caught-fail) in
        {719}let v_233: bitstring = (if v_232 then catch-fail(symmetricstateunpack(ss_37)) else caught-fail) in
        {720}let v_234: bool = (not-caught-fail(v_233) && success?(1-proj-3-tuple(v_233))) in
        {721}let h_33: bitstring = (if v_234 then 3-proj-3-tuple(v_233) else caught-fail) in
        {722}let ck_39: key = (if v_234 then 2-proj-3-tuple(v_233) else caught-fail) in
        {723}let cs_33: cipherstate = (if v_234 then 1-proj-3-tuple(v_233) else caught-fail) in
        {724}let ssi_8: symmetricstate = (if v_232 then catch-fail((if v_234 then symmetricstatepack(cs_33,ck_39,hash(h_33,ciphertext_13)) else fail-any)) else caught-fail) in
        {725}let v_235: bool = not-caught-fail(ssi_8) in
        {726}let v_236: bitstring = (if v_223 then catch-fail((if v_225 then (if v_232 then (if v_235 then (ssi_8,ciphertext_13) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {727}let v_237: bool = (not-caught-fail(v_236) && success?(1-proj-2-tuple(v_236))) in
        {728}let ciphertext_14: bitstring = (if v_237 then 2-proj-2-tuple(v_236) else caught-fail) in
        {729}let ss_38: symmetricstate = (if v_237 then 1-proj-2-tuple(v_236) else caught-fail) in
        {730}let hs_24: handshakestate = (if v_237 then handshakestatepack(ss_38,s_8,m_8,e_13,rs_8,rm_8,re_10,psk_8,initiator_7) else caught-fail) in
        {731}let message_buffer_3: bitstring = (if v_237 then concat3(ne_8,ns_6,ciphertext_14) else caught-fail) in
        {732}let (hs_25: handshakestate,message_c_1: bitstring) = (if v_221 then (if v_223 then (if v_237 then (hs_24,message_buffer_3) else fail-any) else fail-any) else fail-any) in
        {733}event SendMsg(me_1,them_1,stagepack_c(sid_2),msg_c(me_1,them_1,sid_2));
        {734}insert statestore(me_1,them_1,sid_2,statepack_d(hs_25,handshakestategetcs(hs_25),cs2_8));
        {735}out(pub, message_c_1)
    ) | (
        {737}!
        {803}get statestore(=me_1,=them_1,=sid_2,statepack_d(hs_26: handshakestate,cs1_9: cipherstate,cs2_9: cipherstate)) in
        {738}let hs_27: handshakestate = handshakestatesetcs(hs_26,cs2_9) in
        {739}in(pub, message_d_1: bitstring);
        {740}let v_238: bitstring = catch-fail(handshakestateunpack(hs_27)) in
        {741}let v_239: bool = (not-caught-fail(v_238) && success?(1-proj-9-tuple(v_238))) in
        {742}let initiator_8: bool = (if v_239 then 9-proj-9-tuple(v_238) else caught-fail) in
        {743}let psk_9: key = (if v_239 then 8-proj-9-tuple(v_238) else caught-fail) in
        {744}let re_11: key = (if v_239 then 7-proj-9-tuple(v_238) else caught-fail) in
        {745}let rm_9: key = (if v_239 then 6-proj-9-tuple(v_238) else caught-fail) in
        {746}let rs_9: key = (if v_239 then 5-proj-9-tuple(v_238) else caught-fail) in
        {747}let e_15: keypair = (if v_239 then 4-proj-9-tuple(v_238) else caught-fail) in
        {748}let m_9: keypair = (if v_239 then 3-proj-9-tuple(v_238) else caught-fail) in
        {749}let s_9: keypair = (if v_239 then 2-proj-9-tuple(v_238) else caught-fail) in
        {750}let ss_39: symmetricstate = (if v_239 then 1-proj-9-tuple(v_238) else caught-fail) in
        {751}let v_240: bitstring = (if v_239 then catch-fail(deconcat3(message_d_1)) else caught-fail) in
        {752}let v_241: bool = (not-caught-fail(v_240) && success?(1-proj-3-tuple(v_240))) in
        {753}let ciphertext_15: bitstring = (if v_241 then 3-proj-3-tuple(v_240) else caught-fail) in
        {754}let ns_7: bitstring = (if v_241 then 2-proj-3-tuple(v_240) else caught-fail) in
        {755}let ne_9: bitstring = (if v_241 then 1-proj-3-tuple(v_240) else caught-fail) in
        {756}let valid1_3: bool = (if v_241 then true else caught-fail) in
        {757}let v_242: bitstring = (if v_241 then catch-fail(symmetricstateunpack(ss_39)) else caught-fail) in
        {758}let v_243: bool = (not-caught-fail(v_242) && success?(1-proj-3-tuple(v_242))) in
        {759}let h_34: bitstring = (if v_243 then 3-proj-3-tuple(v_242) else caught-fail) in
        {760}let ck_40: key = (if v_243 then 2-proj-3-tuple(v_242) else caught-fail) in
        {761}let cs_34: cipherstate = (if v_243 then 1-proj-3-tuple(v_242) else caught-fail) in
        {762}let v_244: bitstring = (if v_243 then catch-fail(cipherstateunpack(cs_34)) else caught-fail) in
        {763}let v_245: bool = (not-caught-fail(v_244) && success?(1-proj-2-tuple(v_244))) in
        {764}let n_14: nonce = (if v_245 then 2-proj-2-tuple(v_244) else caught-fail) in
        {765}let k_16: key = (if v_245 then 1-proj-2-tuple(v_244) else caught-fail) in
        {766}let d_3: aead = (if v_245 then catch-fail(decrypt(k_16,n_14,h_34,ciphertext_15)) else caught-fail) in
        {767}let v_246: bool = not-caught-fail(d_3) in
        {768}let v_247: bitstring = (if v_246 then catch-fail(aeadunpack(d_3)) else caught-fail) in
        {769}let v_248: bool = (not-caught-fail(v_247) && success?(1-proj-3-tuple(v_247))) in
        {770}let plaintext_9: bitstring = (if v_248 then 3-proj-3-tuple(v_247) else caught-fail) in
        {771}let adi_3: bitstring = (if v_248 then 2-proj-3-tuple(v_247) else caught-fail) in
        {772}let valid_9: bool = (if v_248 then 1-proj-3-tuple(v_247) else caught-fail) in
        {773}let n_15: nonce = (if v_248 then increment_nonce(n_14) else caught-fail) in
        {774}let v_249: bitstring = (if v_248 then catch-fail(cipherstateunpack(cs_34)) else caught-fail) in
        {775}let v_250: bool = (not-caught-fail(v_249) && success?(1-proj-2-tuple(v_249))) in
        {776}let o_7: nonce = (if v_250 then 2-proj-2-tuple(v_249) else caught-fail) in
        {777}let k_17: key = (if v_250 then 1-proj-2-tuple(v_249) else caught-fail) in
        {778}let csi_14: cipherstate = (if v_248 then catch-fail((if v_250 then cipherstatepack(k_17,n_15) else fail-any)) else caught-fail) in
        {779}let v_251: bool = not-caught-fail(csi_14) in
        {780}let v_252: bitstring = (if v_243 then catch-fail((if v_245 then (if v_246 then (if v_248 then (if v_251 then (csi_14,plaintext_9,valid_9) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {781}let v_253: bool = (not-caught-fail(v_252) && success?(1-proj-3-tuple(v_252))) in
        {782}let valid_10: bool = (if v_253 then 3-proj-3-tuple(v_252) else caught-fail) in
        {783}let plaintext_10: bitstring = (if v_253 then 2-proj-3-tuple(v_252) else caught-fail) in
        {784}let csi_15: cipherstate = (if v_253 then 1-proj-3-tuple(v_252) else caught-fail) in
        {785}let ss_40: symmetricstate = (if v_253 then symmetricstatepack(csi_15,ck_40,h_34) else caught-fail) in
        {786}let v_254: bitstring = (if v_253 then catch-fail(symmetricstateunpack(ss_40)) else caught-fail) in
        {787}let v_255: bool = (not-caught-fail(v_254) && success?(1-proj-3-tuple(v_254))) in
        {788}let h_35: bitstring = (if v_255 then 3-proj-3-tuple(v_254) else caught-fail) in
        {789}let ck_41: key = (if v_255 then 2-proj-3-tuple(v_254) else caught-fail) in
        {790}let cs_35: cipherstate = (if v_255 then 1-proj-3-tuple(v_254) else caught-fail) in
        {791}let ssi_9: symmetricstate = (if v_253 then catch-fail((if v_255 then symmetricstatepack(cs_35,ck_41,hash(h_35,ciphertext_15)) else fail-any)) else caught-fail) in
        {792}let v_256: bool = not-caught-fail(ssi_9) in
        {793}let v_257: bitstring = (if v_241 then catch-fail((if v_243 then (if v_253 then (if v_256 then (ssi_9,plaintext_10,valid_10) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {794}let v_258: bool = (not-caught-fail(v_257) && success?(1-proj-3-tuple(v_257))) in
        {795}let valid2_3: bool = (if v_258 then 3-proj-3-tuple(v_257) else caught-fail) in
        {796}let plaintext_11: bitstring = (if v_258 then 2-proj-3-tuple(v_257) else caught-fail) in
        {797}let ss_41: symmetricstate = (if v_258 then 1-proj-3-tuple(v_257) else caught-fail) in
        {798}let v_259: bool = (if v_258 then catch-fail((valid1_3 && valid2_3)) else caught-fail) in
        {799}let hs_28: handshakestate = (if v_259 then handshakestatepack(ss_41,s_9,m_9,e_15,rs_9,rm_9,re_11,psk_9,initiator_8) else caught-fail) in
        {800}let (hs_29: handshakestate,plaintext_d_1: bitstring,valid_11: bool) = (if v_239 then (if v_241 then (if v_258 then (if undo-catch-fail(v_259) then (hs_28,plaintext_11,true) else fail-any) else fail-any) else fail-any) else fail-any) in
        {801}event RecvMsg(me_1,them_1,stagepack_d(sid_2),plaintext_d_1);
        {802}event RecvEnd(valid_11)
    ) | (
        0
    )
) | (
    {804}let me_2: principal = bob in
    {805}let them_2: principal = alice in
    {806}let sid_3: sessionid = sid in
    {807}let basis_6: key = key_s(me_2) in
    {808}let public_key_6: key = catch-fail(dhexp(basis_6,validkey(g))) in
    {809}let v_260: bool = not-caught-fail(public_key_6) in
    {810}let s_10: keypair = (if v_260 then keypairpack(validkey(public_key_6),basis_6) else fail-any) in
    {811}let basis_7: key = key_m(me_2) in
    {812}let public_key_7: key = catch-fail(dhexp(basis_7,validkey(g))) in
    {813}let v_261: bool = not-caught-fail(public_key_7) in
    {814}let m_10: keypair = (if v_261 then keypairpack(validkey(public_key_7),basis_7) else fail-any) in
    {815}out(pub, (getpublickey(s_10),getpublickey(m_10)));
    (
        {816}let e_16: keypair = keypairpack(empty,empty) in
        {817}let rs_10: key = empty in
        {818}let rm_10: key = empty in
        {819}let re_12: key = empty in
        {820}let prologue_2: bitstring = empty in
        {821}let psk_10: key = empty in
        {822}let protocol_name_2: bitstring = somename in
        {823}let h_36: bitstring = hash(protocol_name_2,empty) in
        {824}let ck_42: key = h_36 in
        {825}let k_18: key = empty in
        {826}let cs_36: cipherstate = cipherstatepack(k_18,minnonce) in
        {827}let ss_42: symmetricstate = symmetricstatepack(cs_36,ck_42,h_36) in
        {828}let v_262: bitstring = catch-fail(symmetricstateunpack(ss_42)) in
        {829}let v_263: bool = (not-caught-fail(v_262) && success?(1-proj-3-tuple(v_262))) in
        {830}let h_37: bitstring = (if v_263 then 3-proj-3-tuple(v_262) else caught-fail) in
        {831}let ck_43: key = (if v_263 then 2-proj-3-tuple(v_262) else caught-fail) in
        {832}let cs_37: cipherstate = (if v_263 then 1-proj-3-tuple(v_262) else caught-fail) in
        {833}let ss_43: symmetricstate = catch-fail((if v_263 then symmetricstatepack(cs_37,ck_43,hash(h_37,prologue_2)) else fail-any)) in
        {834}let v_264: bool = not-caught-fail(ss_43) in
        {835}let data: bitstring = (if v_264 then catch-fail(getpublickey(s_10)) else caught-fail) in
        {836}let v_265: bool = not-caught-fail(data) in
        {837}let v_266: bitstring = (if v_265 then catch-fail(symmetricstateunpack(ss_43)) else caught-fail) in
        {838}let v_267: bool = (not-caught-fail(v_266) && success?(1-proj-3-tuple(v_266))) in
        {839}let h_38: bitstring = (if v_267 then 3-proj-3-tuple(v_266) else caught-fail) in
        {840}let ck_44: key = (if v_267 then 2-proj-3-tuple(v_266) else caught-fail) in
        {841}let cs_38: cipherstate = (if v_267 then 1-proj-3-tuple(v_266) else caught-fail) in
        {842}let ss_44: symmetricstate = (if v_264 then catch-fail((if v_265 then (if v_267 then symmetricstatepack(cs_38,ck_44,hash(h_38,data)) else fail-any) else fail-any)) else caught-fail) in
        {843}let v_268: bool = not-caught-fail(ss_44) in
        {844}let data_1: bitstring = (if v_268 then catch-fail(getpublickey(m_10)) else caught-fail) in
        {845}let v_269: bool = not-caught-fail(data_1) in
        {846}let v_270: bitstring = (if v_269 then catch-fail(symmetricstateunpack(ss_44)) else caught-fail) in
        {847}let v_271: bool = (not-caught-fail(v_270) && success?(1-proj-3-tuple(v_270))) in
        {848}let h_39: bitstring = (if v_271 then 3-proj-3-tuple(v_270) else caught-fail) in
        {849}let ck_45: key = (if v_271 then 2-proj-3-tuple(v_270) else caught-fail) in
        {850}let cs_39: cipherstate = (if v_271 then 1-proj-3-tuple(v_270) else caught-fail) in
        {851}let ss_45: symmetricstate = (if v_268 then catch-fail((if v_269 then (if v_271 then symmetricstatepack(cs_39,ck_45,hash(h_39,data_1)) else fail-any) else fail-any)) else caught-fail) in
        {852}let v_272: bool = not-caught-fail(ss_45) in
        {853}let hs_30: handshakestate = (if v_264 then (if v_268 then (if v_272 then handshakestatepack(ss_45,s_10,m_10,e_16,rs_10,rm_10,re_12,psk_10,false) else fail-any) else fail-any) else fail-any) in
        {854}insert statestore(me_2,them_2,sid_3,statepack_a(hs_30))
    ) | (
        {927}get statestore(=me_2,=them_2,=sid_3,statepack_a(hs_31: handshakestate)) in
        {855}in(pub, message_a_2: bitstring);
        {856}let v_273: bitstring = catch-fail(handshakestateunpack(hs_31)) in
        {857}let v_274: bool = (not-caught-fail(v_273) && success?(1-proj-9-tuple(v_273))) in
        {858}let initiator_9: bool = (if v_274 then 9-proj-9-tuple(v_273) else caught-fail) in
        {859}let psk_11: key = (if v_274 then 8-proj-9-tuple(v_273) else caught-fail) in
        {860}let re_13: key = (if v_274 then 7-proj-9-tuple(v_273) else caught-fail) in
        {861}let rm_11: key = (if v_274 then 6-proj-9-tuple(v_273) else caught-fail) in
        {862}let rs_11: key = (if v_274 then 5-proj-9-tuple(v_273) else caught-fail) in
        {863}let e_17: keypair = (if v_274 then 4-proj-9-tuple(v_273) else caught-fail) in
        {864}let m_11: keypair = (if v_274 then 3-proj-9-tuple(v_273) else caught-fail) in
        {865}let s_11: keypair = (if v_274 then 2-proj-9-tuple(v_273) else caught-fail) in
        {866}let ss_46: symmetricstate = (if v_274 then 1-proj-9-tuple(v_273) else caught-fail) in
        {867}let v_275: bitstring = (if v_274 then catch-fail(deconcat3(message_a_2)) else caught-fail) in
        {868}let v_276: bool = (not-caught-fail(v_275) && success?(1-proj-3-tuple(v_275))) in
        {869}let ciphertext_16: bitstring = (if v_276 then 3-proj-3-tuple(v_275) else caught-fail) in
        {870}let ns_8: bitstring = (if v_276 then 2-proj-3-tuple(v_275) else caught-fail) in
        {871}let ne_10: bitstring = (if v_276 then 1-proj-3-tuple(v_275) else caught-fail) in
        {872}let valid1_4: bool = (if v_276 then true else caught-fail) in
        {873}let re_14: key = (if v_276 then ne_10 else caught-fail) in
        {874}let v_277: bitstring = (if v_276 then catch-fail(symmetricstateunpack(ss_46)) else caught-fail) in
        {875}let v_278: bool = (not-caught-fail(v_277) && success?(1-proj-3-tuple(v_277))) in
        {876}let h_40: bitstring = (if v_278 then 3-proj-3-tuple(v_277) else caught-fail) in
        {877}let ck_46: key = (if v_278 then 2-proj-3-tuple(v_277) else caught-fail) in
        {878}let cs_40: cipherstate = (if v_278 then 1-proj-3-tuple(v_277) else caught-fail) in
        {879}let ss_47: symmetricstate = (if v_276 then catch-fail((if v_278 then symmetricstatepack(cs_40,ck_46,hash(h_40,re_14)) else fail-any)) else caught-fail) in
        {880}let v_279: bool = not-caught-fail(ss_47) in
        {881}let v_280: bitstring = (if v_279 then catch-fail(symmetricstateunpack(ss_47)) else caught-fail) in
        {882}let v_281: bool = (not-caught-fail(v_280) && success?(1-proj-3-tuple(v_280))) in
        {883}let h_41: bitstring = (if v_281 then 3-proj-3-tuple(v_280) else caught-fail) in
        {884}let ck_47: key = (if v_281 then 2-proj-3-tuple(v_280) else caught-fail) in
        {885}let cs_41: cipherstate = (if v_281 then 1-proj-3-tuple(v_280) else caught-fail) in
        {886}let v_282: bitstring = (if v_281 then catch-fail(cipherstateunpack(cs_41)) else caught-fail) in
        {887}let v_283: bool = (not-caught-fail(v_282) && success?(1-proj-2-tuple(v_282))) in
        {888}let n_16: nonce = (if v_283 then 2-proj-2-tuple(v_282) else caught-fail) in
        {889}let k_19: key = (if v_283 then 1-proj-2-tuple(v_282) else caught-fail) in
        {890}let d_4: aead = (if v_283 then catch-fail(decrypt(k_19,n_16,h_41,ciphertext_16)) else caught-fail) in
        {891}let v_284: bool = not-caught-fail(d_4) in
        {892}let v_285: bitstring = (if v_284 then catch-fail(aeadunpack(d_4)) else caught-fail) in
        {893}let v_286: bool = (not-caught-fail(v_285) && success?(1-proj-3-tuple(v_285))) in
        {894}let plaintext_12: bitstring = (if v_286 then 3-proj-3-tuple(v_285) else caught-fail) in
        {895}let adi_4: bitstring = (if v_286 then 2-proj-3-tuple(v_285) else caught-fail) in
        {896}let valid_12: bool = (if v_286 then 1-proj-3-tuple(v_285) else caught-fail) in
        {897}let n_17: nonce = (if v_286 then increment_nonce(n_16) else caught-fail) in
        {898}let v_287: bitstring = (if v_286 then catch-fail(cipherstateunpack(cs_41)) else caught-fail) in
        {899}let v_288: bool = (not-caught-fail(v_287) && success?(1-proj-2-tuple(v_287))) in
        {900}let o_8: nonce = (if v_288 then 2-proj-2-tuple(v_287) else caught-fail) in
        {901}let k_20: key = (if v_288 then 1-proj-2-tuple(v_287) else caught-fail) in
        {902}let csi_16: cipherstate = (if v_286 then catch-fail((if v_288 then cipherstatepack(k_20,n_17) else fail-any)) else caught-fail) in
        {903}let v_289: bool = not-caught-fail(csi_16) in
        {904}let v_290: bitstring = (if v_281 then catch-fail((if v_283 then (if v_284 then (if v_286 then (if v_289 then (csi_16,plaintext_12,valid_12) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {905}let v_291: bool = (not-caught-fail(v_290) && success?(1-proj-3-tuple(v_290))) in
        {906}let valid_13: bool = (if v_291 then 3-proj-3-tuple(v_290) else caught-fail) in
        {907}let plaintext_13: bitstring = (if v_291 then 2-proj-3-tuple(v_290) else caught-fail) in
        {908}let csi_17: cipherstate = (if v_291 then 1-proj-3-tuple(v_290) else caught-fail) in
        {909}let ss_48: symmetricstate = (if v_291 then symmetricstatepack(csi_17,ck_47,h_41) else caught-fail) in
        {910}let v_292: bitstring = (if v_291 then catch-fail(symmetricstateunpack(ss_48)) else caught-fail) in
        {911}let v_293: bool = (not-caught-fail(v_292) && success?(1-proj-3-tuple(v_292))) in
        {912}let h_42: bitstring = (if v_293 then 3-proj-3-tuple(v_292) else caught-fail) in
        {913}let ck_48: key = (if v_293 then 2-proj-3-tuple(v_292) else caught-fail) in
        {914}let cs_42: cipherstate = (if v_293 then 1-proj-3-tuple(v_292) else caught-fail) in
        {915}let ssi_10: symmetricstate = (if v_291 then catch-fail((if v_293 then symmetricstatepack(cs_42,ck_48,hash(h_42,ciphertext_16)) else fail-any)) else caught-fail) in
        {916}let v_294: bool = not-caught-fail(ssi_10) in
        {917}let v_295: bitstring = (if v_279 then catch-fail((if v_281 then (if v_291 then (if v_294 then (ssi_10,plaintext_13,valid_13) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {918}let v_296: bool = (not-caught-fail(v_295) && success?(1-proj-3-tuple(v_295))) in
        {919}let valid2_4: bool = (if v_296 then 3-proj-3-tuple(v_295) else caught-fail) in
        {920}let plaintext_14: bitstring = (if v_296 then 2-proj-3-tuple(v_295) else caught-fail) in
        {921}let ss_49: symmetricstate = (if v_296 then 1-proj-3-tuple(v_295) else caught-fail) in
        {922}let v_297: bool = (if v_296 then catch-fail((valid1_4 && valid2_4)) else caught-fail) in
        {923}let hs_32: handshakestate = (if v_297 then handshakestatepack(ss_49,s_11,m_11,e_17,rs_11,rm_11,re_14,psk_11,initiator_9) else caught-fail) in
        {924}let (hs_33: handshakestate,plaintext_a: bitstring,valid_14: bool) = (if v_274 then (if v_276 then (if v_279 then (if v_296 then (if undo-catch-fail(v_297) then (hs_32,plaintext_14,true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {925}event RecvMsg(me_2,them_2,stagepack_a(sid_3),plaintext_a);
        {926}insert statestore(me_2,them_2,sid_3,statepack_b(hs_33))
    ) | (
        {1082}get statestore(=me_2,=them_2,=sid_3,statepack_b(hs_34: handshakestate)) in
        {928}let payload_4: bitstring = msg_b(me_2,them_2,sid_3) in
        {929}let v_298: bitstring = catch-fail(handshakestateunpack(hs_34)) in
        {930}let v_299: bool = (not-caught-fail(v_298) && success?(1-proj-9-tuple(v_298))) in
        {931}let initiator_10: bool = (if v_299 then 9-proj-9-tuple(v_298) else caught-fail) in
        {932}let psk_12: key = (if v_299 then 8-proj-9-tuple(v_298) else caught-fail) in
        {933}let re_15: key = (if v_299 then 7-proj-9-tuple(v_298) else caught-fail) in
        {934}let rm_12: key = (if v_299 then 6-proj-9-tuple(v_298) else caught-fail) in
        {935}let rs_12: key = (if v_299 then 5-proj-9-tuple(v_298) else caught-fail) in
        {936}let e_18: keypair = (if v_299 then 4-proj-9-tuple(v_298) else caught-fail) in
        {937}let m_12: keypair = (if v_299 then 3-proj-9-tuple(v_298) else caught-fail) in
        {938}let s_12: keypair = (if v_299 then 2-proj-9-tuple(v_298) else caught-fail) in
        {939}let ss_50: symmetricstate = (if v_299 then 1-proj-9-tuple(v_298) else caught-fail) in
        {940}let v_300: bitstring = (if v_299 then catch-fail((empty,empty,empty)) else caught-fail) in
        {941}let v_301: bool = (not-caught-fail(v_300) && success?(1-proj-3-tuple(v_300))) in
        {942}let ciphertext_17: bitstring = (if v_301 then 3-proj-3-tuple(v_300) else caught-fail) in
        {943}let ns_9: bitstring = (if v_301 then 2-proj-3-tuple(v_300) else caught-fail) in
        {944}let ne_11: bitstring = (if v_301 then 1-proj-3-tuple(v_300) else caught-fail) in
        {945}let basis_8: key = (if v_301 then key_e(me_2,them_2,sid_3) else caught-fail) in
        {946}let public_key_8: key = (if v_301 then catch-fail(dhexp(basis_8,validkey(g))) else caught-fail) in
        {947}let v_302: bool = not-caught-fail(public_key_8) in
        {948}let e_19: keypair = (if v_301 then catch-fail((if v_302 then keypairpack(validkey(public_key_8),basis_8) else fail-any)) else caught-fail) in
        {949}let v_303: bool = not-caught-fail(e_19) in
        {950}let ne_12: bitstring = (if v_303 then catch-fail(getpublickey(e_19)) else caught-fail) in
        {951}let v_304: bool = not-caught-fail(ne_12) in
        {952}let v_305: bitstring = (if v_304 then catch-fail(symmetricstateunpack(ss_50)) else caught-fail) in
        {953}let v_306: bool = (not-caught-fail(v_305) && success?(1-proj-3-tuple(v_305))) in
        {954}let h_43: bitstring = (if v_306 then 3-proj-3-tuple(v_305) else caught-fail) in
        {955}let ck_49: key = (if v_306 then 2-proj-3-tuple(v_305) else caught-fail) in
        {956}let cs_43: cipherstate = (if v_306 then 1-proj-3-tuple(v_305) else caught-fail) in
        {957}let ss_51: symmetricstate = (if v_304 then catch-fail((if v_306 then symmetricstatepack(cs_43,ck_49,hash(h_43,ne_12)) else fail-any)) else caught-fail) in
        {958}let v_307: bool = not-caught-fail(ss_51) in
        {959}let v_308: bitstring = (if v_307 then catch-fail(keypairunpack(e_19)) else caught-fail) in
        {960}let v_309: bool = (not-caught-fail(v_308) && success?(1-proj-2-tuple(v_308))) in
        {961}let my_private_key_6: key = (if v_309 then 2-proj-2-tuple(v_308) else caught-fail) in
        {962}let my_public_key_6: key = (if v_309 then 1-proj-2-tuple(v_308) else caught-fail) in
        {963}let input_key_material_8: key = (if v_307 then catch-fail((if v_309 then dhexp(my_private_key_6,re_15) else fail-any)) else caught-fail) in
        {964}let v_310: bool = not-caught-fail(input_key_material_8) in
        {965}let v_311: bitstring = (if v_310 then catch-fail(symmetricstateunpack(ss_51)) else caught-fail) in
        {966}let v_312: bool = (not-caught-fail(v_311) && success?(1-proj-3-tuple(v_311))) in
        {967}let h_44: bitstring = (if v_312 then 3-proj-3-tuple(v_311) else caught-fail) in
        {968}let ck_50: key = (if v_312 then 2-proj-3-tuple(v_311) else caught-fail) in
        {969}let cs_44: cipherstate = (if v_312 then 1-proj-3-tuple(v_311) else caught-fail) in
        {970}let output1_8: key = (if v_312 then hmac_hash1(ck_50,input_key_material_8) else caught-fail) in
        {971}let output2_8: key = (if v_312 then hmac_hash2(ck_50,input_key_material_8) else caught-fail) in
        {972}let output3_8: key = (if v_312 then hmac_hash3(ck_50,input_key_material_8) else caught-fail) in
        {973}let v_313: bitstring = (if v_312 then catch-fail((output1_8,output2_8,output3_8)) else caught-fail) in
        {974}let v_314: bool = (not-caught-fail(v_313) && success?(1-proj-3-tuple(v_313))) in
        {975}let output_6: key = (if v_314 then 3-proj-3-tuple(v_313) else caught-fail) in
        {976}let temp_k_6: key = (if v_314 then 2-proj-3-tuple(v_313) else caught-fail) in
        {977}let ck_51: key = (if v_314 then 1-proj-3-tuple(v_313) else caught-fail) in
        {978}let ss_52: symmetricstate = (if v_307 then catch-fail((if v_310 then (if v_312 then (if v_314 then symmetricstatepack(cipherstatepack(temp_k_6,minnonce),ck_51,h_44) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {979}let v_315: bool = not-caught-fail(ss_52) in
        {980}let v_316: bitstring = (if v_315 then catch-fail(keypairunpack(s_12)) else caught-fail) in
        {981}let v_317: bool = (not-caught-fail(v_316) && success?(1-proj-2-tuple(v_316))) in
        {982}let my_private_key_7: key = (if v_317 then 2-proj-2-tuple(v_316) else caught-fail) in
        {983}let my_public_key_7: key = (if v_317 then 1-proj-2-tuple(v_316) else caught-fail) in
        {984}let input_key_material_9: key = (if v_315 then catch-fail((if v_317 then dhexp(my_private_key_7,re_15) else fail-any)) else caught-fail) in
        {985}let v_318: bool = not-caught-fail(input_key_material_9) in
        {986}let v_319: bitstring = (if v_318 then catch-fail(symmetricstateunpack(ss_52)) else caught-fail) in
        {987}let v_320: bool = (not-caught-fail(v_319) && success?(1-proj-3-tuple(v_319))) in
        {988}let h_45: bitstring = (if v_320 then 3-proj-3-tuple(v_319) else caught-fail) in
        {989}let ck_52: key = (if v_320 then 2-proj-3-tuple(v_319) else caught-fail) in
        {990}let cs_45: cipherstate = (if v_320 then 1-proj-3-tuple(v_319) else caught-fail) in
        {991}let output1_9: key = (if v_320 then hmac_hash1(ck_52,input_key_material_9) else caught-fail) in
        {992}let output2_9: key = (if v_320 then hmac_hash2(ck_52,input_key_material_9) else caught-fail) in
        {993}let output3_9: key = (if v_320 then hmac_hash3(ck_52,input_key_material_9) else caught-fail) in
        {994}let v_321: bitstring = (if v_320 then catch-fail((output1_9,output2_9,output3_9)) else caught-fail) in
        {995}let v_322: bool = (not-caught-fail(v_321) && success?(1-proj-3-tuple(v_321))) in
        {996}let output_7: key = (if v_322 then 3-proj-3-tuple(v_321) else caught-fail) in
        {997}let temp_k_7: key = (if v_322 then 2-proj-3-tuple(v_321) else caught-fail) in
        {998}let ck_53: key = (if v_322 then 1-proj-3-tuple(v_321) else caught-fail) in
        {999}let ss_53: symmetricstate = (if v_315 then catch-fail((if v_318 then (if v_320 then (if v_322 then symmetricstatepack(cipherstatepack(temp_k_7,minnonce),ck_53,h_45) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1000}let v_323: bool = not-caught-fail(ss_53) in
        {1001}let v_324: bitstring = (if v_323 then catch-fail(keypairunpack(m_12)) else caught-fail) in
        {1002}let v_325: bool = (not-caught-fail(v_324) && success?(1-proj-2-tuple(v_324))) in
        {1003}let my_private_key_8: key = (if v_325 then 2-proj-2-tuple(v_324) else caught-fail) in
        {1004}let my_public_key_8: key = (if v_325 then 1-proj-2-tuple(v_324) else caught-fail) in
        {1005}let input_key_material_10: key = (if v_323 then catch-fail((if v_325 then dhexp(my_private_key_8,re_15) else fail-any)) else caught-fail) in
        {1006}let v_326: bool = not-caught-fail(input_key_material_10) in
        {1007}let v_327: bitstring = (if v_326 then catch-fail(symmetricstateunpack(ss_53)) else caught-fail) in
        {1008}let v_328: bool = (not-caught-fail(v_327) && success?(1-proj-3-tuple(v_327))) in
        {1009}let h_46: bitstring = (if v_328 then 3-proj-3-tuple(v_327) else caught-fail) in
        {1010}let ck_54: key = (if v_328 then 2-proj-3-tuple(v_327) else caught-fail) in
        {1011}let cs_46: cipherstate = (if v_328 then 1-proj-3-tuple(v_327) else caught-fail) in
        {1012}let output1_10: key = (if v_328 then hmac_hash1(ck_54,input_key_material_10) else caught-fail) in
        {1013}let output2_10: key = (if v_328 then hmac_hash2(ck_54,input_key_material_10) else caught-fail) in
        {1014}let output3_10: key = (if v_328 then hmac_hash3(ck_54,input_key_material_10) else caught-fail) in
        {1015}let v_329: bitstring = (if v_328 then catch-fail((output1_10,output2_10,output3_10)) else caught-fail) in
        {1016}let v_330: bool = (not-caught-fail(v_329) && success?(1-proj-3-tuple(v_329))) in
        {1017}let output_8: key = (if v_330 then 3-proj-3-tuple(v_329) else caught-fail) in
        {1018}let temp_k_8: key = (if v_330 then 2-proj-3-tuple(v_329) else caught-fail) in
        {1019}let ck_55: key = (if v_330 then 1-proj-3-tuple(v_329) else caught-fail) in
        {1020}let ss_54: symmetricstate = (if v_323 then catch-fail((if v_326 then (if v_328 then (if v_330 then symmetricstatepack(cipherstatepack(temp_k_8,minnonce),ck_55,h_46) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1021}let v_331: bool = not-caught-fail(ss_54) in
        {1022}let v_332: bitstring = (if v_331 then catch-fail(symmetricstateunpack(ss_54)) else caught-fail) in
        {1023}let v_333: bool = (not-caught-fail(v_332) && success?(1-proj-3-tuple(v_332))) in
        {1024}let h_47: bitstring = (if v_333 then 3-proj-3-tuple(v_332) else caught-fail) in
        {1025}let ck_56: key = (if v_333 then 2-proj-3-tuple(v_332) else caught-fail) in
        {1026}let cs_47: cipherstate = (if v_333 then 1-proj-3-tuple(v_332) else caught-fail) in
        {1027}let v_334: bitstring = (if v_333 then catch-fail(cipherstateunpack(cs_47)) else caught-fail) in
        {1028}let v_335: bool = (not-caught-fail(v_334) && success?(1-proj-2-tuple(v_334))) in
        {1029}let n_18: nonce = (if v_335 then 2-proj-2-tuple(v_334) else caught-fail) in
        {1030}let k_21: key = (if v_335 then 1-proj-2-tuple(v_334) else caught-fail) in
        {1031}let e_20: bitstring = (if v_335 then encrypt(k_21,n_18,h_47,payload_4) else caught-fail) in
        {1032}let n_19: nonce = (if v_335 then increment_nonce(n_18) else caught-fail) in
        {1033}let v_336: bitstring = (if v_335 then catch-fail(cipherstateunpack(cs_47)) else caught-fail) in
        {1034}let v_337: bool = (not-caught-fail(v_336) && success?(1-proj-2-tuple(v_336))) in
        {1035}let o_9: nonce = (if v_337 then 2-proj-2-tuple(v_336) else caught-fail) in
        {1036}let k_22: key = (if v_337 then 1-proj-2-tuple(v_336) else caught-fail) in
        {1037}let csi_18: cipherstate = (if v_335 then catch-fail((if v_337 then cipherstatepack(k_22,n_19) else fail-any)) else caught-fail) in
        {1038}let v_338: bool = not-caught-fail(csi_18) in
        {1039}let v_339: bitstring = (if v_333 then catch-fail((if v_335 then (if v_338 then (csi_18,e_20) else fail-any) else fail-any)) else caught-fail) in
        {1040}let v_340: bool = (not-caught-fail(v_339) && success?(1-proj-2-tuple(v_339))) in
        {1041}let ciphertext_18: bitstring = (if v_340 then 2-proj-2-tuple(v_339) else caught-fail) in
        {1042}let csi_19: cipherstate = (if v_340 then 1-proj-2-tuple(v_339) else caught-fail) in
        {1043}let ss_55: symmetricstate = (if v_340 then symmetricstatepack(csi_19,ck_56,h_47) else caught-fail) in
        {1044}let v_341: bitstring = (if v_340 then catch-fail(symmetricstateunpack(ss_55)) else caught-fail) in
        {1045}let v_342: bool = (not-caught-fail(v_341) && success?(1-proj-3-tuple(v_341))) in
        {1046}let h_48: bitstring = (if v_342 then 3-proj-3-tuple(v_341) else caught-fail) in
        {1047}let ck_57: key = (if v_342 then 2-proj-3-tuple(v_341) else caught-fail) in
        {1048}let cs_48: cipherstate = (if v_342 then 1-proj-3-tuple(v_341) else caught-fail) in
        {1049}let ssi_11: symmetricstate = (if v_340 then catch-fail((if v_342 then symmetricstatepack(cs_48,ck_57,hash(h_48,ciphertext_18)) else fail-any)) else caught-fail) in
        {1050}let v_343: bool = not-caught-fail(ssi_11) in
        {1051}let v_344: bitstring = (if v_331 then catch-fail((if v_333 then (if v_340 then (if v_343 then (ssi_11,ciphertext_18) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1052}let v_345: bool = (not-caught-fail(v_344) && success?(1-proj-2-tuple(v_344))) in
        {1053}let ciphertext_19: bitstring = (if v_345 then 2-proj-2-tuple(v_344) else caught-fail) in
        {1054}let ss_56: symmetricstate = (if v_345 then 1-proj-2-tuple(v_344) else caught-fail) in
        {1055}let hs_35: handshakestate = (if v_345 then handshakestatepack(ss_56,s_12,m_12,e_19,rs_12,rm_12,re_15,psk_12,initiator_10) else caught-fail) in
        {1056}let message_buffer_4: bitstring = (if v_345 then concat3(ne_12,ns_9,ciphertext_19) else caught-fail) in
        {1057}let v_346: bitstring = (if v_345 then catch-fail(symmetricstateunpack(ss_56)) else caught-fail) in
        {1058}let v_347: bool = (not-caught-fail(v_346) && success?(1-proj-3-tuple(v_346))) in
        {1059}let h_49: bitstring = (if v_347 then 3-proj-3-tuple(v_346) else caught-fail) in
        {1060}let ck_58: key = (if v_347 then 2-proj-3-tuple(v_346) else caught-fail) in
        {1061}let cs_49: cipherstate = (if v_347 then 1-proj-3-tuple(v_346) else caught-fail) in
        {1062}let input_key_material_11: key = (if v_347 then zero else caught-fail) in
        {1063}let output1_11: key = (if v_347 then hmac_hash1(ck_58,input_key_material_11) else caught-fail) in
        {1064}let output2_11: key = (if v_347 then hmac_hash2(ck_58,input_key_material_11) else caught-fail) in
        {1065}let output3_11: key = (if v_347 then hmac_hash3(ck_58,input_key_material_11) else caught-fail) in
        {1066}let v_348: bitstring = (if v_347 then catch-fail((output1_11,output2_11,output3_11)) else caught-fail) in
        {1067}let v_349: bool = (not-caught-fail(v_348) && success?(1-proj-3-tuple(v_348))) in
        {1068}let temp_k3_2: key = (if v_349 then 3-proj-3-tuple(v_348) else caught-fail) in
        {1069}let temp_k2_2: key = (if v_349 then 2-proj-3-tuple(v_348) else caught-fail) in
        {1070}let temp_k1_2: key = (if v_349 then 1-proj-3-tuple(v_348) else caught-fail) in
        {1071}let cs1_10: cipherstate = (if v_349 then cipherstatepack(temp_k1_2,minnonce) else caught-fail) in
        {1072}let cs2_10: cipherstate = (if v_349 then cipherstatepack(temp_k2_2,minnonce) else caught-fail) in
        {1073}let v_350: bitstring = (if v_345 then catch-fail((if v_347 then (if v_349 then (ss_56,cs1_10,cs2_10) else fail-any) else fail-any)) else caught-fail) in
        {1074}let v_351: bool = (not-caught-fail(v_350) && success?(1-proj-3-tuple(v_350))) in
        {1075}let cs2_11: cipherstate = (if v_351 then 3-proj-3-tuple(v_350) else caught-fail) in
        {1076}let cs1_11: cipherstate = (if v_351 then 2-proj-3-tuple(v_350) else caught-fail) in
        {1077}let ssi_12: symmetricstate = (if v_351 then 1-proj-3-tuple(v_350) else caught-fail) in
        {1078}let (hs_36: handshakestate,message_b_2: bitstring,cs1_12: cipherstate,cs2_12: cipherstate) = (if v_299 then (if v_301 then (if v_303 then (if v_304 then (if v_307 then (if v_315 then (if v_323 then (if v_331 then (if v_345 then (if v_351 then (hs_35,message_buffer_4,cs1_11,cs2_11) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1079}event SendMsg(me_2,them_2,stagepack_b(sid_3),msg_b(me_2,them_2,sid_3));
        {1080}insert statestore(me_2,them_2,sid_3,statepack_c(hs_36,cs1_12,cs2_12));
        {1081}out(pub, message_b_2)
    ) | (
        {1083}!
        {1149}get statestore(=me_2,=them_2,=sid_3,statepack_c(hs_37: handshakestate,cs1_13: cipherstate,cs2_13: cipherstate)) in
        {1084}let hs_38: handshakestate = handshakestatesetcs(hs_37,cs1_13) in
        {1085}in(pub, message_c_2: bitstring);
        {1086}let v_352: bitstring = catch-fail(handshakestateunpack(hs_38)) in
        {1087}let v_353: bool = (not-caught-fail(v_352) && success?(1-proj-9-tuple(v_352))) in
        {1088}let initiator_11: bool = (if v_353 then 9-proj-9-tuple(v_352) else caught-fail) in
        {1089}let psk_13: key = (if v_353 then 8-proj-9-tuple(v_352) else caught-fail) in
        {1090}let re_16: key = (if v_353 then 7-proj-9-tuple(v_352) else caught-fail) in
        {1091}let rm_13: key = (if v_353 then 6-proj-9-tuple(v_352) else caught-fail) in
        {1092}let rs_13: key = (if v_353 then 5-proj-9-tuple(v_352) else caught-fail) in
        {1093}let e_21: keypair = (if v_353 then 4-proj-9-tuple(v_352) else caught-fail) in
        {1094}let m_13: keypair = (if v_353 then 3-proj-9-tuple(v_352) else caught-fail) in
        {1095}let s_13: keypair = (if v_353 then 2-proj-9-tuple(v_352) else caught-fail) in
        {1096}let ss_57: symmetricstate = (if v_353 then 1-proj-9-tuple(v_352) else caught-fail) in
        {1097}let v_354: bitstring = (if v_353 then catch-fail(deconcat3(message_c_2)) else caught-fail) in
        {1098}let v_355: bool = (not-caught-fail(v_354) && success?(1-proj-3-tuple(v_354))) in
        {1099}let ciphertext_20: bitstring = (if v_355 then 3-proj-3-tuple(v_354) else caught-fail) in
        {1100}let ns_10: bitstring = (if v_355 then 2-proj-3-tuple(v_354) else caught-fail) in
        {1101}let ne_13: bitstring = (if v_355 then 1-proj-3-tuple(v_354) else caught-fail) in
        {1102}let valid1_5: bool = (if v_355 then true else caught-fail) in
        {1103}let v_356: bitstring = (if v_355 then catch-fail(symmetricstateunpack(ss_57)) else caught-fail) in
        {1104}let v_357: bool = (not-caught-fail(v_356) && success?(1-proj-3-tuple(v_356))) in
        {1105}let h_50: bitstring = (if v_357 then 3-proj-3-tuple(v_356) else caught-fail) in
        {1106}let ck_59: key = (if v_357 then 2-proj-3-tuple(v_356) else caught-fail) in
        {1107}let cs_50: cipherstate = (if v_357 then 1-proj-3-tuple(v_356) else caught-fail) in
        {1108}let v_358: bitstring = (if v_357 then catch-fail(cipherstateunpack(cs_50)) else caught-fail) in
        {1109}let v_359: bool = (not-caught-fail(v_358) && success?(1-proj-2-tuple(v_358))) in
        {1110}let n_20: nonce = (if v_359 then 2-proj-2-tuple(v_358) else caught-fail) in
        {1111}let k_23: key = (if v_359 then 1-proj-2-tuple(v_358) else caught-fail) in
        {1112}let d_5: aead = (if v_359 then catch-fail(decrypt(k_23,n_20,h_50,ciphertext_20)) else caught-fail) in
        {1113}let v_360: bool = not-caught-fail(d_5) in
        {1114}let v_361: bitstring = (if v_360 then catch-fail(aeadunpack(d_5)) else caught-fail) in
        {1115}let v_362: bool = (not-caught-fail(v_361) && success?(1-proj-3-tuple(v_361))) in
        {1116}let plaintext_15: bitstring = (if v_362 then 3-proj-3-tuple(v_361) else caught-fail) in
        {1117}let adi_5: bitstring = (if v_362 then 2-proj-3-tuple(v_361) else caught-fail) in
        {1118}let valid_15: bool = (if v_362 then 1-proj-3-tuple(v_361) else caught-fail) in
        {1119}let n_21: nonce = (if v_362 then increment_nonce(n_20) else caught-fail) in
        {1120}let v_363: bitstring = (if v_362 then catch-fail(cipherstateunpack(cs_50)) else caught-fail) in
        {1121}let v_364: bool = (not-caught-fail(v_363) && success?(1-proj-2-tuple(v_363))) in
        {1122}let o_10: nonce = (if v_364 then 2-proj-2-tuple(v_363) else caught-fail) in
        {1123}let k_24: key = (if v_364 then 1-proj-2-tuple(v_363) else caught-fail) in
        {1124}let csi_20: cipherstate = (if v_362 then catch-fail((if v_364 then cipherstatepack(k_24,n_21) else fail-any)) else caught-fail) in
        {1125}let v_365: bool = not-caught-fail(csi_20) in
        {1126}let v_366: bitstring = (if v_357 then catch-fail((if v_359 then (if v_360 then (if v_362 then (if v_365 then (csi_20,plaintext_15,valid_15) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1127}let v_367: bool = (not-caught-fail(v_366) && success?(1-proj-3-tuple(v_366))) in
        {1128}let valid_16: bool = (if v_367 then 3-proj-3-tuple(v_366) else caught-fail) in
        {1129}let plaintext_16: bitstring = (if v_367 then 2-proj-3-tuple(v_366) else caught-fail) in
        {1130}let csi_21: cipherstate = (if v_367 then 1-proj-3-tuple(v_366) else caught-fail) in
        {1131}let ss_58: symmetricstate = (if v_367 then symmetricstatepack(csi_21,ck_59,h_50) else caught-fail) in
        {1132}let v_368: bitstring = (if v_367 then catch-fail(symmetricstateunpack(ss_58)) else caught-fail) in
        {1133}let v_369: bool = (not-caught-fail(v_368) && success?(1-proj-3-tuple(v_368))) in
        {1134}let h_51: bitstring = (if v_369 then 3-proj-3-tuple(v_368) else caught-fail) in
        {1135}let ck_60: key = (if v_369 then 2-proj-3-tuple(v_368) else caught-fail) in
        {1136}let cs_51: cipherstate = (if v_369 then 1-proj-3-tuple(v_368) else caught-fail) in
        {1137}let ssi_13: symmetricstate = (if v_367 then catch-fail((if v_369 then symmetricstatepack(cs_51,ck_60,hash(h_51,ciphertext_20)) else fail-any)) else caught-fail) in
        {1138}let v_370: bool = not-caught-fail(ssi_13) in
        {1139}let v_371: bitstring = (if v_355 then catch-fail((if v_357 then (if v_367 then (if v_370 then (ssi_13,plaintext_16,valid_16) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1140}let v_372: bool = (not-caught-fail(v_371) && success?(1-proj-3-tuple(v_371))) in
        {1141}let valid2_5: bool = (if v_372 then 3-proj-3-tuple(v_371) else caught-fail) in
        {1142}let plaintext_17: bitstring = (if v_372 then 2-proj-3-tuple(v_371) else caught-fail) in
        {1143}let ss_59: symmetricstate = (if v_372 then 1-proj-3-tuple(v_371) else caught-fail) in
        {1144}let v_373: bool = (if v_372 then catch-fail((valid1_5 && valid2_5)) else caught-fail) in
        {1145}let hs_39: handshakestate = (if v_373 then handshakestatepack(ss_59,s_13,m_13,e_21,rs_13,rm_13,re_16,psk_13,initiator_11) else caught-fail) in
        {1146}let (hs_40: handshakestate,plaintext_c: bitstring,valid_17: bool) = (if v_353 then (if v_355 then (if v_372 then (if undo-catch-fail(v_373) then (hs_39,plaintext_17,true) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1147}event RecvMsg(me_2,them_2,stagepack_c(sid_3),plaintext_c);
        {1148}insert statestore(me_2,them_2,sid_3,statepack_d(hs_40,handshakestategetcs(hs_40),cs2_13))
    ) | (
        {1150}!
        {1207}get statestore(=me_2,=them_2,=sid_3,statepack_d(hs_41: handshakestate,cs1_14: cipherstate,cs2_14: cipherstate)) in
        {1151}let hs_42: handshakestate = handshakestatesetcs(hs_41,cs2_14) in
        {1152}let payload_5: bitstring = msg_d(me_2,them_2,sid_3) in
        {1153}let v_374: bitstring = catch-fail(handshakestateunpack(hs_42)) in
        {1154}let v_375: bool = (not-caught-fail(v_374) && success?(1-proj-9-tuple(v_374))) in
        {1155}let initiator_12: bool = (if v_375 then 9-proj-9-tuple(v_374) else caught-fail) in
        {1156}let psk_14: key = (if v_375 then 8-proj-9-tuple(v_374) else caught-fail) in
        {1157}let re_17: key = (if v_375 then 7-proj-9-tuple(v_374) else caught-fail) in
        {1158}let rm_14: key = (if v_375 then 6-proj-9-tuple(v_374) else caught-fail) in
        {1159}let rs_14: key = (if v_375 then 5-proj-9-tuple(v_374) else caught-fail) in
        {1160}let e_22: keypair = (if v_375 then 4-proj-9-tuple(v_374) else caught-fail) in
        {1161}let m_14: keypair = (if v_375 then 3-proj-9-tuple(v_374) else caught-fail) in
        {1162}let s_14: keypair = (if v_375 then 2-proj-9-tuple(v_374) else caught-fail) in
        {1163}let ss_60: symmetricstate = (if v_375 then 1-proj-9-tuple(v_374) else caught-fail) in
        {1164}let v_376: bitstring = (if v_375 then catch-fail((empty,empty,empty)) else caught-fail) in
        {1165}let v_377: bool = (not-caught-fail(v_376) && success?(1-proj-3-tuple(v_376))) in
        {1166}let ciphertext_21: bitstring = (if v_377 then 3-proj-3-tuple(v_376) else caught-fail) in
        {1167}let ns_11: bitstring = (if v_377 then 2-proj-3-tuple(v_376) else caught-fail) in
        {1168}let ne_14: bitstring = (if v_377 then 1-proj-3-tuple(v_376) else caught-fail) in
        {1169}let v_378: bitstring = (if v_377 then catch-fail(symmetricstateunpack(ss_60)) else caught-fail) in
        {1170}let v_379: bool = (not-caught-fail(v_378) && success?(1-proj-3-tuple(v_378))) in
        {1171}let h_52: bitstring = (if v_379 then 3-proj-3-tuple(v_378) else caught-fail) in
        {1172}let ck_61: key = (if v_379 then 2-proj-3-tuple(v_378) else caught-fail) in
        {1173}let cs_52: cipherstate = (if v_379 then 1-proj-3-tuple(v_378) else caught-fail) in
        {1174}let v_380: bitstring = (if v_379 then catch-fail(cipherstateunpack(cs_52)) else caught-fail) in
        {1175}let v_381: bool = (not-caught-fail(v_380) && success?(1-proj-2-tuple(v_380))) in
        {1176}let n_22: nonce = (if v_381 then 2-proj-2-tuple(v_380) else caught-fail) in
        {1177}let k_25: key = (if v_381 then 1-proj-2-tuple(v_380) else caught-fail) in
        {1178}let e_23: bitstring = (if v_381 then encrypt(k_25,n_22,h_52,payload_5) else caught-fail) in
        {1179}let n_23: nonce = (if v_381 then increment_nonce(n_22) else caught-fail) in
        {1180}let v_382: bitstring = (if v_381 then catch-fail(cipherstateunpack(cs_52)) else caught-fail) in
        {1181}let v_383: bool = (not-caught-fail(v_382) && success?(1-proj-2-tuple(v_382))) in
        {1182}let o_11: nonce = (if v_383 then 2-proj-2-tuple(v_382) else caught-fail) in
        {1183}let k_26: key = (if v_383 then 1-proj-2-tuple(v_382) else caught-fail) in
        {1184}let csi_22: cipherstate = (if v_381 then catch-fail((if v_383 then cipherstatepack(k_26,n_23) else fail-any)) else caught-fail) in
        {1185}let v_384: bool = not-caught-fail(csi_22) in
        {1186}let v_385: bitstring = (if v_379 then catch-fail((if v_381 then (if v_384 then (csi_22,e_23) else fail-any) else fail-any)) else caught-fail) in
        {1187}let v_386: bool = (not-caught-fail(v_385) && success?(1-proj-2-tuple(v_385))) in
        {1188}let ciphertext_22: bitstring = (if v_386 then 2-proj-2-tuple(v_385) else caught-fail) in
        {1189}let csi_23: cipherstate = (if v_386 then 1-proj-2-tuple(v_385) else caught-fail) in
        {1190}let ss_61: symmetricstate = (if v_386 then symmetricstatepack(csi_23,ck_61,h_52) else caught-fail) in
        {1191}let v_387: bitstring = (if v_386 then catch-fail(symmetricstateunpack(ss_61)) else caught-fail) in
        {1192}let v_388: bool = (not-caught-fail(v_387) && success?(1-proj-3-tuple(v_387))) in
        {1193}let h_53: bitstring = (if v_388 then 3-proj-3-tuple(v_387) else caught-fail) in
        {1194}let ck_62: key = (if v_388 then 2-proj-3-tuple(v_387) else caught-fail) in
        {1195}let cs_53: cipherstate = (if v_388 then 1-proj-3-tuple(v_387) else caught-fail) in
        {1196}let ssi_14: symmetricstate = (if v_386 then catch-fail((if v_388 then symmetricstatepack(cs_53,ck_62,hash(h_53,ciphertext_22)) else fail-any)) else caught-fail) in
        {1197}let v_389: bool = not-caught-fail(ssi_14) in
        {1198}let v_390: bitstring = (if v_377 then catch-fail((if v_379 then (if v_386 then (if v_389 then (ssi_14,ciphertext_22) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1199}let v_391: bool = (not-caught-fail(v_390) && success?(1-proj-2-tuple(v_390))) in
        {1200}let ciphertext_23: bitstring = (if v_391 then 2-proj-2-tuple(v_390) else caught-fail) in
        {1201}let ss_62: symmetricstate = (if v_391 then 1-proj-2-tuple(v_390) else caught-fail) in
        {1202}let hs_43: handshakestate = (if v_391 then handshakestatepack(ss_62,s_14,m_14,e_22,rs_14,rm_14,re_17,psk_14,initiator_12) else caught-fail) in
        {1203}let message_buffer_5: bitstring = (if v_391 then concat3(ne_14,ns_11,ciphertext_23) else caught-fail) in
        {1204}let (hs_44: handshakestate,message_d_2: bitstring) = (if v_375 then (if v_377 then (if v_391 then (hs_43,message_buffer_5) else fail-any) else fail-any) else fail-any) in
        {1205}event SendMsg(me_2,them_2,stagepack_d(sid_3),msg_d(me_2,them_2,sid_3));
        {1206}out(pub, message_d_2)
    ) | (
        {1208}event LeakS(phase0,me_2);
        {1209}event LeakM(phase0,me_2);
        {1210}out(pub, (key_s(me_2),key_m(me_2)))
    ) | (
        {1211}phase 1;
        {1212}event LeakS(phase1,me_2);
        {1213}event LeakM(phase1,me_2);
        {1214}out(pub, (key_s(me_2),key_m(me_2)))
    )
) | (
    {1215}let me_3: principal = bob in
    {1216}let them_3: principal = charlie in
    {1217}let sid_4: sessionid = sid in
    {1218}let basis_9: key = key_s(me_3) in
    {1219}let public_key_9: key = catch-fail(dhexp(basis_9,validkey(g))) in
    {1220}let v_392: bool = not-caught-fail(public_key_9) in
    {1221}let s_15: keypair = (if v_392 then keypairpack(validkey(public_key_9),basis_9) else fail-any) in
    {1222}let basis_10: key = key_m(me_3) in
    {1223}let public_key_10: key = catch-fail(dhexp(basis_10,validkey(g))) in
    {1224}let v_393: bool = not-caught-fail(public_key_10) in
    {1225}let m_15: keypair = (if v_393 then keypairpack(validkey(public_key_10),basis_10) else fail-any) in
    {1226}out(pub, (getpublickey(s_15),getpublickey(m_15)));
    (
        {1227}let e_24: keypair = keypairpack(empty,empty) in
        {1228}let rs_15: key = empty in
        {1229}let rm_15: key = empty in
        {1230}let re_18: key = empty in
        {1231}let prologue_3: bitstring = empty in
        {1232}let psk_15: key = empty in
        {1233}let protocol_name_3: bitstring = somename in
        {1234}let h_54: bitstring = hash(protocol_name_3,empty) in
        {1235}let ck_63: key = h_54 in
        {1236}let k_27: key = empty in
        {1237}let cs_54: cipherstate = cipherstatepack(k_27,minnonce) in
        {1238}let ss_63: symmetricstate = symmetricstatepack(cs_54,ck_63,h_54) in
        {1239}let v_394: bitstring = catch-fail(symmetricstateunpack(ss_63)) in
        {1240}let v_395: bool = (not-caught-fail(v_394) && success?(1-proj-3-tuple(v_394))) in
        {1241}let h_55: bitstring = (if v_395 then 3-proj-3-tuple(v_394) else caught-fail) in
        {1242}let ck_64: key = (if v_395 then 2-proj-3-tuple(v_394) else caught-fail) in
        {1243}let cs_55: cipherstate = (if v_395 then 1-proj-3-tuple(v_394) else caught-fail) in
        {1244}let ss_64: symmetricstate = catch-fail((if v_395 then symmetricstatepack(cs_55,ck_64,hash(h_55,prologue_3)) else fail-any)) in
        {1245}let v_396: bool = not-caught-fail(ss_64) in
        {1246}let data_2: bitstring = (if v_396 then catch-fail(getpublickey(s_15)) else caught-fail) in
        {1247}let v_397: bool = not-caught-fail(data_2) in
        {1248}let v_398: bitstring = (if v_397 then catch-fail(symmetricstateunpack(ss_64)) else caught-fail) in
        {1249}let v_399: bool = (not-caught-fail(v_398) && success?(1-proj-3-tuple(v_398))) in
        {1250}let h_56: bitstring = (if v_399 then 3-proj-3-tuple(v_398) else caught-fail) in
        {1251}let ck_65: key = (if v_399 then 2-proj-3-tuple(v_398) else caught-fail) in
        {1252}let cs_56: cipherstate = (if v_399 then 1-proj-3-tuple(v_398) else caught-fail) in
        {1253}let ss_65: symmetricstate = (if v_396 then catch-fail((if v_397 then (if v_399 then symmetricstatepack(cs_56,ck_65,hash(h_56,data_2)) else fail-any) else fail-any)) else caught-fail) in
        {1254}let v_400: bool = not-caught-fail(ss_65) in
        {1255}let data_3: bitstring = (if v_400 then catch-fail(getpublickey(m_15)) else caught-fail) in
        {1256}let v_401: bool = not-caught-fail(data_3) in
        {1257}let v_402: bitstring = (if v_401 then catch-fail(symmetricstateunpack(ss_65)) else caught-fail) in
        {1258}let v_403: bool = (not-caught-fail(v_402) && success?(1-proj-3-tuple(v_402))) in
        {1259}let h_57: bitstring = (if v_403 then 3-proj-3-tuple(v_402) else caught-fail) in
        {1260}let ck_66: key = (if v_403 then 2-proj-3-tuple(v_402) else caught-fail) in
        {1261}let cs_57: cipherstate = (if v_403 then 1-proj-3-tuple(v_402) else caught-fail) in
        {1262}let ss_66: symmetricstate = (if v_400 then catch-fail((if v_401 then (if v_403 then symmetricstatepack(cs_57,ck_66,hash(h_57,data_3)) else fail-any) else fail-any)) else caught-fail) in
        {1263}let v_404: bool = not-caught-fail(ss_66) in
        {1264}let hs_45: handshakestate = (if v_396 then (if v_400 then (if v_404 then handshakestatepack(ss_66,s_15,m_15,e_24,rs_15,rm_15,re_18,psk_15,false) else fail-any) else fail-any) else fail-any) in
        {1265}insert statestore(me_3,them_3,sid_4,statepack_a(hs_45))
    ) | (
        {1338}get statestore(=me_3,=them_3,=sid_4,statepack_a(hs_46: handshakestate)) in
        {1266}in(pub, message_a_3: bitstring);
        {1267}let v_405: bitstring = catch-fail(handshakestateunpack(hs_46)) in
        {1268}let v_406: bool = (not-caught-fail(v_405) && success?(1-proj-9-tuple(v_405))) in
        {1269}let initiator_13: bool = (if v_406 then 9-proj-9-tuple(v_405) else caught-fail) in
        {1270}let psk_16: key = (if v_406 then 8-proj-9-tuple(v_405) else caught-fail) in
        {1271}let re_19: key = (if v_406 then 7-proj-9-tuple(v_405) else caught-fail) in
        {1272}let rm_16: key = (if v_406 then 6-proj-9-tuple(v_405) else caught-fail) in
        {1273}let rs_16: key = (if v_406 then 5-proj-9-tuple(v_405) else caught-fail) in
        {1274}let e_25: keypair = (if v_406 then 4-proj-9-tuple(v_405) else caught-fail) in
        {1275}let m_16: keypair = (if v_406 then 3-proj-9-tuple(v_405) else caught-fail) in
        {1276}let s_16: keypair = (if v_406 then 2-proj-9-tuple(v_405) else caught-fail) in
        {1277}let ss_67: symmetricstate = (if v_406 then 1-proj-9-tuple(v_405) else caught-fail) in
        {1278}let v_407: bitstring = (if v_406 then catch-fail(deconcat3(message_a_3)) else caught-fail) in
        {1279}let v_408: bool = (not-caught-fail(v_407) && success?(1-proj-3-tuple(v_407))) in
        {1280}let ciphertext_24: bitstring = (if v_408 then 3-proj-3-tuple(v_407) else caught-fail) in
        {1281}let ns_12: bitstring = (if v_408 then 2-proj-3-tuple(v_407) else caught-fail) in
        {1282}let ne_15: bitstring = (if v_408 then 1-proj-3-tuple(v_407) else caught-fail) in
        {1283}let valid1_6: bool = (if v_408 then true else caught-fail) in
        {1284}let re_20: key = (if v_408 then ne_15 else caught-fail) in
        {1285}let v_409: bitstring = (if v_408 then catch-fail(symmetricstateunpack(ss_67)) else caught-fail) in
        {1286}let v_410: bool = (not-caught-fail(v_409) && success?(1-proj-3-tuple(v_409))) in
        {1287}let h_58: bitstring = (if v_410 then 3-proj-3-tuple(v_409) else caught-fail) in
        {1288}let ck_67: key = (if v_410 then 2-proj-3-tuple(v_409) else caught-fail) in
        {1289}let cs_58: cipherstate = (if v_410 then 1-proj-3-tuple(v_409) else caught-fail) in
        {1290}let ss_68: symmetricstate = (if v_408 then catch-fail((if v_410 then symmetricstatepack(cs_58,ck_67,hash(h_58,re_20)) else fail-any)) else caught-fail) in
        {1291}let v_411: bool = not-caught-fail(ss_68) in
        {1292}let v_412: bitstring = (if v_411 then catch-fail(symmetricstateunpack(ss_68)) else caught-fail) in
        {1293}let v_413: bool = (not-caught-fail(v_412) && success?(1-proj-3-tuple(v_412))) in
        {1294}let h_59: bitstring = (if v_413 then 3-proj-3-tuple(v_412) else caught-fail) in
        {1295}let ck_68: key = (if v_413 then 2-proj-3-tuple(v_412) else caught-fail) in
        {1296}let cs_59: cipherstate = (if v_413 then 1-proj-3-tuple(v_412) else caught-fail) in
        {1297}let v_414: bitstring = (if v_413 then catch-fail(cipherstateunpack(cs_59)) else caught-fail) in
        {1298}let v_415: bool = (not-caught-fail(v_414) && success?(1-proj-2-tuple(v_414))) in
        {1299}let n_24: nonce = (if v_415 then 2-proj-2-tuple(v_414) else caught-fail) in
        {1300}let k_28: key = (if v_415 then 1-proj-2-tuple(v_414) else caught-fail) in
        {1301}let d_6: aead = (if v_415 then catch-fail(decrypt(k_28,n_24,h_59,ciphertext_24)) else caught-fail) in
        {1302}let v_416: bool = not-caught-fail(d_6) in
        {1303}let v_417: bitstring = (if v_416 then catch-fail(aeadunpack(d_6)) else caught-fail) in
        {1304}let v_418: bool = (not-caught-fail(v_417) && success?(1-proj-3-tuple(v_417))) in
        {1305}let plaintext_18: bitstring = (if v_418 then 3-proj-3-tuple(v_417) else caught-fail) in
        {1306}let adi_6: bitstring = (if v_418 then 2-proj-3-tuple(v_417) else caught-fail) in
        {1307}let valid_18: bool = (if v_418 then 1-proj-3-tuple(v_417) else caught-fail) in
        {1308}let n_25: nonce = (if v_418 then increment_nonce(n_24) else caught-fail) in
        {1309}let v_419: bitstring = (if v_418 then catch-fail(cipherstateunpack(cs_59)) else caught-fail) in
        {1310}let v_420: bool = (not-caught-fail(v_419) && success?(1-proj-2-tuple(v_419))) in
        {1311}let o_12: nonce = (if v_420 then 2-proj-2-tuple(v_419) else caught-fail) in
        {1312}let k_29: key = (if v_420 then 1-proj-2-tuple(v_419) else caught-fail) in
        {1313}let csi_24: cipherstate = (if v_418 then catch-fail((if v_420 then cipherstatepack(k_29,n_25) else fail-any)) else caught-fail) in
        {1314}let v_421: bool = not-caught-fail(csi_24) in
        {1315}let v_422: bitstring = (if v_413 then catch-fail((if v_415 then (if v_416 then (if v_418 then (if v_421 then (csi_24,plaintext_18,valid_18) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1316}let v_423: bool = (not-caught-fail(v_422) && success?(1-proj-3-tuple(v_422))) in
        {1317}let valid_19: bool = (if v_423 then 3-proj-3-tuple(v_422) else caught-fail) in
        {1318}let plaintext_19: bitstring = (if v_423 then 2-proj-3-tuple(v_422) else caught-fail) in
        {1319}let csi_25: cipherstate = (if v_423 then 1-proj-3-tuple(v_422) else caught-fail) in
        {1320}let ss_69: symmetricstate = (if v_423 then symmetricstatepack(csi_25,ck_68,h_59) else caught-fail) in
        {1321}let v_424: bitstring = (if v_423 then catch-fail(symmetricstateunpack(ss_69)) else caught-fail) in
        {1322}let v_425: bool = (not-caught-fail(v_424) && success?(1-proj-3-tuple(v_424))) in
        {1323}let h_60: bitstring = (if v_425 then 3-proj-3-tuple(v_424) else caught-fail) in
        {1324}let ck_69: key = (if v_425 then 2-proj-3-tuple(v_424) else caught-fail) in
        {1325}let cs_60: cipherstate = (if v_425 then 1-proj-3-tuple(v_424) else caught-fail) in
        {1326}let ssi_15: symmetricstate = (if v_423 then catch-fail((if v_425 then symmetricstatepack(cs_60,ck_69,hash(h_60,ciphertext_24)) else fail-any)) else caught-fail) in
        {1327}let v_426: bool = not-caught-fail(ssi_15) in
        {1328}let v_427: bitstring = (if v_411 then catch-fail((if v_413 then (if v_423 then (if v_426 then (ssi_15,plaintext_19,valid_19) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1329}let v_428: bool = (not-caught-fail(v_427) && success?(1-proj-3-tuple(v_427))) in
        {1330}let valid2_6: bool = (if v_428 then 3-proj-3-tuple(v_427) else caught-fail) in
        {1331}let plaintext_20: bitstring = (if v_428 then 2-proj-3-tuple(v_427) else caught-fail) in
        {1332}let ss_70: symmetricstate = (if v_428 then 1-proj-3-tuple(v_427) else caught-fail) in
        {1333}let v_429: bool = (if v_428 then catch-fail((valid1_6 && valid2_6)) else caught-fail) in
        {1334}let hs_47: handshakestate = (if v_429 then handshakestatepack(ss_70,s_16,m_16,e_25,rs_16,rm_16,re_20,psk_16,initiator_13) else caught-fail) in
        {1335}let (hs_48: handshakestate,plaintext_a_1: bitstring,valid_20: bool) = (if v_406 then (if v_408 then (if v_411 then (if v_428 then (if undo-catch-fail(v_429) then (hs_47,plaintext_20,true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1336}event RecvMsg(me_3,them_3,stagepack_a(sid_4),plaintext_a_1);
        {1337}insert statestore(me_3,them_3,sid_4,statepack_b(hs_48))
    ) | (
        {1493}get statestore(=me_3,=them_3,=sid_4,statepack_b(hs_49: handshakestate)) in
        {1339}let payload_6: bitstring = msg_b(me_3,them_3,sid_4) in
        {1340}let v_430: bitstring = catch-fail(handshakestateunpack(hs_49)) in
        {1341}let v_431: bool = (not-caught-fail(v_430) && success?(1-proj-9-tuple(v_430))) in
        {1342}let initiator_14: bool = (if v_431 then 9-proj-9-tuple(v_430) else caught-fail) in
        {1343}let psk_17: key = (if v_431 then 8-proj-9-tuple(v_430) else caught-fail) in
        {1344}let re_21: key = (if v_431 then 7-proj-9-tuple(v_430) else caught-fail) in
        {1345}let rm_17: key = (if v_431 then 6-proj-9-tuple(v_430) else caught-fail) in
        {1346}let rs_17: key = (if v_431 then 5-proj-9-tuple(v_430) else caught-fail) in
        {1347}let e_26: keypair = (if v_431 then 4-proj-9-tuple(v_430) else caught-fail) in
        {1348}let m_17: keypair = (if v_431 then 3-proj-9-tuple(v_430) else caught-fail) in
        {1349}let s_17: keypair = (if v_431 then 2-proj-9-tuple(v_430) else caught-fail) in
        {1350}let ss_71: symmetricstate = (if v_431 then 1-proj-9-tuple(v_430) else caught-fail) in
        {1351}let v_432: bitstring = (if v_431 then catch-fail((empty,empty,empty)) else caught-fail) in
        {1352}let v_433: bool = (not-caught-fail(v_432) && success?(1-proj-3-tuple(v_432))) in
        {1353}let ciphertext_25: bitstring = (if v_433 then 3-proj-3-tuple(v_432) else caught-fail) in
        {1354}let ns_13: bitstring = (if v_433 then 2-proj-3-tuple(v_432) else caught-fail) in
        {1355}let ne_16: bitstring = (if v_433 then 1-proj-3-tuple(v_432) else caught-fail) in
        {1356}let basis_11: key = (if v_433 then key_e(me_3,them_3,sid_4) else caught-fail) in
        {1357}let public_key_11: key = (if v_433 then catch-fail(dhexp(basis_11,validkey(g))) else caught-fail) in
        {1358}let v_434: bool = not-caught-fail(public_key_11) in
        {1359}let e_27: keypair = (if v_433 then catch-fail((if v_434 then keypairpack(validkey(public_key_11),basis_11) else fail-any)) else caught-fail) in
        {1360}let v_435: bool = not-caught-fail(e_27) in
        {1361}let ne_17: bitstring = (if v_435 then catch-fail(getpublickey(e_27)) else caught-fail) in
        {1362}let v_436: bool = not-caught-fail(ne_17) in
        {1363}let v_437: bitstring = (if v_436 then catch-fail(symmetricstateunpack(ss_71)) else caught-fail) in
        {1364}let v_438: bool = (not-caught-fail(v_437) && success?(1-proj-3-tuple(v_437))) in
        {1365}let h_61: bitstring = (if v_438 then 3-proj-3-tuple(v_437) else caught-fail) in
        {1366}let ck_70: key = (if v_438 then 2-proj-3-tuple(v_437) else caught-fail) in
        {1367}let cs_61: cipherstate = (if v_438 then 1-proj-3-tuple(v_437) else caught-fail) in
        {1368}let ss_72: symmetricstate = (if v_436 then catch-fail((if v_438 then symmetricstatepack(cs_61,ck_70,hash(h_61,ne_17)) else fail-any)) else caught-fail) in
        {1369}let v_439: bool = not-caught-fail(ss_72) in
        {1370}let v_440: bitstring = (if v_439 then catch-fail(keypairunpack(e_27)) else caught-fail) in
        {1371}let v_441: bool = (not-caught-fail(v_440) && success?(1-proj-2-tuple(v_440))) in
        {1372}let my_private_key_9: key = (if v_441 then 2-proj-2-tuple(v_440) else caught-fail) in
        {1373}let my_public_key_9: key = (if v_441 then 1-proj-2-tuple(v_440) else caught-fail) in
        {1374}let input_key_material_12: key = (if v_439 then catch-fail((if v_441 then dhexp(my_private_key_9,re_21) else fail-any)) else caught-fail) in
        {1375}let v_442: bool = not-caught-fail(input_key_material_12) in
        {1376}let v_443: bitstring = (if v_442 then catch-fail(symmetricstateunpack(ss_72)) else caught-fail) in
        {1377}let v_444: bool = (not-caught-fail(v_443) && success?(1-proj-3-tuple(v_443))) in
        {1378}let h_62: bitstring = (if v_444 then 3-proj-3-tuple(v_443) else caught-fail) in
        {1379}let ck_71: key = (if v_444 then 2-proj-3-tuple(v_443) else caught-fail) in
        {1380}let cs_62: cipherstate = (if v_444 then 1-proj-3-tuple(v_443) else caught-fail) in
        {1381}let output1_12: key = (if v_444 then hmac_hash1(ck_71,input_key_material_12) else caught-fail) in
        {1382}let output2_12: key = (if v_444 then hmac_hash2(ck_71,input_key_material_12) else caught-fail) in
        {1383}let output3_12: key = (if v_444 then hmac_hash3(ck_71,input_key_material_12) else caught-fail) in
        {1384}let v_445: bitstring = (if v_444 then catch-fail((output1_12,output2_12,output3_12)) else caught-fail) in
        {1385}let v_446: bool = (not-caught-fail(v_445) && success?(1-proj-3-tuple(v_445))) in
        {1386}let output_9: key = (if v_446 then 3-proj-3-tuple(v_445) else caught-fail) in
        {1387}let temp_k_9: key = (if v_446 then 2-proj-3-tuple(v_445) else caught-fail) in
        {1388}let ck_72: key = (if v_446 then 1-proj-3-tuple(v_445) else caught-fail) in
        {1389}let ss_73: symmetricstate = (if v_439 then catch-fail((if v_442 then (if v_444 then (if v_446 then symmetricstatepack(cipherstatepack(temp_k_9,minnonce),ck_72,h_62) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1390}let v_447: bool = not-caught-fail(ss_73) in
        {1391}let v_448: bitstring = (if v_447 then catch-fail(keypairunpack(s_17)) else caught-fail) in
        {1392}let v_449: bool = (not-caught-fail(v_448) && success?(1-proj-2-tuple(v_448))) in
        {1393}let my_private_key_10: key = (if v_449 then 2-proj-2-tuple(v_448) else caught-fail) in
        {1394}let my_public_key_10: key = (if v_449 then 1-proj-2-tuple(v_448) else caught-fail) in
        {1395}let input_key_material_13: key = (if v_447 then catch-fail((if v_449 then dhexp(my_private_key_10,re_21) else fail-any)) else caught-fail) in
        {1396}let v_450: bool = not-caught-fail(input_key_material_13) in
        {1397}let v_451: bitstring = (if v_450 then catch-fail(symmetricstateunpack(ss_73)) else caught-fail) in
        {1398}let v_452: bool = (not-caught-fail(v_451) && success?(1-proj-3-tuple(v_451))) in
        {1399}let h_63: bitstring = (if v_452 then 3-proj-3-tuple(v_451) else caught-fail) in
        {1400}let ck_73: key = (if v_452 then 2-proj-3-tuple(v_451) else caught-fail) in
        {1401}let cs_63: cipherstate = (if v_452 then 1-proj-3-tuple(v_451) else caught-fail) in
        {1402}let output1_13: key = (if v_452 then hmac_hash1(ck_73,input_key_material_13) else caught-fail) in
        {1403}let output2_13: key = (if v_452 then hmac_hash2(ck_73,input_key_material_13) else caught-fail) in
        {1404}let output3_13: key = (if v_452 then hmac_hash3(ck_73,input_key_material_13) else caught-fail) in
        {1405}let v_453: bitstring = (if v_452 then catch-fail((output1_13,output2_13,output3_13)) else caught-fail) in
        {1406}let v_454: bool = (not-caught-fail(v_453) && success?(1-proj-3-tuple(v_453))) in
        {1407}let output_10: key = (if v_454 then 3-proj-3-tuple(v_453) else caught-fail) in
        {1408}let temp_k_10: key = (if v_454 then 2-proj-3-tuple(v_453) else caught-fail) in
        {1409}let ck_74: key = (if v_454 then 1-proj-3-tuple(v_453) else caught-fail) in
        {1410}let ss_74: symmetricstate = (if v_447 then catch-fail((if v_450 then (if v_452 then (if v_454 then symmetricstatepack(cipherstatepack(temp_k_10,minnonce),ck_74,h_63) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1411}let v_455: bool = not-caught-fail(ss_74) in
        {1412}let v_456: bitstring = (if v_455 then catch-fail(keypairunpack(m_17)) else caught-fail) in
        {1413}let v_457: bool = (not-caught-fail(v_456) && success?(1-proj-2-tuple(v_456))) in
        {1414}let my_private_key_11: key = (if v_457 then 2-proj-2-tuple(v_456) else caught-fail) in
        {1415}let my_public_key_11: key = (if v_457 then 1-proj-2-tuple(v_456) else caught-fail) in
        {1416}let input_key_material_14: key = (if v_455 then catch-fail((if v_457 then dhexp(my_private_key_11,re_21) else fail-any)) else caught-fail) in
        {1417}let v_458: bool = not-caught-fail(input_key_material_14) in
        {1418}let v_459: bitstring = (if v_458 then catch-fail(symmetricstateunpack(ss_74)) else caught-fail) in
        {1419}let v_460: bool = (not-caught-fail(v_459) && success?(1-proj-3-tuple(v_459))) in
        {1420}let h_64: bitstring = (if v_460 then 3-proj-3-tuple(v_459) else caught-fail) in
        {1421}let ck_75: key = (if v_460 then 2-proj-3-tuple(v_459) else caught-fail) in
        {1422}let cs_64: cipherstate = (if v_460 then 1-proj-3-tuple(v_459) else caught-fail) in
        {1423}let output1_14: key = (if v_460 then hmac_hash1(ck_75,input_key_material_14) else caught-fail) in
        {1424}let output2_14: key = (if v_460 then hmac_hash2(ck_75,input_key_material_14) else caught-fail) in
        {1425}let output3_14: key = (if v_460 then hmac_hash3(ck_75,input_key_material_14) else caught-fail) in
        {1426}let v_461: bitstring = (if v_460 then catch-fail((output1_14,output2_14,output3_14)) else caught-fail) in
        {1427}let v_462: bool = (not-caught-fail(v_461) && success?(1-proj-3-tuple(v_461))) in
        {1428}let output_11: key = (if v_462 then 3-proj-3-tuple(v_461) else caught-fail) in
        {1429}let temp_k_11: key = (if v_462 then 2-proj-3-tuple(v_461) else caught-fail) in
        {1430}let ck_76: key = (if v_462 then 1-proj-3-tuple(v_461) else caught-fail) in
        {1431}let ss_75: symmetricstate = (if v_455 then catch-fail((if v_458 then (if v_460 then (if v_462 then symmetricstatepack(cipherstatepack(temp_k_11,minnonce),ck_76,h_64) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1432}let v_463: bool = not-caught-fail(ss_75) in
        {1433}let v_464: bitstring = (if v_463 then catch-fail(symmetricstateunpack(ss_75)) else caught-fail) in
        {1434}let v_465: bool = (not-caught-fail(v_464) && success?(1-proj-3-tuple(v_464))) in
        {1435}let h_65: bitstring = (if v_465 then 3-proj-3-tuple(v_464) else caught-fail) in
        {1436}let ck_77: key = (if v_465 then 2-proj-3-tuple(v_464) else caught-fail) in
        {1437}let cs_65: cipherstate = (if v_465 then 1-proj-3-tuple(v_464) else caught-fail) in
        {1438}let v_466: bitstring = (if v_465 then catch-fail(cipherstateunpack(cs_65)) else caught-fail) in
        {1439}let v_467: bool = (not-caught-fail(v_466) && success?(1-proj-2-tuple(v_466))) in
        {1440}let n_26: nonce = (if v_467 then 2-proj-2-tuple(v_466) else caught-fail) in
        {1441}let k_30: key = (if v_467 then 1-proj-2-tuple(v_466) else caught-fail) in
        {1442}let e_28: bitstring = (if v_467 then encrypt(k_30,n_26,h_65,payload_6) else caught-fail) in
        {1443}let n_27: nonce = (if v_467 then increment_nonce(n_26) else caught-fail) in
        {1444}let v_468: bitstring = (if v_467 then catch-fail(cipherstateunpack(cs_65)) else caught-fail) in
        {1445}let v_469: bool = (not-caught-fail(v_468) && success?(1-proj-2-tuple(v_468))) in
        {1446}let o_13: nonce = (if v_469 then 2-proj-2-tuple(v_468) else caught-fail) in
        {1447}let k_31: key = (if v_469 then 1-proj-2-tuple(v_468) else caught-fail) in
        {1448}let csi_26: cipherstate = (if v_467 then catch-fail((if v_469 then cipherstatepack(k_31,n_27) else fail-any)) else caught-fail) in
        {1449}let v_470: bool = not-caught-fail(csi_26) in
        {1450}let v_471: bitstring = (if v_465 then catch-fail((if v_467 then (if v_470 then (csi_26,e_28) else fail-any) else fail-any)) else caught-fail) in
        {1451}let v_472: bool = (not-caught-fail(v_471) && success?(1-proj-2-tuple(v_471))) in
        {1452}let ciphertext_26: bitstring = (if v_472 then 2-proj-2-tuple(v_471) else caught-fail) in
        {1453}let csi_27: cipherstate = (if v_472 then 1-proj-2-tuple(v_471) else caught-fail) in
        {1454}let ss_76: symmetricstate = (if v_472 then symmetricstatepack(csi_27,ck_77,h_65) else caught-fail) in
        {1455}let v_473: bitstring = (if v_472 then catch-fail(symmetricstateunpack(ss_76)) else caught-fail) in
        {1456}let v_474: bool = (not-caught-fail(v_473) && success?(1-proj-3-tuple(v_473))) in
        {1457}let h_66: bitstring = (if v_474 then 3-proj-3-tuple(v_473) else caught-fail) in
        {1458}let ck_78: key = (if v_474 then 2-proj-3-tuple(v_473) else caught-fail) in
        {1459}let cs_66: cipherstate = (if v_474 then 1-proj-3-tuple(v_473) else caught-fail) in
        {1460}let ssi_16: symmetricstate = (if v_472 then catch-fail((if v_474 then symmetricstatepack(cs_66,ck_78,hash(h_66,ciphertext_26)) else fail-any)) else caught-fail) in
        {1461}let v_475: bool = not-caught-fail(ssi_16) in
        {1462}let v_476: bitstring = (if v_463 then catch-fail((if v_465 then (if v_472 then (if v_475 then (ssi_16,ciphertext_26) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1463}let v_477: bool = (not-caught-fail(v_476) && success?(1-proj-2-tuple(v_476))) in
        {1464}let ciphertext_27: bitstring = (if v_477 then 2-proj-2-tuple(v_476) else caught-fail) in
        {1465}let ss_77: symmetricstate = (if v_477 then 1-proj-2-tuple(v_476) else caught-fail) in
        {1466}let hs_50: handshakestate = (if v_477 then handshakestatepack(ss_77,s_17,m_17,e_27,rs_17,rm_17,re_21,psk_17,initiator_14) else caught-fail) in
        {1467}let message_buffer_6: bitstring = (if v_477 then concat3(ne_17,ns_13,ciphertext_27) else caught-fail) in
        {1468}let v_478: bitstring = (if v_477 then catch-fail(symmetricstateunpack(ss_77)) else caught-fail) in
        {1469}let v_479: bool = (not-caught-fail(v_478) && success?(1-proj-3-tuple(v_478))) in
        {1470}let h_67: bitstring = (if v_479 then 3-proj-3-tuple(v_478) else caught-fail) in
        {1471}let ck_79: key = (if v_479 then 2-proj-3-tuple(v_478) else caught-fail) in
        {1472}let cs_67: cipherstate = (if v_479 then 1-proj-3-tuple(v_478) else caught-fail) in
        {1473}let input_key_material_15: key = (if v_479 then zero else caught-fail) in
        {1474}let output1_15: key = (if v_479 then hmac_hash1(ck_79,input_key_material_15) else caught-fail) in
        {1475}let output2_15: key = (if v_479 then hmac_hash2(ck_79,input_key_material_15) else caught-fail) in
        {1476}let output3_15: key = (if v_479 then hmac_hash3(ck_79,input_key_material_15) else caught-fail) in
        {1477}let v_480: bitstring = (if v_479 then catch-fail((output1_15,output2_15,output3_15)) else caught-fail) in
        {1478}let v_481: bool = (not-caught-fail(v_480) && success?(1-proj-3-tuple(v_480))) in
        {1479}let temp_k3_3: key = (if v_481 then 3-proj-3-tuple(v_480) else caught-fail) in
        {1480}let temp_k2_3: key = (if v_481 then 2-proj-3-tuple(v_480) else caught-fail) in
        {1481}let temp_k1_3: key = (if v_481 then 1-proj-3-tuple(v_480) else caught-fail) in
        {1482}let cs1_15: cipherstate = (if v_481 then cipherstatepack(temp_k1_3,minnonce) else caught-fail) in
        {1483}let cs2_15: cipherstate = (if v_481 then cipherstatepack(temp_k2_3,minnonce) else caught-fail) in
        {1484}let v_482: bitstring = (if v_477 then catch-fail((if v_479 then (if v_481 then (ss_77,cs1_15,cs2_15) else fail-any) else fail-any)) else caught-fail) in
        {1485}let v_483: bool = (not-caught-fail(v_482) && success?(1-proj-3-tuple(v_482))) in
        {1486}let cs2_16: cipherstate = (if v_483 then 3-proj-3-tuple(v_482) else caught-fail) in
        {1487}let cs1_16: cipherstate = (if v_483 then 2-proj-3-tuple(v_482) else caught-fail) in
        {1488}let ssi_17: symmetricstate = (if v_483 then 1-proj-3-tuple(v_482) else caught-fail) in
        {1489}let (hs_51: handshakestate,message_b_3: bitstring,cs1_17: cipherstate,cs2_17: cipherstate) = (if v_431 then (if v_433 then (if v_435 then (if v_436 then (if v_439 then (if v_447 then (if v_455 then (if v_463 then (if v_477 then (if v_483 then (hs_50,message_buffer_6,cs1_16,cs2_16) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1490}event SendMsg(me_3,them_3,stagepack_b(sid_4),msg_b(me_3,them_3,sid_4));
        {1491}insert statestore(me_3,them_3,sid_4,statepack_c(hs_51,cs1_17,cs2_17));
        {1492}out(pub, message_b_3)
    ) | (
        {1494}!
        {1560}get statestore(=me_3,=them_3,=sid_4,statepack_c(hs_52: handshakestate,cs1_18: cipherstate,cs2_18: cipherstate)) in
        {1495}let hs_53: handshakestate = handshakestatesetcs(hs_52,cs1_18) in
        {1496}in(pub, message_c_3: bitstring);
        {1497}let v_484: bitstring = catch-fail(handshakestateunpack(hs_53)) in
        {1498}let v_485: bool = (not-caught-fail(v_484) && success?(1-proj-9-tuple(v_484))) in
        {1499}let initiator_15: bool = (if v_485 then 9-proj-9-tuple(v_484) else caught-fail) in
        {1500}let psk_18: key = (if v_485 then 8-proj-9-tuple(v_484) else caught-fail) in
        {1501}let re_22: key = (if v_485 then 7-proj-9-tuple(v_484) else caught-fail) in
        {1502}let rm_18: key = (if v_485 then 6-proj-9-tuple(v_484) else caught-fail) in
        {1503}let rs_18: key = (if v_485 then 5-proj-9-tuple(v_484) else caught-fail) in
        {1504}let e_29: keypair = (if v_485 then 4-proj-9-tuple(v_484) else caught-fail) in
        {1505}let m_18: keypair = (if v_485 then 3-proj-9-tuple(v_484) else caught-fail) in
        {1506}let s_18: keypair = (if v_485 then 2-proj-9-tuple(v_484) else caught-fail) in
        {1507}let ss_78: symmetricstate = (if v_485 then 1-proj-9-tuple(v_484) else caught-fail) in
        {1508}let v_486: bitstring = (if v_485 then catch-fail(deconcat3(message_c_3)) else caught-fail) in
        {1509}let v_487: bool = (not-caught-fail(v_486) && success?(1-proj-3-tuple(v_486))) in
        {1510}let ciphertext_28: bitstring = (if v_487 then 3-proj-3-tuple(v_486) else caught-fail) in
        {1511}let ns_14: bitstring = (if v_487 then 2-proj-3-tuple(v_486) else caught-fail) in
        {1512}let ne_18: bitstring = (if v_487 then 1-proj-3-tuple(v_486) else caught-fail) in
        {1513}let valid1_7: bool = (if v_487 then true else caught-fail) in
        {1514}let v_488: bitstring = (if v_487 then catch-fail(symmetricstateunpack(ss_78)) else caught-fail) in
        {1515}let v_489: bool = (not-caught-fail(v_488) && success?(1-proj-3-tuple(v_488))) in
        {1516}let h_68: bitstring = (if v_489 then 3-proj-3-tuple(v_488) else caught-fail) in
        {1517}let ck_80: key = (if v_489 then 2-proj-3-tuple(v_488) else caught-fail) in
        {1518}let cs_68: cipherstate = (if v_489 then 1-proj-3-tuple(v_488) else caught-fail) in
        {1519}let v_490: bitstring = (if v_489 then catch-fail(cipherstateunpack(cs_68)) else caught-fail) in
        {1520}let v_491: bool = (not-caught-fail(v_490) && success?(1-proj-2-tuple(v_490))) in
        {1521}let n_28: nonce = (if v_491 then 2-proj-2-tuple(v_490) else caught-fail) in
        {1522}let k_32: key = (if v_491 then 1-proj-2-tuple(v_490) else caught-fail) in
        {1523}let d_7: aead = (if v_491 then catch-fail(decrypt(k_32,n_28,h_68,ciphertext_28)) else caught-fail) in
        {1524}let v_492: bool = not-caught-fail(d_7) in
        {1525}let v_493: bitstring = (if v_492 then catch-fail(aeadunpack(d_7)) else caught-fail) in
        {1526}let v_494: bool = (not-caught-fail(v_493) && success?(1-proj-3-tuple(v_493))) in
        {1527}let plaintext_21: bitstring = (if v_494 then 3-proj-3-tuple(v_493) else caught-fail) in
        {1528}let adi_7: bitstring = (if v_494 then 2-proj-3-tuple(v_493) else caught-fail) in
        {1529}let valid_21: bool = (if v_494 then 1-proj-3-tuple(v_493) else caught-fail) in
        {1530}let n_29: nonce = (if v_494 then increment_nonce(n_28) else caught-fail) in
        {1531}let v_495: bitstring = (if v_494 then catch-fail(cipherstateunpack(cs_68)) else caught-fail) in
        {1532}let v_496: bool = (not-caught-fail(v_495) && success?(1-proj-2-tuple(v_495))) in
        {1533}let o_14: nonce = (if v_496 then 2-proj-2-tuple(v_495) else caught-fail) in
        {1534}let k_33: key = (if v_496 then 1-proj-2-tuple(v_495) else caught-fail) in
        {1535}let csi_28: cipherstate = (if v_494 then catch-fail((if v_496 then cipherstatepack(k_33,n_29) else fail-any)) else caught-fail) in
        {1536}let v_497: bool = not-caught-fail(csi_28) in
        {1537}let v_498: bitstring = (if v_489 then catch-fail((if v_491 then (if v_492 then (if v_494 then (if v_497 then (csi_28,plaintext_21,valid_21) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1538}let v_499: bool = (not-caught-fail(v_498) && success?(1-proj-3-tuple(v_498))) in
        {1539}let valid_22: bool = (if v_499 then 3-proj-3-tuple(v_498) else caught-fail) in
        {1540}let plaintext_22: bitstring = (if v_499 then 2-proj-3-tuple(v_498) else caught-fail) in
        {1541}let csi_29: cipherstate = (if v_499 then 1-proj-3-tuple(v_498) else caught-fail) in
        {1542}let ss_79: symmetricstate = (if v_499 then symmetricstatepack(csi_29,ck_80,h_68) else caught-fail) in
        {1543}let v_500: bitstring = (if v_499 then catch-fail(symmetricstateunpack(ss_79)) else caught-fail) in
        {1544}let v_501: bool = (not-caught-fail(v_500) && success?(1-proj-3-tuple(v_500))) in
        {1545}let h_69: bitstring = (if v_501 then 3-proj-3-tuple(v_500) else caught-fail) in
        {1546}let ck_81: key = (if v_501 then 2-proj-3-tuple(v_500) else caught-fail) in
        {1547}let cs_69: cipherstate = (if v_501 then 1-proj-3-tuple(v_500) else caught-fail) in
        {1548}let ssi_18: symmetricstate = (if v_499 then catch-fail((if v_501 then symmetricstatepack(cs_69,ck_81,hash(h_69,ciphertext_28)) else fail-any)) else caught-fail) in
        {1549}let v_502: bool = not-caught-fail(ssi_18) in
        {1550}let v_503: bitstring = (if v_487 then catch-fail((if v_489 then (if v_499 then (if v_502 then (ssi_18,plaintext_22,valid_22) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1551}let v_504: bool = (not-caught-fail(v_503) && success?(1-proj-3-tuple(v_503))) in
        {1552}let valid2_7: bool = (if v_504 then 3-proj-3-tuple(v_503) else caught-fail) in
        {1553}let plaintext_23: bitstring = (if v_504 then 2-proj-3-tuple(v_503) else caught-fail) in
        {1554}let ss_80: symmetricstate = (if v_504 then 1-proj-3-tuple(v_503) else caught-fail) in
        {1555}let v_505: bool = (if v_504 then catch-fail((valid1_7 && valid2_7)) else caught-fail) in
        {1556}let hs_54: handshakestate = (if v_505 then handshakestatepack(ss_80,s_18,m_18,e_29,rs_18,rm_18,re_22,psk_18,initiator_15) else caught-fail) in
        {1557}let (hs_55: handshakestate,plaintext_c_1: bitstring,valid_23: bool) = (if v_485 then (if v_487 then (if v_504 then (if undo-catch-fail(v_505) then (hs_54,plaintext_23,true) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1558}event RecvMsg(me_3,them_3,stagepack_c(sid_4),plaintext_c_1);
        {1559}insert statestore(me_3,them_3,sid_4,statepack_d(hs_55,handshakestategetcs(hs_55),cs2_18))
    ) | (
        {1561}!
        {1618}get statestore(=me_3,=them_3,=sid_4,statepack_d(hs_56: handshakestate,cs1_19: cipherstate,cs2_19: cipherstate)) in
        {1562}let hs_57: handshakestate = handshakestatesetcs(hs_56,cs2_19) in
        {1563}let payload_7: bitstring = msg_d(me_3,them_3,sid_4) in
        {1564}let v_506: bitstring = catch-fail(handshakestateunpack(hs_57)) in
        {1565}let v_507: bool = (not-caught-fail(v_506) && success?(1-proj-9-tuple(v_506))) in
        {1566}let initiator_16: bool = (if v_507 then 9-proj-9-tuple(v_506) else caught-fail) in
        {1567}let psk_19: key = (if v_507 then 8-proj-9-tuple(v_506) else caught-fail) in
        {1568}let re_23: key = (if v_507 then 7-proj-9-tuple(v_506) else caught-fail) in
        {1569}let rm_19: key = (if v_507 then 6-proj-9-tuple(v_506) else caught-fail) in
        {1570}let rs_19: key = (if v_507 then 5-proj-9-tuple(v_506) else caught-fail) in
        {1571}let e_30: keypair = (if v_507 then 4-proj-9-tuple(v_506) else caught-fail) in
        {1572}let m_19: keypair = (if v_507 then 3-proj-9-tuple(v_506) else caught-fail) in
        {1573}let s_19: keypair = (if v_507 then 2-proj-9-tuple(v_506) else caught-fail) in
        {1574}let ss_81: symmetricstate = (if v_507 then 1-proj-9-tuple(v_506) else caught-fail) in
        {1575}let v_508: bitstring = (if v_507 then catch-fail((empty,empty,empty)) else caught-fail) in
        {1576}let v_509: bool = (not-caught-fail(v_508) && success?(1-proj-3-tuple(v_508))) in
        {1577}let ciphertext_29: bitstring = (if v_509 then 3-proj-3-tuple(v_508) else caught-fail) in
        {1578}let ns_15: bitstring = (if v_509 then 2-proj-3-tuple(v_508) else caught-fail) in
        {1579}let ne_19: bitstring = (if v_509 then 1-proj-3-tuple(v_508) else caught-fail) in
        {1580}let v_510: bitstring = (if v_509 then catch-fail(symmetricstateunpack(ss_81)) else caught-fail) in
        {1581}let v_511: bool = (not-caught-fail(v_510) && success?(1-proj-3-tuple(v_510))) in
        {1582}let h_70: bitstring = (if v_511 then 3-proj-3-tuple(v_510) else caught-fail) in
        {1583}let ck_82: key = (if v_511 then 2-proj-3-tuple(v_510) else caught-fail) in
        {1584}let cs_70: cipherstate = (if v_511 then 1-proj-3-tuple(v_510) else caught-fail) in
        {1585}let v_512: bitstring = (if v_511 then catch-fail(cipherstateunpack(cs_70)) else caught-fail) in
        {1586}let v_513: bool = (not-caught-fail(v_512) && success?(1-proj-2-tuple(v_512))) in
        {1587}let n_30: nonce = (if v_513 then 2-proj-2-tuple(v_512) else caught-fail) in
        {1588}let k_34: key = (if v_513 then 1-proj-2-tuple(v_512) else caught-fail) in
        {1589}let e_31: bitstring = (if v_513 then encrypt(k_34,n_30,h_70,payload_7) else caught-fail) in
        {1590}let n_31: nonce = (if v_513 then increment_nonce(n_30) else caught-fail) in
        {1591}let v_514: bitstring = (if v_513 then catch-fail(cipherstateunpack(cs_70)) else caught-fail) in
        {1592}let v_515: bool = (not-caught-fail(v_514) && success?(1-proj-2-tuple(v_514))) in
        {1593}let o_15: nonce = (if v_515 then 2-proj-2-tuple(v_514) else caught-fail) in
        {1594}let k_35: key = (if v_515 then 1-proj-2-tuple(v_514) else caught-fail) in
        {1595}let csi_30: cipherstate = (if v_513 then catch-fail((if v_515 then cipherstatepack(k_35,n_31) else fail-any)) else caught-fail) in
        {1596}let v_516: bool = not-caught-fail(csi_30) in
        {1597}let v_517: bitstring = (if v_511 then catch-fail((if v_513 then (if v_516 then (csi_30,e_31) else fail-any) else fail-any)) else caught-fail) in
        {1598}let v_518: bool = (not-caught-fail(v_517) && success?(1-proj-2-tuple(v_517))) in
        {1599}let ciphertext_30: bitstring = (if v_518 then 2-proj-2-tuple(v_517) else caught-fail) in
        {1600}let csi_31: cipherstate = (if v_518 then 1-proj-2-tuple(v_517) else caught-fail) in
        {1601}let ss_82: symmetricstate = (if v_518 then symmetricstatepack(csi_31,ck_82,h_70) else caught-fail) in
        {1602}let v_519: bitstring = (if v_518 then catch-fail(symmetricstateunpack(ss_82)) else caught-fail) in
        {1603}let v_520: bool = (not-caught-fail(v_519) && success?(1-proj-3-tuple(v_519))) in
        {1604}let h_71: bitstring = (if v_520 then 3-proj-3-tuple(v_519) else caught-fail) in
        {1605}let ck_83: key = (if v_520 then 2-proj-3-tuple(v_519) else caught-fail) in
        {1606}let cs_71: cipherstate = (if v_520 then 1-proj-3-tuple(v_519) else caught-fail) in
        {1607}let ssi_19: symmetricstate = (if v_518 then catch-fail((if v_520 then symmetricstatepack(cs_71,ck_83,hash(h_71,ciphertext_30)) else fail-any)) else caught-fail) in
        {1608}let v_521: bool = not-caught-fail(ssi_19) in
        {1609}let v_522: bitstring = (if v_509 then catch-fail((if v_511 then (if v_518 then (if v_521 then (ssi_19,ciphertext_30) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1610}let v_523: bool = (not-caught-fail(v_522) && success?(1-proj-2-tuple(v_522))) in
        {1611}let ciphertext_31: bitstring = (if v_523 then 2-proj-2-tuple(v_522) else caught-fail) in
        {1612}let ss_83: symmetricstate = (if v_523 then 1-proj-2-tuple(v_522) else caught-fail) in
        {1613}let hs_58: handshakestate = (if v_523 then handshakestatepack(ss_83,s_19,m_19,e_30,rs_19,rm_19,re_23,psk_19,initiator_16) else caught-fail) in
        {1614}let message_buffer_7: bitstring = (if v_523 then concat3(ne_19,ns_15,ciphertext_31) else caught-fail) in
        {1615}let (hs_59: handshakestate,message_d_3: bitstring) = (if v_507 then (if v_509 then (if v_523 then (hs_58,message_buffer_7) else fail-any) else fail-any) else fail-any) in
        {1616}event SendMsg(me_3,them_3,stagepack_d(sid_4),msg_d(me_3,them_3,sid_4));
        {1617}out(pub, message_d_3)
    ) | (
        {1619}event LeakS(phase0,me_3);
        {1620}event LeakM(phase0,me_3);
        {1621}out(pub, (key_s(me_3),key_m(me_3)))
    ) | (
        {1622}phase 1;
        {1623}event LeakS(phase1,me_3);
        {1624}event LeakM(phase1,me_3);
        {1625}out(pub, (key_s(me_3),key_m(me_3)))
    )
)

--  Process 1 (that is, process 0, with let moved downwards):
{1}out(pub, (key_s(charlie),key_m(charlie)));
{2}!
{3}new sid: sessionid;
(
    {6}let sid_1: sessionid = sid in
    {5}let them: principal = bob in
    {4}let me: principal = alice in
    (
        {10}let basis: key = key_s(them) in
        {11}let public_key: key = catch-fail(dhexp(basis,validkey(g))) in
        {12}let v: bool = not-caught-fail(public_key) in
        {13}let rs: key = getpublickey((if v then keypairpack(validkey(public_key),basis) else fail-any)) in
        {14}let basis_1: key = key_m(them) in
        {15}let public_key_1: key = catch-fail(dhexp(basis_1,validkey(g))) in
        {16}let v_1: bool = not-caught-fail(public_key_1) in
        {17}let rm: key = getpublickey((if v_1 then keypairpack(validkey(public_key_1),basis_1) else fail-any)) in
        {24}let k: key = empty in
        {25}let cs: cipherstate = cipherstatepack(k,minnonce) in
        {21}let protocol_name: bitstring = somename in
        {22}let h: bitstring = hash(protocol_name,empty) in
        {23}let ck: key = h in
        {26}let ss: symmetricstate = symmetricstatepack(cs,ck,h) in
        {27}let v_2: bitstring = catch-fail(symmetricstateunpack(ss)) in
        {28}let v_3: bool = (not-caught-fail(v_2) && success?(1-proj-3-tuple(v_2))) in
        {29}let h_1: bitstring = (if v_3 then 3-proj-3-tuple(v_2) else caught-fail) in
        {30}let ck_1: key = (if v_3 then 2-proj-3-tuple(v_2) else caught-fail) in
        {31}let cs_1: cipherstate = (if v_3 then 1-proj-3-tuple(v_2) else caught-fail) in
        {19}let prologue: bitstring = empty in
        {32}let ss_1: symmetricstate = catch-fail((if v_3 then symmetricstatepack(cs_1,ck_1,hash(h_1,prologue)) else fail-any)) in
        {33}let v_4: bool = not-caught-fail(ss_1) in
        {34}let v_5: bitstring = (if v_4 then catch-fail(symmetricstateunpack(ss_1)) else caught-fail) in
        {35}let v_6: bool = (not-caught-fail(v_5) && success?(1-proj-3-tuple(v_5))) in
        {36}let h_2: bitstring = (if v_6 then 3-proj-3-tuple(v_5) else caught-fail) in
        {37}let ck_2: key = (if v_6 then 2-proj-3-tuple(v_5) else caught-fail) in
        {38}let cs_2: cipherstate = (if v_6 then 1-proj-3-tuple(v_5) else caught-fail) in
        {39}let ss_2: symmetricstate = (if v_4 then catch-fail((if v_6 then symmetricstatepack(cs_2,ck_2,hash(h_2,rs)) else fail-any)) else caught-fail) in
        {40}let v_7: bool = not-caught-fail(ss_2) in
        {41}let v_8: bitstring = (if v_7 then catch-fail(symmetricstateunpack(ss_2)) else caught-fail) in
        {42}let v_9: bool = (not-caught-fail(v_8) && success?(1-proj-3-tuple(v_8))) in
        {43}let h_3: bitstring = (if v_9 then 3-proj-3-tuple(v_8) else caught-fail) in
        {44}let ck_3: key = (if v_9 then 2-proj-3-tuple(v_8) else caught-fail) in
        {45}let cs_3: cipherstate = (if v_9 then 1-proj-3-tuple(v_8) else caught-fail) in
        {46}let ss_3: symmetricstate = (if v_7 then catch-fail((if v_9 then symmetricstatepack(cs_3,ck_3,hash(h_3,rm)) else fail-any)) else caught-fail) in
        {47}let v_10: bool = not-caught-fail(ss_3) in
        {20}let psk: key = empty in
        {18}let re: key = empty in
        {9}let e: keypair = keypairpack(empty,empty) in
        {8}let m: keypair = keypairpack(empty,empty) in
        {7}let s: keypair = keypairpack(empty,empty) in
        {48}let hs: handshakestate = (if v_4 then (if v_7 then (if v_10 then handshakestatepack(ss_3,s,m,e,rs,rm,re,psk,true) else fail-any) else fail-any) else fail-any) in
        {49}insert statestore(me,them,sid_1,statepack_a(hs))
    ) | (
        {120}get statestore(=me,=them,=sid_1,statepack_a(hs_1: handshakestate)) in
        {51}let v_11: bitstring = catch-fail(handshakestateunpack(hs_1)) in
        {52}let v_12: bool = (not-caught-fail(v_11) && success?(1-proj-9-tuple(v_11))) in
        {53}let initiator_1: bool = (if v_12 then 9-proj-9-tuple(v_11) else caught-fail) in
        {54}let psk_1: key = (if v_12 then 8-proj-9-tuple(v_11) else caught-fail) in
        {55}let re_1: key = (if v_12 then 7-proj-9-tuple(v_11) else caught-fail) in
        {56}let rm_1: key = (if v_12 then 6-proj-9-tuple(v_11) else caught-fail) in
        {57}let rs_1: key = (if v_12 then 5-proj-9-tuple(v_11) else caught-fail) in
        {58}let e_1: keypair = (if v_12 then 4-proj-9-tuple(v_11) else caught-fail) in
        {59}let m_1: keypair = (if v_12 then 3-proj-9-tuple(v_11) else caught-fail) in
        {60}let s_1: keypair = (if v_12 then 2-proj-9-tuple(v_11) else caught-fail) in
        {61}let ss_4: symmetricstate = (if v_12 then 1-proj-9-tuple(v_11) else caught-fail) in
        {62}let v_13: bitstring = (if v_12 then catch-fail((empty,empty,empty)) else caught-fail) in
        {63}let v_14: bool = (not-caught-fail(v_13) && success?(1-proj-3-tuple(v_13))) in
        {64}let ciphertext: bitstring = (if v_14 then 3-proj-3-tuple(v_13) else caught-fail) in
        {65}let ns: bitstring = (if v_14 then 2-proj-3-tuple(v_13) else caught-fail) in
        {66}let ne: bitstring = (if v_14 then 1-proj-3-tuple(v_13) else caught-fail) in
        {67}let basis_2: key = (if v_14 then key_e(me,them,sid_1) else caught-fail) in
        {68}let public_key_2: key = (if v_14 then catch-fail(dhexp(basis_2,validkey(g))) else caught-fail) in
        {69}let v_15: bool = not-caught-fail(public_key_2) in
        {70}let e_2: keypair = (if v_14 then catch-fail((if v_15 then keypairpack(validkey(public_key_2),basis_2) else fail-any)) else caught-fail) in
        {71}let v_16: bool = not-caught-fail(e_2) in
        {72}let ne_1: bitstring = (if v_16 then catch-fail(getpublickey(e_2)) else caught-fail) in
        {73}let v_17: bool = not-caught-fail(ne_1) in
        {74}let v_18: bitstring = (if v_17 then catch-fail(symmetricstateunpack(ss_4)) else caught-fail) in
        {75}let v_19: bool = (not-caught-fail(v_18) && success?(1-proj-3-tuple(v_18))) in
        {76}let h_4: bitstring = (if v_19 then 3-proj-3-tuple(v_18) else caught-fail) in
        {77}let ck_4: key = (if v_19 then 2-proj-3-tuple(v_18) else caught-fail) in
        {78}let cs_4: cipherstate = (if v_19 then 1-proj-3-tuple(v_18) else caught-fail) in
        {79}let ss_5: symmetricstate = (if v_17 then catch-fail((if v_19 then symmetricstatepack(cs_4,ck_4,hash(h_4,ne_1)) else fail-any)) else caught-fail) in
        {80}let v_20: bool = not-caught-fail(ss_5) in
        {81}let v_21: bitstring = (if v_20 then catch-fail(symmetricstateunpack(ss_5)) else caught-fail) in
        {82}let v_22: bool = (not-caught-fail(v_21) && success?(1-proj-3-tuple(v_21))) in
        {83}let h_5: bitstring = (if v_22 then 3-proj-3-tuple(v_21) else caught-fail) in
        {84}let ck_5: key = (if v_22 then 2-proj-3-tuple(v_21) else caught-fail) in
        {85}let cs_5: cipherstate = (if v_22 then 1-proj-3-tuple(v_21) else caught-fail) in
        {86}let v_23: bitstring = (if v_22 then catch-fail(cipherstateunpack(cs_5)) else caught-fail) in
        {87}let v_24: bool = (not-caught-fail(v_23) && success?(1-proj-2-tuple(v_23))) in
        {88}let n: nonce = (if v_24 then 2-proj-2-tuple(v_23) else caught-fail) in
        {89}let k_1: key = (if v_24 then 1-proj-2-tuple(v_23) else caught-fail) in
        {92}let v_25: bitstring = (if v_24 then catch-fail(cipherstateunpack(cs_5)) else caught-fail) in
        {93}let v_26: bool = (not-caught-fail(v_25) && success?(1-proj-2-tuple(v_25))) in
        {94}let o: nonce = (if v_26 then 2-proj-2-tuple(v_25) else caught-fail) in
        {95}let k_2: key = (if v_26 then 1-proj-2-tuple(v_25) else caught-fail) in
        {91}let n_1: nonce = (if v_24 then increment_nonce(n) else caught-fail) in
        {96}let csi: cipherstate = (if v_24 then catch-fail((if v_26 then cipherstatepack(k_2,n_1) else fail-any)) else caught-fail) in
        {97}let v_27: bool = not-caught-fail(csi) in
        {50}let payload: bitstring = msg_a(me,them,sid_1) in
        {90}let e_3: bitstring = (if v_24 then encrypt(k_1,n,h_5,payload) else caught-fail) in
        {98}let v_28: bitstring = (if v_22 then catch-fail((if v_24 then (if v_27 then (csi,e_3) else fail-any) else fail-any)) else caught-fail) in
        {99}let v_29: bool = (not-caught-fail(v_28) && success?(1-proj-2-tuple(v_28))) in
        {100}let ciphertext_1: bitstring = (if v_29 then 2-proj-2-tuple(v_28) else caught-fail) in
        {101}let csi_1: cipherstate = (if v_29 then 1-proj-2-tuple(v_28) else caught-fail) in
        {102}let ss_6: symmetricstate = (if v_29 then symmetricstatepack(csi_1,ck_5,h_5) else caught-fail) in
        {103}let v_30: bitstring = (if v_29 then catch-fail(symmetricstateunpack(ss_6)) else caught-fail) in
        {104}let v_31: bool = (not-caught-fail(v_30) && success?(1-proj-3-tuple(v_30))) in
        {105}let h_6: bitstring = (if v_31 then 3-proj-3-tuple(v_30) else caught-fail) in
        {106}let ck_6: key = (if v_31 then 2-proj-3-tuple(v_30) else caught-fail) in
        {107}let cs_6: cipherstate = (if v_31 then 1-proj-3-tuple(v_30) else caught-fail) in
        {108}let ssi: symmetricstate = (if v_29 then catch-fail((if v_31 then symmetricstatepack(cs_6,ck_6,hash(h_6,ciphertext_1)) else fail-any)) else caught-fail) in
        {109}let v_32: bool = not-caught-fail(ssi) in
        {110}let v_33: bitstring = (if v_20 then catch-fail((if v_22 then (if v_29 then (if v_32 then (ssi,ciphertext_1) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {111}let v_34: bool = (not-caught-fail(v_33) && success?(1-proj-2-tuple(v_33))) in
        {112}let ciphertext_2: bitstring = (if v_34 then 2-proj-2-tuple(v_33) else caught-fail) in
        {113}let ss_7: symmetricstate = (if v_34 then 1-proj-2-tuple(v_33) else caught-fail) in
        {115}let message_buffer: bitstring = (if v_34 then concat3(ne_1,ns,ciphertext_2) else caught-fail) in
        {114}let hs_2: handshakestate = (if v_34 then handshakestatepack(ss_7,s_1,m_1,e_2,rs_1,rm_1,re_1,psk_1,initiator_1) else caught-fail) in
        {116}let (hs_3: handshakestate,message_a: bitstring) = (if v_12 then (if v_14 then (if v_16 then (if v_17 then (if v_20 then (if v_34 then (hs_2,message_buffer) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {117}event SendMsg(me,them,stagepack_a(sid_1),msg_a(me,them,sid_1));
        {118}insert statestore(me,them,sid_1,statepack_b(hs_3));
        {119}out(pub, message_a)
    ) | (
        {277}get statestore(=me,=them,=sid_1,statepack_b(hs_4: handshakestate)) in
        {121}in(pub, message_b: bitstring);
        {122}let v_35: bitstring = catch-fail(handshakestateunpack(hs_4)) in
        {123}let v_36: bool = (not-caught-fail(v_35) && success?(1-proj-9-tuple(v_35))) in
        {124}let initiator_2: bool = (if v_36 then 9-proj-9-tuple(v_35) else caught-fail) in
        {125}let psk_2: key = (if v_36 then 8-proj-9-tuple(v_35) else caught-fail) in
        {126}let re_2: key = (if v_36 then 7-proj-9-tuple(v_35) else caught-fail) in
        {127}let rm_2: key = (if v_36 then 6-proj-9-tuple(v_35) else caught-fail) in
        {128}let rs_2: key = (if v_36 then 5-proj-9-tuple(v_35) else caught-fail) in
        {129}let e_4: keypair = (if v_36 then 4-proj-9-tuple(v_35) else caught-fail) in
        {130}let m_2: keypair = (if v_36 then 3-proj-9-tuple(v_35) else caught-fail) in
        {131}let s_2: keypair = (if v_36 then 2-proj-9-tuple(v_35) else caught-fail) in
        {132}let ss_8: symmetricstate = (if v_36 then 1-proj-9-tuple(v_35) else caught-fail) in
        {133}let v_37: bitstring = (if v_36 then catch-fail(deconcat3(message_b)) else caught-fail) in
        {134}let v_38: bool = (not-caught-fail(v_37) && success?(1-proj-3-tuple(v_37))) in
        {135}let ciphertext_3: bitstring = (if v_38 then 3-proj-3-tuple(v_37) else caught-fail) in
        {136}let ns_1: bitstring = (if v_38 then 2-proj-3-tuple(v_37) else caught-fail) in
        {137}let ne_2: bitstring = (if v_38 then 1-proj-3-tuple(v_37) else caught-fail) in
        {140}let v_39: bitstring = (if v_38 then catch-fail(symmetricstateunpack(ss_8)) else caught-fail) in
        {141}let v_40: bool = (not-caught-fail(v_39) && success?(1-proj-3-tuple(v_39))) in
        {142}let h_7: bitstring = (if v_40 then 3-proj-3-tuple(v_39) else caught-fail) in
        {143}let ck_7: key = (if v_40 then 2-proj-3-tuple(v_39) else caught-fail) in
        {144}let cs_7: cipherstate = (if v_40 then 1-proj-3-tuple(v_39) else caught-fail) in
        {139}let re_3: key = (if v_38 then ne_2 else caught-fail) in
        {145}let ss_9: symmetricstate = (if v_38 then catch-fail((if v_40 then symmetricstatepack(cs_7,ck_7,hash(h_7,re_3)) else fail-any)) else caught-fail) in
        {146}let v_41: bool = not-caught-fail(ss_9) in
        {147}let v_42: bitstring = (if v_41 then catch-fail(keypairunpack(e_4)) else caught-fail) in
        {148}let v_43: bool = (not-caught-fail(v_42) && success?(1-proj-2-tuple(v_42))) in
        {149}let my_private_key: key = (if v_43 then 2-proj-2-tuple(v_42) else caught-fail) in
        {150}let my_public_key: key = (if v_43 then 1-proj-2-tuple(v_42) else caught-fail) in
        {151}let input_key_material: key = (if v_41 then catch-fail((if v_43 then dhexp(my_private_key,re_3) else fail-any)) else caught-fail) in
        {152}let v_44: bool = not-caught-fail(input_key_material) in
        {153}let v_45: bitstring = (if v_44 then catch-fail(symmetricstateunpack(ss_9)) else caught-fail) in
        {154}let v_46: bool = (not-caught-fail(v_45) && success?(1-proj-3-tuple(v_45))) in
        {155}let h_8: bitstring = (if v_46 then 3-proj-3-tuple(v_45) else caught-fail) in
        {156}let ck_8: key = (if v_46 then 2-proj-3-tuple(v_45) else caught-fail) in
        {157}let cs_8: cipherstate = (if v_46 then 1-proj-3-tuple(v_45) else caught-fail) in
        {160}let output3: key = (if v_46 then hmac_hash3(ck_8,input_key_material) else caught-fail) in
        {159}let output2: key = (if v_46 then hmac_hash2(ck_8,input_key_material) else caught-fail) in
        {158}let output1: key = (if v_46 then hmac_hash1(ck_8,input_key_material) else caught-fail) in
        {161}let v_47: bitstring = (if v_46 then catch-fail((output1,output2,output3)) else caught-fail) in
        {162}let v_48: bool = (not-caught-fail(v_47) && success?(1-proj-3-tuple(v_47))) in
        {163}let output_3: key = (if v_48 then 3-proj-3-tuple(v_47) else caught-fail) in
        {164}let temp_k: key = (if v_48 then 2-proj-3-tuple(v_47) else caught-fail) in
        {165}let ck_9: key = (if v_48 then 1-proj-3-tuple(v_47) else caught-fail) in
        {166}let ss_10: symmetricstate = (if v_41 then catch-fail((if v_44 then (if v_46 then (if v_48 then symmetricstatepack(cipherstatepack(temp_k,minnonce),ck_9,h_8) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {167}let v_49: bool = not-caught-fail(ss_10) in
        {168}let v_50: bitstring = (if v_49 then catch-fail(keypairunpack(e_4)) else caught-fail) in
        {169}let v_51: bool = (not-caught-fail(v_50) && success?(1-proj-2-tuple(v_50))) in
        {170}let my_private_key_1: key = (if v_51 then 2-proj-2-tuple(v_50) else caught-fail) in
        {171}let my_public_key_1: key = (if v_51 then 1-proj-2-tuple(v_50) else caught-fail) in
        {172}let input_key_material_1: key = (if v_49 then catch-fail((if v_51 then dhexp(my_private_key_1,rs_2) else fail-any)) else caught-fail) in
        {173}let v_52: bool = not-caught-fail(input_key_material_1) in
        {174}let v_53: bitstring = (if v_52 then catch-fail(symmetricstateunpack(ss_10)) else caught-fail) in
        {175}let v_54: bool = (not-caught-fail(v_53) && success?(1-proj-3-tuple(v_53))) in
        {176}let h_9: bitstring = (if v_54 then 3-proj-3-tuple(v_53) else caught-fail) in
        {177}let ck_10: key = (if v_54 then 2-proj-3-tuple(v_53) else caught-fail) in
        {178}let cs_9: cipherstate = (if v_54 then 1-proj-3-tuple(v_53) else caught-fail) in
        {181}let output3_1: key = (if v_54 then hmac_hash3(ck_10,input_key_material_1) else caught-fail) in
        {180}let output2_1: key = (if v_54 then hmac_hash2(ck_10,input_key_material_1) else caught-fail) in
        {179}let output1_1: key = (if v_54 then hmac_hash1(ck_10,input_key_material_1) else caught-fail) in
        {182}let v_55: bitstring = (if v_54 then catch-fail((output1_1,output2_1,output3_1)) else caught-fail) in
        {183}let v_56: bool = (not-caught-fail(v_55) && success?(1-proj-3-tuple(v_55))) in
        {184}let output: key = (if v_56 then 3-proj-3-tuple(v_55) else caught-fail) in
        {185}let temp_k_1: key = (if v_56 then 2-proj-3-tuple(v_55) else caught-fail) in
        {186}let ck_11: key = (if v_56 then 1-proj-3-tuple(v_55) else caught-fail) in
        {187}let ss_11: symmetricstate = (if v_49 then catch-fail((if v_52 then (if v_54 then (if v_56 then symmetricstatepack(cipherstatepack(temp_k_1,minnonce),ck_11,h_9) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {188}let v_57: bool = not-caught-fail(ss_11) in
        {189}let v_58: bitstring = (if v_57 then catch-fail(keypairunpack(e_4)) else caught-fail) in
        {190}let v_59: bool = (not-caught-fail(v_58) && success?(1-proj-2-tuple(v_58))) in
        {191}let my_private_key_2: key = (if v_59 then 2-proj-2-tuple(v_58) else caught-fail) in
        {192}let my_public_key_2: key = (if v_59 then 1-proj-2-tuple(v_58) else caught-fail) in
        {193}let input_key_material_2: key = (if v_57 then catch-fail((if v_59 then dhexp(my_private_key_2,rm_2) else fail-any)) else caught-fail) in
        {194}let v_60: bool = not-caught-fail(input_key_material_2) in
        {195}let v_61: bitstring = (if v_60 then catch-fail(symmetricstateunpack(ss_11)) else caught-fail) in
        {196}let v_62: bool = (not-caught-fail(v_61) && success?(1-proj-3-tuple(v_61))) in
        {197}let h_10: bitstring = (if v_62 then 3-proj-3-tuple(v_61) else caught-fail) in
        {198}let ck_12: key = (if v_62 then 2-proj-3-tuple(v_61) else caught-fail) in
        {199}let cs_10: cipherstate = (if v_62 then 1-proj-3-tuple(v_61) else caught-fail) in
        {202}let output3_2: key = (if v_62 then hmac_hash3(ck_12,input_key_material_2) else caught-fail) in
        {201}let output2_2: key = (if v_62 then hmac_hash2(ck_12,input_key_material_2) else caught-fail) in
        {200}let output1_2: key = (if v_62 then hmac_hash1(ck_12,input_key_material_2) else caught-fail) in
        {203}let v_63: bitstring = (if v_62 then catch-fail((output1_2,output2_2,output3_2)) else caught-fail) in
        {204}let v_64: bool = (not-caught-fail(v_63) && success?(1-proj-3-tuple(v_63))) in
        {205}let output_1: key = (if v_64 then 3-proj-3-tuple(v_63) else caught-fail) in
        {206}let temp_k_2: key = (if v_64 then 2-proj-3-tuple(v_63) else caught-fail) in
        {207}let ck_13: key = (if v_64 then 1-proj-3-tuple(v_63) else caught-fail) in
        {208}let ss_12: symmetricstate = (if v_57 then catch-fail((if v_60 then (if v_62 then (if v_64 then symmetricstatepack(cipherstatepack(temp_k_2,minnonce),ck_13,h_10) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {209}let v_65: bool = not-caught-fail(ss_12) in
        {210}let v_66: bitstring = (if v_65 then catch-fail(symmetricstateunpack(ss_12)) else caught-fail) in
        {211}let v_67: bool = (not-caught-fail(v_66) && success?(1-proj-3-tuple(v_66))) in
        {212}let h_11: bitstring = (if v_67 then 3-proj-3-tuple(v_66) else caught-fail) in
        {213}let ck_14: key = (if v_67 then 2-proj-3-tuple(v_66) else caught-fail) in
        {214}let cs_11: cipherstate = (if v_67 then 1-proj-3-tuple(v_66) else caught-fail) in
        {215}let v_68: bitstring = (if v_67 then catch-fail(cipherstateunpack(cs_11)) else caught-fail) in
        {216}let v_69: bool = (not-caught-fail(v_68) && success?(1-proj-2-tuple(v_68))) in
        {217}let n_2: nonce = (if v_69 then 2-proj-2-tuple(v_68) else caught-fail) in
        {218}let k_3: key = (if v_69 then 1-proj-2-tuple(v_68) else caught-fail) in
        {219}let d: aead = (if v_69 then catch-fail(decrypt(k_3,n_2,h_11,ciphertext_3)) else caught-fail) in
        {220}let v_70: bool = not-caught-fail(d) in
        {221}let v_71: bitstring = (if v_70 then catch-fail(aeadunpack(d)) else caught-fail) in
        {222}let v_72: bool = (not-caught-fail(v_71) && success?(1-proj-3-tuple(v_71))) in
        {223}let plaintext: bitstring = (if v_72 then 3-proj-3-tuple(v_71) else caught-fail) in
        {224}let adi: bitstring = (if v_72 then 2-proj-3-tuple(v_71) else caught-fail) in
        {225}let valid: bool = (if v_72 then 1-proj-3-tuple(v_71) else caught-fail) in
        {227}let v_73: bitstring = (if v_72 then catch-fail(cipherstateunpack(cs_11)) else caught-fail) in
        {228}let v_74: bool = (not-caught-fail(v_73) && success?(1-proj-2-tuple(v_73))) in
        {229}let o_1: nonce = (if v_74 then 2-proj-2-tuple(v_73) else caught-fail) in
        {230}let k_4: key = (if v_74 then 1-proj-2-tuple(v_73) else caught-fail) in
        {226}let n_3: nonce = (if v_72 then increment_nonce(n_2) else caught-fail) in
        {231}let csi_2: cipherstate = (if v_72 then catch-fail((if v_74 then cipherstatepack(k_4,n_3) else fail-any)) else caught-fail) in
        {232}let v_75: bool = not-caught-fail(csi_2) in
        {233}let v_76: bitstring = (if v_67 then catch-fail((if v_69 then (if v_70 then (if v_72 then (if v_75 then (csi_2,plaintext,valid) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {234}let v_77: bool = (not-caught-fail(v_76) && success?(1-proj-3-tuple(v_76))) in
        {235}let valid_1: bool = (if v_77 then 3-proj-3-tuple(v_76) else caught-fail) in
        {236}let plaintext_1: bitstring = (if v_77 then 2-proj-3-tuple(v_76) else caught-fail) in
        {237}let csi_3: cipherstate = (if v_77 then 1-proj-3-tuple(v_76) else caught-fail) in
        {238}let ss_13: symmetricstate = (if v_77 then symmetricstatepack(csi_3,ck_14,h_11) else caught-fail) in
        {239}let v_78: bitstring = (if v_77 then catch-fail(symmetricstateunpack(ss_13)) else caught-fail) in
        {240}let v_79: bool = (not-caught-fail(v_78) && success?(1-proj-3-tuple(v_78))) in
        {241}let h_12: bitstring = (if v_79 then 3-proj-3-tuple(v_78) else caught-fail) in
        {242}let ck_15: key = (if v_79 then 2-proj-3-tuple(v_78) else caught-fail) in
        {243}let cs_12: cipherstate = (if v_79 then 1-proj-3-tuple(v_78) else caught-fail) in
        {244}let ssi_1: symmetricstate = (if v_77 then catch-fail((if v_79 then symmetricstatepack(cs_12,ck_15,hash(h_12,ciphertext_3)) else fail-any)) else caught-fail) in
        {245}let v_80: bool = not-caught-fail(ssi_1) in
        {246}let v_81: bitstring = (if v_65 then catch-fail((if v_67 then (if v_77 then (if v_80 then (ssi_1,plaintext_1,valid_1) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {247}let v_82: bool = (not-caught-fail(v_81) && success?(1-proj-3-tuple(v_81))) in
        {248}let valid2: bool = (if v_82 then 3-proj-3-tuple(v_81) else caught-fail) in
        {249}let plaintext_2: bitstring = (if v_82 then 2-proj-3-tuple(v_81) else caught-fail) in
        {250}let ss_14: symmetricstate = (if v_82 then 1-proj-3-tuple(v_81) else caught-fail) in
        {138}let valid1: bool = (if v_38 then true else caught-fail) in
        {251}let v_83: bool = (if v_82 then catch-fail((valid1 && valid2)) else caught-fail) in
        {253}let v_84: bitstring = (if v_83 then catch-fail(symmetricstateunpack(ss_14)) else caught-fail) in
        {254}let v_85: bool = (not-caught-fail(v_84) && success?(1-proj-3-tuple(v_84))) in
        {255}let h_13: bitstring = (if v_85 then 3-proj-3-tuple(v_84) else caught-fail) in
        {256}let ck_16: key = (if v_85 then 2-proj-3-tuple(v_84) else caught-fail) in
        {257}let cs_13: cipherstate = (if v_85 then 1-proj-3-tuple(v_84) else caught-fail) in
        {258}let input_key_material_3: key = (if v_85 then zero else caught-fail) in
        {261}let output3_3: key = (if v_85 then hmac_hash3(ck_16,input_key_material_3) else caught-fail) in
        {260}let output2_3: key = (if v_85 then hmac_hash2(ck_16,input_key_material_3) else caught-fail) in
        {259}let output1_3: key = (if v_85 then hmac_hash1(ck_16,input_key_material_3) else caught-fail) in
        {262}let v_86: bitstring = (if v_85 then catch-fail((output1_3,output2_3,output3_3)) else caught-fail) in
        {263}let v_87: bool = (not-caught-fail(v_86) && success?(1-proj-3-tuple(v_86))) in
        {264}let temp_k3: key = (if v_87 then 3-proj-3-tuple(v_86) else caught-fail) in
        {265}let temp_k2: key = (if v_87 then 2-proj-3-tuple(v_86) else caught-fail) in
        {266}let temp_k1: key = (if v_87 then 1-proj-3-tuple(v_86) else caught-fail) in
        {268}let cs2: cipherstate = (if v_87 then cipherstatepack(temp_k2,minnonce) else caught-fail) in
        {267}let cs1: cipherstate = (if v_87 then cipherstatepack(temp_k1,minnonce) else caught-fail) in
        {269}let v_88: bitstring = (if v_83 then catch-fail((if v_85 then (if v_87 then (ss_14,cs1,cs2) else fail-any) else fail-any)) else caught-fail) in
        {270}let v_89: bool = (not-caught-fail(v_88) && success?(1-proj-3-tuple(v_88))) in
        {271}let cs2_1: cipherstate = (if v_89 then 3-proj-3-tuple(v_88) else caught-fail) in
        {272}let cs1_1: cipherstate = (if v_89 then 2-proj-3-tuple(v_88) else caught-fail) in
        {273}let ssi_2: symmetricstate = (if v_89 then 1-proj-3-tuple(v_88) else caught-fail) in
        {252}let hs_5: handshakestate = (if v_83 then handshakestatepack(ss_14,s_2,m_2,e_4,rs_2,rm_2,re_3,psk_2,initiator_2) else caught-fail) in
        {274}let (hs_6: handshakestate,plaintext_b: bitstring,valid_2: bool,cs1_2: cipherstate,cs2_2: cipherstate) = (if v_36 then (if v_38 then (if v_41 then (if v_49 then (if v_57 then (if v_65 then (if v_82 then (if undo-catch-fail(v_83) then (if v_89 then (hs_5,plaintext_2,true,cs1_1,cs2_1) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {275}event RecvMsg(me,them,stagepack_b(sid_1),plaintext_b);
        {276}insert statestore(me,them,sid_1,statepack_c(hs_6,cs1_2,cs2_2))
    ) | (
        {278}!
        {336}get statestore(=me,=them,=sid_1,statepack_c(hs_7: handshakestate,cs1_3: cipherstate,cs2_3: cipherstate)) in
        {279}let hs_8: handshakestate = handshakestatesetcs(hs_7,cs1_3) in
        {281}let v_90: bitstring = catch-fail(handshakestateunpack(hs_8)) in
        {282}let v_91: bool = (not-caught-fail(v_90) && success?(1-proj-9-tuple(v_90))) in
        {283}let initiator_3: bool = (if v_91 then 9-proj-9-tuple(v_90) else caught-fail) in
        {284}let psk_3: key = (if v_91 then 8-proj-9-tuple(v_90) else caught-fail) in
        {285}let re_4: key = (if v_91 then 7-proj-9-tuple(v_90) else caught-fail) in
        {286}let rm_3: key = (if v_91 then 6-proj-9-tuple(v_90) else caught-fail) in
        {287}let rs_3: key = (if v_91 then 5-proj-9-tuple(v_90) else caught-fail) in
        {288}let e_5: keypair = (if v_91 then 4-proj-9-tuple(v_90) else caught-fail) in
        {289}let m_3: keypair = (if v_91 then 3-proj-9-tuple(v_90) else caught-fail) in
        {290}let s_3: keypair = (if v_91 then 2-proj-9-tuple(v_90) else caught-fail) in
        {291}let ss_15: symmetricstate = (if v_91 then 1-proj-9-tuple(v_90) else caught-fail) in
        {292}let v_92: bitstring = (if v_91 then catch-fail((empty,empty,empty)) else caught-fail) in
        {293}let v_93: bool = (not-caught-fail(v_92) && success?(1-proj-3-tuple(v_92))) in
        {294}let ciphertext_4: bitstring = (if v_93 then 3-proj-3-tuple(v_92) else caught-fail) in
        {295}let ns_2: bitstring = (if v_93 then 2-proj-3-tuple(v_92) else caught-fail) in
        {296}let ne_3: bitstring = (if v_93 then 1-proj-3-tuple(v_92) else caught-fail) in
        {297}let v_94: bitstring = (if v_93 then catch-fail(symmetricstateunpack(ss_15)) else caught-fail) in
        {298}let v_95: bool = (not-caught-fail(v_94) && success?(1-proj-3-tuple(v_94))) in
        {299}let h_14: bitstring = (if v_95 then 3-proj-3-tuple(v_94) else caught-fail) in
        {300}let ck_17: key = (if v_95 then 2-proj-3-tuple(v_94) else caught-fail) in
        {301}let cs_14: cipherstate = (if v_95 then 1-proj-3-tuple(v_94) else caught-fail) in
        {302}let v_96: bitstring = (if v_95 then catch-fail(cipherstateunpack(cs_14)) else caught-fail) in
        {303}let v_97: bool = (not-caught-fail(v_96) && success?(1-proj-2-tuple(v_96))) in
        {304}let n_4: nonce = (if v_97 then 2-proj-2-tuple(v_96) else caught-fail) in
        {305}let k_5: key = (if v_97 then 1-proj-2-tuple(v_96) else caught-fail) in
        {308}let v_98: bitstring = (if v_97 then catch-fail(cipherstateunpack(cs_14)) else caught-fail) in
        {309}let v_99: bool = (not-caught-fail(v_98) && success?(1-proj-2-tuple(v_98))) in
        {310}let o_2: nonce = (if v_99 then 2-proj-2-tuple(v_98) else caught-fail) in
        {311}let k_6: key = (if v_99 then 1-proj-2-tuple(v_98) else caught-fail) in
        {307}let n_5: nonce = (if v_97 then increment_nonce(n_4) else caught-fail) in
        {312}let csi_4: cipherstate = (if v_97 then catch-fail((if v_99 then cipherstatepack(k_6,n_5) else fail-any)) else caught-fail) in
        {313}let v_100: bool = not-caught-fail(csi_4) in
        {280}let payload_1: bitstring = msg_c(me,them,sid_1) in
        {306}let e_6: bitstring = (if v_97 then encrypt(k_5,n_4,h_14,payload_1) else caught-fail) in
        {314}let v_101: bitstring = (if v_95 then catch-fail((if v_97 then (if v_100 then (csi_4,e_6) else fail-any) else fail-any)) else caught-fail) in
        {315}let v_102: bool = (not-caught-fail(v_101) && success?(1-proj-2-tuple(v_101))) in
        {316}let ciphertext_5: bitstring = (if v_102 then 2-proj-2-tuple(v_101) else caught-fail) in
        {317}let csi_5: cipherstate = (if v_102 then 1-proj-2-tuple(v_101) else caught-fail) in
        {318}let ss_16: symmetricstate = (if v_102 then symmetricstatepack(csi_5,ck_17,h_14) else caught-fail) in
        {319}let v_103: bitstring = (if v_102 then catch-fail(symmetricstateunpack(ss_16)) else caught-fail) in
        {320}let v_104: bool = (not-caught-fail(v_103) && success?(1-proj-3-tuple(v_103))) in
        {321}let h_15: bitstring = (if v_104 then 3-proj-3-tuple(v_103) else caught-fail) in
        {322}let ck_18: key = (if v_104 then 2-proj-3-tuple(v_103) else caught-fail) in
        {323}let cs_15: cipherstate = (if v_104 then 1-proj-3-tuple(v_103) else caught-fail) in
        {324}let ssi_3: symmetricstate = (if v_102 then catch-fail((if v_104 then symmetricstatepack(cs_15,ck_18,hash(h_15,ciphertext_5)) else fail-any)) else caught-fail) in
        {325}let v_105: bool = not-caught-fail(ssi_3) in
        {326}let v_106: bitstring = (if v_93 then catch-fail((if v_95 then (if v_102 then (if v_105 then (ssi_3,ciphertext_5) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {327}let v_107: bool = (not-caught-fail(v_106) && success?(1-proj-2-tuple(v_106))) in
        {328}let ciphertext_6: bitstring = (if v_107 then 2-proj-2-tuple(v_106) else caught-fail) in
        {329}let ss_17: symmetricstate = (if v_107 then 1-proj-2-tuple(v_106) else caught-fail) in
        {331}let message_buffer_1: bitstring = (if v_107 then concat3(ne_3,ns_2,ciphertext_6) else caught-fail) in
        {330}let hs_9: handshakestate = (if v_107 then handshakestatepack(ss_17,s_3,m_3,e_5,rs_3,rm_3,re_4,psk_3,initiator_3) else caught-fail) in
        {332}let (hs_10: handshakestate,message_c: bitstring) = (if v_91 then (if v_93 then (if v_107 then (hs_9,message_buffer_1) else fail-any) else fail-any) else fail-any) in
        {333}event SendMsg(me,them,stagepack_c(sid_1),msg_c(me,them,sid_1));
        {334}insert statestore(me,them,sid_1,statepack_d(hs_10,handshakestategetcs(hs_10),cs2_3));
        {335}out(pub, message_c)
    ) | (
        {337}!
        {403}get statestore(=me,=them,=sid_1,statepack_d(hs_11: handshakestate,cs1_4: cipherstate,cs2_4: cipherstate)) in
        {338}let hs_12: handshakestate = handshakestatesetcs(hs_11,cs2_4) in
        {339}in(pub, message_d: bitstring);
        {340}let v_108: bitstring = catch-fail(handshakestateunpack(hs_12)) in
        {341}let v_109: bool = (not-caught-fail(v_108) && success?(1-proj-9-tuple(v_108))) in
        {342}let initiator_4: bool = (if v_109 then 9-proj-9-tuple(v_108) else caught-fail) in
        {343}let psk_4: key = (if v_109 then 8-proj-9-tuple(v_108) else caught-fail) in
        {344}let re_5: key = (if v_109 then 7-proj-9-tuple(v_108) else caught-fail) in
        {345}let rm_4: key = (if v_109 then 6-proj-9-tuple(v_108) else caught-fail) in
        {346}let rs_4: key = (if v_109 then 5-proj-9-tuple(v_108) else caught-fail) in
        {347}let e_7: keypair = (if v_109 then 4-proj-9-tuple(v_108) else caught-fail) in
        {348}let m_4: keypair = (if v_109 then 3-proj-9-tuple(v_108) else caught-fail) in
        {349}let s_4: keypair = (if v_109 then 2-proj-9-tuple(v_108) else caught-fail) in
        {350}let ss_18: symmetricstate = (if v_109 then 1-proj-9-tuple(v_108) else caught-fail) in
        {351}let v_110: bitstring = (if v_109 then catch-fail(deconcat3(message_d)) else caught-fail) in
        {352}let v_111: bool = (not-caught-fail(v_110) && success?(1-proj-3-tuple(v_110))) in
        {353}let ciphertext_7: bitstring = (if v_111 then 3-proj-3-tuple(v_110) else caught-fail) in
        {354}let ns_3: bitstring = (if v_111 then 2-proj-3-tuple(v_110) else caught-fail) in
        {355}let ne_4: bitstring = (if v_111 then 1-proj-3-tuple(v_110) else caught-fail) in
        {357}let v_112: bitstring = (if v_111 then catch-fail(symmetricstateunpack(ss_18)) else caught-fail) in
        {358}let v_113: bool = (not-caught-fail(v_112) && success?(1-proj-3-tuple(v_112))) in
        {359}let h_16: bitstring = (if v_113 then 3-proj-3-tuple(v_112) else caught-fail) in
        {360}let ck_19: key = (if v_113 then 2-proj-3-tuple(v_112) else caught-fail) in
        {361}let cs_16: cipherstate = (if v_113 then 1-proj-3-tuple(v_112) else caught-fail) in
        {362}let v_114: bitstring = (if v_113 then catch-fail(cipherstateunpack(cs_16)) else caught-fail) in
        {363}let v_115: bool = (not-caught-fail(v_114) && success?(1-proj-2-tuple(v_114))) in
        {364}let n_6: nonce = (if v_115 then 2-proj-2-tuple(v_114) else caught-fail) in
        {365}let k_7: key = (if v_115 then 1-proj-2-tuple(v_114) else caught-fail) in
        {366}let d_1: aead = (if v_115 then catch-fail(decrypt(k_7,n_6,h_16,ciphertext_7)) else caught-fail) in
        {367}let v_116: bool = not-caught-fail(d_1) in
        {368}let v_117: bitstring = (if v_116 then catch-fail(aeadunpack(d_1)) else caught-fail) in
        {369}let v_118: bool = (not-caught-fail(v_117) && success?(1-proj-3-tuple(v_117))) in
        {370}let plaintext_3: bitstring = (if v_118 then 3-proj-3-tuple(v_117) else caught-fail) in
        {371}let adi_1: bitstring = (if v_118 then 2-proj-3-tuple(v_117) else caught-fail) in
        {372}let valid_3: bool = (if v_118 then 1-proj-3-tuple(v_117) else caught-fail) in
        {374}let v_119: bitstring = (if v_118 then catch-fail(cipherstateunpack(cs_16)) else caught-fail) in
        {375}let v_120: bool = (not-caught-fail(v_119) && success?(1-proj-2-tuple(v_119))) in
        {376}let o_3: nonce = (if v_120 then 2-proj-2-tuple(v_119) else caught-fail) in
        {377}let k_8: key = (if v_120 then 1-proj-2-tuple(v_119) else caught-fail) in
        {373}let n_7: nonce = (if v_118 then increment_nonce(n_6) else caught-fail) in
        {378}let csi_6: cipherstate = (if v_118 then catch-fail((if v_120 then cipherstatepack(k_8,n_7) else fail-any)) else caught-fail) in
        {379}let v_121: bool = not-caught-fail(csi_6) in
        {380}let v_122: bitstring = (if v_113 then catch-fail((if v_115 then (if v_116 then (if v_118 then (if v_121 then (csi_6,plaintext_3,valid_3) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {381}let v_123: bool = (not-caught-fail(v_122) && success?(1-proj-3-tuple(v_122))) in
        {382}let valid_4: bool = (if v_123 then 3-proj-3-tuple(v_122) else caught-fail) in
        {383}let plaintext_4: bitstring = (if v_123 then 2-proj-3-tuple(v_122) else caught-fail) in
        {384}let csi_7: cipherstate = (if v_123 then 1-proj-3-tuple(v_122) else caught-fail) in
        {385}let ss_19: symmetricstate = (if v_123 then symmetricstatepack(csi_7,ck_19,h_16) else caught-fail) in
        {386}let v_124: bitstring = (if v_123 then catch-fail(symmetricstateunpack(ss_19)) else caught-fail) in
        {387}let v_125: bool = (not-caught-fail(v_124) && success?(1-proj-3-tuple(v_124))) in
        {388}let h_17: bitstring = (if v_125 then 3-proj-3-tuple(v_124) else caught-fail) in
        {389}let ck_20: key = (if v_125 then 2-proj-3-tuple(v_124) else caught-fail) in
        {390}let cs_17: cipherstate = (if v_125 then 1-proj-3-tuple(v_124) else caught-fail) in
        {391}let ssi_4: symmetricstate = (if v_123 then catch-fail((if v_125 then symmetricstatepack(cs_17,ck_20,hash(h_17,ciphertext_7)) else fail-any)) else caught-fail) in
        {392}let v_126: bool = not-caught-fail(ssi_4) in
        {393}let v_127: bitstring = (if v_111 then catch-fail((if v_113 then (if v_123 then (if v_126 then (ssi_4,plaintext_4,valid_4) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {394}let v_128: bool = (not-caught-fail(v_127) && success?(1-proj-3-tuple(v_127))) in
        {395}let valid2_1: bool = (if v_128 then 3-proj-3-tuple(v_127) else caught-fail) in
        {396}let plaintext_5: bitstring = (if v_128 then 2-proj-3-tuple(v_127) else caught-fail) in
        {397}let ss_20: symmetricstate = (if v_128 then 1-proj-3-tuple(v_127) else caught-fail) in
        {356}let valid1_1: bool = (if v_111 then true else caught-fail) in
        {398}let v_129: bool = (if v_128 then catch-fail((valid1_1 && valid2_1)) else caught-fail) in
        {399}let hs_13: handshakestate = (if v_129 then handshakestatepack(ss_20,s_4,m_4,e_7,rs_4,rm_4,re_5,psk_4,initiator_4) else caught-fail) in
        {400}let (hs_14: handshakestate,plaintext_d: bitstring,valid_5: bool) = (if v_109 then (if v_111 then (if v_128 then (if undo-catch-fail(v_129) then (hs_13,plaintext_5,true) else fail-any) else fail-any) else fail-any) else fail-any) in
        {401}event RecvMsg(me,them,stagepack_d(sid_1),plaintext_d);
        {402}event RecvEnd(valid_5)
    ) | (
        0
    )
) | (
    {406}let sid_2: sessionid = sid in
    {405}let them_1: principal = charlie in
    {404}let me_1: principal = alice in
    (
        {410}let basis_3: key = key_s(them_1) in
        {411}let public_key_3: key = catch-fail(dhexp(basis_3,validkey(g))) in
        {412}let v_130: bool = not-caught-fail(public_key_3) in
        {413}let rs_5: key = getpublickey((if v_130 then keypairpack(validkey(public_key_3),basis_3) else fail-any)) in
        {414}let basis_4: key = key_m(them_1) in
        {415}let public_key_4: key = catch-fail(dhexp(basis_4,validkey(g))) in
        {416}let v_131: bool = not-caught-fail(public_key_4) in
        {417}let rm_5: key = getpublickey((if v_131 then keypairpack(validkey(public_key_4),basis_4) else fail-any)) in
        {424}let k_9: key = empty in
        {425}let cs_18: cipherstate = cipherstatepack(k_9,minnonce) in
        {421}let protocol_name_1: bitstring = somename in
        {422}let h_18: bitstring = hash(protocol_name_1,empty) in
        {423}let ck_21: key = h_18 in
        {426}let ss_21: symmetricstate = symmetricstatepack(cs_18,ck_21,h_18) in
        {427}let v_132: bitstring = catch-fail(symmetricstateunpack(ss_21)) in
        {428}let v_133: bool = (not-caught-fail(v_132) && success?(1-proj-3-tuple(v_132))) in
        {429}let h_19: bitstring = (if v_133 then 3-proj-3-tuple(v_132) else caught-fail) in
        {430}let ck_22: key = (if v_133 then 2-proj-3-tuple(v_132) else caught-fail) in
        {431}let cs_19: cipherstate = (if v_133 then 1-proj-3-tuple(v_132) else caught-fail) in
        {419}let prologue_1: bitstring = empty in
        {432}let ss_22: symmetricstate = catch-fail((if v_133 then symmetricstatepack(cs_19,ck_22,hash(h_19,prologue_1)) else fail-any)) in
        {433}let v_134: bool = not-caught-fail(ss_22) in
        {434}let v_135: bitstring = (if v_134 then catch-fail(symmetricstateunpack(ss_22)) else caught-fail) in
        {435}let v_136: bool = (not-caught-fail(v_135) && success?(1-proj-3-tuple(v_135))) in
        {436}let h_20: bitstring = (if v_136 then 3-proj-3-tuple(v_135) else caught-fail) in
        {437}let ck_23: key = (if v_136 then 2-proj-3-tuple(v_135) else caught-fail) in
        {438}let cs_20: cipherstate = (if v_136 then 1-proj-3-tuple(v_135) else caught-fail) in
        {439}let ss_23: symmetricstate = (if v_134 then catch-fail((if v_136 then symmetricstatepack(cs_20,ck_23,hash(h_20,rs_5)) else fail-any)) else caught-fail) in
        {440}let v_137: bool = not-caught-fail(ss_23) in
        {441}let v_138: bitstring = (if v_137 then catch-fail(symmetricstateunpack(ss_23)) else caught-fail) in
        {442}let v_139: bool = (not-caught-fail(v_138) && success?(1-proj-3-tuple(v_138))) in
        {443}let h_21: bitstring = (if v_139 then 3-proj-3-tuple(v_138) else caught-fail) in
        {444}let ck_24: key = (if v_139 then 2-proj-3-tuple(v_138) else caught-fail) in
        {445}let cs_21: cipherstate = (if v_139 then 1-proj-3-tuple(v_138) else caught-fail) in
        {446}let ss_24: symmetricstate = (if v_137 then catch-fail((if v_139 then symmetricstatepack(cs_21,ck_24,hash(h_21,rm_5)) else fail-any)) else caught-fail) in
        {447}let v_140: bool = not-caught-fail(ss_24) in
        {420}let psk_5: key = empty in
        {418}let re_6: key = empty in
        {409}let e_8: keypair = keypairpack(empty,empty) in
        {408}let m_5: keypair = keypairpack(empty,empty) in
        {407}let s_5: keypair = keypairpack(empty,empty) in
        {448}let hs_15: handshakestate = (if v_134 then (if v_137 then (if v_140 then handshakestatepack(ss_24,s_5,m_5,e_8,rs_5,rm_5,re_6,psk_5,true) else fail-any) else fail-any) else fail-any) in
        {449}insert statestore(me_1,them_1,sid_2,statepack_a(hs_15))
    ) | (
        {520}get statestore(=me_1,=them_1,=sid_2,statepack_a(hs_16: handshakestate)) in
        {451}let v_141: bitstring = catch-fail(handshakestateunpack(hs_16)) in
        {452}let v_142: bool = (not-caught-fail(v_141) && success?(1-proj-9-tuple(v_141))) in
        {453}let initiator_5: bool = (if v_142 then 9-proj-9-tuple(v_141) else caught-fail) in
        {454}let psk_6: key = (if v_142 then 8-proj-9-tuple(v_141) else caught-fail) in
        {455}let re_7: key = (if v_142 then 7-proj-9-tuple(v_141) else caught-fail) in
        {456}let rm_6: key = (if v_142 then 6-proj-9-tuple(v_141) else caught-fail) in
        {457}let rs_6: key = (if v_142 then 5-proj-9-tuple(v_141) else caught-fail) in
        {458}let e_9: keypair = (if v_142 then 4-proj-9-tuple(v_141) else caught-fail) in
        {459}let m_6: keypair = (if v_142 then 3-proj-9-tuple(v_141) else caught-fail) in
        {460}let s_6: keypair = (if v_142 then 2-proj-9-tuple(v_141) else caught-fail) in
        {461}let ss_25: symmetricstate = (if v_142 then 1-proj-9-tuple(v_141) else caught-fail) in
        {462}let v_143: bitstring = (if v_142 then catch-fail((empty,empty,empty)) else caught-fail) in
        {463}let v_144: bool = (not-caught-fail(v_143) && success?(1-proj-3-tuple(v_143))) in
        {464}let ciphertext_8: bitstring = (if v_144 then 3-proj-3-tuple(v_143) else caught-fail) in
        {465}let ns_4: bitstring = (if v_144 then 2-proj-3-tuple(v_143) else caught-fail) in
        {466}let ne_5: bitstring = (if v_144 then 1-proj-3-tuple(v_143) else caught-fail) in
        {467}let basis_5: key = (if v_144 then key_e(me_1,them_1,sid_2) else caught-fail) in
        {468}let public_key_5: key = (if v_144 then catch-fail(dhexp(basis_5,validkey(g))) else caught-fail) in
        {469}let v_145: bool = not-caught-fail(public_key_5) in
        {470}let e_10: keypair = (if v_144 then catch-fail((if v_145 then keypairpack(validkey(public_key_5),basis_5) else fail-any)) else caught-fail) in
        {471}let v_146: bool = not-caught-fail(e_10) in
        {472}let ne_6: bitstring = (if v_146 then catch-fail(getpublickey(e_10)) else caught-fail) in
        {473}let v_147: bool = not-caught-fail(ne_6) in
        {474}let v_148: bitstring = (if v_147 then catch-fail(symmetricstateunpack(ss_25)) else caught-fail) in
        {475}let v_149: bool = (not-caught-fail(v_148) && success?(1-proj-3-tuple(v_148))) in
        {476}let h_22: bitstring = (if v_149 then 3-proj-3-tuple(v_148) else caught-fail) in
        {477}let ck_25: key = (if v_149 then 2-proj-3-tuple(v_148) else caught-fail) in
        {478}let cs_22: cipherstate = (if v_149 then 1-proj-3-tuple(v_148) else caught-fail) in
        {479}let ss_26: symmetricstate = (if v_147 then catch-fail((if v_149 then symmetricstatepack(cs_22,ck_25,hash(h_22,ne_6)) else fail-any)) else caught-fail) in
        {480}let v_150: bool = not-caught-fail(ss_26) in
        {481}let v_151: bitstring = (if v_150 then catch-fail(symmetricstateunpack(ss_26)) else caught-fail) in
        {482}let v_152: bool = (not-caught-fail(v_151) && success?(1-proj-3-tuple(v_151))) in
        {483}let h_23: bitstring = (if v_152 then 3-proj-3-tuple(v_151) else caught-fail) in
        {484}let ck_26: key = (if v_152 then 2-proj-3-tuple(v_151) else caught-fail) in
        {485}let cs_23: cipherstate = (if v_152 then 1-proj-3-tuple(v_151) else caught-fail) in
        {486}let v_153: bitstring = (if v_152 then catch-fail(cipherstateunpack(cs_23)) else caught-fail) in
        {487}let v_154: bool = (not-caught-fail(v_153) && success?(1-proj-2-tuple(v_153))) in
        {488}let n_8: nonce = (if v_154 then 2-proj-2-tuple(v_153) else caught-fail) in
        {489}let k_10: key = (if v_154 then 1-proj-2-tuple(v_153) else caught-fail) in
        {492}let v_155: bitstring = (if v_154 then catch-fail(cipherstateunpack(cs_23)) else caught-fail) in
        {493}let v_156: bool = (not-caught-fail(v_155) && success?(1-proj-2-tuple(v_155))) in
        {494}let o_4: nonce = (if v_156 then 2-proj-2-tuple(v_155) else caught-fail) in
        {495}let k_11: key = (if v_156 then 1-proj-2-tuple(v_155) else caught-fail) in
        {491}let n_9: nonce = (if v_154 then increment_nonce(n_8) else caught-fail) in
        {496}let csi_8: cipherstate = (if v_154 then catch-fail((if v_156 then cipherstatepack(k_11,n_9) else fail-any)) else caught-fail) in
        {497}let v_157: bool = not-caught-fail(csi_8) in
        {450}let payload_2: bitstring = msg_a(me_1,them_1,sid_2) in
        {490}let e_11: bitstring = (if v_154 then encrypt(k_10,n_8,h_23,payload_2) else caught-fail) in
        {498}let v_158: bitstring = (if v_152 then catch-fail((if v_154 then (if v_157 then (csi_8,e_11) else fail-any) else fail-any)) else caught-fail) in
        {499}let v_159: bool = (not-caught-fail(v_158) && success?(1-proj-2-tuple(v_158))) in
        {500}let ciphertext_9: bitstring = (if v_159 then 2-proj-2-tuple(v_158) else caught-fail) in
        {501}let csi_9: cipherstate = (if v_159 then 1-proj-2-tuple(v_158) else caught-fail) in
        {502}let ss_27: symmetricstate = (if v_159 then symmetricstatepack(csi_9,ck_26,h_23) else caught-fail) in
        {503}let v_160: bitstring = (if v_159 then catch-fail(symmetricstateunpack(ss_27)) else caught-fail) in
        {504}let v_161: bool = (not-caught-fail(v_160) && success?(1-proj-3-tuple(v_160))) in
        {505}let h_24: bitstring = (if v_161 then 3-proj-3-tuple(v_160) else caught-fail) in
        {506}let ck_27: key = (if v_161 then 2-proj-3-tuple(v_160) else caught-fail) in
        {507}let cs_24: cipherstate = (if v_161 then 1-proj-3-tuple(v_160) else caught-fail) in
        {508}let ssi_5: symmetricstate = (if v_159 then catch-fail((if v_161 then symmetricstatepack(cs_24,ck_27,hash(h_24,ciphertext_9)) else fail-any)) else caught-fail) in
        {509}let v_162: bool = not-caught-fail(ssi_5) in
        {510}let v_163: bitstring = (if v_150 then catch-fail((if v_152 then (if v_159 then (if v_162 then (ssi_5,ciphertext_9) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {511}let v_164: bool = (not-caught-fail(v_163) && success?(1-proj-2-tuple(v_163))) in
        {512}let ciphertext_10: bitstring = (if v_164 then 2-proj-2-tuple(v_163) else caught-fail) in
        {513}let ss_28: symmetricstate = (if v_164 then 1-proj-2-tuple(v_163) else caught-fail) in
        {515}let message_buffer_2: bitstring = (if v_164 then concat3(ne_6,ns_4,ciphertext_10) else caught-fail) in
        {514}let hs_17: handshakestate = (if v_164 then handshakestatepack(ss_28,s_6,m_6,e_10,rs_6,rm_6,re_7,psk_6,initiator_5) else caught-fail) in
        {516}let (hs_18: handshakestate,message_a_1: bitstring) = (if v_142 then (if v_144 then (if v_146 then (if v_147 then (if v_150 then (if v_164 then (hs_17,message_buffer_2) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {517}event SendMsg(me_1,them_1,stagepack_a(sid_2),msg_a(me_1,them_1,sid_2));
        {518}insert statestore(me_1,them_1,sid_2,statepack_b(hs_18));
        {519}out(pub, message_a_1)
    ) | (
        {677}get statestore(=me_1,=them_1,=sid_2,statepack_b(hs_19: handshakestate)) in
        {521}in(pub, message_b_1: bitstring);
        {522}let v_165: bitstring = catch-fail(handshakestateunpack(hs_19)) in
        {523}let v_166: bool = (not-caught-fail(v_165) && success?(1-proj-9-tuple(v_165))) in
        {524}let initiator_6: bool = (if v_166 then 9-proj-9-tuple(v_165) else caught-fail) in
        {525}let psk_7: key = (if v_166 then 8-proj-9-tuple(v_165) else caught-fail) in
        {526}let re_8: key = (if v_166 then 7-proj-9-tuple(v_165) else caught-fail) in
        {527}let rm_7: key = (if v_166 then 6-proj-9-tuple(v_165) else caught-fail) in
        {528}let rs_7: key = (if v_166 then 5-proj-9-tuple(v_165) else caught-fail) in
        {529}let e_12: keypair = (if v_166 then 4-proj-9-tuple(v_165) else caught-fail) in
        {530}let m_7: keypair = (if v_166 then 3-proj-9-tuple(v_165) else caught-fail) in
        {531}let s_7: keypair = (if v_166 then 2-proj-9-tuple(v_165) else caught-fail) in
        {532}let ss_29: symmetricstate = (if v_166 then 1-proj-9-tuple(v_165) else caught-fail) in
        {533}let v_167: bitstring = (if v_166 then catch-fail(deconcat3(message_b_1)) else caught-fail) in
        {534}let v_168: bool = (not-caught-fail(v_167) && success?(1-proj-3-tuple(v_167))) in
        {535}let ciphertext_11: bitstring = (if v_168 then 3-proj-3-tuple(v_167) else caught-fail) in
        {536}let ns_5: bitstring = (if v_168 then 2-proj-3-tuple(v_167) else caught-fail) in
        {537}let ne_7: bitstring = (if v_168 then 1-proj-3-tuple(v_167) else caught-fail) in
        {540}let v_169: bitstring = (if v_168 then catch-fail(symmetricstateunpack(ss_29)) else caught-fail) in
        {541}let v_170: bool = (not-caught-fail(v_169) && success?(1-proj-3-tuple(v_169))) in
        {542}let h_25: bitstring = (if v_170 then 3-proj-3-tuple(v_169) else caught-fail) in
        {543}let ck_28: key = (if v_170 then 2-proj-3-tuple(v_169) else caught-fail) in
        {544}let cs_25: cipherstate = (if v_170 then 1-proj-3-tuple(v_169) else caught-fail) in
        {539}let re_9: key = (if v_168 then ne_7 else caught-fail) in
        {545}let ss_30: symmetricstate = (if v_168 then catch-fail((if v_170 then symmetricstatepack(cs_25,ck_28,hash(h_25,re_9)) else fail-any)) else caught-fail) in
        {546}let v_171: bool = not-caught-fail(ss_30) in
        {547}let v_172: bitstring = (if v_171 then catch-fail(keypairunpack(e_12)) else caught-fail) in
        {548}let v_173: bool = (not-caught-fail(v_172) && success?(1-proj-2-tuple(v_172))) in
        {549}let my_private_key_3: key = (if v_173 then 2-proj-2-tuple(v_172) else caught-fail) in
        {550}let my_public_key_3: key = (if v_173 then 1-proj-2-tuple(v_172) else caught-fail) in
        {551}let input_key_material_4: key = (if v_171 then catch-fail((if v_173 then dhexp(my_private_key_3,re_9) else fail-any)) else caught-fail) in
        {552}let v_174: bool = not-caught-fail(input_key_material_4) in
        {553}let v_175: bitstring = (if v_174 then catch-fail(symmetricstateunpack(ss_30)) else caught-fail) in
        {554}let v_176: bool = (not-caught-fail(v_175) && success?(1-proj-3-tuple(v_175))) in
        {555}let h_26: bitstring = (if v_176 then 3-proj-3-tuple(v_175) else caught-fail) in
        {556}let ck_29: key = (if v_176 then 2-proj-3-tuple(v_175) else caught-fail) in
        {557}let cs_26: cipherstate = (if v_176 then 1-proj-3-tuple(v_175) else caught-fail) in
        {560}let output3_4: key = (if v_176 then hmac_hash3(ck_29,input_key_material_4) else caught-fail) in
        {559}let output2_4: key = (if v_176 then hmac_hash2(ck_29,input_key_material_4) else caught-fail) in
        {558}let output1_4: key = (if v_176 then hmac_hash1(ck_29,input_key_material_4) else caught-fail) in
        {561}let v_177: bitstring = (if v_176 then catch-fail((output1_4,output2_4,output3_4)) else caught-fail) in
        {562}let v_178: bool = (not-caught-fail(v_177) && success?(1-proj-3-tuple(v_177))) in
        {563}let output_2: key = (if v_178 then 3-proj-3-tuple(v_177) else caught-fail) in
        {564}let temp_k_3: key = (if v_178 then 2-proj-3-tuple(v_177) else caught-fail) in
        {565}let ck_30: key = (if v_178 then 1-proj-3-tuple(v_177) else caught-fail) in
        {566}let ss_31: symmetricstate = (if v_171 then catch-fail((if v_174 then (if v_176 then (if v_178 then symmetricstatepack(cipherstatepack(temp_k_3,minnonce),ck_30,h_26) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {567}let v_179: bool = not-caught-fail(ss_31) in
        {568}let v_180: bitstring = (if v_179 then catch-fail(keypairunpack(e_12)) else caught-fail) in
        {569}let v_181: bool = (not-caught-fail(v_180) && success?(1-proj-2-tuple(v_180))) in
        {570}let my_private_key_4: key = (if v_181 then 2-proj-2-tuple(v_180) else caught-fail) in
        {571}let my_public_key_4: key = (if v_181 then 1-proj-2-tuple(v_180) else caught-fail) in
        {572}let input_key_material_5: key = (if v_179 then catch-fail((if v_181 then dhexp(my_private_key_4,rs_7) else fail-any)) else caught-fail) in
        {573}let v_182: bool = not-caught-fail(input_key_material_5) in
        {574}let v_183: bitstring = (if v_182 then catch-fail(symmetricstateunpack(ss_31)) else caught-fail) in
        {575}let v_184: bool = (not-caught-fail(v_183) && success?(1-proj-3-tuple(v_183))) in
        {576}let h_27: bitstring = (if v_184 then 3-proj-3-tuple(v_183) else caught-fail) in
        {577}let ck_31: key = (if v_184 then 2-proj-3-tuple(v_183) else caught-fail) in
        {578}let cs_27: cipherstate = (if v_184 then 1-proj-3-tuple(v_183) else caught-fail) in
        {581}let output3_5: key = (if v_184 then hmac_hash3(ck_31,input_key_material_5) else caught-fail) in
        {580}let output2_5: key = (if v_184 then hmac_hash2(ck_31,input_key_material_5) else caught-fail) in
        {579}let output1_5: key = (if v_184 then hmac_hash1(ck_31,input_key_material_5) else caught-fail) in
        {582}let v_185: bitstring = (if v_184 then catch-fail((output1_5,output2_5,output3_5)) else caught-fail) in
        {583}let v_186: bool = (not-caught-fail(v_185) && success?(1-proj-3-tuple(v_185))) in
        {584}let output_4: key = (if v_186 then 3-proj-3-tuple(v_185) else caught-fail) in
        {585}let temp_k_4: key = (if v_186 then 2-proj-3-tuple(v_185) else caught-fail) in
        {586}let ck_32: key = (if v_186 then 1-proj-3-tuple(v_185) else caught-fail) in
        {587}let ss_32: symmetricstate = (if v_179 then catch-fail((if v_182 then (if v_184 then (if v_186 then symmetricstatepack(cipherstatepack(temp_k_4,minnonce),ck_32,h_27) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {588}let v_187: bool = not-caught-fail(ss_32) in
        {589}let v_188: bitstring = (if v_187 then catch-fail(keypairunpack(e_12)) else caught-fail) in
        {590}let v_189: bool = (not-caught-fail(v_188) && success?(1-proj-2-tuple(v_188))) in
        {591}let my_private_key_5: key = (if v_189 then 2-proj-2-tuple(v_188) else caught-fail) in
        {592}let my_public_key_5: key = (if v_189 then 1-proj-2-tuple(v_188) else caught-fail) in
        {593}let input_key_material_6: key = (if v_187 then catch-fail((if v_189 then dhexp(my_private_key_5,rm_7) else fail-any)) else caught-fail) in
        {594}let v_190: bool = not-caught-fail(input_key_material_6) in
        {595}let v_191: bitstring = (if v_190 then catch-fail(symmetricstateunpack(ss_32)) else caught-fail) in
        {596}let v_192: bool = (not-caught-fail(v_191) && success?(1-proj-3-tuple(v_191))) in
        {597}let h_28: bitstring = (if v_192 then 3-proj-3-tuple(v_191) else caught-fail) in
        {598}let ck_33: key = (if v_192 then 2-proj-3-tuple(v_191) else caught-fail) in
        {599}let cs_28: cipherstate = (if v_192 then 1-proj-3-tuple(v_191) else caught-fail) in
        {602}let output3_6: key = (if v_192 then hmac_hash3(ck_33,input_key_material_6) else caught-fail) in
        {601}let output2_6: key = (if v_192 then hmac_hash2(ck_33,input_key_material_6) else caught-fail) in
        {600}let output1_6: key = (if v_192 then hmac_hash1(ck_33,input_key_material_6) else caught-fail) in
        {603}let v_193: bitstring = (if v_192 then catch-fail((output1_6,output2_6,output3_6)) else caught-fail) in
        {604}let v_194: bool = (not-caught-fail(v_193) && success?(1-proj-3-tuple(v_193))) in
        {605}let output_5: key = (if v_194 then 3-proj-3-tuple(v_193) else caught-fail) in
        {606}let temp_k_5: key = (if v_194 then 2-proj-3-tuple(v_193) else caught-fail) in
        {607}let ck_34: key = (if v_194 then 1-proj-3-tuple(v_193) else caught-fail) in
        {608}let ss_33: symmetricstate = (if v_187 then catch-fail((if v_190 then (if v_192 then (if v_194 then symmetricstatepack(cipherstatepack(temp_k_5,minnonce),ck_34,h_28) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {609}let v_195: bool = not-caught-fail(ss_33) in
        {610}let v_196: bitstring = (if v_195 then catch-fail(symmetricstateunpack(ss_33)) else caught-fail) in
        {611}let v_197: bool = (not-caught-fail(v_196) && success?(1-proj-3-tuple(v_196))) in
        {612}let h_29: bitstring = (if v_197 then 3-proj-3-tuple(v_196) else caught-fail) in
        {613}let ck_35: key = (if v_197 then 2-proj-3-tuple(v_196) else caught-fail) in
        {614}let cs_29: cipherstate = (if v_197 then 1-proj-3-tuple(v_196) else caught-fail) in
        {615}let v_198: bitstring = (if v_197 then catch-fail(cipherstateunpack(cs_29)) else caught-fail) in
        {616}let v_199: bool = (not-caught-fail(v_198) && success?(1-proj-2-tuple(v_198))) in
        {617}let n_10: nonce = (if v_199 then 2-proj-2-tuple(v_198) else caught-fail) in
        {618}let k_12: key = (if v_199 then 1-proj-2-tuple(v_198) else caught-fail) in
        {619}let d_2: aead = (if v_199 then catch-fail(decrypt(k_12,n_10,h_29,ciphertext_11)) else caught-fail) in
        {620}let v_200: bool = not-caught-fail(d_2) in
        {621}let v_201: bitstring = (if v_200 then catch-fail(aeadunpack(d_2)) else caught-fail) in
        {622}let v_202: bool = (not-caught-fail(v_201) && success?(1-proj-3-tuple(v_201))) in
        {623}let plaintext_6: bitstring = (if v_202 then 3-proj-3-tuple(v_201) else caught-fail) in
        {624}let adi_2: bitstring = (if v_202 then 2-proj-3-tuple(v_201) else caught-fail) in
        {625}let valid_6: bool = (if v_202 then 1-proj-3-tuple(v_201) else caught-fail) in
        {627}let v_203: bitstring = (if v_202 then catch-fail(cipherstateunpack(cs_29)) else caught-fail) in
        {628}let v_204: bool = (not-caught-fail(v_203) && success?(1-proj-2-tuple(v_203))) in
        {629}let o_5: nonce = (if v_204 then 2-proj-2-tuple(v_203) else caught-fail) in
        {630}let k_13: key = (if v_204 then 1-proj-2-tuple(v_203) else caught-fail) in
        {626}let n_11: nonce = (if v_202 then increment_nonce(n_10) else caught-fail) in
        {631}let csi_10: cipherstate = (if v_202 then catch-fail((if v_204 then cipherstatepack(k_13,n_11) else fail-any)) else caught-fail) in
        {632}let v_205: bool = not-caught-fail(csi_10) in
        {633}let v_206: bitstring = (if v_197 then catch-fail((if v_199 then (if v_200 then (if v_202 then (if v_205 then (csi_10,plaintext_6,valid_6) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {634}let v_207: bool = (not-caught-fail(v_206) && success?(1-proj-3-tuple(v_206))) in
        {635}let valid_7: bool = (if v_207 then 3-proj-3-tuple(v_206) else caught-fail) in
        {636}let plaintext_7: bitstring = (if v_207 then 2-proj-3-tuple(v_206) else caught-fail) in
        {637}let csi_11: cipherstate = (if v_207 then 1-proj-3-tuple(v_206) else caught-fail) in
        {638}let ss_34: symmetricstate = (if v_207 then symmetricstatepack(csi_11,ck_35,h_29) else caught-fail) in
        {639}let v_208: bitstring = (if v_207 then catch-fail(symmetricstateunpack(ss_34)) else caught-fail) in
        {640}let v_209: bool = (not-caught-fail(v_208) && success?(1-proj-3-tuple(v_208))) in
        {641}let h_30: bitstring = (if v_209 then 3-proj-3-tuple(v_208) else caught-fail) in
        {642}let ck_36: key = (if v_209 then 2-proj-3-tuple(v_208) else caught-fail) in
        {643}let cs_30: cipherstate = (if v_209 then 1-proj-3-tuple(v_208) else caught-fail) in
        {644}let ssi_6: symmetricstate = (if v_207 then catch-fail((if v_209 then symmetricstatepack(cs_30,ck_36,hash(h_30,ciphertext_11)) else fail-any)) else caught-fail) in
        {645}let v_210: bool = not-caught-fail(ssi_6) in
        {646}let v_211: bitstring = (if v_195 then catch-fail((if v_197 then (if v_207 then (if v_210 then (ssi_6,plaintext_7,valid_7) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {647}let v_212: bool = (not-caught-fail(v_211) && success?(1-proj-3-tuple(v_211))) in
        {648}let valid2_2: bool = (if v_212 then 3-proj-3-tuple(v_211) else caught-fail) in
        {649}let plaintext_8: bitstring = (if v_212 then 2-proj-3-tuple(v_211) else caught-fail) in
        {650}let ss_35: symmetricstate = (if v_212 then 1-proj-3-tuple(v_211) else caught-fail) in
        {538}let valid1_2: bool = (if v_168 then true else caught-fail) in
        {651}let v_213: bool = (if v_212 then catch-fail((valid1_2 && valid2_2)) else caught-fail) in
        {653}let v_214: bitstring = (if v_213 then catch-fail(symmetricstateunpack(ss_35)) else caught-fail) in
        {654}let v_215: bool = (not-caught-fail(v_214) && success?(1-proj-3-tuple(v_214))) in
        {655}let h_31: bitstring = (if v_215 then 3-proj-3-tuple(v_214) else caught-fail) in
        {656}let ck_37: key = (if v_215 then 2-proj-3-tuple(v_214) else caught-fail) in
        {657}let cs_31: cipherstate = (if v_215 then 1-proj-3-tuple(v_214) else caught-fail) in
        {658}let input_key_material_7: key = (if v_215 then zero else caught-fail) in
        {661}let output3_7: key = (if v_215 then hmac_hash3(ck_37,input_key_material_7) else caught-fail) in
        {660}let output2_7: key = (if v_215 then hmac_hash2(ck_37,input_key_material_7) else caught-fail) in
        {659}let output1_7: key = (if v_215 then hmac_hash1(ck_37,input_key_material_7) else caught-fail) in
        {662}let v_216: bitstring = (if v_215 then catch-fail((output1_7,output2_7,output3_7)) else caught-fail) in
        {663}let v_217: bool = (not-caught-fail(v_216) && success?(1-proj-3-tuple(v_216))) in
        {664}let temp_k3_1: key = (if v_217 then 3-proj-3-tuple(v_216) else caught-fail) in
        {665}let temp_k2_1: key = (if v_217 then 2-proj-3-tuple(v_216) else caught-fail) in
        {666}let temp_k1_1: key = (if v_217 then 1-proj-3-tuple(v_216) else caught-fail) in
        {668}let cs2_5: cipherstate = (if v_217 then cipherstatepack(temp_k2_1,minnonce) else caught-fail) in
        {667}let cs1_5: cipherstate = (if v_217 then cipherstatepack(temp_k1_1,minnonce) else caught-fail) in
        {669}let v_218: bitstring = (if v_213 then catch-fail((if v_215 then (if v_217 then (ss_35,cs1_5,cs2_5) else fail-any) else fail-any)) else caught-fail) in
        {670}let v_219: bool = (not-caught-fail(v_218) && success?(1-proj-3-tuple(v_218))) in
        {671}let cs2_6: cipherstate = (if v_219 then 3-proj-3-tuple(v_218) else caught-fail) in
        {672}let cs1_6: cipherstate = (if v_219 then 2-proj-3-tuple(v_218) else caught-fail) in
        {673}let ssi_7: symmetricstate = (if v_219 then 1-proj-3-tuple(v_218) else caught-fail) in
        {652}let hs_20: handshakestate = (if v_213 then handshakestatepack(ss_35,s_7,m_7,e_12,rs_7,rm_7,re_9,psk_7,initiator_6) else caught-fail) in
        {674}let (hs_21: handshakestate,plaintext_b_1: bitstring,valid_8: bool,cs1_7: cipherstate,cs2_7: cipherstate) = (if v_166 then (if v_168 then (if v_171 then (if v_179 then (if v_187 then (if v_195 then (if v_212 then (if undo-catch-fail(v_213) then (if v_219 then (hs_20,plaintext_8,true,cs1_6,cs2_6) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {675}event RecvMsg(me_1,them_1,stagepack_b(sid_2),plaintext_b_1);
        {676}insert statestore(me_1,them_1,sid_2,statepack_c(hs_21,cs1_7,cs2_7))
    ) | (
        {678}!
        {736}get statestore(=me_1,=them_1,=sid_2,statepack_c(hs_22: handshakestate,cs1_8: cipherstate,cs2_8: cipherstate)) in
        {679}let hs_23: handshakestate = handshakestatesetcs(hs_22,cs1_8) in
        {681}let v_220: bitstring = catch-fail(handshakestateunpack(hs_23)) in
        {682}let v_221: bool = (not-caught-fail(v_220) && success?(1-proj-9-tuple(v_220))) in
        {683}let initiator_7: bool = (if v_221 then 9-proj-9-tuple(v_220) else caught-fail) in
        {684}let psk_8: key = (if v_221 then 8-proj-9-tuple(v_220) else caught-fail) in
        {685}let re_10: key = (if v_221 then 7-proj-9-tuple(v_220) else caught-fail) in
        {686}let rm_8: key = (if v_221 then 6-proj-9-tuple(v_220) else caught-fail) in
        {687}let rs_8: key = (if v_221 then 5-proj-9-tuple(v_220) else caught-fail) in
        {688}let e_13: keypair = (if v_221 then 4-proj-9-tuple(v_220) else caught-fail) in
        {689}let m_8: keypair = (if v_221 then 3-proj-9-tuple(v_220) else caught-fail) in
        {690}let s_8: keypair = (if v_221 then 2-proj-9-tuple(v_220) else caught-fail) in
        {691}let ss_36: symmetricstate = (if v_221 then 1-proj-9-tuple(v_220) else caught-fail) in
        {692}let v_222: bitstring = (if v_221 then catch-fail((empty,empty,empty)) else caught-fail) in
        {693}let v_223: bool = (not-caught-fail(v_222) && success?(1-proj-3-tuple(v_222))) in
        {694}let ciphertext_12: bitstring = (if v_223 then 3-proj-3-tuple(v_222) else caught-fail) in
        {695}let ns_6: bitstring = (if v_223 then 2-proj-3-tuple(v_222) else caught-fail) in
        {696}let ne_8: bitstring = (if v_223 then 1-proj-3-tuple(v_222) else caught-fail) in
        {697}let v_224: bitstring = (if v_223 then catch-fail(symmetricstateunpack(ss_36)) else caught-fail) in
        {698}let v_225: bool = (not-caught-fail(v_224) && success?(1-proj-3-tuple(v_224))) in
        {699}let h_32: bitstring = (if v_225 then 3-proj-3-tuple(v_224) else caught-fail) in
        {700}let ck_38: key = (if v_225 then 2-proj-3-tuple(v_224) else caught-fail) in
        {701}let cs_32: cipherstate = (if v_225 then 1-proj-3-tuple(v_224) else caught-fail) in
        {702}let v_226: bitstring = (if v_225 then catch-fail(cipherstateunpack(cs_32)) else caught-fail) in
        {703}let v_227: bool = (not-caught-fail(v_226) && success?(1-proj-2-tuple(v_226))) in
        {704}let n_12: nonce = (if v_227 then 2-proj-2-tuple(v_226) else caught-fail) in
        {705}let k_14: key = (if v_227 then 1-proj-2-tuple(v_226) else caught-fail) in
        {708}let v_228: bitstring = (if v_227 then catch-fail(cipherstateunpack(cs_32)) else caught-fail) in
        {709}let v_229: bool = (not-caught-fail(v_228) && success?(1-proj-2-tuple(v_228))) in
        {710}let o_6: nonce = (if v_229 then 2-proj-2-tuple(v_228) else caught-fail) in
        {711}let k_15: key = (if v_229 then 1-proj-2-tuple(v_228) else caught-fail) in
        {707}let n_13: nonce = (if v_227 then increment_nonce(n_12) else caught-fail) in
        {712}let csi_12: cipherstate = (if v_227 then catch-fail((if v_229 then cipherstatepack(k_15,n_13) else fail-any)) else caught-fail) in
        {713}let v_230: bool = not-caught-fail(csi_12) in
        {680}let payload_3: bitstring = msg_c(me_1,them_1,sid_2) in
        {706}let e_14: bitstring = (if v_227 then encrypt(k_14,n_12,h_32,payload_3) else caught-fail) in
        {714}let v_231: bitstring = (if v_225 then catch-fail((if v_227 then (if v_230 then (csi_12,e_14) else fail-any) else fail-any)) else caught-fail) in
        {715}let v_232: bool = (not-caught-fail(v_231) && success?(1-proj-2-tuple(v_231))) in
        {716}let ciphertext_13: bitstring = (if v_232 then 2-proj-2-tuple(v_231) else caught-fail) in
        {717}let csi_13: cipherstate = (if v_232 then 1-proj-2-tuple(v_231) else caught-fail) in
        {718}let ss_37: symmetricstate = (if v_232 then symmetricstatepack(csi_13,ck_38,h_32) else caught-fail) in
        {719}let v_233: bitstring = (if v_232 then catch-fail(symmetricstateunpack(ss_37)) else caught-fail) in
        {720}let v_234: bool = (not-caught-fail(v_233) && success?(1-proj-3-tuple(v_233))) in
        {721}let h_33: bitstring = (if v_234 then 3-proj-3-tuple(v_233) else caught-fail) in
        {722}let ck_39: key = (if v_234 then 2-proj-3-tuple(v_233) else caught-fail) in
        {723}let cs_33: cipherstate = (if v_234 then 1-proj-3-tuple(v_233) else caught-fail) in
        {724}let ssi_8: symmetricstate = (if v_232 then catch-fail((if v_234 then symmetricstatepack(cs_33,ck_39,hash(h_33,ciphertext_13)) else fail-any)) else caught-fail) in
        {725}let v_235: bool = not-caught-fail(ssi_8) in
        {726}let v_236: bitstring = (if v_223 then catch-fail((if v_225 then (if v_232 then (if v_235 then (ssi_8,ciphertext_13) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {727}let v_237: bool = (not-caught-fail(v_236) && success?(1-proj-2-tuple(v_236))) in
        {728}let ciphertext_14: bitstring = (if v_237 then 2-proj-2-tuple(v_236) else caught-fail) in
        {729}let ss_38: symmetricstate = (if v_237 then 1-proj-2-tuple(v_236) else caught-fail) in
        {731}let message_buffer_3: bitstring = (if v_237 then concat3(ne_8,ns_6,ciphertext_14) else caught-fail) in
        {730}let hs_24: handshakestate = (if v_237 then handshakestatepack(ss_38,s_8,m_8,e_13,rs_8,rm_8,re_10,psk_8,initiator_7) else caught-fail) in
        {732}let (hs_25: handshakestate,message_c_1: bitstring) = (if v_221 then (if v_223 then (if v_237 then (hs_24,message_buffer_3) else fail-any) else fail-any) else fail-any) in
        {733}event SendMsg(me_1,them_1,stagepack_c(sid_2),msg_c(me_1,them_1,sid_2));
        {734}insert statestore(me_1,them_1,sid_2,statepack_d(hs_25,handshakestategetcs(hs_25),cs2_8));
        {735}out(pub, message_c_1)
    ) | (
        {737}!
        {803}get statestore(=me_1,=them_1,=sid_2,statepack_d(hs_26: handshakestate,cs1_9: cipherstate,cs2_9: cipherstate)) in
        {738}let hs_27: handshakestate = handshakestatesetcs(hs_26,cs2_9) in
        {739}in(pub, message_d_1: bitstring);
        {740}let v_238: bitstring = catch-fail(handshakestateunpack(hs_27)) in
        {741}let v_239: bool = (not-caught-fail(v_238) && success?(1-proj-9-tuple(v_238))) in
        {742}let initiator_8: bool = (if v_239 then 9-proj-9-tuple(v_238) else caught-fail) in
        {743}let psk_9: key = (if v_239 then 8-proj-9-tuple(v_238) else caught-fail) in
        {744}let re_11: key = (if v_239 then 7-proj-9-tuple(v_238) else caught-fail) in
        {745}let rm_9: key = (if v_239 then 6-proj-9-tuple(v_238) else caught-fail) in
        {746}let rs_9: key = (if v_239 then 5-proj-9-tuple(v_238) else caught-fail) in
        {747}let e_15: keypair = (if v_239 then 4-proj-9-tuple(v_238) else caught-fail) in
        {748}let m_9: keypair = (if v_239 then 3-proj-9-tuple(v_238) else caught-fail) in
        {749}let s_9: keypair = (if v_239 then 2-proj-9-tuple(v_238) else caught-fail) in
        {750}let ss_39: symmetricstate = (if v_239 then 1-proj-9-tuple(v_238) else caught-fail) in
        {751}let v_240: bitstring = (if v_239 then catch-fail(deconcat3(message_d_1)) else caught-fail) in
        {752}let v_241: bool = (not-caught-fail(v_240) && success?(1-proj-3-tuple(v_240))) in
        {753}let ciphertext_15: bitstring = (if v_241 then 3-proj-3-tuple(v_240) else caught-fail) in
        {754}let ns_7: bitstring = (if v_241 then 2-proj-3-tuple(v_240) else caught-fail) in
        {755}let ne_9: bitstring = (if v_241 then 1-proj-3-tuple(v_240) else caught-fail) in
        {757}let v_242: bitstring = (if v_241 then catch-fail(symmetricstateunpack(ss_39)) else caught-fail) in
        {758}let v_243: bool = (not-caught-fail(v_242) && success?(1-proj-3-tuple(v_242))) in
        {759}let h_34: bitstring = (if v_243 then 3-proj-3-tuple(v_242) else caught-fail) in
        {760}let ck_40: key = (if v_243 then 2-proj-3-tuple(v_242) else caught-fail) in
        {761}let cs_34: cipherstate = (if v_243 then 1-proj-3-tuple(v_242) else caught-fail) in
        {762}let v_244: bitstring = (if v_243 then catch-fail(cipherstateunpack(cs_34)) else caught-fail) in
        {763}let v_245: bool = (not-caught-fail(v_244) && success?(1-proj-2-tuple(v_244))) in
        {764}let n_14: nonce = (if v_245 then 2-proj-2-tuple(v_244) else caught-fail) in
        {765}let k_16: key = (if v_245 then 1-proj-2-tuple(v_244) else caught-fail) in
        {766}let d_3: aead = (if v_245 then catch-fail(decrypt(k_16,n_14,h_34,ciphertext_15)) else caught-fail) in
        {767}let v_246: bool = not-caught-fail(d_3) in
        {768}let v_247: bitstring = (if v_246 then catch-fail(aeadunpack(d_3)) else caught-fail) in
        {769}let v_248: bool = (not-caught-fail(v_247) && success?(1-proj-3-tuple(v_247))) in
        {770}let plaintext_9: bitstring = (if v_248 then 3-proj-3-tuple(v_247) else caught-fail) in
        {771}let adi_3: bitstring = (if v_248 then 2-proj-3-tuple(v_247) else caught-fail) in
        {772}let valid_9: bool = (if v_248 then 1-proj-3-tuple(v_247) else caught-fail) in
        {774}let v_249: bitstring = (if v_248 then catch-fail(cipherstateunpack(cs_34)) else caught-fail) in
        {775}let v_250: bool = (not-caught-fail(v_249) && success?(1-proj-2-tuple(v_249))) in
        {776}let o_7: nonce = (if v_250 then 2-proj-2-tuple(v_249) else caught-fail) in
        {777}let k_17: key = (if v_250 then 1-proj-2-tuple(v_249) else caught-fail) in
        {773}let n_15: nonce = (if v_248 then increment_nonce(n_14) else caught-fail) in
        {778}let csi_14: cipherstate = (if v_248 then catch-fail((if v_250 then cipherstatepack(k_17,n_15) else fail-any)) else caught-fail) in
        {779}let v_251: bool = not-caught-fail(csi_14) in
        {780}let v_252: bitstring = (if v_243 then catch-fail((if v_245 then (if v_246 then (if v_248 then (if v_251 then (csi_14,plaintext_9,valid_9) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {781}let v_253: bool = (not-caught-fail(v_252) && success?(1-proj-3-tuple(v_252))) in
        {782}let valid_10: bool = (if v_253 then 3-proj-3-tuple(v_252) else caught-fail) in
        {783}let plaintext_10: bitstring = (if v_253 then 2-proj-3-tuple(v_252) else caught-fail) in
        {784}let csi_15: cipherstate = (if v_253 then 1-proj-3-tuple(v_252) else caught-fail) in
        {785}let ss_40: symmetricstate = (if v_253 then symmetricstatepack(csi_15,ck_40,h_34) else caught-fail) in
        {786}let v_254: bitstring = (if v_253 then catch-fail(symmetricstateunpack(ss_40)) else caught-fail) in
        {787}let v_255: bool = (not-caught-fail(v_254) && success?(1-proj-3-tuple(v_254))) in
        {788}let h_35: bitstring = (if v_255 then 3-proj-3-tuple(v_254) else caught-fail) in
        {789}let ck_41: key = (if v_255 then 2-proj-3-tuple(v_254) else caught-fail) in
        {790}let cs_35: cipherstate = (if v_255 then 1-proj-3-tuple(v_254) else caught-fail) in
        {791}let ssi_9: symmetricstate = (if v_253 then catch-fail((if v_255 then symmetricstatepack(cs_35,ck_41,hash(h_35,ciphertext_15)) else fail-any)) else caught-fail) in
        {792}let v_256: bool = not-caught-fail(ssi_9) in
        {793}let v_257: bitstring = (if v_241 then catch-fail((if v_243 then (if v_253 then (if v_256 then (ssi_9,plaintext_10,valid_10) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {794}let v_258: bool = (not-caught-fail(v_257) && success?(1-proj-3-tuple(v_257))) in
        {795}let valid2_3: bool = (if v_258 then 3-proj-3-tuple(v_257) else caught-fail) in
        {796}let plaintext_11: bitstring = (if v_258 then 2-proj-3-tuple(v_257) else caught-fail) in
        {797}let ss_41: symmetricstate = (if v_258 then 1-proj-3-tuple(v_257) else caught-fail) in
        {756}let valid1_3: bool = (if v_241 then true else caught-fail) in
        {798}let v_259: bool = (if v_258 then catch-fail((valid1_3 && valid2_3)) else caught-fail) in
        {799}let hs_28: handshakestate = (if v_259 then handshakestatepack(ss_41,s_9,m_9,e_15,rs_9,rm_9,re_11,psk_9,initiator_8) else caught-fail) in
        {800}let (hs_29: handshakestate,plaintext_d_1: bitstring,valid_11: bool) = (if v_239 then (if v_241 then (if v_258 then (if undo-catch-fail(v_259) then (hs_28,plaintext_11,true) else fail-any) else fail-any) else fail-any) else fail-any) in
        {801}event RecvMsg(me_1,them_1,stagepack_d(sid_2),plaintext_d_1);
        {802}event RecvEnd(valid_11)
    ) | (
        0
    )
) | (
    {804}let me_2: principal = bob in
    {807}let basis_6: key = key_s(me_2) in
    {808}let public_key_6: key = catch-fail(dhexp(basis_6,validkey(g))) in
    {809}let v_260: bool = not-caught-fail(public_key_6) in
    {810}let s_10: keypair = (if v_260 then keypairpack(validkey(public_key_6),basis_6) else fail-any) in
    {811}let basis_7: key = key_m(me_2) in
    {812}let public_key_7: key = catch-fail(dhexp(basis_7,validkey(g))) in
    {813}let v_261: bool = not-caught-fail(public_key_7) in
    {814}let m_10: keypair = (if v_261 then keypairpack(validkey(public_key_7),basis_7) else fail-any) in
    {815}out(pub, (getpublickey(s_10),getpublickey(m_10)));
    {806}let sid_3: sessionid = sid in
    {805}let them_2: principal = alice in
    (
        {825}let k_18: key = empty in
        {826}let cs_36: cipherstate = cipherstatepack(k_18,minnonce) in
        {822}let protocol_name_2: bitstring = somename in
        {823}let h_36: bitstring = hash(protocol_name_2,empty) in
        {824}let ck_42: key = h_36 in
        {827}let ss_42: symmetricstate = symmetricstatepack(cs_36,ck_42,h_36) in
        {828}let v_262: bitstring = catch-fail(symmetricstateunpack(ss_42)) in
        {829}let v_263: bool = (not-caught-fail(v_262) && success?(1-proj-3-tuple(v_262))) in
        {830}let h_37: bitstring = (if v_263 then 3-proj-3-tuple(v_262) else caught-fail) in
        {831}let ck_43: key = (if v_263 then 2-proj-3-tuple(v_262) else caught-fail) in
        {832}let cs_37: cipherstate = (if v_263 then 1-proj-3-tuple(v_262) else caught-fail) in
        {820}let prologue_2: bitstring = empty in
        {833}let ss_43: symmetricstate = catch-fail((if v_263 then symmetricstatepack(cs_37,ck_43,hash(h_37,prologue_2)) else fail-any)) in
        {834}let v_264: bool = not-caught-fail(ss_43) in
        {835}let data: bitstring = (if v_264 then catch-fail(getpublickey(s_10)) else caught-fail) in
        {836}let v_265: bool = not-caught-fail(data) in
        {837}let v_266: bitstring = (if v_265 then catch-fail(symmetricstateunpack(ss_43)) else caught-fail) in
        {838}let v_267: bool = (not-caught-fail(v_266) && success?(1-proj-3-tuple(v_266))) in
        {839}let h_38: bitstring = (if v_267 then 3-proj-3-tuple(v_266) else caught-fail) in
        {840}let ck_44: key = (if v_267 then 2-proj-3-tuple(v_266) else caught-fail) in
        {841}let cs_38: cipherstate = (if v_267 then 1-proj-3-tuple(v_266) else caught-fail) in
        {842}let ss_44: symmetricstate = (if v_264 then catch-fail((if v_265 then (if v_267 then symmetricstatepack(cs_38,ck_44,hash(h_38,data)) else fail-any) else fail-any)) else caught-fail) in
        {843}let v_268: bool = not-caught-fail(ss_44) in
        {844}let data_1: bitstring = (if v_268 then catch-fail(getpublickey(m_10)) else caught-fail) in
        {845}let v_269: bool = not-caught-fail(data_1) in
        {846}let v_270: bitstring = (if v_269 then catch-fail(symmetricstateunpack(ss_44)) else caught-fail) in
        {847}let v_271: bool = (not-caught-fail(v_270) && success?(1-proj-3-tuple(v_270))) in
        {848}let h_39: bitstring = (if v_271 then 3-proj-3-tuple(v_270) else caught-fail) in
        {849}let ck_45: key = (if v_271 then 2-proj-3-tuple(v_270) else caught-fail) in
        {850}let cs_39: cipherstate = (if v_271 then 1-proj-3-tuple(v_270) else caught-fail) in
        {851}let ss_45: symmetricstate = (if v_268 then catch-fail((if v_269 then (if v_271 then symmetricstatepack(cs_39,ck_45,hash(h_39,data_1)) else fail-any) else fail-any)) else caught-fail) in
        {852}let v_272: bool = not-caught-fail(ss_45) in
        {821}let psk_10: key = empty in
        {819}let re_12: key = empty in
        {818}let rm_10: key = empty in
        {817}let rs_10: key = empty in
        {816}let e_16: keypair = keypairpack(empty,empty) in
        {853}let hs_30: handshakestate = (if v_264 then (if v_268 then (if v_272 then handshakestatepack(ss_45,s_10,m_10,e_16,rs_10,rm_10,re_12,psk_10,false) else fail-any) else fail-any) else fail-any) in
        {854}insert statestore(me_2,them_2,sid_3,statepack_a(hs_30))
    ) | (
        {927}get statestore(=me_2,=them_2,=sid_3,statepack_a(hs_31: handshakestate)) in
        {855}in(pub, message_a_2: bitstring);
        {856}let v_273: bitstring = catch-fail(handshakestateunpack(hs_31)) in
        {857}let v_274: bool = (not-caught-fail(v_273) && success?(1-proj-9-tuple(v_273))) in
        {858}let initiator_9: bool = (if v_274 then 9-proj-9-tuple(v_273) else caught-fail) in
        {859}let psk_11: key = (if v_274 then 8-proj-9-tuple(v_273) else caught-fail) in
        {860}let re_13: key = (if v_274 then 7-proj-9-tuple(v_273) else caught-fail) in
        {861}let rm_11: key = (if v_274 then 6-proj-9-tuple(v_273) else caught-fail) in
        {862}let rs_11: key = (if v_274 then 5-proj-9-tuple(v_273) else caught-fail) in
        {863}let e_17: keypair = (if v_274 then 4-proj-9-tuple(v_273) else caught-fail) in
        {864}let m_11: keypair = (if v_274 then 3-proj-9-tuple(v_273) else caught-fail) in
        {865}let s_11: keypair = (if v_274 then 2-proj-9-tuple(v_273) else caught-fail) in
        {866}let ss_46: symmetricstate = (if v_274 then 1-proj-9-tuple(v_273) else caught-fail) in
        {867}let v_275: bitstring = (if v_274 then catch-fail(deconcat3(message_a_2)) else caught-fail) in
        {868}let v_276: bool = (not-caught-fail(v_275) && success?(1-proj-3-tuple(v_275))) in
        {869}let ciphertext_16: bitstring = (if v_276 then 3-proj-3-tuple(v_275) else caught-fail) in
        {870}let ns_8: bitstring = (if v_276 then 2-proj-3-tuple(v_275) else caught-fail) in
        {871}let ne_10: bitstring = (if v_276 then 1-proj-3-tuple(v_275) else caught-fail) in
        {874}let v_277: bitstring = (if v_276 then catch-fail(symmetricstateunpack(ss_46)) else caught-fail) in
        {875}let v_278: bool = (not-caught-fail(v_277) && success?(1-proj-3-tuple(v_277))) in
        {876}let h_40: bitstring = (if v_278 then 3-proj-3-tuple(v_277) else caught-fail) in
        {877}let ck_46: key = (if v_278 then 2-proj-3-tuple(v_277) else caught-fail) in
        {878}let cs_40: cipherstate = (if v_278 then 1-proj-3-tuple(v_277) else caught-fail) in
        {873}let re_14: key = (if v_276 then ne_10 else caught-fail) in
        {879}let ss_47: symmetricstate = (if v_276 then catch-fail((if v_278 then symmetricstatepack(cs_40,ck_46,hash(h_40,re_14)) else fail-any)) else caught-fail) in
        {880}let v_279: bool = not-caught-fail(ss_47) in
        {881}let v_280: bitstring = (if v_279 then catch-fail(symmetricstateunpack(ss_47)) else caught-fail) in
        {882}let v_281: bool = (not-caught-fail(v_280) && success?(1-proj-3-tuple(v_280))) in
        {883}let h_41: bitstring = (if v_281 then 3-proj-3-tuple(v_280) else caught-fail) in
        {884}let ck_47: key = (if v_281 then 2-proj-3-tuple(v_280) else caught-fail) in
        {885}let cs_41: cipherstate = (if v_281 then 1-proj-3-tuple(v_280) else caught-fail) in
        {886}let v_282: bitstring = (if v_281 then catch-fail(cipherstateunpack(cs_41)) else caught-fail) in
        {887}let v_283: bool = (not-caught-fail(v_282) && success?(1-proj-2-tuple(v_282))) in
        {888}let n_16: nonce = (if v_283 then 2-proj-2-tuple(v_282) else caught-fail) in
        {889}let k_19: key = (if v_283 then 1-proj-2-tuple(v_282) else caught-fail) in
        {890}let d_4: aead = (if v_283 then catch-fail(decrypt(k_19,n_16,h_41,ciphertext_16)) else caught-fail) in
        {891}let v_284: bool = not-caught-fail(d_4) in
        {892}let v_285: bitstring = (if v_284 then catch-fail(aeadunpack(d_4)) else caught-fail) in
        {893}let v_286: bool = (not-caught-fail(v_285) && success?(1-proj-3-tuple(v_285))) in
        {894}let plaintext_12: bitstring = (if v_286 then 3-proj-3-tuple(v_285) else caught-fail) in
        {895}let adi_4: bitstring = (if v_286 then 2-proj-3-tuple(v_285) else caught-fail) in
        {896}let valid_12: bool = (if v_286 then 1-proj-3-tuple(v_285) else caught-fail) in
        {898}let v_287: bitstring = (if v_286 then catch-fail(cipherstateunpack(cs_41)) else caught-fail) in
        {899}let v_288: bool = (not-caught-fail(v_287) && success?(1-proj-2-tuple(v_287))) in
        {900}let o_8: nonce = (if v_288 then 2-proj-2-tuple(v_287) else caught-fail) in
        {901}let k_20: key = (if v_288 then 1-proj-2-tuple(v_287) else caught-fail) in
        {897}let n_17: nonce = (if v_286 then increment_nonce(n_16) else caught-fail) in
        {902}let csi_16: cipherstate = (if v_286 then catch-fail((if v_288 then cipherstatepack(k_20,n_17) else fail-any)) else caught-fail) in
        {903}let v_289: bool = not-caught-fail(csi_16) in
        {904}let v_290: bitstring = (if v_281 then catch-fail((if v_283 then (if v_284 then (if v_286 then (if v_289 then (csi_16,plaintext_12,valid_12) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {905}let v_291: bool = (not-caught-fail(v_290) && success?(1-proj-3-tuple(v_290))) in
        {906}let valid_13: bool = (if v_291 then 3-proj-3-tuple(v_290) else caught-fail) in
        {907}let plaintext_13: bitstring = (if v_291 then 2-proj-3-tuple(v_290) else caught-fail) in
        {908}let csi_17: cipherstate = (if v_291 then 1-proj-3-tuple(v_290) else caught-fail) in
        {909}let ss_48: symmetricstate = (if v_291 then symmetricstatepack(csi_17,ck_47,h_41) else caught-fail) in
        {910}let v_292: bitstring = (if v_291 then catch-fail(symmetricstateunpack(ss_48)) else caught-fail) in
        {911}let v_293: bool = (not-caught-fail(v_292) && success?(1-proj-3-tuple(v_292))) in
        {912}let h_42: bitstring = (if v_293 then 3-proj-3-tuple(v_292) else caught-fail) in
        {913}let ck_48: key = (if v_293 then 2-proj-3-tuple(v_292) else caught-fail) in
        {914}let cs_42: cipherstate = (if v_293 then 1-proj-3-tuple(v_292) else caught-fail) in
        {915}let ssi_10: symmetricstate = (if v_291 then catch-fail((if v_293 then symmetricstatepack(cs_42,ck_48,hash(h_42,ciphertext_16)) else fail-any)) else caught-fail) in
        {916}let v_294: bool = not-caught-fail(ssi_10) in
        {917}let v_295: bitstring = (if v_279 then catch-fail((if v_281 then (if v_291 then (if v_294 then (ssi_10,plaintext_13,valid_13) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {918}let v_296: bool = (not-caught-fail(v_295) && success?(1-proj-3-tuple(v_295))) in
        {919}let valid2_4: bool = (if v_296 then 3-proj-3-tuple(v_295) else caught-fail) in
        {920}let plaintext_14: bitstring = (if v_296 then 2-proj-3-tuple(v_295) else caught-fail) in
        {921}let ss_49: symmetricstate = (if v_296 then 1-proj-3-tuple(v_295) else caught-fail) in
        {872}let valid1_4: bool = (if v_276 then true else caught-fail) in
        {922}let v_297: bool = (if v_296 then catch-fail((valid1_4 && valid2_4)) else caught-fail) in
        {923}let hs_32: handshakestate = (if v_297 then handshakestatepack(ss_49,s_11,m_11,e_17,rs_11,rm_11,re_14,psk_11,initiator_9) else caught-fail) in
        {924}let (hs_33: handshakestate,plaintext_a: bitstring,valid_14: bool) = (if v_274 then (if v_276 then (if v_279 then (if v_296 then (if undo-catch-fail(v_297) then (hs_32,plaintext_14,true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {925}event RecvMsg(me_2,them_2,stagepack_a(sid_3),plaintext_a);
        {926}insert statestore(me_2,them_2,sid_3,statepack_b(hs_33))
    ) | (
        {1082}get statestore(=me_2,=them_2,=sid_3,statepack_b(hs_34: handshakestate)) in
        {929}let v_298: bitstring = catch-fail(handshakestateunpack(hs_34)) in
        {930}let v_299: bool = (not-caught-fail(v_298) && success?(1-proj-9-tuple(v_298))) in
        {931}let initiator_10: bool = (if v_299 then 9-proj-9-tuple(v_298) else caught-fail) in
        {932}let psk_12: key = (if v_299 then 8-proj-9-tuple(v_298) else caught-fail) in
        {933}let re_15: key = (if v_299 then 7-proj-9-tuple(v_298) else caught-fail) in
        {934}let rm_12: key = (if v_299 then 6-proj-9-tuple(v_298) else caught-fail) in
        {935}let rs_12: key = (if v_299 then 5-proj-9-tuple(v_298) else caught-fail) in
        {936}let e_18: keypair = (if v_299 then 4-proj-9-tuple(v_298) else caught-fail) in
        {937}let m_12: keypair = (if v_299 then 3-proj-9-tuple(v_298) else caught-fail) in
        {938}let s_12: keypair = (if v_299 then 2-proj-9-tuple(v_298) else caught-fail) in
        {939}let ss_50: symmetricstate = (if v_299 then 1-proj-9-tuple(v_298) else caught-fail) in
        {940}let v_300: bitstring = (if v_299 then catch-fail((empty,empty,empty)) else caught-fail) in
        {941}let v_301: bool = (not-caught-fail(v_300) && success?(1-proj-3-tuple(v_300))) in
        {942}let ciphertext_17: bitstring = (if v_301 then 3-proj-3-tuple(v_300) else caught-fail) in
        {943}let ns_9: bitstring = (if v_301 then 2-proj-3-tuple(v_300) else caught-fail) in
        {944}let ne_11: bitstring = (if v_301 then 1-proj-3-tuple(v_300) else caught-fail) in
        {945}let basis_8: key = (if v_301 then key_e(me_2,them_2,sid_3) else caught-fail) in
        {946}let public_key_8: key = (if v_301 then catch-fail(dhexp(basis_8,validkey(g))) else caught-fail) in
        {947}let v_302: bool = not-caught-fail(public_key_8) in
        {948}let e_19: keypair = (if v_301 then catch-fail((if v_302 then keypairpack(validkey(public_key_8),basis_8) else fail-any)) else caught-fail) in
        {949}let v_303: bool = not-caught-fail(e_19) in
        {950}let ne_12: bitstring = (if v_303 then catch-fail(getpublickey(e_19)) else caught-fail) in
        {951}let v_304: bool = not-caught-fail(ne_12) in
        {952}let v_305: bitstring = (if v_304 then catch-fail(symmetricstateunpack(ss_50)) else caught-fail) in
        {953}let v_306: bool = (not-caught-fail(v_305) && success?(1-proj-3-tuple(v_305))) in
        {954}let h_43: bitstring = (if v_306 then 3-proj-3-tuple(v_305) else caught-fail) in
        {955}let ck_49: key = (if v_306 then 2-proj-3-tuple(v_305) else caught-fail) in
        {956}let cs_43: cipherstate = (if v_306 then 1-proj-3-tuple(v_305) else caught-fail) in
        {957}let ss_51: symmetricstate = (if v_304 then catch-fail((if v_306 then symmetricstatepack(cs_43,ck_49,hash(h_43,ne_12)) else fail-any)) else caught-fail) in
        {958}let v_307: bool = not-caught-fail(ss_51) in
        {959}let v_308: bitstring = (if v_307 then catch-fail(keypairunpack(e_19)) else caught-fail) in
        {960}let v_309: bool = (not-caught-fail(v_308) && success?(1-proj-2-tuple(v_308))) in
        {961}let my_private_key_6: key = (if v_309 then 2-proj-2-tuple(v_308) else caught-fail) in
        {962}let my_public_key_6: key = (if v_309 then 1-proj-2-tuple(v_308) else caught-fail) in
        {963}let input_key_material_8: key = (if v_307 then catch-fail((if v_309 then dhexp(my_private_key_6,re_15) else fail-any)) else caught-fail) in
        {964}let v_310: bool = not-caught-fail(input_key_material_8) in
        {965}let v_311: bitstring = (if v_310 then catch-fail(symmetricstateunpack(ss_51)) else caught-fail) in
        {966}let v_312: bool = (not-caught-fail(v_311) && success?(1-proj-3-tuple(v_311))) in
        {967}let h_44: bitstring = (if v_312 then 3-proj-3-tuple(v_311) else caught-fail) in
        {968}let ck_50: key = (if v_312 then 2-proj-3-tuple(v_311) else caught-fail) in
        {969}let cs_44: cipherstate = (if v_312 then 1-proj-3-tuple(v_311) else caught-fail) in
        {972}let output3_8: key = (if v_312 then hmac_hash3(ck_50,input_key_material_8) else caught-fail) in
        {971}let output2_8: key = (if v_312 then hmac_hash2(ck_50,input_key_material_8) else caught-fail) in
        {970}let output1_8: key = (if v_312 then hmac_hash1(ck_50,input_key_material_8) else caught-fail) in
        {973}let v_313: bitstring = (if v_312 then catch-fail((output1_8,output2_8,output3_8)) else caught-fail) in
        {974}let v_314: bool = (not-caught-fail(v_313) && success?(1-proj-3-tuple(v_313))) in
        {975}let output_6: key = (if v_314 then 3-proj-3-tuple(v_313) else caught-fail) in
        {976}let temp_k_6: key = (if v_314 then 2-proj-3-tuple(v_313) else caught-fail) in
        {977}let ck_51: key = (if v_314 then 1-proj-3-tuple(v_313) else caught-fail) in
        {978}let ss_52: symmetricstate = (if v_307 then catch-fail((if v_310 then (if v_312 then (if v_314 then symmetricstatepack(cipherstatepack(temp_k_6,minnonce),ck_51,h_44) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {979}let v_315: bool = not-caught-fail(ss_52) in
        {980}let v_316: bitstring = (if v_315 then catch-fail(keypairunpack(s_12)) else caught-fail) in
        {981}let v_317: bool = (not-caught-fail(v_316) && success?(1-proj-2-tuple(v_316))) in
        {982}let my_private_key_7: key = (if v_317 then 2-proj-2-tuple(v_316) else caught-fail) in
        {983}let my_public_key_7: key = (if v_317 then 1-proj-2-tuple(v_316) else caught-fail) in
        {984}let input_key_material_9: key = (if v_315 then catch-fail((if v_317 then dhexp(my_private_key_7,re_15) else fail-any)) else caught-fail) in
        {985}let v_318: bool = not-caught-fail(input_key_material_9) in
        {986}let v_319: bitstring = (if v_318 then catch-fail(symmetricstateunpack(ss_52)) else caught-fail) in
        {987}let v_320: bool = (not-caught-fail(v_319) && success?(1-proj-3-tuple(v_319))) in
        {988}let h_45: bitstring = (if v_320 then 3-proj-3-tuple(v_319) else caught-fail) in
        {989}let ck_52: key = (if v_320 then 2-proj-3-tuple(v_319) else caught-fail) in
        {990}let cs_45: cipherstate = (if v_320 then 1-proj-3-tuple(v_319) else caught-fail) in
        {993}let output3_9: key = (if v_320 then hmac_hash3(ck_52,input_key_material_9) else caught-fail) in
        {992}let output2_9: key = (if v_320 then hmac_hash2(ck_52,input_key_material_9) else caught-fail) in
        {991}let output1_9: key = (if v_320 then hmac_hash1(ck_52,input_key_material_9) else caught-fail) in
        {994}let v_321: bitstring = (if v_320 then catch-fail((output1_9,output2_9,output3_9)) else caught-fail) in
        {995}let v_322: bool = (not-caught-fail(v_321) && success?(1-proj-3-tuple(v_321))) in
        {996}let output_7: key = (if v_322 then 3-proj-3-tuple(v_321) else caught-fail) in
        {997}let temp_k_7: key = (if v_322 then 2-proj-3-tuple(v_321) else caught-fail) in
        {998}let ck_53: key = (if v_322 then 1-proj-3-tuple(v_321) else caught-fail) in
        {999}let ss_53: symmetricstate = (if v_315 then catch-fail((if v_318 then (if v_320 then (if v_322 then symmetricstatepack(cipherstatepack(temp_k_7,minnonce),ck_53,h_45) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1000}let v_323: bool = not-caught-fail(ss_53) in
        {1001}let v_324: bitstring = (if v_323 then catch-fail(keypairunpack(m_12)) else caught-fail) in
        {1002}let v_325: bool = (not-caught-fail(v_324) && success?(1-proj-2-tuple(v_324))) in
        {1003}let my_private_key_8: key = (if v_325 then 2-proj-2-tuple(v_324) else caught-fail) in
        {1004}let my_public_key_8: key = (if v_325 then 1-proj-2-tuple(v_324) else caught-fail) in
        {1005}let input_key_material_10: key = (if v_323 then catch-fail((if v_325 then dhexp(my_private_key_8,re_15) else fail-any)) else caught-fail) in
        {1006}let v_326: bool = not-caught-fail(input_key_material_10) in
        {1007}let v_327: bitstring = (if v_326 then catch-fail(symmetricstateunpack(ss_53)) else caught-fail) in
        {1008}let v_328: bool = (not-caught-fail(v_327) && success?(1-proj-3-tuple(v_327))) in
        {1009}let h_46: bitstring = (if v_328 then 3-proj-3-tuple(v_327) else caught-fail) in
        {1010}let ck_54: key = (if v_328 then 2-proj-3-tuple(v_327) else caught-fail) in
        {1011}let cs_46: cipherstate = (if v_328 then 1-proj-3-tuple(v_327) else caught-fail) in
        {1014}let output3_10: key = (if v_328 then hmac_hash3(ck_54,input_key_material_10) else caught-fail) in
        {1013}let output2_10: key = (if v_328 then hmac_hash2(ck_54,input_key_material_10) else caught-fail) in
        {1012}let output1_10: key = (if v_328 then hmac_hash1(ck_54,input_key_material_10) else caught-fail) in
        {1015}let v_329: bitstring = (if v_328 then catch-fail((output1_10,output2_10,output3_10)) else caught-fail) in
        {1016}let v_330: bool = (not-caught-fail(v_329) && success?(1-proj-3-tuple(v_329))) in
        {1017}let output_8: key = (if v_330 then 3-proj-3-tuple(v_329) else caught-fail) in
        {1018}let temp_k_8: key = (if v_330 then 2-proj-3-tuple(v_329) else caught-fail) in
        {1019}let ck_55: key = (if v_330 then 1-proj-3-tuple(v_329) else caught-fail) in
        {1020}let ss_54: symmetricstate = (if v_323 then catch-fail((if v_326 then (if v_328 then (if v_330 then symmetricstatepack(cipherstatepack(temp_k_8,minnonce),ck_55,h_46) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1021}let v_331: bool = not-caught-fail(ss_54) in
        {1022}let v_332: bitstring = (if v_331 then catch-fail(symmetricstateunpack(ss_54)) else caught-fail) in
        {1023}let v_333: bool = (not-caught-fail(v_332) && success?(1-proj-3-tuple(v_332))) in
        {1024}let h_47: bitstring = (if v_333 then 3-proj-3-tuple(v_332) else caught-fail) in
        {1025}let ck_56: key = (if v_333 then 2-proj-3-tuple(v_332) else caught-fail) in
        {1026}let cs_47: cipherstate = (if v_333 then 1-proj-3-tuple(v_332) else caught-fail) in
        {1027}let v_334: bitstring = (if v_333 then catch-fail(cipherstateunpack(cs_47)) else caught-fail) in
        {1028}let v_335: bool = (not-caught-fail(v_334) && success?(1-proj-2-tuple(v_334))) in
        {1029}let n_18: nonce = (if v_335 then 2-proj-2-tuple(v_334) else caught-fail) in
        {1030}let k_21: key = (if v_335 then 1-proj-2-tuple(v_334) else caught-fail) in
        {1033}let v_336: bitstring = (if v_335 then catch-fail(cipherstateunpack(cs_47)) else caught-fail) in
        {1034}let v_337: bool = (not-caught-fail(v_336) && success?(1-proj-2-tuple(v_336))) in
        {1035}let o_9: nonce = (if v_337 then 2-proj-2-tuple(v_336) else caught-fail) in
        {1036}let k_22: key = (if v_337 then 1-proj-2-tuple(v_336) else caught-fail) in
        {1032}let n_19: nonce = (if v_335 then increment_nonce(n_18) else caught-fail) in
        {1037}let csi_18: cipherstate = (if v_335 then catch-fail((if v_337 then cipherstatepack(k_22,n_19) else fail-any)) else caught-fail) in
        {1038}let v_338: bool = not-caught-fail(csi_18) in
        {928}let payload_4: bitstring = msg_b(me_2,them_2,sid_3) in
        {1031}let e_20: bitstring = (if v_335 then encrypt(k_21,n_18,h_47,payload_4) else caught-fail) in
        {1039}let v_339: bitstring = (if v_333 then catch-fail((if v_335 then (if v_338 then (csi_18,e_20) else fail-any) else fail-any)) else caught-fail) in
        {1040}let v_340: bool = (not-caught-fail(v_339) && success?(1-proj-2-tuple(v_339))) in
        {1041}let ciphertext_18: bitstring = (if v_340 then 2-proj-2-tuple(v_339) else caught-fail) in
        {1042}let csi_19: cipherstate = (if v_340 then 1-proj-2-tuple(v_339) else caught-fail) in
        {1043}let ss_55: symmetricstate = (if v_340 then symmetricstatepack(csi_19,ck_56,h_47) else caught-fail) in
        {1044}let v_341: bitstring = (if v_340 then catch-fail(symmetricstateunpack(ss_55)) else caught-fail) in
        {1045}let v_342: bool = (not-caught-fail(v_341) && success?(1-proj-3-tuple(v_341))) in
        {1046}let h_48: bitstring = (if v_342 then 3-proj-3-tuple(v_341) else caught-fail) in
        {1047}let ck_57: key = (if v_342 then 2-proj-3-tuple(v_341) else caught-fail) in
        {1048}let cs_48: cipherstate = (if v_342 then 1-proj-3-tuple(v_341) else caught-fail) in
        {1049}let ssi_11: symmetricstate = (if v_340 then catch-fail((if v_342 then symmetricstatepack(cs_48,ck_57,hash(h_48,ciphertext_18)) else fail-any)) else caught-fail) in
        {1050}let v_343: bool = not-caught-fail(ssi_11) in
        {1051}let v_344: bitstring = (if v_331 then catch-fail((if v_333 then (if v_340 then (if v_343 then (ssi_11,ciphertext_18) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1052}let v_345: bool = (not-caught-fail(v_344) && success?(1-proj-2-tuple(v_344))) in
        {1053}let ciphertext_19: bitstring = (if v_345 then 2-proj-2-tuple(v_344) else caught-fail) in
        {1054}let ss_56: symmetricstate = (if v_345 then 1-proj-2-tuple(v_344) else caught-fail) in
        {1057}let v_346: bitstring = (if v_345 then catch-fail(symmetricstateunpack(ss_56)) else caught-fail) in
        {1058}let v_347: bool = (not-caught-fail(v_346) && success?(1-proj-3-tuple(v_346))) in
        {1059}let h_49: bitstring = (if v_347 then 3-proj-3-tuple(v_346) else caught-fail) in
        {1060}let ck_58: key = (if v_347 then 2-proj-3-tuple(v_346) else caught-fail) in
        {1061}let cs_49: cipherstate = (if v_347 then 1-proj-3-tuple(v_346) else caught-fail) in
        {1062}let input_key_material_11: key = (if v_347 then zero else caught-fail) in
        {1065}let output3_11: key = (if v_347 then hmac_hash3(ck_58,input_key_material_11) else caught-fail) in
        {1064}let output2_11: key = (if v_347 then hmac_hash2(ck_58,input_key_material_11) else caught-fail) in
        {1063}let output1_11: key = (if v_347 then hmac_hash1(ck_58,input_key_material_11) else caught-fail) in
        {1066}let v_348: bitstring = (if v_347 then catch-fail((output1_11,output2_11,output3_11)) else caught-fail) in
        {1067}let v_349: bool = (not-caught-fail(v_348) && success?(1-proj-3-tuple(v_348))) in
        {1068}let temp_k3_2: key = (if v_349 then 3-proj-3-tuple(v_348) else caught-fail) in
        {1069}let temp_k2_2: key = (if v_349 then 2-proj-3-tuple(v_348) else caught-fail) in
        {1070}let temp_k1_2: key = (if v_349 then 1-proj-3-tuple(v_348) else caught-fail) in
        {1072}let cs2_10: cipherstate = (if v_349 then cipherstatepack(temp_k2_2,minnonce) else caught-fail) in
        {1071}let cs1_10: cipherstate = (if v_349 then cipherstatepack(temp_k1_2,minnonce) else caught-fail) in
        {1073}let v_350: bitstring = (if v_345 then catch-fail((if v_347 then (if v_349 then (ss_56,cs1_10,cs2_10) else fail-any) else fail-any)) else caught-fail) in
        {1074}let v_351: bool = (not-caught-fail(v_350) && success?(1-proj-3-tuple(v_350))) in
        {1075}let cs2_11: cipherstate = (if v_351 then 3-proj-3-tuple(v_350) else caught-fail) in
        {1076}let cs1_11: cipherstate = (if v_351 then 2-proj-3-tuple(v_350) else caught-fail) in
        {1077}let ssi_12: symmetricstate = (if v_351 then 1-proj-3-tuple(v_350) else caught-fail) in
        {1056}let message_buffer_4: bitstring = (if v_345 then concat3(ne_12,ns_9,ciphertext_19) else caught-fail) in
        {1055}let hs_35: handshakestate = (if v_345 then handshakestatepack(ss_56,s_12,m_12,e_19,rs_12,rm_12,re_15,psk_12,initiator_10) else caught-fail) in
        {1078}let (hs_36: handshakestate,message_b_2: bitstring,cs1_12: cipherstate,cs2_12: cipherstate) = (if v_299 then (if v_301 then (if v_303 then (if v_304 then (if v_307 then (if v_315 then (if v_323 then (if v_331 then (if v_345 then (if v_351 then (hs_35,message_buffer_4,cs1_11,cs2_11) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1079}event SendMsg(me_2,them_2,stagepack_b(sid_3),msg_b(me_2,them_2,sid_3));
        {1080}insert statestore(me_2,them_2,sid_3,statepack_c(hs_36,cs1_12,cs2_12));
        {1081}out(pub, message_b_2)
    ) | (
        {1083}!
        {1149}get statestore(=me_2,=them_2,=sid_3,statepack_c(hs_37: handshakestate,cs1_13: cipherstate,cs2_13: cipherstate)) in
        {1084}let hs_38: handshakestate = handshakestatesetcs(hs_37,cs1_13) in
        {1085}in(pub, message_c_2: bitstring);
        {1086}let v_352: bitstring = catch-fail(handshakestateunpack(hs_38)) in
        {1087}let v_353: bool = (not-caught-fail(v_352) && success?(1-proj-9-tuple(v_352))) in
        {1088}let initiator_11: bool = (if v_353 then 9-proj-9-tuple(v_352) else caught-fail) in
        {1089}let psk_13: key = (if v_353 then 8-proj-9-tuple(v_352) else caught-fail) in
        {1090}let re_16: key = (if v_353 then 7-proj-9-tuple(v_352) else caught-fail) in
        {1091}let rm_13: key = (if v_353 then 6-proj-9-tuple(v_352) else caught-fail) in
        {1092}let rs_13: key = (if v_353 then 5-proj-9-tuple(v_352) else caught-fail) in
        {1093}let e_21: keypair = (if v_353 then 4-proj-9-tuple(v_352) else caught-fail) in
        {1094}let m_13: keypair = (if v_353 then 3-proj-9-tuple(v_352) else caught-fail) in
        {1095}let s_13: keypair = (if v_353 then 2-proj-9-tuple(v_352) else caught-fail) in
        {1096}let ss_57: symmetricstate = (if v_353 then 1-proj-9-tuple(v_352) else caught-fail) in
        {1097}let v_354: bitstring = (if v_353 then catch-fail(deconcat3(message_c_2)) else caught-fail) in
        {1098}let v_355: bool = (not-caught-fail(v_354) && success?(1-proj-3-tuple(v_354))) in
        {1099}let ciphertext_20: bitstring = (if v_355 then 3-proj-3-tuple(v_354) else caught-fail) in
        {1100}let ns_10: bitstring = (if v_355 then 2-proj-3-tuple(v_354) else caught-fail) in
        {1101}let ne_13: bitstring = (if v_355 then 1-proj-3-tuple(v_354) else caught-fail) in
        {1103}let v_356: bitstring = (if v_355 then catch-fail(symmetricstateunpack(ss_57)) else caught-fail) in
        {1104}let v_357: bool = (not-caught-fail(v_356) && success?(1-proj-3-tuple(v_356))) in
        {1105}let h_50: bitstring = (if v_357 then 3-proj-3-tuple(v_356) else caught-fail) in
        {1106}let ck_59: key = (if v_357 then 2-proj-3-tuple(v_356) else caught-fail) in
        {1107}let cs_50: cipherstate = (if v_357 then 1-proj-3-tuple(v_356) else caught-fail) in
        {1108}let v_358: bitstring = (if v_357 then catch-fail(cipherstateunpack(cs_50)) else caught-fail) in
        {1109}let v_359: bool = (not-caught-fail(v_358) && success?(1-proj-2-tuple(v_358))) in
        {1110}let n_20: nonce = (if v_359 then 2-proj-2-tuple(v_358) else caught-fail) in
        {1111}let k_23: key = (if v_359 then 1-proj-2-tuple(v_358) else caught-fail) in
        {1112}let d_5: aead = (if v_359 then catch-fail(decrypt(k_23,n_20,h_50,ciphertext_20)) else caught-fail) in
        {1113}let v_360: bool = not-caught-fail(d_5) in
        {1114}let v_361: bitstring = (if v_360 then catch-fail(aeadunpack(d_5)) else caught-fail) in
        {1115}let v_362: bool = (not-caught-fail(v_361) && success?(1-proj-3-tuple(v_361))) in
        {1116}let plaintext_15: bitstring = (if v_362 then 3-proj-3-tuple(v_361) else caught-fail) in
        {1117}let adi_5: bitstring = (if v_362 then 2-proj-3-tuple(v_361) else caught-fail) in
        {1118}let valid_15: bool = (if v_362 then 1-proj-3-tuple(v_361) else caught-fail) in
        {1120}let v_363: bitstring = (if v_362 then catch-fail(cipherstateunpack(cs_50)) else caught-fail) in
        {1121}let v_364: bool = (not-caught-fail(v_363) && success?(1-proj-2-tuple(v_363))) in
        {1122}let o_10: nonce = (if v_364 then 2-proj-2-tuple(v_363) else caught-fail) in
        {1123}let k_24: key = (if v_364 then 1-proj-2-tuple(v_363) else caught-fail) in
        {1119}let n_21: nonce = (if v_362 then increment_nonce(n_20) else caught-fail) in
        {1124}let csi_20: cipherstate = (if v_362 then catch-fail((if v_364 then cipherstatepack(k_24,n_21) else fail-any)) else caught-fail) in
        {1125}let v_365: bool = not-caught-fail(csi_20) in
        {1126}let v_366: bitstring = (if v_357 then catch-fail((if v_359 then (if v_360 then (if v_362 then (if v_365 then (csi_20,plaintext_15,valid_15) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1127}let v_367: bool = (not-caught-fail(v_366) && success?(1-proj-3-tuple(v_366))) in
        {1128}let valid_16: bool = (if v_367 then 3-proj-3-tuple(v_366) else caught-fail) in
        {1129}let plaintext_16: bitstring = (if v_367 then 2-proj-3-tuple(v_366) else caught-fail) in
        {1130}let csi_21: cipherstate = (if v_367 then 1-proj-3-tuple(v_366) else caught-fail) in
        {1131}let ss_58: symmetricstate = (if v_367 then symmetricstatepack(csi_21,ck_59,h_50) else caught-fail) in
        {1132}let v_368: bitstring = (if v_367 then catch-fail(symmetricstateunpack(ss_58)) else caught-fail) in
        {1133}let v_369: bool = (not-caught-fail(v_368) && success?(1-proj-3-tuple(v_368))) in
        {1134}let h_51: bitstring = (if v_369 then 3-proj-3-tuple(v_368) else caught-fail) in
        {1135}let ck_60: key = (if v_369 then 2-proj-3-tuple(v_368) else caught-fail) in
        {1136}let cs_51: cipherstate = (if v_369 then 1-proj-3-tuple(v_368) else caught-fail) in
        {1137}let ssi_13: symmetricstate = (if v_367 then catch-fail((if v_369 then symmetricstatepack(cs_51,ck_60,hash(h_51,ciphertext_20)) else fail-any)) else caught-fail) in
        {1138}let v_370: bool = not-caught-fail(ssi_13) in
        {1139}let v_371: bitstring = (if v_355 then catch-fail((if v_357 then (if v_367 then (if v_370 then (ssi_13,plaintext_16,valid_16) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1140}let v_372: bool = (not-caught-fail(v_371) && success?(1-proj-3-tuple(v_371))) in
        {1141}let valid2_5: bool = (if v_372 then 3-proj-3-tuple(v_371) else caught-fail) in
        {1142}let plaintext_17: bitstring = (if v_372 then 2-proj-3-tuple(v_371) else caught-fail) in
        {1143}let ss_59: symmetricstate = (if v_372 then 1-proj-3-tuple(v_371) else caught-fail) in
        {1102}let valid1_5: bool = (if v_355 then true else caught-fail) in
        {1144}let v_373: bool = (if v_372 then catch-fail((valid1_5 && valid2_5)) else caught-fail) in
        {1145}let hs_39: handshakestate = (if v_373 then handshakestatepack(ss_59,s_13,m_13,e_21,rs_13,rm_13,re_16,psk_13,initiator_11) else caught-fail) in
        {1146}let (hs_40: handshakestate,plaintext_c: bitstring,valid_17: bool) = (if v_353 then (if v_355 then (if v_372 then (if undo-catch-fail(v_373) then (hs_39,plaintext_17,true) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1147}event RecvMsg(me_2,them_2,stagepack_c(sid_3),plaintext_c);
        {1148}insert statestore(me_2,them_2,sid_3,statepack_d(hs_40,handshakestategetcs(hs_40),cs2_13))
    ) | (
        {1150}!
        {1207}get statestore(=me_2,=them_2,=sid_3,statepack_d(hs_41: handshakestate,cs1_14: cipherstate,cs2_14: cipherstate)) in
        {1151}let hs_42: handshakestate = handshakestatesetcs(hs_41,cs2_14) in
        {1153}let v_374: bitstring = catch-fail(handshakestateunpack(hs_42)) in
        {1154}let v_375: bool = (not-caught-fail(v_374) && success?(1-proj-9-tuple(v_374))) in
        {1155}let initiator_12: bool = (if v_375 then 9-proj-9-tuple(v_374) else caught-fail) in
        {1156}let psk_14: key = (if v_375 then 8-proj-9-tuple(v_374) else caught-fail) in
        {1157}let re_17: key = (if v_375 then 7-proj-9-tuple(v_374) else caught-fail) in
        {1158}let rm_14: key = (if v_375 then 6-proj-9-tuple(v_374) else caught-fail) in
        {1159}let rs_14: key = (if v_375 then 5-proj-9-tuple(v_374) else caught-fail) in
        {1160}let e_22: keypair = (if v_375 then 4-proj-9-tuple(v_374) else caught-fail) in
        {1161}let m_14: keypair = (if v_375 then 3-proj-9-tuple(v_374) else caught-fail) in
        {1162}let s_14: keypair = (if v_375 then 2-proj-9-tuple(v_374) else caught-fail) in
        {1163}let ss_60: symmetricstate = (if v_375 then 1-proj-9-tuple(v_374) else caught-fail) in
        {1164}let v_376: bitstring = (if v_375 then catch-fail((empty,empty,empty)) else caught-fail) in
        {1165}let v_377: bool = (not-caught-fail(v_376) && success?(1-proj-3-tuple(v_376))) in
        {1166}let ciphertext_21: bitstring = (if v_377 then 3-proj-3-tuple(v_376) else caught-fail) in
        {1167}let ns_11: bitstring = (if v_377 then 2-proj-3-tuple(v_376) else caught-fail) in
        {1168}let ne_14: bitstring = (if v_377 then 1-proj-3-tuple(v_376) else caught-fail) in
        {1169}let v_378: bitstring = (if v_377 then catch-fail(symmetricstateunpack(ss_60)) else caught-fail) in
        {1170}let v_379: bool = (not-caught-fail(v_378) && success?(1-proj-3-tuple(v_378))) in
        {1171}let h_52: bitstring = (if v_379 then 3-proj-3-tuple(v_378) else caught-fail) in
        {1172}let ck_61: key = (if v_379 then 2-proj-3-tuple(v_378) else caught-fail) in
        {1173}let cs_52: cipherstate = (if v_379 then 1-proj-3-tuple(v_378) else caught-fail) in
        {1174}let v_380: bitstring = (if v_379 then catch-fail(cipherstateunpack(cs_52)) else caught-fail) in
        {1175}let v_381: bool = (not-caught-fail(v_380) && success?(1-proj-2-tuple(v_380))) in
        {1176}let n_22: nonce = (if v_381 then 2-proj-2-tuple(v_380) else caught-fail) in
        {1177}let k_25: key = (if v_381 then 1-proj-2-tuple(v_380) else caught-fail) in
        {1180}let v_382: bitstring = (if v_381 then catch-fail(cipherstateunpack(cs_52)) else caught-fail) in
        {1181}let v_383: bool = (not-caught-fail(v_382) && success?(1-proj-2-tuple(v_382))) in
        {1182}let o_11: nonce = (if v_383 then 2-proj-2-tuple(v_382) else caught-fail) in
        {1183}let k_26: key = (if v_383 then 1-proj-2-tuple(v_382) else caught-fail) in
        {1179}let n_23: nonce = (if v_381 then increment_nonce(n_22) else caught-fail) in
        {1184}let csi_22: cipherstate = (if v_381 then catch-fail((if v_383 then cipherstatepack(k_26,n_23) else fail-any)) else caught-fail) in
        {1185}let v_384: bool = not-caught-fail(csi_22) in
        {1152}let payload_5: bitstring = msg_d(me_2,them_2,sid_3) in
        {1178}let e_23: bitstring = (if v_381 then encrypt(k_25,n_22,h_52,payload_5) else caught-fail) in
        {1186}let v_385: bitstring = (if v_379 then catch-fail((if v_381 then (if v_384 then (csi_22,e_23) else fail-any) else fail-any)) else caught-fail) in
        {1187}let v_386: bool = (not-caught-fail(v_385) && success?(1-proj-2-tuple(v_385))) in
        {1188}let ciphertext_22: bitstring = (if v_386 then 2-proj-2-tuple(v_385) else caught-fail) in
        {1189}let csi_23: cipherstate = (if v_386 then 1-proj-2-tuple(v_385) else caught-fail) in
        {1190}let ss_61: symmetricstate = (if v_386 then symmetricstatepack(csi_23,ck_61,h_52) else caught-fail) in
        {1191}let v_387: bitstring = (if v_386 then catch-fail(symmetricstateunpack(ss_61)) else caught-fail) in
        {1192}let v_388: bool = (not-caught-fail(v_387) && success?(1-proj-3-tuple(v_387))) in
        {1193}let h_53: bitstring = (if v_388 then 3-proj-3-tuple(v_387) else caught-fail) in
        {1194}let ck_62: key = (if v_388 then 2-proj-3-tuple(v_387) else caught-fail) in
        {1195}let cs_53: cipherstate = (if v_388 then 1-proj-3-tuple(v_387) else caught-fail) in
        {1196}let ssi_14: symmetricstate = (if v_386 then catch-fail((if v_388 then symmetricstatepack(cs_53,ck_62,hash(h_53,ciphertext_22)) else fail-any)) else caught-fail) in
        {1197}let v_389: bool = not-caught-fail(ssi_14) in
        {1198}let v_390: bitstring = (if v_377 then catch-fail((if v_379 then (if v_386 then (if v_389 then (ssi_14,ciphertext_22) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1199}let v_391: bool = (not-caught-fail(v_390) && success?(1-proj-2-tuple(v_390))) in
        {1200}let ciphertext_23: bitstring = (if v_391 then 2-proj-2-tuple(v_390) else caught-fail) in
        {1201}let ss_62: symmetricstate = (if v_391 then 1-proj-2-tuple(v_390) else caught-fail) in
        {1203}let message_buffer_5: bitstring = (if v_391 then concat3(ne_14,ns_11,ciphertext_23) else caught-fail) in
        {1202}let hs_43: handshakestate = (if v_391 then handshakestatepack(ss_62,s_14,m_14,e_22,rs_14,rm_14,re_17,psk_14,initiator_12) else caught-fail) in
        {1204}let (hs_44: handshakestate,message_d_2: bitstring) = (if v_375 then (if v_377 then (if v_391 then (hs_43,message_buffer_5) else fail-any) else fail-any) else fail-any) in
        {1205}event SendMsg(me_2,them_2,stagepack_d(sid_3),msg_d(me_2,them_2,sid_3));
        {1206}out(pub, message_d_2)
    ) | (
        {1208}event LeakS(phase0,me_2);
        {1209}event LeakM(phase0,me_2);
        {1210}out(pub, (key_s(me_2),key_m(me_2)))
    ) | (
        {1211}phase 1;
        {1212}event LeakS(phase1,me_2);
        {1213}event LeakM(phase1,me_2);
        {1214}out(pub, (key_s(me_2),key_m(me_2)))
    )
) | (
    {1215}let me_3: principal = bob in
    {1218}let basis_9: key = key_s(me_3) in
    {1219}let public_key_9: key = catch-fail(dhexp(basis_9,validkey(g))) in
    {1220}let v_392: bool = not-caught-fail(public_key_9) in
    {1221}let s_15: keypair = (if v_392 then keypairpack(validkey(public_key_9),basis_9) else fail-any) in
    {1222}let basis_10: key = key_m(me_3) in
    {1223}let public_key_10: key = catch-fail(dhexp(basis_10,validkey(g))) in
    {1224}let v_393: bool = not-caught-fail(public_key_10) in
    {1225}let m_15: keypair = (if v_393 then keypairpack(validkey(public_key_10),basis_10) else fail-any) in
    {1226}out(pub, (getpublickey(s_15),getpublickey(m_15)));
    {1217}let sid_4: sessionid = sid in
    {1216}let them_3: principal = charlie in
    (
        {1236}let k_27: key = empty in
        {1237}let cs_54: cipherstate = cipherstatepack(k_27,minnonce) in
        {1233}let protocol_name_3: bitstring = somename in
        {1234}let h_54: bitstring = hash(protocol_name_3,empty) in
        {1235}let ck_63: key = h_54 in
        {1238}let ss_63: symmetricstate = symmetricstatepack(cs_54,ck_63,h_54) in
        {1239}let v_394: bitstring = catch-fail(symmetricstateunpack(ss_63)) in
        {1240}let v_395: bool = (not-caught-fail(v_394) && success?(1-proj-3-tuple(v_394))) in
        {1241}let h_55: bitstring = (if v_395 then 3-proj-3-tuple(v_394) else caught-fail) in
        {1242}let ck_64: key = (if v_395 then 2-proj-3-tuple(v_394) else caught-fail) in
        {1243}let cs_55: cipherstate = (if v_395 then 1-proj-3-tuple(v_394) else caught-fail) in
        {1231}let prologue_3: bitstring = empty in
        {1244}let ss_64: symmetricstate = catch-fail((if v_395 then symmetricstatepack(cs_55,ck_64,hash(h_55,prologue_3)) else fail-any)) in
        {1245}let v_396: bool = not-caught-fail(ss_64) in
        {1246}let data_2: bitstring = (if v_396 then catch-fail(getpublickey(s_15)) else caught-fail) in
        {1247}let v_397: bool = not-caught-fail(data_2) in
        {1248}let v_398: bitstring = (if v_397 then catch-fail(symmetricstateunpack(ss_64)) else caught-fail) in
        {1249}let v_399: bool = (not-caught-fail(v_398) && success?(1-proj-3-tuple(v_398))) in
        {1250}let h_56: bitstring = (if v_399 then 3-proj-3-tuple(v_398) else caught-fail) in
        {1251}let ck_65: key = (if v_399 then 2-proj-3-tuple(v_398) else caught-fail) in
        {1252}let cs_56: cipherstate = (if v_399 then 1-proj-3-tuple(v_398) else caught-fail) in
        {1253}let ss_65: symmetricstate = (if v_396 then catch-fail((if v_397 then (if v_399 then symmetricstatepack(cs_56,ck_65,hash(h_56,data_2)) else fail-any) else fail-any)) else caught-fail) in
        {1254}let v_400: bool = not-caught-fail(ss_65) in
        {1255}let data_3: bitstring = (if v_400 then catch-fail(getpublickey(m_15)) else caught-fail) in
        {1256}let v_401: bool = not-caught-fail(data_3) in
        {1257}let v_402: bitstring = (if v_401 then catch-fail(symmetricstateunpack(ss_65)) else caught-fail) in
        {1258}let v_403: bool = (not-caught-fail(v_402) && success?(1-proj-3-tuple(v_402))) in
        {1259}let h_57: bitstring = (if v_403 then 3-proj-3-tuple(v_402) else caught-fail) in
        {1260}let ck_66: key = (if v_403 then 2-proj-3-tuple(v_402) else caught-fail) in
        {1261}let cs_57: cipherstate = (if v_403 then 1-proj-3-tuple(v_402) else caught-fail) in
        {1262}let ss_66: symmetricstate = (if v_400 then catch-fail((if v_401 then (if v_403 then symmetricstatepack(cs_57,ck_66,hash(h_57,data_3)) else fail-any) else fail-any)) else caught-fail) in
        {1263}let v_404: bool = not-caught-fail(ss_66) in
        {1232}let psk_15: key = empty in
        {1230}let re_18: key = empty in
        {1229}let rm_15: key = empty in
        {1228}let rs_15: key = empty in
        {1227}let e_24: keypair = keypairpack(empty,empty) in
        {1264}let hs_45: handshakestate = (if v_396 then (if v_400 then (if v_404 then handshakestatepack(ss_66,s_15,m_15,e_24,rs_15,rm_15,re_18,psk_15,false) else fail-any) else fail-any) else fail-any) in
        {1265}insert statestore(me_3,them_3,sid_4,statepack_a(hs_45))
    ) | (
        {1338}get statestore(=me_3,=them_3,=sid_4,statepack_a(hs_46: handshakestate)) in
        {1266}in(pub, message_a_3: bitstring);
        {1267}let v_405: bitstring = catch-fail(handshakestateunpack(hs_46)) in
        {1268}let v_406: bool = (not-caught-fail(v_405) && success?(1-proj-9-tuple(v_405))) in
        {1269}let initiator_13: bool = (if v_406 then 9-proj-9-tuple(v_405) else caught-fail) in
        {1270}let psk_16: key = (if v_406 then 8-proj-9-tuple(v_405) else caught-fail) in
        {1271}let re_19: key = (if v_406 then 7-proj-9-tuple(v_405) else caught-fail) in
        {1272}let rm_16: key = (if v_406 then 6-proj-9-tuple(v_405) else caught-fail) in
        {1273}let rs_16: key = (if v_406 then 5-proj-9-tuple(v_405) else caught-fail) in
        {1274}let e_25: keypair = (if v_406 then 4-proj-9-tuple(v_405) else caught-fail) in
        {1275}let m_16: keypair = (if v_406 then 3-proj-9-tuple(v_405) else caught-fail) in
        {1276}let s_16: keypair = (if v_406 then 2-proj-9-tuple(v_405) else caught-fail) in
        {1277}let ss_67: symmetricstate = (if v_406 then 1-proj-9-tuple(v_405) else caught-fail) in
        {1278}let v_407: bitstring = (if v_406 then catch-fail(deconcat3(message_a_3)) else caught-fail) in
        {1279}let v_408: bool = (not-caught-fail(v_407) && success?(1-proj-3-tuple(v_407))) in
        {1280}let ciphertext_24: bitstring = (if v_408 then 3-proj-3-tuple(v_407) else caught-fail) in
        {1281}let ns_12: bitstring = (if v_408 then 2-proj-3-tuple(v_407) else caught-fail) in
        {1282}let ne_15: bitstring = (if v_408 then 1-proj-3-tuple(v_407) else caught-fail) in
        {1285}let v_409: bitstring = (if v_408 then catch-fail(symmetricstateunpack(ss_67)) else caught-fail) in
        {1286}let v_410: bool = (not-caught-fail(v_409) && success?(1-proj-3-tuple(v_409))) in
        {1287}let h_58: bitstring = (if v_410 then 3-proj-3-tuple(v_409) else caught-fail) in
        {1288}let ck_67: key = (if v_410 then 2-proj-3-tuple(v_409) else caught-fail) in
        {1289}let cs_58: cipherstate = (if v_410 then 1-proj-3-tuple(v_409) else caught-fail) in
        {1284}let re_20: key = (if v_408 then ne_15 else caught-fail) in
        {1290}let ss_68: symmetricstate = (if v_408 then catch-fail((if v_410 then symmetricstatepack(cs_58,ck_67,hash(h_58,re_20)) else fail-any)) else caught-fail) in
        {1291}let v_411: bool = not-caught-fail(ss_68) in
        {1292}let v_412: bitstring = (if v_411 then catch-fail(symmetricstateunpack(ss_68)) else caught-fail) in
        {1293}let v_413: bool = (not-caught-fail(v_412) && success?(1-proj-3-tuple(v_412))) in
        {1294}let h_59: bitstring = (if v_413 then 3-proj-3-tuple(v_412) else caught-fail) in
        {1295}let ck_68: key = (if v_413 then 2-proj-3-tuple(v_412) else caught-fail) in
        {1296}let cs_59: cipherstate = (if v_413 then 1-proj-3-tuple(v_412) else caught-fail) in
        {1297}let v_414: bitstring = (if v_413 then catch-fail(cipherstateunpack(cs_59)) else caught-fail) in
        {1298}let v_415: bool = (not-caught-fail(v_414) && success?(1-proj-2-tuple(v_414))) in
        {1299}let n_24: nonce = (if v_415 then 2-proj-2-tuple(v_414) else caught-fail) in
        {1300}let k_28: key = (if v_415 then 1-proj-2-tuple(v_414) else caught-fail) in
        {1301}let d_6: aead = (if v_415 then catch-fail(decrypt(k_28,n_24,h_59,ciphertext_24)) else caught-fail) in
        {1302}let v_416: bool = not-caught-fail(d_6) in
        {1303}let v_417: bitstring = (if v_416 then catch-fail(aeadunpack(d_6)) else caught-fail) in
        {1304}let v_418: bool = (not-caught-fail(v_417) && success?(1-proj-3-tuple(v_417))) in
        {1305}let plaintext_18: bitstring = (if v_418 then 3-proj-3-tuple(v_417) else caught-fail) in
        {1306}let adi_6: bitstring = (if v_418 then 2-proj-3-tuple(v_417) else caught-fail) in
        {1307}let valid_18: bool = (if v_418 then 1-proj-3-tuple(v_417) else caught-fail) in
        {1309}let v_419: bitstring = (if v_418 then catch-fail(cipherstateunpack(cs_59)) else caught-fail) in
        {1310}let v_420: bool = (not-caught-fail(v_419) && success?(1-proj-2-tuple(v_419))) in
        {1311}let o_12: nonce = (if v_420 then 2-proj-2-tuple(v_419) else caught-fail) in
        {1312}let k_29: key = (if v_420 then 1-proj-2-tuple(v_419) else caught-fail) in
        {1308}let n_25: nonce = (if v_418 then increment_nonce(n_24) else caught-fail) in
        {1313}let csi_24: cipherstate = (if v_418 then catch-fail((if v_420 then cipherstatepack(k_29,n_25) else fail-any)) else caught-fail) in
        {1314}let v_421: bool = not-caught-fail(csi_24) in
        {1315}let v_422: bitstring = (if v_413 then catch-fail((if v_415 then (if v_416 then (if v_418 then (if v_421 then (csi_24,plaintext_18,valid_18) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1316}let v_423: bool = (not-caught-fail(v_422) && success?(1-proj-3-tuple(v_422))) in
        {1317}let valid_19: bool = (if v_423 then 3-proj-3-tuple(v_422) else caught-fail) in
        {1318}let plaintext_19: bitstring = (if v_423 then 2-proj-3-tuple(v_422) else caught-fail) in
        {1319}let csi_25: cipherstate = (if v_423 then 1-proj-3-tuple(v_422) else caught-fail) in
        {1320}let ss_69: symmetricstate = (if v_423 then symmetricstatepack(csi_25,ck_68,h_59) else caught-fail) in
        {1321}let v_424: bitstring = (if v_423 then catch-fail(symmetricstateunpack(ss_69)) else caught-fail) in
        {1322}let v_425: bool = (not-caught-fail(v_424) && success?(1-proj-3-tuple(v_424))) in
        {1323}let h_60: bitstring = (if v_425 then 3-proj-3-tuple(v_424) else caught-fail) in
        {1324}let ck_69: key = (if v_425 then 2-proj-3-tuple(v_424) else caught-fail) in
        {1325}let cs_60: cipherstate = (if v_425 then 1-proj-3-tuple(v_424) else caught-fail) in
        {1326}let ssi_15: symmetricstate = (if v_423 then catch-fail((if v_425 then symmetricstatepack(cs_60,ck_69,hash(h_60,ciphertext_24)) else fail-any)) else caught-fail) in
        {1327}let v_426: bool = not-caught-fail(ssi_15) in
        {1328}let v_427: bitstring = (if v_411 then catch-fail((if v_413 then (if v_423 then (if v_426 then (ssi_15,plaintext_19,valid_19) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1329}let v_428: bool = (not-caught-fail(v_427) && success?(1-proj-3-tuple(v_427))) in
        {1330}let valid2_6: bool = (if v_428 then 3-proj-3-tuple(v_427) else caught-fail) in
        {1331}let plaintext_20: bitstring = (if v_428 then 2-proj-3-tuple(v_427) else caught-fail) in
        {1332}let ss_70: symmetricstate = (if v_428 then 1-proj-3-tuple(v_427) else caught-fail) in
        {1283}let valid1_6: bool = (if v_408 then true else caught-fail) in
        {1333}let v_429: bool = (if v_428 then catch-fail((valid1_6 && valid2_6)) else caught-fail) in
        {1334}let hs_47: handshakestate = (if v_429 then handshakestatepack(ss_70,s_16,m_16,e_25,rs_16,rm_16,re_20,psk_16,initiator_13) else caught-fail) in
        {1335}let (hs_48: handshakestate,plaintext_a_1: bitstring,valid_20: bool) = (if v_406 then (if v_408 then (if v_411 then (if v_428 then (if undo-catch-fail(v_429) then (hs_47,plaintext_20,true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1336}event RecvMsg(me_3,them_3,stagepack_a(sid_4),plaintext_a_1);
        {1337}insert statestore(me_3,them_3,sid_4,statepack_b(hs_48))
    ) | (
        {1493}get statestore(=me_3,=them_3,=sid_4,statepack_b(hs_49: handshakestate)) in
        {1340}let v_430: bitstring = catch-fail(handshakestateunpack(hs_49)) in
        {1341}let v_431: bool = (not-caught-fail(v_430) && success?(1-proj-9-tuple(v_430))) in
        {1342}let initiator_14: bool = (if v_431 then 9-proj-9-tuple(v_430) else caught-fail) in
        {1343}let psk_17: key = (if v_431 then 8-proj-9-tuple(v_430) else caught-fail) in
        {1344}let re_21: key = (if v_431 then 7-proj-9-tuple(v_430) else caught-fail) in
        {1345}let rm_17: key = (if v_431 then 6-proj-9-tuple(v_430) else caught-fail) in
        {1346}let rs_17: key = (if v_431 then 5-proj-9-tuple(v_430) else caught-fail) in
        {1347}let e_26: keypair = (if v_431 then 4-proj-9-tuple(v_430) else caught-fail) in
        {1348}let m_17: keypair = (if v_431 then 3-proj-9-tuple(v_430) else caught-fail) in
        {1349}let s_17: keypair = (if v_431 then 2-proj-9-tuple(v_430) else caught-fail) in
        {1350}let ss_71: symmetricstate = (if v_431 then 1-proj-9-tuple(v_430) else caught-fail) in
        {1351}let v_432: bitstring = (if v_431 then catch-fail((empty,empty,empty)) else caught-fail) in
        {1352}let v_433: bool = (not-caught-fail(v_432) && success?(1-proj-3-tuple(v_432))) in
        {1353}let ciphertext_25: bitstring = (if v_433 then 3-proj-3-tuple(v_432) else caught-fail) in
        {1354}let ns_13: bitstring = (if v_433 then 2-proj-3-tuple(v_432) else caught-fail) in
        {1355}let ne_16: bitstring = (if v_433 then 1-proj-3-tuple(v_432) else caught-fail) in
        {1356}let basis_11: key = (if v_433 then key_e(me_3,them_3,sid_4) else caught-fail) in
        {1357}let public_key_11: key = (if v_433 then catch-fail(dhexp(basis_11,validkey(g))) else caught-fail) in
        {1358}let v_434: bool = not-caught-fail(public_key_11) in
        {1359}let e_27: keypair = (if v_433 then catch-fail((if v_434 then keypairpack(validkey(public_key_11),basis_11) else fail-any)) else caught-fail) in
        {1360}let v_435: bool = not-caught-fail(e_27) in
        {1361}let ne_17: bitstring = (if v_435 then catch-fail(getpublickey(e_27)) else caught-fail) in
        {1362}let v_436: bool = not-caught-fail(ne_17) in
        {1363}let v_437: bitstring = (if v_436 then catch-fail(symmetricstateunpack(ss_71)) else caught-fail) in
        {1364}let v_438: bool = (not-caught-fail(v_437) && success?(1-proj-3-tuple(v_437))) in
        {1365}let h_61: bitstring = (if v_438 then 3-proj-3-tuple(v_437) else caught-fail) in
        {1366}let ck_70: key = (if v_438 then 2-proj-3-tuple(v_437) else caught-fail) in
        {1367}let cs_61: cipherstate = (if v_438 then 1-proj-3-tuple(v_437) else caught-fail) in
        {1368}let ss_72: symmetricstate = (if v_436 then catch-fail((if v_438 then symmetricstatepack(cs_61,ck_70,hash(h_61,ne_17)) else fail-any)) else caught-fail) in
        {1369}let v_439: bool = not-caught-fail(ss_72) in
        {1370}let v_440: bitstring = (if v_439 then catch-fail(keypairunpack(e_27)) else caught-fail) in
        {1371}let v_441: bool = (not-caught-fail(v_440) && success?(1-proj-2-tuple(v_440))) in
        {1372}let my_private_key_9: key = (if v_441 then 2-proj-2-tuple(v_440) else caught-fail) in
        {1373}let my_public_key_9: key = (if v_441 then 1-proj-2-tuple(v_440) else caught-fail) in
        {1374}let input_key_material_12: key = (if v_439 then catch-fail((if v_441 then dhexp(my_private_key_9,re_21) else fail-any)) else caught-fail) in
        {1375}let v_442: bool = not-caught-fail(input_key_material_12) in
        {1376}let v_443: bitstring = (if v_442 then catch-fail(symmetricstateunpack(ss_72)) else caught-fail) in
        {1377}let v_444: bool = (not-caught-fail(v_443) && success?(1-proj-3-tuple(v_443))) in
        {1378}let h_62: bitstring = (if v_444 then 3-proj-3-tuple(v_443) else caught-fail) in
        {1379}let ck_71: key = (if v_444 then 2-proj-3-tuple(v_443) else caught-fail) in
        {1380}let cs_62: cipherstate = (if v_444 then 1-proj-3-tuple(v_443) else caught-fail) in
        {1383}let output3_12: key = (if v_444 then hmac_hash3(ck_71,input_key_material_12) else caught-fail) in
        {1382}let output2_12: key = (if v_444 then hmac_hash2(ck_71,input_key_material_12) else caught-fail) in
        {1381}let output1_12: key = (if v_444 then hmac_hash1(ck_71,input_key_material_12) else caught-fail) in
        {1384}let v_445: bitstring = (if v_444 then catch-fail((output1_12,output2_12,output3_12)) else caught-fail) in
        {1385}let v_446: bool = (not-caught-fail(v_445) && success?(1-proj-3-tuple(v_445))) in
        {1386}let output_9: key = (if v_446 then 3-proj-3-tuple(v_445) else caught-fail) in
        {1387}let temp_k_9: key = (if v_446 then 2-proj-3-tuple(v_445) else caught-fail) in
        {1388}let ck_72: key = (if v_446 then 1-proj-3-tuple(v_445) else caught-fail) in
        {1389}let ss_73: symmetricstate = (if v_439 then catch-fail((if v_442 then (if v_444 then (if v_446 then symmetricstatepack(cipherstatepack(temp_k_9,minnonce),ck_72,h_62) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1390}let v_447: bool = not-caught-fail(ss_73) in
        {1391}let v_448: bitstring = (if v_447 then catch-fail(keypairunpack(s_17)) else caught-fail) in
        {1392}let v_449: bool = (not-caught-fail(v_448) && success?(1-proj-2-tuple(v_448))) in
        {1393}let my_private_key_10: key = (if v_449 then 2-proj-2-tuple(v_448) else caught-fail) in
        {1394}let my_public_key_10: key = (if v_449 then 1-proj-2-tuple(v_448) else caught-fail) in
        {1395}let input_key_material_13: key = (if v_447 then catch-fail((if v_449 then dhexp(my_private_key_10,re_21) else fail-any)) else caught-fail) in
        {1396}let v_450: bool = not-caught-fail(input_key_material_13) in
        {1397}let v_451: bitstring = (if v_450 then catch-fail(symmetricstateunpack(ss_73)) else caught-fail) in
        {1398}let v_452: bool = (not-caught-fail(v_451) && success?(1-proj-3-tuple(v_451))) in
        {1399}let h_63: bitstring = (if v_452 then 3-proj-3-tuple(v_451) else caught-fail) in
        {1400}let ck_73: key = (if v_452 then 2-proj-3-tuple(v_451) else caught-fail) in
        {1401}let cs_63: cipherstate = (if v_452 then 1-proj-3-tuple(v_451) else caught-fail) in
        {1404}let output3_13: key = (if v_452 then hmac_hash3(ck_73,input_key_material_13) else caught-fail) in
        {1403}let output2_13: key = (if v_452 then hmac_hash2(ck_73,input_key_material_13) else caught-fail) in
        {1402}let output1_13: key = (if v_452 then hmac_hash1(ck_73,input_key_material_13) else caught-fail) in
        {1405}let v_453: bitstring = (if v_452 then catch-fail((output1_13,output2_13,output3_13)) else caught-fail) in
        {1406}let v_454: bool = (not-caught-fail(v_453) && success?(1-proj-3-tuple(v_453))) in
        {1407}let output_10: key = (if v_454 then 3-proj-3-tuple(v_453) else caught-fail) in
        {1408}let temp_k_10: key = (if v_454 then 2-proj-3-tuple(v_453) else caught-fail) in
        {1409}let ck_74: key = (if v_454 then 1-proj-3-tuple(v_453) else caught-fail) in
        {1410}let ss_74: symmetricstate = (if v_447 then catch-fail((if v_450 then (if v_452 then (if v_454 then symmetricstatepack(cipherstatepack(temp_k_10,minnonce),ck_74,h_63) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1411}let v_455: bool = not-caught-fail(ss_74) in
        {1412}let v_456: bitstring = (if v_455 then catch-fail(keypairunpack(m_17)) else caught-fail) in
        {1413}let v_457: bool = (not-caught-fail(v_456) && success?(1-proj-2-tuple(v_456))) in
        {1414}let my_private_key_11: key = (if v_457 then 2-proj-2-tuple(v_456) else caught-fail) in
        {1415}let my_public_key_11: key = (if v_457 then 1-proj-2-tuple(v_456) else caught-fail) in
        {1416}let input_key_material_14: key = (if v_455 then catch-fail((if v_457 then dhexp(my_private_key_11,re_21) else fail-any)) else caught-fail) in
        {1417}let v_458: bool = not-caught-fail(input_key_material_14) in
        {1418}let v_459: bitstring = (if v_458 then catch-fail(symmetricstateunpack(ss_74)) else caught-fail) in
        {1419}let v_460: bool = (not-caught-fail(v_459) && success?(1-proj-3-tuple(v_459))) in
        {1420}let h_64: bitstring = (if v_460 then 3-proj-3-tuple(v_459) else caught-fail) in
        {1421}let ck_75: key = (if v_460 then 2-proj-3-tuple(v_459) else caught-fail) in
        {1422}let cs_64: cipherstate = (if v_460 then 1-proj-3-tuple(v_459) else caught-fail) in
        {1425}let output3_14: key = (if v_460 then hmac_hash3(ck_75,input_key_material_14) else caught-fail) in
        {1424}let output2_14: key = (if v_460 then hmac_hash2(ck_75,input_key_material_14) else caught-fail) in
        {1423}let output1_14: key = (if v_460 then hmac_hash1(ck_75,input_key_material_14) else caught-fail) in
        {1426}let v_461: bitstring = (if v_460 then catch-fail((output1_14,output2_14,output3_14)) else caught-fail) in
        {1427}let v_462: bool = (not-caught-fail(v_461) && success?(1-proj-3-tuple(v_461))) in
        {1428}let output_11: key = (if v_462 then 3-proj-3-tuple(v_461) else caught-fail) in
        {1429}let temp_k_11: key = (if v_462 then 2-proj-3-tuple(v_461) else caught-fail) in
        {1430}let ck_76: key = (if v_462 then 1-proj-3-tuple(v_461) else caught-fail) in
        {1431}let ss_75: symmetricstate = (if v_455 then catch-fail((if v_458 then (if v_460 then (if v_462 then symmetricstatepack(cipherstatepack(temp_k_11,minnonce),ck_76,h_64) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1432}let v_463: bool = not-caught-fail(ss_75) in
        {1433}let v_464: bitstring = (if v_463 then catch-fail(symmetricstateunpack(ss_75)) else caught-fail) in
        {1434}let v_465: bool = (not-caught-fail(v_464) && success?(1-proj-3-tuple(v_464))) in
        {1435}let h_65: bitstring = (if v_465 then 3-proj-3-tuple(v_464) else caught-fail) in
        {1436}let ck_77: key = (if v_465 then 2-proj-3-tuple(v_464) else caught-fail) in
        {1437}let cs_65: cipherstate = (if v_465 then 1-proj-3-tuple(v_464) else caught-fail) in
        {1438}let v_466: bitstring = (if v_465 then catch-fail(cipherstateunpack(cs_65)) else caught-fail) in
        {1439}let v_467: bool = (not-caught-fail(v_466) && success?(1-proj-2-tuple(v_466))) in
        {1440}let n_26: nonce = (if v_467 then 2-proj-2-tuple(v_466) else caught-fail) in
        {1441}let k_30: key = (if v_467 then 1-proj-2-tuple(v_466) else caught-fail) in
        {1444}let v_468: bitstring = (if v_467 then catch-fail(cipherstateunpack(cs_65)) else caught-fail) in
        {1445}let v_469: bool = (not-caught-fail(v_468) && success?(1-proj-2-tuple(v_468))) in
        {1446}let o_13: nonce = (if v_469 then 2-proj-2-tuple(v_468) else caught-fail) in
        {1447}let k_31: key = (if v_469 then 1-proj-2-tuple(v_468) else caught-fail) in
        {1443}let n_27: nonce = (if v_467 then increment_nonce(n_26) else caught-fail) in
        {1448}let csi_26: cipherstate = (if v_467 then catch-fail((if v_469 then cipherstatepack(k_31,n_27) else fail-any)) else caught-fail) in
        {1449}let v_470: bool = not-caught-fail(csi_26) in
        {1339}let payload_6: bitstring = msg_b(me_3,them_3,sid_4) in
        {1442}let e_28: bitstring = (if v_467 then encrypt(k_30,n_26,h_65,payload_6) else caught-fail) in
        {1450}let v_471: bitstring = (if v_465 then catch-fail((if v_467 then (if v_470 then (csi_26,e_28) else fail-any) else fail-any)) else caught-fail) in
        {1451}let v_472: bool = (not-caught-fail(v_471) && success?(1-proj-2-tuple(v_471))) in
        {1452}let ciphertext_26: bitstring = (if v_472 then 2-proj-2-tuple(v_471) else caught-fail) in
        {1453}let csi_27: cipherstate = (if v_472 then 1-proj-2-tuple(v_471) else caught-fail) in
        {1454}let ss_76: symmetricstate = (if v_472 then symmetricstatepack(csi_27,ck_77,h_65) else caught-fail) in
        {1455}let v_473: bitstring = (if v_472 then catch-fail(symmetricstateunpack(ss_76)) else caught-fail) in
        {1456}let v_474: bool = (not-caught-fail(v_473) && success?(1-proj-3-tuple(v_473))) in
        {1457}let h_66: bitstring = (if v_474 then 3-proj-3-tuple(v_473) else caught-fail) in
        {1458}let ck_78: key = (if v_474 then 2-proj-3-tuple(v_473) else caught-fail) in
        {1459}let cs_66: cipherstate = (if v_474 then 1-proj-3-tuple(v_473) else caught-fail) in
        {1460}let ssi_16: symmetricstate = (if v_472 then catch-fail((if v_474 then symmetricstatepack(cs_66,ck_78,hash(h_66,ciphertext_26)) else fail-any)) else caught-fail) in
        {1461}let v_475: bool = not-caught-fail(ssi_16) in
        {1462}let v_476: bitstring = (if v_463 then catch-fail((if v_465 then (if v_472 then (if v_475 then (ssi_16,ciphertext_26) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1463}let v_477: bool = (not-caught-fail(v_476) && success?(1-proj-2-tuple(v_476))) in
        {1464}let ciphertext_27: bitstring = (if v_477 then 2-proj-2-tuple(v_476) else caught-fail) in
        {1465}let ss_77: symmetricstate = (if v_477 then 1-proj-2-tuple(v_476) else caught-fail) in
        {1468}let v_478: bitstring = (if v_477 then catch-fail(symmetricstateunpack(ss_77)) else caught-fail) in
        {1469}let v_479: bool = (not-caught-fail(v_478) && success?(1-proj-3-tuple(v_478))) in
        {1470}let h_67: bitstring = (if v_479 then 3-proj-3-tuple(v_478) else caught-fail) in
        {1471}let ck_79: key = (if v_479 then 2-proj-3-tuple(v_478) else caught-fail) in
        {1472}let cs_67: cipherstate = (if v_479 then 1-proj-3-tuple(v_478) else caught-fail) in
        {1473}let input_key_material_15: key = (if v_479 then zero else caught-fail) in
        {1476}let output3_15: key = (if v_479 then hmac_hash3(ck_79,input_key_material_15) else caught-fail) in
        {1475}let output2_15: key = (if v_479 then hmac_hash2(ck_79,input_key_material_15) else caught-fail) in
        {1474}let output1_15: key = (if v_479 then hmac_hash1(ck_79,input_key_material_15) else caught-fail) in
        {1477}let v_480: bitstring = (if v_479 then catch-fail((output1_15,output2_15,output3_15)) else caught-fail) in
        {1478}let v_481: bool = (not-caught-fail(v_480) && success?(1-proj-3-tuple(v_480))) in
        {1479}let temp_k3_3: key = (if v_481 then 3-proj-3-tuple(v_480) else caught-fail) in
        {1480}let temp_k2_3: key = (if v_481 then 2-proj-3-tuple(v_480) else caught-fail) in
        {1481}let temp_k1_3: key = (if v_481 then 1-proj-3-tuple(v_480) else caught-fail) in
        {1483}let cs2_15: cipherstate = (if v_481 then cipherstatepack(temp_k2_3,minnonce) else caught-fail) in
        {1482}let cs1_15: cipherstate = (if v_481 then cipherstatepack(temp_k1_3,minnonce) else caught-fail) in
        {1484}let v_482: bitstring = (if v_477 then catch-fail((if v_479 then (if v_481 then (ss_77,cs1_15,cs2_15) else fail-any) else fail-any)) else caught-fail) in
        {1485}let v_483: bool = (not-caught-fail(v_482) && success?(1-proj-3-tuple(v_482))) in
        {1486}let cs2_16: cipherstate = (if v_483 then 3-proj-3-tuple(v_482) else caught-fail) in
        {1487}let cs1_16: cipherstate = (if v_483 then 2-proj-3-tuple(v_482) else caught-fail) in
        {1488}let ssi_17: symmetricstate = (if v_483 then 1-proj-3-tuple(v_482) else caught-fail) in
        {1467}let message_buffer_6: bitstring = (if v_477 then concat3(ne_17,ns_13,ciphertext_27) else caught-fail) in
        {1466}let hs_50: handshakestate = (if v_477 then handshakestatepack(ss_77,s_17,m_17,e_27,rs_17,rm_17,re_21,psk_17,initiator_14) else caught-fail) in
        {1489}let (hs_51: handshakestate,message_b_3: bitstring,cs1_17: cipherstate,cs2_17: cipherstate) = (if v_431 then (if v_433 then (if v_435 then (if v_436 then (if v_439 then (if v_447 then (if v_455 then (if v_463 then (if v_477 then (if v_483 then (hs_50,message_buffer_6,cs1_16,cs2_16) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1490}event SendMsg(me_3,them_3,stagepack_b(sid_4),msg_b(me_3,them_3,sid_4));
        {1491}insert statestore(me_3,them_3,sid_4,statepack_c(hs_51,cs1_17,cs2_17));
        {1492}out(pub, message_b_3)
    ) | (
        {1494}!
        {1560}get statestore(=me_3,=them_3,=sid_4,statepack_c(hs_52: handshakestate,cs1_18: cipherstate,cs2_18: cipherstate)) in
        {1495}let hs_53: handshakestate = handshakestatesetcs(hs_52,cs1_18) in
        {1496}in(pub, message_c_3: bitstring);
        {1497}let v_484: bitstring = catch-fail(handshakestateunpack(hs_53)) in
        {1498}let v_485: bool = (not-caught-fail(v_484) && success?(1-proj-9-tuple(v_484))) in
        {1499}let initiator_15: bool = (if v_485 then 9-proj-9-tuple(v_484) else caught-fail) in
        {1500}let psk_18: key = (if v_485 then 8-proj-9-tuple(v_484) else caught-fail) in
        {1501}let re_22: key = (if v_485 then 7-proj-9-tuple(v_484) else caught-fail) in
        {1502}let rm_18: key = (if v_485 then 6-proj-9-tuple(v_484) else caught-fail) in
        {1503}let rs_18: key = (if v_485 then 5-proj-9-tuple(v_484) else caught-fail) in
        {1504}let e_29: keypair = (if v_485 then 4-proj-9-tuple(v_484) else caught-fail) in
        {1505}let m_18: keypair = (if v_485 then 3-proj-9-tuple(v_484) else caught-fail) in
        {1506}let s_18: keypair = (if v_485 then 2-proj-9-tuple(v_484) else caught-fail) in
        {1507}let ss_78: symmetricstate = (if v_485 then 1-proj-9-tuple(v_484) else caught-fail) in
        {1508}let v_486: bitstring = (if v_485 then catch-fail(deconcat3(message_c_3)) else caught-fail) in
        {1509}let v_487: bool = (not-caught-fail(v_486) && success?(1-proj-3-tuple(v_486))) in
        {1510}let ciphertext_28: bitstring = (if v_487 then 3-proj-3-tuple(v_486) else caught-fail) in
        {1511}let ns_14: bitstring = (if v_487 then 2-proj-3-tuple(v_486) else caught-fail) in
        {1512}let ne_18: bitstring = (if v_487 then 1-proj-3-tuple(v_486) else caught-fail) in
        {1514}let v_488: bitstring = (if v_487 then catch-fail(symmetricstateunpack(ss_78)) else caught-fail) in
        {1515}let v_489: bool = (not-caught-fail(v_488) && success?(1-proj-3-tuple(v_488))) in
        {1516}let h_68: bitstring = (if v_489 then 3-proj-3-tuple(v_488) else caught-fail) in
        {1517}let ck_80: key = (if v_489 then 2-proj-3-tuple(v_488) else caught-fail) in
        {1518}let cs_68: cipherstate = (if v_489 then 1-proj-3-tuple(v_488) else caught-fail) in
        {1519}let v_490: bitstring = (if v_489 then catch-fail(cipherstateunpack(cs_68)) else caught-fail) in
        {1520}let v_491: bool = (not-caught-fail(v_490) && success?(1-proj-2-tuple(v_490))) in
        {1521}let n_28: nonce = (if v_491 then 2-proj-2-tuple(v_490) else caught-fail) in
        {1522}let k_32: key = (if v_491 then 1-proj-2-tuple(v_490) else caught-fail) in
        {1523}let d_7: aead = (if v_491 then catch-fail(decrypt(k_32,n_28,h_68,ciphertext_28)) else caught-fail) in
        {1524}let v_492: bool = not-caught-fail(d_7) in
        {1525}let v_493: bitstring = (if v_492 then catch-fail(aeadunpack(d_7)) else caught-fail) in
        {1526}let v_494: bool = (not-caught-fail(v_493) && success?(1-proj-3-tuple(v_493))) in
        {1527}let plaintext_21: bitstring = (if v_494 then 3-proj-3-tuple(v_493) else caught-fail) in
        {1528}let adi_7: bitstring = (if v_494 then 2-proj-3-tuple(v_493) else caught-fail) in
        {1529}let valid_21: bool = (if v_494 then 1-proj-3-tuple(v_493) else caught-fail) in
        {1531}let v_495: bitstring = (if v_494 then catch-fail(cipherstateunpack(cs_68)) else caught-fail) in
        {1532}let v_496: bool = (not-caught-fail(v_495) && success?(1-proj-2-tuple(v_495))) in
        {1533}let o_14: nonce = (if v_496 then 2-proj-2-tuple(v_495) else caught-fail) in
        {1534}let k_33: key = (if v_496 then 1-proj-2-tuple(v_495) else caught-fail) in
        {1530}let n_29: nonce = (if v_494 then increment_nonce(n_28) else caught-fail) in
        {1535}let csi_28: cipherstate = (if v_494 then catch-fail((if v_496 then cipherstatepack(k_33,n_29) else fail-any)) else caught-fail) in
        {1536}let v_497: bool = not-caught-fail(csi_28) in
        {1537}let v_498: bitstring = (if v_489 then catch-fail((if v_491 then (if v_492 then (if v_494 then (if v_497 then (csi_28,plaintext_21,valid_21) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1538}let v_499: bool = (not-caught-fail(v_498) && success?(1-proj-3-tuple(v_498))) in
        {1539}let valid_22: bool = (if v_499 then 3-proj-3-tuple(v_498) else caught-fail) in
        {1540}let plaintext_22: bitstring = (if v_499 then 2-proj-3-tuple(v_498) else caught-fail) in
        {1541}let csi_29: cipherstate = (if v_499 then 1-proj-3-tuple(v_498) else caught-fail) in
        {1542}let ss_79: symmetricstate = (if v_499 then symmetricstatepack(csi_29,ck_80,h_68) else caught-fail) in
        {1543}let v_500: bitstring = (if v_499 then catch-fail(symmetricstateunpack(ss_79)) else caught-fail) in
        {1544}let v_501: bool = (not-caught-fail(v_500) && success?(1-proj-3-tuple(v_500))) in
        {1545}let h_69: bitstring = (if v_501 then 3-proj-3-tuple(v_500) else caught-fail) in
        {1546}let ck_81: key = (if v_501 then 2-proj-3-tuple(v_500) else caught-fail) in
        {1547}let cs_69: cipherstate = (if v_501 then 1-proj-3-tuple(v_500) else caught-fail) in
        {1548}let ssi_18: symmetricstate = (if v_499 then catch-fail((if v_501 then symmetricstatepack(cs_69,ck_81,hash(h_69,ciphertext_28)) else fail-any)) else caught-fail) in
        {1549}let v_502: bool = not-caught-fail(ssi_18) in
        {1550}let v_503: bitstring = (if v_487 then catch-fail((if v_489 then (if v_499 then (if v_502 then (ssi_18,plaintext_22,valid_22) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1551}let v_504: bool = (not-caught-fail(v_503) && success?(1-proj-3-tuple(v_503))) in
        {1552}let valid2_7: bool = (if v_504 then 3-proj-3-tuple(v_503) else caught-fail) in
        {1553}let plaintext_23: bitstring = (if v_504 then 2-proj-3-tuple(v_503) else caught-fail) in
        {1554}let ss_80: symmetricstate = (if v_504 then 1-proj-3-tuple(v_503) else caught-fail) in
        {1513}let valid1_7: bool = (if v_487 then true else caught-fail) in
        {1555}let v_505: bool = (if v_504 then catch-fail((valid1_7 && valid2_7)) else caught-fail) in
        {1556}let hs_54: handshakestate = (if v_505 then handshakestatepack(ss_80,s_18,m_18,e_29,rs_18,rm_18,re_22,psk_18,initiator_15) else caught-fail) in
        {1557}let (hs_55: handshakestate,plaintext_c_1: bitstring,valid_23: bool) = (if v_485 then (if v_487 then (if v_504 then (if undo-catch-fail(v_505) then (hs_54,plaintext_23,true) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1558}event RecvMsg(me_3,them_3,stagepack_c(sid_4),plaintext_c_1);
        {1559}insert statestore(me_3,them_3,sid_4,statepack_d(hs_55,handshakestategetcs(hs_55),cs2_18))
    ) | (
        {1561}!
        {1618}get statestore(=me_3,=them_3,=sid_4,statepack_d(hs_56: handshakestate,cs1_19: cipherstate,cs2_19: cipherstate)) in
        {1562}let hs_57: handshakestate = handshakestatesetcs(hs_56,cs2_19) in
        {1564}let v_506: bitstring = catch-fail(handshakestateunpack(hs_57)) in
        {1565}let v_507: bool = (not-caught-fail(v_506) && success?(1-proj-9-tuple(v_506))) in
        {1566}let initiator_16: bool = (if v_507 then 9-proj-9-tuple(v_506) else caught-fail) in
        {1567}let psk_19: key = (if v_507 then 8-proj-9-tuple(v_506) else caught-fail) in
        {1568}let re_23: key = (if v_507 then 7-proj-9-tuple(v_506) else caught-fail) in
        {1569}let rm_19: key = (if v_507 then 6-proj-9-tuple(v_506) else caught-fail) in
        {1570}let rs_19: key = (if v_507 then 5-proj-9-tuple(v_506) else caught-fail) in
        {1571}let e_30: keypair = (if v_507 then 4-proj-9-tuple(v_506) else caught-fail) in
        {1572}let m_19: keypair = (if v_507 then 3-proj-9-tuple(v_506) else caught-fail) in
        {1573}let s_19: keypair = (if v_507 then 2-proj-9-tuple(v_506) else caught-fail) in
        {1574}let ss_81: symmetricstate = (if v_507 then 1-proj-9-tuple(v_506) else caught-fail) in
        {1575}let v_508: bitstring = (if v_507 then catch-fail((empty,empty,empty)) else caught-fail) in
        {1576}let v_509: bool = (not-caught-fail(v_508) && success?(1-proj-3-tuple(v_508))) in
        {1577}let ciphertext_29: bitstring = (if v_509 then 3-proj-3-tuple(v_508) else caught-fail) in
        {1578}let ns_15: bitstring = (if v_509 then 2-proj-3-tuple(v_508) else caught-fail) in
        {1579}let ne_19: bitstring = (if v_509 then 1-proj-3-tuple(v_508) else caught-fail) in
        {1580}let v_510: bitstring = (if v_509 then catch-fail(symmetricstateunpack(ss_81)) else caught-fail) in
        {1581}let v_511: bool = (not-caught-fail(v_510) && success?(1-proj-3-tuple(v_510))) in
        {1582}let h_70: bitstring = (if v_511 then 3-proj-3-tuple(v_510) else caught-fail) in
        {1583}let ck_82: key = (if v_511 then 2-proj-3-tuple(v_510) else caught-fail) in
        {1584}let cs_70: cipherstate = (if v_511 then 1-proj-3-tuple(v_510) else caught-fail) in
        {1585}let v_512: bitstring = (if v_511 then catch-fail(cipherstateunpack(cs_70)) else caught-fail) in
        {1586}let v_513: bool = (not-caught-fail(v_512) && success?(1-proj-2-tuple(v_512))) in
        {1587}let n_30: nonce = (if v_513 then 2-proj-2-tuple(v_512) else caught-fail) in
        {1588}let k_34: key = (if v_513 then 1-proj-2-tuple(v_512) else caught-fail) in
        {1591}let v_514: bitstring = (if v_513 then catch-fail(cipherstateunpack(cs_70)) else caught-fail) in
        {1592}let v_515: bool = (not-caught-fail(v_514) && success?(1-proj-2-tuple(v_514))) in
        {1593}let o_15: nonce = (if v_515 then 2-proj-2-tuple(v_514) else caught-fail) in
        {1594}let k_35: key = (if v_515 then 1-proj-2-tuple(v_514) else caught-fail) in
        {1590}let n_31: nonce = (if v_513 then increment_nonce(n_30) else caught-fail) in
        {1595}let csi_30: cipherstate = (if v_513 then catch-fail((if v_515 then cipherstatepack(k_35,n_31) else fail-any)) else caught-fail) in
        {1596}let v_516: bool = not-caught-fail(csi_30) in
        {1563}let payload_7: bitstring = msg_d(me_3,them_3,sid_4) in
        {1589}let e_31: bitstring = (if v_513 then encrypt(k_34,n_30,h_70,payload_7) else caught-fail) in
        {1597}let v_517: bitstring = (if v_511 then catch-fail((if v_513 then (if v_516 then (csi_30,e_31) else fail-any) else fail-any)) else caught-fail) in
        {1598}let v_518: bool = (not-caught-fail(v_517) && success?(1-proj-2-tuple(v_517))) in
        {1599}let ciphertext_30: bitstring = (if v_518 then 2-proj-2-tuple(v_517) else caught-fail) in
        {1600}let csi_31: cipherstate = (if v_518 then 1-proj-2-tuple(v_517) else caught-fail) in
        {1601}let ss_82: symmetricstate = (if v_518 then symmetricstatepack(csi_31,ck_82,h_70) else caught-fail) in
        {1602}let v_519: bitstring = (if v_518 then catch-fail(symmetricstateunpack(ss_82)) else caught-fail) in
        {1603}let v_520: bool = (not-caught-fail(v_519) && success?(1-proj-3-tuple(v_519))) in
        {1604}let h_71: bitstring = (if v_520 then 3-proj-3-tuple(v_519) else caught-fail) in
        {1605}let ck_83: key = (if v_520 then 2-proj-3-tuple(v_519) else caught-fail) in
        {1606}let cs_71: cipherstate = (if v_520 then 1-proj-3-tuple(v_519) else caught-fail) in
        {1607}let ssi_19: symmetricstate = (if v_518 then catch-fail((if v_520 then symmetricstatepack(cs_71,ck_83,hash(h_71,ciphertext_30)) else fail-any)) else caught-fail) in
        {1608}let v_521: bool = not-caught-fail(ssi_19) in
        {1609}let v_522: bitstring = (if v_509 then catch-fail((if v_511 then (if v_518 then (if v_521 then (ssi_19,ciphertext_30) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1610}let v_523: bool = (not-caught-fail(v_522) && success?(1-proj-2-tuple(v_522))) in
        {1611}let ciphertext_31: bitstring = (if v_523 then 2-proj-2-tuple(v_522) else caught-fail) in
        {1612}let ss_83: symmetricstate = (if v_523 then 1-proj-2-tuple(v_522) else caught-fail) in
        {1614}let message_buffer_7: bitstring = (if v_523 then concat3(ne_19,ns_15,ciphertext_31) else caught-fail) in
        {1613}let hs_58: handshakestate = (if v_523 then handshakestatepack(ss_83,s_19,m_19,e_30,rs_19,rm_19,re_23,psk_19,initiator_16) else caught-fail) in
        {1615}let (hs_59: handshakestate,message_d_3: bitstring) = (if v_507 then (if v_509 then (if v_523 then (hs_58,message_buffer_7) else fail-any) else fail-any) else fail-any) in
        {1616}event SendMsg(me_3,them_3,stagepack_d(sid_4),msg_d(me_3,them_3,sid_4));
        {1617}out(pub, message_d_3)
    ) | (
        {1619}event LeakS(phase0,me_3);
        {1620}event LeakM(phase0,me_3);
        {1621}out(pub, (key_s(me_3),key_m(me_3)))
    ) | (
        {1622}phase 1;
        {1623}event LeakS(phase1,me_3);
        {1624}event LeakM(phase1,me_3);
        {1625}out(pub, (key_s(me_3),key_m(me_3)))
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m_20)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m_20)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m_20)) ==> event(SendMsg(alice,c,stagepack_a(sid_a),m_20)) || false || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))); event(RecvMsg(bob,alice,stagepack_a(sid_b),m_20)) ==> event(SendMsg(alice,c,stagepack_a(sid_a),m_20)) || false; event(RecvMsg(bob,alice,stagepack_a(sid_b),m_20)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m_20)) || false || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))); event(RecvMsg(bob,alice,stagepack_a(sid_b),m_20)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m_20)) || false; not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakM(px,bob)); attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(px,bob)) && event(LeakM(px,bob)) && event(LeakS(pz,alice)) && event(LeakM(pz,alice))); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m_20)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m_20)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m_20)) ==> event(SendMsg(bob,c,stagepack_b(sid_b),m_20)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || false; event(RecvMsg(alice,bob,stagepack_b(sid_a),m_20)) ==> event(SendMsg(bob,c,stagepack_b(sid_b),m_20)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))); event(RecvMsg(alice,bob,stagepack_b(sid_a),m_20)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m_20)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || false; event(RecvMsg(alice,bob,stagepack_b(sid_a),m_20)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m_20)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))); not attacker_p1(msg_b(bob,alice,sid_b)); not attacker_p1(msg_b(bob,alice,sid_b)); attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(px,alice)) && event(LeakM(px,alice)) && event(LeakS(pz,bob)) && event(LeakM(pz,bob))); not attacker_p1(msg_b(bob,alice,sid_b)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m_20)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m_20)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m_20)) ==> event(SendMsg(alice,c,stagepack_c(sid_a),m_20)) || false || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))); event(RecvMsg(bob,alice,stagepack_c(sid_b),m_20)) ==> event(SendMsg(alice,c,stagepack_c(sid_a),m_20)) || false; event(RecvMsg(bob,alice,stagepack_c(sid_b),m_20)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m_20)) || false || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))); event(RecvMsg(bob,alice,stagepack_c(sid_b),m_20)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m_20)) || false; not attacker_p1(msg_c(alice,bob,sid_a)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakM(px,bob)); attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(px,bob)) && event(LeakM(px,bob)) && event(LeakS(pz,alice)) && event(LeakM(pz,alice))); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m_20)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m_20)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m_20)) ==> event(SendMsg(bob,c,stagepack_d(sid_b),m_20)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || false; event(RecvMsg(alice,bob,stagepack_d(sid_a),m_20)) ==> event(SendMsg(bob,c,stagepack_d(sid_b),m_20)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))); event(RecvMsg(alice,bob,stagepack_d(sid_a),m_20)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m_20)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || false; event(RecvMsg(alice,bob,stagepack_d(sid_a),m_20)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m_20)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))); not attacker_p1(msg_d(bob,alice,sid_b)); not attacker_p1(msg_d(bob,alice,sid_b)); attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(px,alice)) && event(LeakM(px,alice)) && event(LeakS(pz,bob)) && event(LeakM(pz,bob))); not attacker_p1(msg_d(bob,alice,sid_b)); not event(RecvEnd(true)) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 200 rules (88 with conclusion selected). Queue: 208 rules.
400 rules inserted. Base: 398 rules (107 with conclusion selected). Queue: 139 rules.
600 rules inserted. Base: 596 rules (137 with conclusion selected). Queue: 63 rules.
800 rules inserted. Base: 742 rules (177 with conclusion selected). Queue: 187 rules.
1000 rules inserted. Base: 921 rules (201 with conclusion selected). Queue: 160 rules.
1200 rules inserted. Base: 1077 rules (207 with conclusion selected). Queue: 183 rules.
1400 rules inserted. Base: 1229 rules (237 with conclusion selected). Queue: 269 rules.
1600 rules inserted. Base: 1405 rules (273 with conclusion selected). Queue: 507 rules.
1800 rules inserted. Base: 1569 rules (352 with conclusion selected). Queue: 697 rules.
2000 rules inserted. Base: 1729 rules (430 with conclusion selected). Queue: 878 rules.
2200 rules inserted. Base: 1882 rules (490 with conclusion selected). Queue: 1032 rules.
2400 rules inserted. Base: 2064 rules (518 with conclusion selected). Queue: 1008 rules.
2600 rules inserted. Base: 2231 rules (551 with conclusion selected). Queue: 1010 rules.
2800 rules inserted. Base: 2400 rules (573 with conclusion selected). Queue: 985 rules.
3000 rules inserted. Base: 2600 rules (608 with conclusion selected). Queue: 951 rules.
3200 rules inserted. Base: 2745 rules (622 with conclusion selected). Queue: 957 rules.
3400 rules inserted. Base: 2911 rules (625 with conclusion selected). Queue: 972 rules.
3600 rules inserted. Base: 3075 rules (631 with conclusion selected). Queue: 988 rules.
3800 rules inserted. Base: 3236 rules (632 with conclusion selected). Queue: 1011 rules.
4000 rules inserted. Base: 3431 rules (638 with conclusion selected). Queue: 1030 rules.
4200 rules inserted. Base: 3530 rules (639 with conclusion selected). Queue: 1071 rules.
4400 rules inserted. Base: 3667 rules (639 with conclusion selected). Queue: 1105 rules.
4600 rules inserted. Base: 3803 rules (639 with conclusion selected). Queue: 1140 rules.
4800 rules inserted. Base: 3935 rules (639 with conclusion selected). Queue: 1177 rules.
5000 rules inserted. Base: 4074 rules (639 with conclusion selected). Queue: 1206 rules.
5200 rules inserted. Base: 4171 rules (639 with conclusion selected). Queue: 1321 rules.
5400 rules inserted. Base: 4228 rules (639 with conclusion selected). Queue: 1344 rules.
5600 rules inserted. Base: 4392 rules (639 with conclusion selected). Queue: 1392 rules.
5800 rules inserted. Base: 4494 rules (639 with conclusion selected). Queue: 1446 rules.
6000 rules inserted. Base: 4578 rules (639 with conclusion selected). Queue: 1483 rules.
6200 rules inserted. Base: 4742 rules (639 with conclusion selected). Queue: 1543 rules.
6400 rules inserted. Base: 4817 rules (639 with conclusion selected). Queue: 1652 rules.
6600 rules inserted. Base: 4956 rules (639 with conclusion selected). Queue: 1692 rules.
6800 rules inserted. Base: 5009 rules (639 with conclusion selected). Queue: 1569 rules.
7000 rules inserted. Base: 5171 rules (639 with conclusion selected). Queue: 1565 rules.
7200 rules inserted. Base: 5306 rules (639 with conclusion selected). Queue: 1618 rules.
7400 rules inserted. Base: 5355 rules (639 with conclusion selected). Queue: 1505 rules.
7600 rules inserted. Base: 5519 rules (639 with conclusion selected). Queue: 1504 rules.
7800 rules inserted. Base: 5677 rules (639 with conclusion selected). Queue: 1501 rules.
8000 rules inserted. Base: 5723 rules (639 with conclusion selected). Queue: 1480 rules.
8200 rules inserted. Base: 5825 rules (639 with conclusion selected). Queue: 1524 rules.
8400 rules inserted. Base: 5984 rules (639 with conclusion selected). Queue: 1497 rules.
8600 rules inserted. Base: 6135 rules (639 with conclusion selected). Queue: 1485 rules.
8800 rules inserted. Base: 6253 rules (639 with conclusion selected). Queue: 1512 rules.
9000 rules inserted. Base: 6410 rules (639 with conclusion selected). Queue: 1483 rules.
9200 rules inserted. Base: 6580 rules (639 with conclusion selected). Queue: 1455 rules.
9400 rules inserted. Base: 6661 rules (639 with conclusion selected). Queue: 1432 rules.
9600 rules inserted. Base: 6776 rules (639 with conclusion selected). Queue: 1413 rules.
9800 rules inserted. Base: 6895 rules (639 with conclusion selected). Queue: 1384 rules.
10000 rules inserted. Base: 7095 rules (639 with conclusion selected). Queue: 1300 rules.
10200 rules inserted. Base: 7194 rules (639 with conclusion selected). Queue: 1304 rules.
10400 rules inserted. Base: 7351 rules (639 with conclusion selected). Queue: 1241 rules.
10600 rules inserted. Base: 7551 rules (639 with conclusion selected). Queue: 1159 rules.
10800 rules inserted. Base: 7704 rules (644 with conclusion selected). Queue: 1136 rules.
11000 rules inserted. Base: 7797 rules (644 with conclusion selected). Queue: 1108 rules.
11200 rules inserted. Base: 7647 rules (644 with conclusion selected). Queue: 1088 rules.
11400 rules inserted. Base: 7738 rules (644 with conclusion selected). Queue: 1047 rules.
11600 rules inserted. Base: 7600 rules (644 with conclusion selected). Queue: 1016 rules.
11800 rules inserted. Base: 7714 rules (656 with conclusion selected). Queue: 925 rules.
12000 rules inserted. Base: 7722 rules (656 with conclusion selected). Queue: 835 rules.
12200 rules inserted. Base: 7806 rules (656 with conclusion selected). Queue: 849 rules.
12400 rules inserted. Base: 6267 rules (657 with conclusion selected). Queue: 783 rules.
12600 rules inserted. Base: 4707 rules (658 with conclusion selected). Queue: 739 rules.
12800 rules inserted. Base: 4855 rules (667 with conclusion selected). Queue: 790 rules.
13000 rules inserted. Base: 4966 rules (667 with conclusion selected). Queue: 791 rules.
13200 rules inserted. Base: 5100 rules (667 with conclusion selected). Queue: 774 rules.
13400 rules inserted. Base: 5249 rules (667 with conclusion selected). Queue: 738 rules.
13600 rules inserted. Base: 5400 rules (695 with conclusion selected). Queue: 747 rules.
13800 rules inserted. Base: 5126 rules (695 with conclusion selected). Queue: 760 rules.
14000 rules inserted. Base: 5247 rules (695 with conclusion selected). Queue: 770 rules.
14200 rules inserted. Base: 5011 rules (725 with conclusion selected). Queue: 803 rules.
14400 rules inserted. Base: 5133 rules (755 with conclusion selected). Queue: 847 rules.
14600 rules inserted. Base: 5270 rules (757 with conclusion selected). Queue: 857 rules.
14800 rules inserted. Base: 5389 rules (757 with conclusion selected). Queue: 884 rules.
15000 rules inserted. Base: 5563 rules (779 with conclusion selected). Queue: 897 rules.
15200 rules inserted. Base: 5623 rules (799 with conclusion selected). Queue: 941 rules.
15400 rules inserted. Base: 5746 rules (801 with conclusion selected). Queue: 928 rules.
15600 rules inserted. Base: 5879 rules (801 with conclusion selected). Queue: 1000 rules.
15800 rules inserted. Base: 6017 rules (803 with conclusion selected). Queue: 1008 rules.
16000 rules inserted. Base: 6205 rules (835 with conclusion selected). Queue: 1081 rules.
16200 rules inserted. Base: 6311 rules (835 with conclusion selected). Queue: 1164 rules.
16400 rules inserted. Base: 6453 rules (835 with conclusion selected). Queue: 1139 rules.
16600 rules inserted. Base: 6557 rules (835 with conclusion selected). Queue: 1223 rules.
16800 rules inserted. Base: 6713 rules (835 with conclusion selected). Queue: 1190 rules.
17000 rules inserted. Base: 6861 rules (839 with conclusion selected). Queue: 1209 rules.
17200 rules inserted. Base: 6994 rules (907 with conclusion selected). Queue: 1266 rules.
17400 rules inserted. Base: 7128 rules (907 with conclusion selected). Queue: 1266 rules.
17600 rules inserted. Base: 7236 rules (907 with conclusion selected). Queue: 1264 rules.
17800 rules inserted. Base: 7353 rules (907 with conclusion selected). Queue: 1271 rules.
18000 rules inserted. Base: 7479 rules (907 with conclusion selected). Queue: 1288 rules.
18200 rules inserted. Base: 7660 rules (916 with conclusion selected). Queue: 1307 rules.
18400 rules inserted. Base: 7799 rules (931 with conclusion selected). Queue: 1291 rules.
18600 rules inserted. Base: 7936 rules (931 with conclusion selected). Queue: 1247 rules.
18800 rules inserted. Base: 8037 rules (931 with conclusion selected). Queue: 1230 rules.
19000 rules inserted. Base: 8170 rules (931 with conclusion selected). Queue: 1181 rules.
19200 rules inserted. Base: 8284 rules (931 with conclusion selected). Queue: 1178 rules.
19400 rules inserted. Base: 8464 rules (931 with conclusion selected). Queue: 1213 rules.
19600 rules inserted. Base: 8596 rules (931 with conclusion selected). Queue: 1233 rules.
19800 rules inserted. Base: 8715 rules (931 with conclusion selected). Queue: 1219 rules.
20000 rules inserted. Base: 8775 rules (931 with conclusion selected). Queue: 1217 rules.
20200 rules inserted. Base: 8871 rules (931 with conclusion selected). Queue: 1202 rules.
20400 rules inserted. Base: 8998 rules (931 with conclusion selected). Queue: 1231 rules.
20600 rules inserted. Base: 9166 rules (931 with conclusion selected). Queue: 1274 rules.
20800 rules inserted. Base: 9244 rules (931 with conclusion selected). Queue: 1294 rules.
21000 rules inserted. Base: 9348 rules (931 with conclusion selected). Queue: 1280 rules.
21200 rules inserted. Base: 9402 rules (931 with conclusion selected). Queue: 1293 rules.
21400 rules inserted. Base: 9484 rules (931 with conclusion selected). Queue: 1285 rules.
21600 rules inserted. Base: 9598 rules (931 with conclusion selected). Queue: 1296 rules.
21800 rules inserted. Base: 9756 rules (931 with conclusion selected). Queue: 1319 rules.
22000 rules inserted. Base: 9911 rules (931 with conclusion selected). Queue: 1357 rules.
22200 rules inserted. Base: 9945 rules (931 with conclusion selected). Queue: 1366 rules.
22400 rules inserted. Base: 9949 rules (931 with conclusion selected). Queue: 1375 rules.
22600 rules inserted. Base: 10003 rules (931 with conclusion selected). Queue: 1353 rules.
22800 rules inserted. Base: 10009 rules (931 with conclusion selected). Queue: 1374 rules.
23000 rules inserted. Base: 10138 rules (931 with conclusion selected). Queue: 1410 rules.
23200 rules inserted. Base: 10308 rules (931 with conclusion selected). Queue: 1436 rules.
23400 rules inserted. Base: 10347 rules (931 with conclusion selected). Queue: 1385 rules.
23600 rules inserted. Base: 10427 rules (931 with conclusion selected). Queue: 1381 rules.
23800 rules inserted. Base: 10431 rules (931 with conclusion selected). Queue: 1325 rules.
24000 rules inserted. Base: 10497 rules (931 with conclusion selected). Queue: 1320 rules.
24200 rules inserted. Base: 10574 rules (931 with conclusion selected). Queue: 1357 rules.
24400 rules inserted. Base: 10645 rules (931 with conclusion selected). Queue: 1382 rules.
24600 rules inserted. Base: 10825 rules (931 with conclusion selected). Queue: 1454 rules.
24800 rules inserted. Base: 10909 rules (931 with conclusion selected). Queue: 1378 rules.
25000 rules inserted. Base: 11011 rules (939 with conclusion selected). Queue: 1268 rules.
25200 rules inserted. Base: 11152 rules (947 with conclusion selected). Queue: 1161 rules.
25400 rules inserted. Base: 11237 rules (947 with conclusion selected). Queue: 1187 rules.
25600 rules inserted. Base: 11293 rules (947 with conclusion selected). Queue: 1211 rules.
25800 rules inserted. Base: 11396 rules (947 with conclusion selected). Queue: 1231 rules.
26000 rules inserted. Base: 11536 rules (947 with conclusion selected). Queue: 1255 rules.
26200 rules inserted. Base: 11492 rules (964 with conclusion selected). Queue: 1186 rules.
26400 rules inserted. Base: 11470 rules (981 with conclusion selected). Queue: 1135 rules.
26600 rules inserted. Base: 11563 rules (981 with conclusion selected). Queue: 1160 rules.
26800 rules inserted. Base: 11655 rules (981 with conclusion selected). Queue: 1184 rules.
27000 rules inserted. Base: 11783 rules (981 with conclusion selected). Queue: 1224 rules.
27200 rules inserted. Base: 11899 rules (981 with conclusion selected). Queue: 1272 rules.
27400 rules inserted. Base: 11755 rules (999 with conclusion selected). Queue: 1247 rules.
27600 rules inserted. Base: 11855 rules (999 with conclusion selected). Queue: 1265 rules.
27800 rules inserted. Base: 11970 rules (999 with conclusion selected). Queue: 1267 rules.
28000 rules inserted. Base: 12087 rules (999 with conclusion selected). Queue: 1286 rules.
28200 rules inserted. Base: 12163 rules (999 with conclusion selected). Queue: 1318 rules.
28400 rules inserted. Base: 12227 rules (999 with conclusion selected). Queue: 1345 rules.
28600 rules inserted. Base: 12183 rules (1021 with conclusion selected). Queue: 1257 rules.
28800 rules inserted. Base: 12282 rules (1027 with conclusion selected). Queue: 1250 rules.
29000 rules inserted. Base: 12422 rules (1027 with conclusion selected). Queue: 1224 rules.
29200 rules inserted. Base: 12565 rules (1027 with conclusion selected). Queue: 1195 rules.
29400 rules inserted. Base: 12661 rules (1027 with conclusion selected). Queue: 1252 rules.
29600 rules inserted. Base: 12728 rules (1027 with conclusion selected). Queue: 1278 rules.
29800 rules inserted. Base: 12749 rules (1027 with conclusion selected). Queue: 1254 rules.
30000 rules inserted. Base: 12777 rules (1027 with conclusion selected). Queue: 1198 rules.
30200 rules inserted. Base: 12882 rules (1027 with conclusion selected). Queue: 1110 rules.
30400 rules inserted. Base: 13000 rules (1027 with conclusion selected). Queue: 1073 rules.
30600 rules inserted. Base: 13064 rules (1027 with conclusion selected). Queue: 1135 rules.
30800 rules inserted. Base: 13138 rules (1027 with conclusion selected). Queue: 1152 rules.
31000 rules inserted. Base: 12703 rules (1027 with conclusion selected). Queue: 1144 rules.
31200 rules inserted. Base: 12809 rules (1027 with conclusion selected). Queue: 1059 rules.
31400 rules inserted. Base: 12955 rules (1027 with conclusion selected). Queue: 999 rules.
31600 rules inserted. Base: 13022 rules (1027 with conclusion selected). Queue: 1001 rules.
31800 rules inserted. Base: 13160 rules (1027 with conclusion selected). Queue: 987 rules.
32000 rules inserted. Base: 13302 rules (1027 with conclusion selected). Queue: 973 rules.
32200 rules inserted. Base: 11768 rules (1029 with conclusion selected). Queue: 737 rules.
32400 rules inserted. Base: 11837 rules (1029 with conclusion selected). Queue: 688 rules.
32600 rules inserted. Base: 11997 rules (1029 with conclusion selected). Queue: 633 rules.
32800 rules inserted. Base: 12152 rules (1029 with conclusion selected). Queue: 577 rules.
33000 rules inserted. Base: 12198 rules (1030 with conclusion selected). Queue: 493 rules.
33200 rules inserted. Base: 12298 rules (1030 with conclusion selected). Queue: 368 rules.
33400 rules inserted. Base: 10192 rules (1030 with conclusion selected). Queue: 264 rules.
33600 rules inserted. Base: 9693 rules (1030 with conclusion selected). Queue: 119 rules.
33800 rules inserted. Base: 9429 rules (1032 with conclusion selected). Queue: 15 rules.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m_20)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m_20))
goal reachable: attacker(m_20) -> end(RecvMsg(bob,alice,stagepack_a(sid_5),m_20))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) may be inserted in a table at insert {854}.
table(statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false)))).

2. We assume as hypothesis that
attacker(m_20).

3. The attacker has some term re_24.
attacker(re_24).

4. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {815}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

5. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

6. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

11. By 10, the attacker may know hash(hash(somename,empty),empty).
By 6, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

12. By 11, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 5, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

13. By 12, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 3, the attacker may know re_24.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24)).

14. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

15. By 7, the attacker may know empty.
By 14, the attacker may know minnonce.
By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24).
By 2, the attacker may know m_20.
Using the function encrypt the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24),m_20).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24),m_20)).

16. The attacker has some term ns_16.
attacker(ns_16).

17. By 3, the attacker may know re_24.
By 16, the attacker may know ns_16.
By 15, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24),m_20).
Using the function concat3 the attacker may obtain concat3(re_24,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24),m_20)).
attacker(concat3(re_24,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24),m_20))).

18. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {927}.
The message concat3(re_24,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24),m_20)) that the attacker may have by 17 may be received at input {855}.
So event RecvMsg(bob,alice,stagepack_a(sid_5),m_20) may be executed at {925}.
end(RecvMsg(bob,alice,stagepack_a(sid_5),m_20)).

19. By 18, end(RecvMsg(bob,alice,stagepack_a(sid_5),m_20)).
The goal is reached, represented in the following fact:
end(RecvMsg(bob,alice,stagepack_a(sid_5),m_20)).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m_20)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m_20)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m_20)) ==> event(SendMsg(alice,c,stagepack_a(sid_a),m_20)) || false || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)))
goal reachable: attacker(m_20) -> end(RecvMsg(bob,alice,stagepack_a(sid_5),m_20))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) may be inserted in a table at insert {854}.
table(statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false)))).

2. We assume as hypothesis that
attacker(m_20).

3. The attacker has some term re_24.
attacker(re_24).

4. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {815}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

5. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

6. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

11. By 10, the attacker may know hash(hash(somename,empty),empty).
By 6, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

12. By 11, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 5, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

13. By 12, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 3, the attacker may know re_24.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24)).

14. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

15. By 7, the attacker may know empty.
By 14, the attacker may know minnonce.
By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24).
By 2, the attacker may know m_20.
Using the function encrypt the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24),m_20).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24),m_20)).

16. The attacker has some term ns_16.
attacker(ns_16).

17. By 3, the attacker may know re_24.
By 16, the attacker may know ns_16.
By 15, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24),m_20).
Using the function concat3 the attacker may obtain concat3(re_24,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24),m_20)).
attacker(concat3(re_24,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24),m_20))).

18. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {927}.
The message concat3(re_24,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24),m_20)) that the attacker may have by 17 may be received at input {855}.
So event RecvMsg(bob,alice,stagepack_a(sid_5),m_20) may be executed at {925}.
end(RecvMsg(bob,alice,stagepack_a(sid_5),m_20)).

19. By 18, end(RecvMsg(bob,alice,stagepack_a(sid_5),m_20)).
The goal is reached, represented in the following fact:
end(RecvMsg(bob,alice,stagepack_a(sid_5),m_20)).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m_20)) ==> event(SendMsg(alice,c,stagepack_a(sid_a),m_20)) || false || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m_20)) ==> event(SendMsg(alice,c,stagepack_a(sid_a),m_20)) || false
goal reachable: attacker(m_20) -> end(RecvMsg(bob,alice,stagepack_a(sid_5),m_20))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) may be inserted in a table at insert {854}.
table(statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false)))).

2. We assume as hypothesis that
attacker(m_20).

3. The attacker has some term re_24.
attacker(re_24).

4. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {815}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

5. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

6. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

11. By 10, the attacker may know hash(hash(somename,empty),empty).
By 6, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

12. By 11, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 5, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

13. By 12, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 3, the attacker may know re_24.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24)).

14. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

15. By 7, the attacker may know empty.
By 14, the attacker may know minnonce.
By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24).
By 2, the attacker may know m_20.
Using the function encrypt the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24),m_20).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24),m_20)).

16. The attacker has some term ns_16.
attacker(ns_16).

17. By 3, the attacker may know re_24.
By 16, the attacker may know ns_16.
By 15, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24),m_20).
Using the function concat3 the attacker may obtain concat3(re_24,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24),m_20)).
attacker(concat3(re_24,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24),m_20))).

18. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {927}.
The message concat3(re_24,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24),m_20)) that the attacker may have by 17 may be received at input {855}.
So event RecvMsg(bob,alice,stagepack_a(sid_5),m_20) may be executed at {925}.
end(RecvMsg(bob,alice,stagepack_a(sid_5),m_20)).

19. By 18, end(RecvMsg(bob,alice,stagepack_a(sid_5),m_20)).
The goal is reached, represented in the following fact:
end(RecvMsg(bob,alice,stagepack_a(sid_5),m_20)).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m_20)) ==> event(SendMsg(alice,c,stagepack_a(sid_a),m_20)) || false cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m_20)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m_20)) || false || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)))
goal reachable: attacker(m_20) -> end(RecvMsg(bob,alice,stagepack_a(sid_5),m_20))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) may be inserted in a table at insert {854}.
table(statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false)))).

2. We assume as hypothesis that
attacker(m_20).

3. The attacker has some term re_24.
attacker(re_24).

4. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {815}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

5. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

6. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

11. By 10, the attacker may know hash(hash(somename,empty),empty).
By 6, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

12. By 11, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 5, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

13. By 12, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 3, the attacker may know re_24.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24)).

14. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

15. By 7, the attacker may know empty.
By 14, the attacker may know minnonce.
By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24).
By 2, the attacker may know m_20.
Using the function encrypt the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24),m_20).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24),m_20)).

16. The attacker has some term ns_16.
attacker(ns_16).

17. By 3, the attacker may know re_24.
By 16, the attacker may know ns_16.
By 15, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24),m_20).
Using the function concat3 the attacker may obtain concat3(re_24,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24),m_20)).
attacker(concat3(re_24,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24),m_20))).

18. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {927}.
The message concat3(re_24,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24),m_20)) that the attacker may have by 17 may be received at input {855}.
So event RecvMsg(bob,alice,stagepack_a(sid_5),m_20) may be executed at {925}.
end(RecvMsg(bob,alice,stagepack_a(sid_5),m_20)).

19. By 18, end(RecvMsg(bob,alice,stagepack_a(sid_5),m_20)).
The goal is reached, represented in the following fact:
end(RecvMsg(bob,alice,stagepack_a(sid_5),m_20)).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m_20)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m_20)) || false || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m_20)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m_20)) || false
goal reachable: attacker(m_20) -> end(RecvMsg(bob,alice,stagepack_a(sid_5),m_20))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) may be inserted in a table at insert {854}.
table(statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false)))).

2. We assume as hypothesis that
attacker(m_20).

3. The attacker has some term re_24.
attacker(re_24).

4. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {815}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

5. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

6. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

11. By 10, the attacker may know hash(hash(somename,empty),empty).
By 6, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

12. By 11, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 5, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

13. By 12, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 3, the attacker may know re_24.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24)).

14. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

15. By 7, the attacker may know empty.
By 14, the attacker may know minnonce.
By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24).
By 2, the attacker may know m_20.
Using the function encrypt the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24),m_20).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24),m_20)).

16. The attacker has some term ns_16.
attacker(ns_16).

17. By 3, the attacker may know re_24.
By 16, the attacker may know ns_16.
By 15, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24),m_20).
Using the function concat3 the attacker may obtain concat3(re_24,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24),m_20)).
attacker(concat3(re_24,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24),m_20))).

18. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {927}.
The message concat3(re_24,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),re_24),m_20)) that the attacker may have by 17 may be received at input {855}.
So event RecvMsg(bob,alice,stagepack_a(sid_5),m_20) may be executed at {925}.
end(RecvMsg(bob,alice,stagepack_a(sid_5),m_20)).

19. By 18, end(RecvMsg(bob,alice,stagepack_a(sid_5),m_20)).
The goal is reached, represented in the following fact:
end(RecvMsg(bob,alice,stagepack_a(sid_5),m_20)).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m_20)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m_20)) || false cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> attacker_p1(msg_a(alice,bob,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {49}.
table(statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

2. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {120}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {117}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) may be sent to the attacker at output {119}.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

3. By 2, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).

4. By 2, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_5),g))).

5. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {815}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

6. By 5, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

7. By 5, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 6, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

14. By 13, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 4, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g)))).

15. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

16. By 8, the attacker may know empty.
By 15, the attacker may know minnonce.
By 14, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
By 3, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
attacker(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_5).
attacker(msg_a(alice,bob,sid_5)).

18. By 17, the attacker may know msg_a(alice,bob,sid_5).
So the attacker may know msg_a(alice,bob,sid_5) in phase 1.
attacker_p1(msg_a(alice,bob,sid_5)).

19. By 18, attacker_p1(msg_a(alice,bob,sid_5)).
The goal is reached, represented in the following fact:
attacker_p1(msg_a(alice,bob,sid_5)).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakM(px,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> attacker_p1(msg_a(alice,bob,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {49}.
table(statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

2. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {120}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {117}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) may be sent to the attacker at output {119}.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

3. By 2, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).

4. By 2, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_5),g))).

5. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {815}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

6. By 5, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

7. By 5, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 6, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

14. By 13, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 4, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g)))).

15. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

16. By 8, the attacker may know empty.
By 15, the attacker may know minnonce.
By 14, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
By 3, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
attacker(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_5).
attacker(msg_a(alice,bob,sid_5)).

18. By 17, the attacker may know msg_a(alice,bob,sid_5).
So the attacker may know msg_a(alice,bob,sid_5) in phase 1.
attacker_p1(msg_a(alice,bob,sid_5)).

19. By 18, attacker_p1(msg_a(alice,bob,sid_5)).
The goal is reached, represented in the following fact:
attacker_p1(msg_a(alice,bob,sid_5)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakM(px,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(px,bob)) && event(LeakM(px,bob)) && event(LeakS(pz,alice)) && event(LeakM(pz,alice)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> attacker_p1(msg_a(alice,bob,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {49}.
table(statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

2. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {120}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {117}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) may be sent to the attacker at output {119}.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

3. By 2, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).

4. By 2, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_5),g))).

5. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {815}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

6. By 5, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

7. By 5, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 6, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

14. By 13, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 4, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g)))).

15. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

16. By 8, the attacker may know empty.
By 15, the attacker may know minnonce.
By 14, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
By 3, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
attacker(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_5).
attacker(msg_a(alice,bob,sid_5)).

18. By 17, the attacker may know msg_a(alice,bob,sid_5).
So the attacker may know msg_a(alice,bob,sid_5) in phase 1.
attacker_p1(msg_a(alice,bob,sid_5)).

19. By 18, attacker_p1(msg_a(alice,bob,sid_5)).
The goal is reached, represented in the following fact:
attacker_p1(msg_a(alice,bob,sid_5)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(px,bob)) && event(LeakM(px,bob)) && event(LeakS(pz,alice)) && event(LeakM(pz,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> attacker_p1(msg_a(alice,bob,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {49}.
table(statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

2. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {120}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {117}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) may be sent to the attacker at output {119}.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

3. By 2, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).

4. By 2, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_5),g))).

5. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {815}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

6. By 5, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

7. By 5, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 6, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

14. By 13, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 4, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g)))).

15. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

16. By 8, the attacker may know empty.
By 15, the attacker may know minnonce.
By 14, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
By 3, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
attacker(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_5).
attacker(msg_a(alice,bob,sid_5)).

18. By 17, the attacker may know msg_a(alice,bob,sid_5).
So the attacker may know msg_a(alice,bob,sid_5) in phase 1.
attacker_p1(msg_a(alice,bob,sid_5)).

19. By 18, attacker_p1(msg_a(alice,bob,sid_5)).
The goal is reached, represented in the following fact:
attacker_p1(msg_a(alice,bob,sid_5)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m_20)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m_20))
goal reachable: begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && attacker(m_20) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(alice,bob,stagepack_b(sid_5),m_20))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {49}.
table(statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

2. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {120}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {117}.
So the entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {118}.
table(statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

3. We assume as hypothesis that
attacker(m_20).

4. Using the function zero the attacker may obtain zero.
attacker(zero).

5. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {120}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {117}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) may be sent to the attacker at output {119}.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

6. By 5, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).

7. By 5, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_5),g))).

8. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {815}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

9. By 8, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

10. By 8, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

11. Using the function empty the attacker may obtain empty.
attacker(empty).

12. Using the function somename the attacker may obtain somename.
attacker(somename).

13. By 12, the attacker may know somename.
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

14. By 13, the attacker may know hash(somename,empty).
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

15. By 14, the attacker may know hash(hash(somename,empty),empty).
By 10, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

16. By 15, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 9, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

17. By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
By 4, the attacker may know zero.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero).
attacker(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero)).

20. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

21. The event LeakS(phase0,bob) may be executed at {1208}.
The event LeakM(phase0,bob) may be executed at {1209}.
So the message (key_s(bob),key_m(bob)) may be sent to the attacker at output {1210}.
attacker((key_s(bob),key_m(bob))).

22. By 21, the attacker may know (key_s(bob),key_m(bob)).
Using the function 2-proj-2-tuple the attacker may obtain key_m(bob).
attacker(key_m(bob)).

23. By 22, the attacker may know key_m(bob).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g)).
attacker(dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))).

24. By 21, the attacker may know (key_s(bob),key_m(bob)).
Using the function 1-proj-2-tuple the attacker may obtain key_s(bob).
attacker(key_s(bob)).

25. By 24, the attacker may know key_s(bob).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g)).
attacker(dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))).

26. By 13, the attacker may know hash(somename,empty).
By 4, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),zero).
attacker(hmac_hash1(hash(somename,empty),zero)).

27. By 26, the attacker may know hmac_hash1(hash(somename,empty),zero).
By 25, the attacker may know dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))).
attacker(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g)))).

28. By 27, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))).
By 23, the attacker may know dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))).
attacker(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g)))).

29. By 28, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))).
By 20, the attacker may know minnonce.
By 19, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero).
By 3, the attacker may know m_20.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),m_20).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),m_20)).

30. The attacker has some term ns_16.
attacker(ns_16).

31. By 4, the attacker may know zero.
By 30, the attacker may know ns_16.
By 29, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),m_20).
Using the function concat3 the attacker may obtain concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),m_20)).
attacker(concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),m_20))).

32. The entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {277}.
The message concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),m_20)) that the attacker may have by 31 may be received at input {121}.
So event RecvMsg(alice,bob,stagepack_b(sid_5),m_20) may be executed at {275}.
end(RecvMsg(alice,bob,stagepack_b(sid_5),m_20)).

33. By 32, end(RecvMsg(alice,bob,stagepack_b(sid_5),m_20)).
The goal is reached, represented in the following fact:
end(RecvMsg(alice,bob,stagepack_b(sid_5),m_20)).


RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m_20)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m_20)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m_20)) ==> event(SendMsg(bob,c,stagepack_b(sid_b),m_20)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || false
goal reachable: begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && attacker(m_20) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(alice,bob,stagepack_b(sid_5),m_20))
Abbreviations:
sid_5 = sid[!1 = @sid]
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5))) && begin(SendMsg(alice,bob,stagepack_a(sid_6),msg_a(alice,bob,sid_6))) -> end(RecvMsg(alice,bob,stagepack_b(sid_6),msg_b(bob,alice,sid_5)))
Abbreviations:
sid_6 = sid[!1 = @sid]
sid_5 = sid[!1 = @sid_1]
goal reachable: begin(SendMsg(bob,charlie,stagepack_b(sid_5),msg_b(bob,charlie,sid_5))) && begin(SendMsg(alice,bob,stagepack_a(sid_6),msg_a(alice,bob,sid_6))) -> end(RecvMsg(alice,bob,stagepack_b(sid_6),msg_b(bob,charlie,sid_5)))
Abbreviations:
sid_6 = sid[!1 = @sid]
sid_5 = sid[!1 = @sid_1]
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m_20)) ==> event(SendMsg(bob,c,stagepack_b(sid_b),m_20)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || false is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m_20)) ==> event(SendMsg(bob,c,stagepack_b(sid_b),m_20)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)))
goal reachable: begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && attacker(m_20) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(alice,bob,stagepack_b(sid_5),m_20))
Abbreviations:
sid_5 = sid[!1 = @sid]
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5))) && begin(SendMsg(alice,bob,stagepack_a(sid_6),msg_a(alice,bob,sid_6))) -> end(RecvMsg(alice,bob,stagepack_b(sid_6),msg_b(bob,alice,sid_5)))
Abbreviations:
sid_6 = sid[!1 = @sid]
sid_5 = sid[!1 = @sid_1]
goal reachable: begin(SendMsg(bob,charlie,stagepack_b(sid_5),msg_b(bob,charlie,sid_5))) && begin(SendMsg(alice,bob,stagepack_a(sid_6),msg_a(alice,bob,sid_6))) -> end(RecvMsg(alice,bob,stagepack_b(sid_6),msg_b(bob,charlie,sid_5)))
Abbreviations:
sid_6 = sid[!1 = @sid]
sid_5 = sid[!1 = @sid_1]
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m_20)) ==> event(SendMsg(bob,c,stagepack_b(sid_b),m_20)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m_20)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m_20)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || false
goal reachable: begin(SendMsg(bob,charlie,stagepack_b(sid_5),msg_b(bob,charlie,sid_5))) && begin(SendMsg(alice,bob,stagepack_a(sid_6),msg_a(alice,bob,sid_6))) -> end(RecvMsg(alice,bob,stagepack_b(sid_6),msg_b(bob,charlie,sid_5)))
Abbreviations:
sid_6 = sid[!1 = @sid]
sid_5 = sid[!1 = @sid_1]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]
sid_6 = sid[!1 = @sid_1]

1. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {49}.
table(statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

2. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {120}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {117}.
So the entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {118}.
table(statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

3. The entry statestore(bob,charlie,sid_6,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) may be inserted in a table at insert {1265}.
table(statestore(bob,charlie,sid_6,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false)))).

4. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {120}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {117}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) may be sent to the attacker at output {119}.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).

6. The attacker has some term ns_16.
attacker(ns_16).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_5),g))).

8. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
By 6, the attacker may know ns_16.
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
Using the function concat3 the attacker may obtain concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

9. The entry statestore(bob,charlie,sid_6,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 3 may be read at get {1338}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) that the attacker may have by 8 may be received at input {1266}.
So the entry statestore(bob,charlie,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false))) may be inserted in a table at insert {1337}.
table(statestore(bob,charlie,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false)))).

10. The entry statestore(bob,charlie,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false))) that may be in a table by 9 may be read at get {1493}.
The event SendMsg(bob,charlie,stagepack_b(sid_6),msg_b(bob,charlie,sid_6)) may be executed at {1490}.
So the message concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))) may be sent to the attacker at output {1492}.
attacker(concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)))).

11. By 10, the attacker may know concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))).

12. The attacker has some term ns_17.
attacker(ns_17).

13. The attacker has some term ns_18.
attacker(ns_18).

14. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
By 13, the attacker may know ns_18.
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
Using the function concat3 the attacker may obtain concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

15. The entry statestore(bob,charlie,sid_6,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 3 may be read at get {1338}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) that the attacker may have by 14 may be received at input {1266}.
So the entry statestore(bob,charlie,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false))) may be inserted in a table at insert {1337}.
table(statestore(bob,charlie,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false)))).

16. The entry statestore(bob,charlie,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false))) that may be in a table by 15 may be read at get {1493}.
The event SendMsg(bob,charlie,stagepack_b(sid_6),msg_b(bob,charlie,sid_6)) may be executed at {1490}.
So the message concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,charlie,sid_6),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))) may be sent to the attacker at output {1492}.
attacker(concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,charlie,sid_6),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)))).

17. By 16, the attacker may know concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,charlie,sid_6),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(bob,charlie,sid_6),g)).
attacker(validkey(dhexp_real(key_e(bob,charlie,sid_6),g))).

18. By 17, the attacker may know validkey(dhexp_real(key_e(bob,charlie,sid_6),g)).
By 12, the attacker may know ns_17.
By 11, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)).
Using the function concat3 the attacker may obtain concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),ns_17,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))).
attacker(concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),ns_17,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)))).

19. The entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {277}.
The message concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),ns_17,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))) that the attacker may have by 18 may be received at input {121}.
So event RecvMsg(alice,bob,stagepack_b(sid_5),msg_b(bob,charlie,sid_6)) may be executed at {275}.
end(RecvMsg(alice,bob,stagepack_b(sid_5),msg_b(bob,charlie,sid_6))).

20. By 19, end(RecvMsg(alice,bob,stagepack_b(sid_5),msg_b(bob,charlie,sid_6))).
The goal is reached, represented in the following fact:
end(RecvMsg(alice,bob,stagepack_b(sid_5),msg_b(bob,charlie,sid_6))).


RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m_20)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m_20)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || false cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m_20)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m_20)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)))
goal reachable: begin(SendMsg(bob,charlie,stagepack_b(sid_5),msg_b(bob,charlie,sid_5))) && begin(SendMsg(alice,bob,stagepack_a(sid_6),msg_a(alice,bob,sid_6))) -> end(RecvMsg(alice,bob,stagepack_b(sid_6),msg_b(bob,charlie,sid_5)))
Abbreviations:
sid_6 = sid[!1 = @sid]
sid_5 = sid[!1 = @sid_1]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]
sid_6 = sid[!1 = @sid_1]

1. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {49}.
table(statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

2. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {120}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {117}.
So the entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {118}.
table(statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

3. The entry statestore(bob,charlie,sid_6,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) may be inserted in a table at insert {1265}.
table(statestore(bob,charlie,sid_6,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false)))).

4. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {120}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {117}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) may be sent to the attacker at output {119}.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).

6. The attacker has some term ns_16.
attacker(ns_16).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_5),g))).

8. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
By 6, the attacker may know ns_16.
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
Using the function concat3 the attacker may obtain concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

9. The entry statestore(bob,charlie,sid_6,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 3 may be read at get {1338}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) that the attacker may have by 8 may be received at input {1266}.
So the entry statestore(bob,charlie,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false))) may be inserted in a table at insert {1337}.
table(statestore(bob,charlie,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false)))).

10. The entry statestore(bob,charlie,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false))) that may be in a table by 9 may be read at get {1493}.
The event SendMsg(bob,charlie,stagepack_b(sid_6),msg_b(bob,charlie,sid_6)) may be executed at {1490}.
So the message concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))) may be sent to the attacker at output {1492}.
attacker(concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)))).

11. By 10, the attacker may know concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))).

12. The attacker has some term ns_17.
attacker(ns_17).

13. The attacker has some term ns_18.
attacker(ns_18).

14. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
By 13, the attacker may know ns_18.
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
Using the function concat3 the attacker may obtain concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

15. The entry statestore(bob,charlie,sid_6,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 3 may be read at get {1338}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) that the attacker may have by 14 may be received at input {1266}.
So the entry statestore(bob,charlie,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false))) may be inserted in a table at insert {1337}.
table(statestore(bob,charlie,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false)))).

16. The entry statestore(bob,charlie,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false))) that may be in a table by 15 may be read at get {1493}.
The event SendMsg(bob,charlie,stagepack_b(sid_6),msg_b(bob,charlie,sid_6)) may be executed at {1490}.
So the message concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,charlie,sid_6),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))) may be sent to the attacker at output {1492}.
attacker(concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,charlie,sid_6),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)))).

17. By 16, the attacker may know concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,charlie,sid_6),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(bob,charlie,sid_6),g)).
attacker(validkey(dhexp_real(key_e(bob,charlie,sid_6),g))).

18. By 17, the attacker may know validkey(dhexp_real(key_e(bob,charlie,sid_6),g)).
By 12, the attacker may know ns_17.
By 11, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)).
Using the function concat3 the attacker may obtain concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),ns_17,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))).
attacker(concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),ns_17,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)))).

19. The entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {277}.
The message concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),ns_17,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))) that the attacker may have by 18 may be received at input {121}.
So event RecvMsg(alice,bob,stagepack_b(sid_5),msg_b(bob,charlie,sid_6)) may be executed at {275}.
end(RecvMsg(alice,bob,stagepack_b(sid_5),msg_b(bob,charlie,sid_6))).

20. By 19, end(RecvMsg(alice,bob,stagepack_b(sid_5),msg_b(bob,charlie,sid_6))).
The goal is reached, represented in the following fact:
end(RecvMsg(alice,bob,stagepack_b(sid_5),msg_b(bob,charlie,sid_6))).


RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m_20)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m_20)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) cannot be proved.
Starting query not attacker_p1(msg_b(bob,alice,sid_b))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5))) -> attacker_p1(msg_b(bob,alice,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) may be inserted in a table at insert {854}.
table(statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false)))).

2. The attacker has some term plaintext_a_2.
attacker(plaintext_a_2).

3. Using the function zero the attacker may obtain zero.
attacker(zero).

4. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {815}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

5. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

6. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

11. By 10, the attacker may know hash(hash(somename,empty),empty).
By 6, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

12. By 11, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 5, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

13. By 12, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 3, the attacker may know zero.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero)).

14. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

15. By 7, the attacker may know empty.
By 14, the attacker may know minnonce.
By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 2, the attacker may know plaintext_a_2.
Using the function encrypt the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).

16. The attacker has some term ns_16.
attacker(ns_16).

17. By 3, the attacker may know zero.
By 16, the attacker may know ns_16.
By 15, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(concat3(zero,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

18. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {927}.
The message concat3(zero,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)) that the attacker may have by 17 may be received at input {855}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) may be inserted in a table at insert {926}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false)))).

19. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) that may be in a table by 18 may be read at get {1082}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1079}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))) may be sent to the attacker at output {1081}.
attacker(concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

20. By 19, the attacker may know concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).

21. The attacker has some term plaintext_a_3.
attacker(plaintext_a_3).

22. By 7, the attacker may know empty.
By 14, the attacker may know minnonce.
By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 21, the attacker may know plaintext_a_3.
Using the function encrypt the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)).

23. The attacker has some term ns_17.
attacker(ns_17).

24. By 3, the attacker may know zero.
By 23, the attacker may know ns_17.
By 22, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3).
Using the function concat3 the attacker may obtain concat3(zero,ns_17,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)).
attacker(concat3(zero,ns_17,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))).

25. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {927}.
The message concat3(zero,ns_17,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)) that the attacker may have by 24 may be received at input {855}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) may be inserted in a table at insert {926}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false)))).

26. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) that may be in a table by 25 may be read at get {1082}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1079}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))) may be sent to the attacker at output {1081}.
attacker(concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

27. By 26, the attacker may know concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(bob,alice,sid_5),g)).
attacker(validkey(dhexp_real(key_e(bob,alice,sid_5),g))).

28. By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 15, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

29. By 28, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
By 27, the attacker may know validkey(dhexp_real(key_e(bob,alice,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))).
attacker(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g)))).

30. By 9, the attacker may know hash(somename,empty).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),zero).
attacker(hmac_hash1(hash(somename,empty),zero)).

31. By 30, the attacker may know hmac_hash1(hash(somename,empty),zero).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero).
attacker(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero)).

32. By 31, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero).
By 3, the attacker may know zero.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero).
attacker(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero)).

33. By 32, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero).
By 14, the attacker may know minnonce.
By 29, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))).
By 20, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
attacker(aeadpack(true,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).

34. By 33, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
Using the function 3-proj-aeadpack the attacker may obtain msg_b(bob,alice,sid_5).
attacker(msg_b(bob,alice,sid_5)).

35. By 34, the attacker may know msg_b(bob,alice,sid_5).
So the attacker may know msg_b(bob,alice,sid_5) in phase 1.
attacker_p1(msg_b(bob,alice,sid_5)).

36. By 35, attacker_p1(msg_b(bob,alice,sid_5)).
The goal is reached, represented in the following fact:
attacker_p1(msg_b(bob,alice,sid_5)).


RESULT not attacker_p1(msg_b(bob,alice,sid_b)) cannot be proved.
Starting query not attacker_p1(msg_b(bob,alice,sid_b))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5))) -> attacker_p1(msg_b(bob,alice,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) may be inserted in a table at insert {854}.
table(statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false)))).

2. The attacker has some term plaintext_a_2.
attacker(plaintext_a_2).

3. Using the function zero the attacker may obtain zero.
attacker(zero).

4. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {815}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

5. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

6. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

11. By 10, the attacker may know hash(hash(somename,empty),empty).
By 6, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

12. By 11, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 5, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

13. By 12, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 3, the attacker may know zero.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero)).

14. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

15. By 7, the attacker may know empty.
By 14, the attacker may know minnonce.
By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 2, the attacker may know plaintext_a_2.
Using the function encrypt the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).

16. The attacker has some term ns_16.
attacker(ns_16).

17. By 3, the attacker may know zero.
By 16, the attacker may know ns_16.
By 15, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(concat3(zero,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

18. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {927}.
The message concat3(zero,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)) that the attacker may have by 17 may be received at input {855}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) may be inserted in a table at insert {926}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false)))).

19. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) that may be in a table by 18 may be read at get {1082}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1079}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))) may be sent to the attacker at output {1081}.
attacker(concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

20. By 19, the attacker may know concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).

21. The attacker has some term plaintext_a_3.
attacker(plaintext_a_3).

22. By 7, the attacker may know empty.
By 14, the attacker may know minnonce.
By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 21, the attacker may know plaintext_a_3.
Using the function encrypt the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)).

23. The attacker has some term ns_17.
attacker(ns_17).

24. By 3, the attacker may know zero.
By 23, the attacker may know ns_17.
By 22, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3).
Using the function concat3 the attacker may obtain concat3(zero,ns_17,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)).
attacker(concat3(zero,ns_17,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))).

25. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {927}.
The message concat3(zero,ns_17,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)) that the attacker may have by 24 may be received at input {855}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) may be inserted in a table at insert {926}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false)))).

26. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) that may be in a table by 25 may be read at get {1082}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1079}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))) may be sent to the attacker at output {1081}.
attacker(concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

27. By 26, the attacker may know concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(bob,alice,sid_5),g)).
attacker(validkey(dhexp_real(key_e(bob,alice,sid_5),g))).

28. By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 15, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

29. By 28, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
By 27, the attacker may know validkey(dhexp_real(key_e(bob,alice,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))).
attacker(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g)))).

30. By 9, the attacker may know hash(somename,empty).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),zero).
attacker(hmac_hash1(hash(somename,empty),zero)).

31. By 30, the attacker may know hmac_hash1(hash(somename,empty),zero).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero).
attacker(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero)).

32. By 31, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero).
By 3, the attacker may know zero.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero).
attacker(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero)).

33. By 32, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero).
By 14, the attacker may know minnonce.
By 29, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))).
By 20, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
attacker(aeadpack(true,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).

34. By 33, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
Using the function 3-proj-aeadpack the attacker may obtain msg_b(bob,alice,sid_5).
attacker(msg_b(bob,alice,sid_5)).

35. By 34, the attacker may know msg_b(bob,alice,sid_5).
So the attacker may know msg_b(bob,alice,sid_5) in phase 1.
attacker_p1(msg_b(bob,alice,sid_5)).

36. By 35, attacker_p1(msg_b(bob,alice,sid_5)).
The goal is reached, represented in the following fact:
attacker_p1(msg_b(bob,alice,sid_5)).


RESULT not attacker_p1(msg_b(bob,alice,sid_b)) cannot be proved.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(px,alice)) && event(LeakM(px,alice)) && event(LeakS(pz,bob)) && event(LeakM(pz,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5))) -> attacker_p1(msg_b(bob,alice,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) may be inserted in a table at insert {854}.
table(statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false)))).

2. The attacker has some term plaintext_a_2.
attacker(plaintext_a_2).

3. Using the function zero the attacker may obtain zero.
attacker(zero).

4. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {815}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

5. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

6. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

11. By 10, the attacker may know hash(hash(somename,empty),empty).
By 6, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

12. By 11, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 5, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

13. By 12, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 3, the attacker may know zero.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero)).

14. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

15. By 7, the attacker may know empty.
By 14, the attacker may know minnonce.
By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 2, the attacker may know plaintext_a_2.
Using the function encrypt the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).

16. The attacker has some term ns_16.
attacker(ns_16).

17. By 3, the attacker may know zero.
By 16, the attacker may know ns_16.
By 15, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(concat3(zero,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

18. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {927}.
The message concat3(zero,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)) that the attacker may have by 17 may be received at input {855}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) may be inserted in a table at insert {926}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false)))).

19. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) that may be in a table by 18 may be read at get {1082}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1079}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))) may be sent to the attacker at output {1081}.
attacker(concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

20. By 19, the attacker may know concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).

21. The attacker has some term plaintext_a_3.
attacker(plaintext_a_3).

22. By 7, the attacker may know empty.
By 14, the attacker may know minnonce.
By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 21, the attacker may know plaintext_a_3.
Using the function encrypt the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)).

23. The attacker has some term ns_17.
attacker(ns_17).

24. By 3, the attacker may know zero.
By 23, the attacker may know ns_17.
By 22, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3).
Using the function concat3 the attacker may obtain concat3(zero,ns_17,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)).
attacker(concat3(zero,ns_17,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))).

25. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {927}.
The message concat3(zero,ns_17,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)) that the attacker may have by 24 may be received at input {855}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) may be inserted in a table at insert {926}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false)))).

26. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) that may be in a table by 25 may be read at get {1082}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1079}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))) may be sent to the attacker at output {1081}.
attacker(concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

27. By 26, the attacker may know concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(bob,alice,sid_5),g)).
attacker(validkey(dhexp_real(key_e(bob,alice,sid_5),g))).

28. By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 15, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

29. By 28, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
By 27, the attacker may know validkey(dhexp_real(key_e(bob,alice,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))).
attacker(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g)))).

30. By 9, the attacker may know hash(somename,empty).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),zero).
attacker(hmac_hash1(hash(somename,empty),zero)).

31. By 30, the attacker may know hmac_hash1(hash(somename,empty),zero).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero).
attacker(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero)).

32. By 31, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero).
By 3, the attacker may know zero.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero).
attacker(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero)).

33. By 32, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero).
By 14, the attacker may know minnonce.
By 29, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))).
By 20, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
attacker(aeadpack(true,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).

34. By 33, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
Using the function 3-proj-aeadpack the attacker may obtain msg_b(bob,alice,sid_5).
attacker(msg_b(bob,alice,sid_5)).

35. By 34, the attacker may know msg_b(bob,alice,sid_5).
So the attacker may know msg_b(bob,alice,sid_5) in phase 1.
attacker_p1(msg_b(bob,alice,sid_5)).

36. By 35, attacker_p1(msg_b(bob,alice,sid_5)).
The goal is reached, represented in the following fact:
attacker_p1(msg_b(bob,alice,sid_5)).


RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(px,alice)) && event(LeakM(px,alice)) && event(LeakS(pz,bob)) && event(LeakM(pz,bob))) cannot be proved.
Starting query not attacker_p1(msg_b(bob,alice,sid_b))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5))) -> attacker_p1(msg_b(bob,alice,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) may be inserted in a table at insert {854}.
table(statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false)))).

2. The attacker has some term plaintext_a_2.
attacker(plaintext_a_2).

3. Using the function zero the attacker may obtain zero.
attacker(zero).

4. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {815}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

5. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

6. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

11. By 10, the attacker may know hash(hash(somename,empty),empty).
By 6, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

12. By 11, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 5, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

13. By 12, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 3, the attacker may know zero.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero)).

14. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

15. By 7, the attacker may know empty.
By 14, the attacker may know minnonce.
By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 2, the attacker may know plaintext_a_2.
Using the function encrypt the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).

16. The attacker has some term ns_16.
attacker(ns_16).

17. By 3, the attacker may know zero.
By 16, the attacker may know ns_16.
By 15, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(concat3(zero,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

18. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {927}.
The message concat3(zero,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)) that the attacker may have by 17 may be received at input {855}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) may be inserted in a table at insert {926}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false)))).

19. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) that may be in a table by 18 may be read at get {1082}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1079}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))) may be sent to the attacker at output {1081}.
attacker(concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

20. By 19, the attacker may know concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).

21. The attacker has some term plaintext_a_3.
attacker(plaintext_a_3).

22. By 7, the attacker may know empty.
By 14, the attacker may know minnonce.
By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 21, the attacker may know plaintext_a_3.
Using the function encrypt the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)).

23. The attacker has some term ns_17.
attacker(ns_17).

24. By 3, the attacker may know zero.
By 23, the attacker may know ns_17.
By 22, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3).
Using the function concat3 the attacker may obtain concat3(zero,ns_17,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)).
attacker(concat3(zero,ns_17,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))).

25. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {927}.
The message concat3(zero,ns_17,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)) that the attacker may have by 24 may be received at input {855}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) may be inserted in a table at insert {926}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false)))).

26. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) that may be in a table by 25 may be read at get {1082}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1079}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))) may be sent to the attacker at output {1081}.
attacker(concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

27. By 26, the attacker may know concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(bob,alice,sid_5),g)).
attacker(validkey(dhexp_real(key_e(bob,alice,sid_5),g))).

28. By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 15, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

29. By 28, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
By 27, the attacker may know validkey(dhexp_real(key_e(bob,alice,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))).
attacker(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g)))).

30. By 9, the attacker may know hash(somename,empty).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),zero).
attacker(hmac_hash1(hash(somename,empty),zero)).

31. By 30, the attacker may know hmac_hash1(hash(somename,empty),zero).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero).
attacker(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero)).

32. By 31, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero).
By 3, the attacker may know zero.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero).
attacker(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero)).

33. By 32, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero).
By 14, the attacker may know minnonce.
By 29, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))).
By 20, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
attacker(aeadpack(true,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).

34. By 33, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
Using the function 3-proj-aeadpack the attacker may obtain msg_b(bob,alice,sid_5).
attacker(msg_b(bob,alice,sid_5)).

35. By 34, the attacker may know msg_b(bob,alice,sid_5).
So the attacker may know msg_b(bob,alice,sid_5) in phase 1.
attacker_p1(msg_b(bob,alice,sid_5)).

36. By 35, attacker_p1(msg_b(bob,alice,sid_5)).
The goal is reached, represented in the following fact:
attacker_p1(msg_b(bob,alice,sid_5)).


RESULT not attacker_p1(msg_b(bob,alice,sid_b)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m_20)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m_20))
goal reachable: attacker(m_20) && begin(SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5))) -> end(RecvMsg(bob,alice,stagepack_c(sid_5),m_20))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) may be inserted in a table at insert {854}.
table(statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false)))).

2. The attacker has some term plaintext_a_2.
attacker(plaintext_a_2).

3. Using the function zero the attacker may obtain zero.
attacker(zero).

4. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {815}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

5. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

6. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

11. By 10, the attacker may know hash(hash(somename,empty),empty).
By 6, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

12. By 11, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 5, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

13. By 12, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 3, the attacker may know zero.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero)).

14. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

15. By 7, the attacker may know empty.
By 14, the attacker may know minnonce.
By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 2, the attacker may know plaintext_a_2.
Using the function encrypt the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).

16. The attacker has some term ns_16.
attacker(ns_16).

17. By 3, the attacker may know zero.
By 16, the attacker may know ns_16.
By 15, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(concat3(zero,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

18. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {927}.
The message concat3(zero,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)) that the attacker may have by 17 may be received at input {855}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) may be inserted in a table at insert {926}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false)))).

19. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) that may be in a table by 18 may be read at get {1082}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1079}.
So the entry statestore(bob,alice,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),empty,empty,zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce))) may be inserted in a table at insert {1080}.
table(statestore(bob,alice,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),empty,empty,zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce)))).

20. We assume as hypothesis that
attacker(m_20).

21. The attacker has some term ns_17.
attacker(ns_17).

22. By 3, the attacker may know zero.
By 21, the attacker may know ns_17.
By 15, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_17,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(concat3(zero,ns_17,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

23. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {927}.
The message concat3(zero,ns_17,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)) that the attacker may have by 22 may be received at input {855}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) may be inserted in a table at insert {926}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false)))).

24. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) that may be in a table by 23 may be read at get {1082}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1079}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))) may be sent to the attacker at output {1081}.
attacker(concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

25. By 24, the attacker may know concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).

26. The attacker has some term plaintext_a_3.
attacker(plaintext_a_3).

27. By 7, the attacker may know empty.
By 14, the attacker may know minnonce.
By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 26, the attacker may know plaintext_a_3.
Using the function encrypt the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)).

28. The attacker has some term ns_18.
attacker(ns_18).

29. By 3, the attacker may know zero.
By 28, the attacker may know ns_18.
By 27, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3).
Using the function concat3 the attacker may obtain concat3(zero,ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)).
attacker(concat3(zero,ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))).

30. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {927}.
The message concat3(zero,ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)) that the attacker may have by 29 may be received at input {855}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) may be inserted in a table at insert {926}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false)))).

31. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) that may be in a table by 30 may be read at get {1082}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1079}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))) may be sent to the attacker at output {1081}.
attacker(concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

32. By 31, the attacker may know concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(bob,alice,sid_5),g)).
attacker(validkey(dhexp_real(key_e(bob,alice,sid_5),g))).

33. By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 15, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

34. By 33, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
By 32, the attacker may know validkey(dhexp_real(key_e(bob,alice,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))).
attacker(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g)))).

35. By 34, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))).
By 25, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

36. By 9, the attacker may know hash(somename,empty).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),zero).
attacker(hmac_hash1(hash(somename,empty),zero)).

37. By 36, the attacker may know hmac_hash1(hash(somename,empty),zero).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero).
attacker(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero)).

38. By 37, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero)).

39. By 38, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero)).

40. By 39, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero).
By 14, the attacker may know minnonce.
By 35, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
By 20, the attacker may know m_20.
Using the function encrypt the attacker may obtain encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),m_20).
attacker(encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),m_20)).

41. The attacker has some term ns_19.
attacker(ns_19).

42. The attacker has some term ne_20.
attacker(ne_20).

43. By 42, the attacker may know ne_20.
By 41, the attacker may know ns_19.
By 40, the attacker may know encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),m_20).
Using the function concat3 the attacker may obtain concat3(ne_20,ns_19,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),m_20)).
attacker(concat3(ne_20,ns_19,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),m_20))).

44. The entry statestore(bob,alice,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),empty,empty,zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce))) that may be in a table by 19 may be read at get {1149}.
The message concat3(ne_20,ns_19,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),m_20)) that the attacker may have by 43 may be received at input {1085}.
So event RecvMsg(bob,alice,stagepack_c(sid_5),m_20) may be executed at {1147}.
end(RecvMsg(bob,alice,stagepack_c(sid_5),m_20)).

45. By 44, end(RecvMsg(bob,alice,stagepack_c(sid_5),m_20)).
The goal is reached, represented in the following fact:
end(RecvMsg(bob,alice,stagepack_c(sid_5),m_20)).


RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m_20)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m_20)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m_20)) ==> event(SendMsg(alice,c,stagepack_c(sid_a),m_20)) || false || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)))
goal reachable: attacker(m_20) && begin(SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5))) -> end(RecvMsg(bob,alice,stagepack_c(sid_5),m_20))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) may be inserted in a table at insert {854}.
table(statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false)))).

2. The attacker has some term plaintext_a_2.
attacker(plaintext_a_2).

3. Using the function zero the attacker may obtain zero.
attacker(zero).

4. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {815}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

5. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

6. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

11. By 10, the attacker may know hash(hash(somename,empty),empty).
By 6, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

12. By 11, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 5, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

13. By 12, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 3, the attacker may know zero.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero)).

14. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

15. By 7, the attacker may know empty.
By 14, the attacker may know minnonce.
By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 2, the attacker may know plaintext_a_2.
Using the function encrypt the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).

16. The attacker has some term ns_16.
attacker(ns_16).

17. By 3, the attacker may know zero.
By 16, the attacker may know ns_16.
By 15, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(concat3(zero,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

18. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {927}.
The message concat3(zero,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)) that the attacker may have by 17 may be received at input {855}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) may be inserted in a table at insert {926}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false)))).

19. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) that may be in a table by 18 may be read at get {1082}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1079}.
So the entry statestore(bob,alice,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),empty,empty,zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce))) may be inserted in a table at insert {1080}.
table(statestore(bob,alice,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),empty,empty,zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce)))).

20. We assume as hypothesis that
attacker(m_20).

21. The attacker has some term ns_17.
attacker(ns_17).

22. By 3, the attacker may know zero.
By 21, the attacker may know ns_17.
By 15, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_17,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(concat3(zero,ns_17,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

23. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {927}.
The message concat3(zero,ns_17,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)) that the attacker may have by 22 may be received at input {855}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) may be inserted in a table at insert {926}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false)))).

24. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) that may be in a table by 23 may be read at get {1082}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1079}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))) may be sent to the attacker at output {1081}.
attacker(concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

25. By 24, the attacker may know concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).

26. The attacker has some term plaintext_a_3.
attacker(plaintext_a_3).

27. By 7, the attacker may know empty.
By 14, the attacker may know minnonce.
By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 26, the attacker may know plaintext_a_3.
Using the function encrypt the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)).

28. The attacker has some term ns_18.
attacker(ns_18).

29. By 3, the attacker may know zero.
By 28, the attacker may know ns_18.
By 27, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3).
Using the function concat3 the attacker may obtain concat3(zero,ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)).
attacker(concat3(zero,ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))).

30. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {927}.
The message concat3(zero,ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)) that the attacker may have by 29 may be received at input {855}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) may be inserted in a table at insert {926}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false)))).

31. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) that may be in a table by 30 may be read at get {1082}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1079}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))) may be sent to the attacker at output {1081}.
attacker(concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

32. By 31, the attacker may know concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(bob,alice,sid_5),g)).
attacker(validkey(dhexp_real(key_e(bob,alice,sid_5),g))).

33. By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 15, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

34. By 33, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
By 32, the attacker may know validkey(dhexp_real(key_e(bob,alice,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))).
attacker(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g)))).

35. By 34, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))).
By 25, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

36. By 9, the attacker may know hash(somename,empty).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),zero).
attacker(hmac_hash1(hash(somename,empty),zero)).

37. By 36, the attacker may know hmac_hash1(hash(somename,empty),zero).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero).
attacker(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero)).

38. By 37, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero)).

39. By 38, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero)).

40. By 39, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero).
By 14, the attacker may know minnonce.
By 35, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
By 20, the attacker may know m_20.
Using the function encrypt the attacker may obtain encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),m_20).
attacker(encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),m_20)).

41. The attacker has some term ns_19.
attacker(ns_19).

42. The attacker has some term ne_20.
attacker(ne_20).

43. By 42, the attacker may know ne_20.
By 41, the attacker may know ns_19.
By 40, the attacker may know encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),m_20).
Using the function concat3 the attacker may obtain concat3(ne_20,ns_19,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),m_20)).
attacker(concat3(ne_20,ns_19,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),m_20))).

44. The entry statestore(bob,alice,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),empty,empty,zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce))) that may be in a table by 19 may be read at get {1149}.
The message concat3(ne_20,ns_19,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),m_20)) that the attacker may have by 43 may be received at input {1085}.
So event RecvMsg(bob,alice,stagepack_c(sid_5),m_20) may be executed at {1147}.
end(RecvMsg(bob,alice,stagepack_c(sid_5),m_20)).

45. By 44, end(RecvMsg(bob,alice,stagepack_c(sid_5),m_20)).
The goal is reached, represented in the following fact:
end(RecvMsg(bob,alice,stagepack_c(sid_5),m_20)).


RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m_20)) ==> event(SendMsg(alice,c,stagepack_c(sid_a),m_20)) || false || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m_20)) ==> event(SendMsg(alice,c,stagepack_c(sid_a),m_20)) || false
goal reachable: attacker(m_20) && begin(SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5))) -> end(RecvMsg(bob,alice,stagepack_c(sid_5),m_20))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) may be inserted in a table at insert {854}.
table(statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false)))).

2. The attacker has some term plaintext_a_2.
attacker(plaintext_a_2).

3. Using the function zero the attacker may obtain zero.
attacker(zero).

4. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {815}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

5. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

6. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

11. By 10, the attacker may know hash(hash(somename,empty),empty).
By 6, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

12. By 11, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 5, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

13. By 12, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 3, the attacker may know zero.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero)).

14. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

15. By 7, the attacker may know empty.
By 14, the attacker may know minnonce.
By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 2, the attacker may know plaintext_a_2.
Using the function encrypt the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).

16. The attacker has some term ns_16.
attacker(ns_16).

17. By 3, the attacker may know zero.
By 16, the attacker may know ns_16.
By 15, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(concat3(zero,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

18. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {927}.
The message concat3(zero,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)) that the attacker may have by 17 may be received at input {855}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) may be inserted in a table at insert {926}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false)))).

19. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) that may be in a table by 18 may be read at get {1082}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1079}.
So the entry statestore(bob,alice,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),empty,empty,zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce))) may be inserted in a table at insert {1080}.
table(statestore(bob,alice,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),empty,empty,zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce)))).

20. We assume as hypothesis that
attacker(m_20).

21. The attacker has some term ns_17.
attacker(ns_17).

22. By 3, the attacker may know zero.
By 21, the attacker may know ns_17.
By 15, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_17,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(concat3(zero,ns_17,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

23. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {927}.
The message concat3(zero,ns_17,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)) that the attacker may have by 22 may be received at input {855}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) may be inserted in a table at insert {926}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false)))).

24. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) that may be in a table by 23 may be read at get {1082}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1079}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))) may be sent to the attacker at output {1081}.
attacker(concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

25. By 24, the attacker may know concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).

26. The attacker has some term plaintext_a_3.
attacker(plaintext_a_3).

27. By 7, the attacker may know empty.
By 14, the attacker may know minnonce.
By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 26, the attacker may know plaintext_a_3.
Using the function encrypt the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)).

28. The attacker has some term ns_18.
attacker(ns_18).

29. By 3, the attacker may know zero.
By 28, the attacker may know ns_18.
By 27, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3).
Using the function concat3 the attacker may obtain concat3(zero,ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)).
attacker(concat3(zero,ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))).

30. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {927}.
The message concat3(zero,ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)) that the attacker may have by 29 may be received at input {855}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) may be inserted in a table at insert {926}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false)))).

31. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) that may be in a table by 30 may be read at get {1082}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1079}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))) may be sent to the attacker at output {1081}.
attacker(concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

32. By 31, the attacker may know concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(bob,alice,sid_5),g)).
attacker(validkey(dhexp_real(key_e(bob,alice,sid_5),g))).

33. By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 15, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

34. By 33, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
By 32, the attacker may know validkey(dhexp_real(key_e(bob,alice,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))).
attacker(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g)))).

35. By 34, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))).
By 25, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

36. By 9, the attacker may know hash(somename,empty).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),zero).
attacker(hmac_hash1(hash(somename,empty),zero)).

37. By 36, the attacker may know hmac_hash1(hash(somename,empty),zero).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero).
attacker(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero)).

38. By 37, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero)).

39. By 38, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero)).

40. By 39, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero).
By 14, the attacker may know minnonce.
By 35, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
By 20, the attacker may know m_20.
Using the function encrypt the attacker may obtain encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),m_20).
attacker(encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),m_20)).

41. The attacker has some term ns_19.
attacker(ns_19).

42. The attacker has some term ne_20.
attacker(ne_20).

43. By 42, the attacker may know ne_20.
By 41, the attacker may know ns_19.
By 40, the attacker may know encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),m_20).
Using the function concat3 the attacker may obtain concat3(ne_20,ns_19,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),m_20)).
attacker(concat3(ne_20,ns_19,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),m_20))).

44. The entry statestore(bob,alice,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),empty,empty,zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce))) that may be in a table by 19 may be read at get {1149}.
The message concat3(ne_20,ns_19,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),m_20)) that the attacker may have by 43 may be received at input {1085}.
So event RecvMsg(bob,alice,stagepack_c(sid_5),m_20) may be executed at {1147}.
end(RecvMsg(bob,alice,stagepack_c(sid_5),m_20)).

45. By 44, end(RecvMsg(bob,alice,stagepack_c(sid_5),m_20)).
The goal is reached, represented in the following fact:
end(RecvMsg(bob,alice,stagepack_c(sid_5),m_20)).


RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m_20)) ==> event(SendMsg(alice,c,stagepack_c(sid_a),m_20)) || false cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m_20)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m_20)) || false || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)))
goal reachable: attacker(m_20) && begin(SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5))) -> end(RecvMsg(bob,alice,stagepack_c(sid_5),m_20))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) may be inserted in a table at insert {854}.
table(statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false)))).

2. The attacker has some term plaintext_a_2.
attacker(plaintext_a_2).

3. Using the function zero the attacker may obtain zero.
attacker(zero).

4. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {815}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

5. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

6. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

11. By 10, the attacker may know hash(hash(somename,empty),empty).
By 6, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

12. By 11, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 5, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

13. By 12, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 3, the attacker may know zero.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero)).

14. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

15. By 7, the attacker may know empty.
By 14, the attacker may know minnonce.
By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 2, the attacker may know plaintext_a_2.
Using the function encrypt the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).

16. The attacker has some term ns_16.
attacker(ns_16).

17. By 3, the attacker may know zero.
By 16, the attacker may know ns_16.
By 15, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(concat3(zero,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

18. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {927}.
The message concat3(zero,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)) that the attacker may have by 17 may be received at input {855}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) may be inserted in a table at insert {926}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false)))).

19. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) that may be in a table by 18 may be read at get {1082}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1079}.
So the entry statestore(bob,alice,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),empty,empty,zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce))) may be inserted in a table at insert {1080}.
table(statestore(bob,alice,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),empty,empty,zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce)))).

20. We assume as hypothesis that
attacker(m_20).

21. The attacker has some term ns_17.
attacker(ns_17).

22. By 3, the attacker may know zero.
By 21, the attacker may know ns_17.
By 15, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_17,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(concat3(zero,ns_17,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

23. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {927}.
The message concat3(zero,ns_17,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)) that the attacker may have by 22 may be received at input {855}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) may be inserted in a table at insert {926}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false)))).

24. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) that may be in a table by 23 may be read at get {1082}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1079}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))) may be sent to the attacker at output {1081}.
attacker(concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

25. By 24, the attacker may know concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).

26. The attacker has some term plaintext_a_3.
attacker(plaintext_a_3).

27. By 7, the attacker may know empty.
By 14, the attacker may know minnonce.
By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 26, the attacker may know plaintext_a_3.
Using the function encrypt the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)).

28. The attacker has some term ns_18.
attacker(ns_18).

29. By 3, the attacker may know zero.
By 28, the attacker may know ns_18.
By 27, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3).
Using the function concat3 the attacker may obtain concat3(zero,ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)).
attacker(concat3(zero,ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))).

30. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {927}.
The message concat3(zero,ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)) that the attacker may have by 29 may be received at input {855}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) may be inserted in a table at insert {926}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false)))).

31. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) that may be in a table by 30 may be read at get {1082}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1079}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))) may be sent to the attacker at output {1081}.
attacker(concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

32. By 31, the attacker may know concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(bob,alice,sid_5),g)).
attacker(validkey(dhexp_real(key_e(bob,alice,sid_5),g))).

33. By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 15, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

34. By 33, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
By 32, the attacker may know validkey(dhexp_real(key_e(bob,alice,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))).
attacker(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g)))).

35. By 34, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))).
By 25, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

36. By 9, the attacker may know hash(somename,empty).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),zero).
attacker(hmac_hash1(hash(somename,empty),zero)).

37. By 36, the attacker may know hmac_hash1(hash(somename,empty),zero).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero).
attacker(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero)).

38. By 37, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero)).

39. By 38, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero)).

40. By 39, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero).
By 14, the attacker may know minnonce.
By 35, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
By 20, the attacker may know m_20.
Using the function encrypt the attacker may obtain encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),m_20).
attacker(encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),m_20)).

41. The attacker has some term ns_19.
attacker(ns_19).

42. The attacker has some term ne_20.
attacker(ne_20).

43. By 42, the attacker may know ne_20.
By 41, the attacker may know ns_19.
By 40, the attacker may know encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),m_20).
Using the function concat3 the attacker may obtain concat3(ne_20,ns_19,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),m_20)).
attacker(concat3(ne_20,ns_19,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),m_20))).

44. The entry statestore(bob,alice,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),empty,empty,zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce))) that may be in a table by 19 may be read at get {1149}.
The message concat3(ne_20,ns_19,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),m_20)) that the attacker may have by 43 may be received at input {1085}.
So event RecvMsg(bob,alice,stagepack_c(sid_5),m_20) may be executed at {1147}.
end(RecvMsg(bob,alice,stagepack_c(sid_5),m_20)).

45. By 44, end(RecvMsg(bob,alice,stagepack_c(sid_5),m_20)).
The goal is reached, represented in the following fact:
end(RecvMsg(bob,alice,stagepack_c(sid_5),m_20)).


RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m_20)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m_20)) || false || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m_20)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m_20)) || false
goal reachable: attacker(m_20) && begin(SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5))) -> end(RecvMsg(bob,alice,stagepack_c(sid_5),m_20))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) may be inserted in a table at insert {854}.
table(statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false)))).

2. The attacker has some term plaintext_a_2.
attacker(plaintext_a_2).

3. Using the function zero the attacker may obtain zero.
attacker(zero).

4. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {815}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

5. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

6. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

11. By 10, the attacker may know hash(hash(somename,empty),empty).
By 6, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

12. By 11, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 5, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

13. By 12, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 3, the attacker may know zero.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero)).

14. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

15. By 7, the attacker may know empty.
By 14, the attacker may know minnonce.
By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 2, the attacker may know plaintext_a_2.
Using the function encrypt the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).

16. The attacker has some term ns_16.
attacker(ns_16).

17. By 3, the attacker may know zero.
By 16, the attacker may know ns_16.
By 15, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(concat3(zero,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

18. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {927}.
The message concat3(zero,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)) that the attacker may have by 17 may be received at input {855}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) may be inserted in a table at insert {926}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false)))).

19. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) that may be in a table by 18 may be read at get {1082}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1079}.
So the entry statestore(bob,alice,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),empty,empty,zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce))) may be inserted in a table at insert {1080}.
table(statestore(bob,alice,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),empty,empty,zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce)))).

20. We assume as hypothesis that
attacker(m_20).

21. The attacker has some term ns_17.
attacker(ns_17).

22. By 3, the attacker may know zero.
By 21, the attacker may know ns_17.
By 15, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_17,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(concat3(zero,ns_17,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

23. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {927}.
The message concat3(zero,ns_17,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)) that the attacker may have by 22 may be received at input {855}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) may be inserted in a table at insert {926}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false)))).

24. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) that may be in a table by 23 may be read at get {1082}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1079}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))) may be sent to the attacker at output {1081}.
attacker(concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

25. By 24, the attacker may know concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).

26. The attacker has some term plaintext_a_3.
attacker(plaintext_a_3).

27. By 7, the attacker may know empty.
By 14, the attacker may know minnonce.
By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 26, the attacker may know plaintext_a_3.
Using the function encrypt the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)).

28. The attacker has some term ns_18.
attacker(ns_18).

29. By 3, the attacker may know zero.
By 28, the attacker may know ns_18.
By 27, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3).
Using the function concat3 the attacker may obtain concat3(zero,ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)).
attacker(concat3(zero,ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))).

30. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {927}.
The message concat3(zero,ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)) that the attacker may have by 29 may be received at input {855}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) may be inserted in a table at insert {926}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false)))).

31. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) that may be in a table by 30 may be read at get {1082}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1079}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))) may be sent to the attacker at output {1081}.
attacker(concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

32. By 31, the attacker may know concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(bob,alice,sid_5),g)).
attacker(validkey(dhexp_real(key_e(bob,alice,sid_5),g))).

33. By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 15, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

34. By 33, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
By 32, the attacker may know validkey(dhexp_real(key_e(bob,alice,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))).
attacker(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g)))).

35. By 34, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))).
By 25, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

36. By 9, the attacker may know hash(somename,empty).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),zero).
attacker(hmac_hash1(hash(somename,empty),zero)).

37. By 36, the attacker may know hmac_hash1(hash(somename,empty),zero).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero).
attacker(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero)).

38. By 37, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero)).

39. By 38, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero)).

40. By 39, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero).
By 14, the attacker may know minnonce.
By 35, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
By 20, the attacker may know m_20.
Using the function encrypt the attacker may obtain encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),m_20).
attacker(encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),m_20)).

41. The attacker has some term ns_19.
attacker(ns_19).

42. The attacker has some term ne_20.
attacker(ne_20).

43. By 42, the attacker may know ne_20.
By 41, the attacker may know ns_19.
By 40, the attacker may know encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),m_20).
Using the function concat3 the attacker may obtain concat3(ne_20,ns_19,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),m_20)).
attacker(concat3(ne_20,ns_19,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),m_20))).

44. The entry statestore(bob,alice,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),empty,empty,zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce))) that may be in a table by 19 may be read at get {1149}.
The message concat3(ne_20,ns_19,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),m_20)) that the attacker may have by 43 may be received at input {1085}.
So event RecvMsg(bob,alice,stagepack_c(sid_5),m_20) may be executed at {1147}.
end(RecvMsg(bob,alice,stagepack_c(sid_5),m_20)).

45. By 44, end(RecvMsg(bob,alice,stagepack_c(sid_5),m_20)).
The goal is reached, represented in the following fact:
end(RecvMsg(bob,alice,stagepack_c(sid_5),m_20)).


RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m_20)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m_20)) || false cannot be proved.
Starting query not attacker_p1(msg_c(alice,bob,sid_a))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5))) && begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> attacker_p1(msg_c(alice,bob,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {49}.
table(statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

2. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {120}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {117}.
So the entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {118}.
table(statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

3. The attacker has some term plaintext_b_2.
attacker(plaintext_b_2).

4. Using the function zero the attacker may obtain zero.
attacker(zero).

5. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {120}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {117}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) may be sent to the attacker at output {119}.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

6. By 5, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).

7. By 5, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_5),g))).

8. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {815}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

9. By 8, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

10. By 8, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

11. Using the function empty the attacker may obtain empty.
attacker(empty).

12. Using the function somename the attacker may obtain somename.
attacker(somename).

13. By 12, the attacker may know somename.
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

14. By 13, the attacker may know hash(somename,empty).
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

15. By 14, the attacker may know hash(hash(somename,empty),empty).
By 10, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

16. By 15, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 9, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

17. By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
By 4, the attacker may know zero.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero).
attacker(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero)).

20. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

21. The event LeakS(phase0,bob) may be executed at {1208}.
The event LeakM(phase0,bob) may be executed at {1209}.
So the message (key_s(bob),key_m(bob)) may be sent to the attacker at output {1210}.
attacker((key_s(bob),key_m(bob))).

22. By 21, the attacker may know (key_s(bob),key_m(bob)).
Using the function 2-proj-2-tuple the attacker may obtain key_m(bob).
attacker(key_m(bob)).

23. By 22, the attacker may know key_m(bob).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g)).
attacker(dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))).

24. By 21, the attacker may know (key_s(bob),key_m(bob)).
Using the function 1-proj-2-tuple the attacker may obtain key_s(bob).
attacker(key_s(bob)).

25. By 24, the attacker may know key_s(bob).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g)).
attacker(dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))).

26. By 13, the attacker may know hash(somename,empty).
By 4, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),zero).
attacker(hmac_hash1(hash(somename,empty),zero)).

27. By 26, the attacker may know hmac_hash1(hash(somename,empty),zero).
By 25, the attacker may know dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))).
attacker(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g)))).

28. By 27, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))).
By 23, the attacker may know dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))).
attacker(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g)))).

29. By 28, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))).
By 20, the attacker may know minnonce.
By 19, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero).
By 3, the attacker may know plaintext_b_2.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)).

30. The attacker has some term ns_16.
attacker(ns_16).

31. By 4, the attacker may know zero.
By 30, the attacker may know ns_16.
By 29, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)).
attacker(concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))).

32. The entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {277}.
The message concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)) that the attacker may have by 31 may be received at input {121}.
So the entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce))) may be inserted in a table at insert {276}.
table(statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce)))).

33. The entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce))) that may be in a table by 32 may be read at get {336}.
The event SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5)) may be executed at {333}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))) may be sent to the attacker at output {335}.
attacker(concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)))).

34. By 33, the attacker may know concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)).
attacker(encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))).

35. By 19, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero).
By 29, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))).

36. By 27, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))).
By 23, the attacker may know dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g)))).

37. By 36, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))).
By 4, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero)).

38. By 37, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero).
By 20, the attacker may know minnonce.
By 35, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)).
By 34, the attacker may know encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)).
attacker(aeadpack(true,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))).

39. By 38, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)).
Using the function 3-proj-aeadpack the attacker may obtain msg_c(alice,bob,sid_5).
attacker(msg_c(alice,bob,sid_5)).

40. By 39, the attacker may know msg_c(alice,bob,sid_5).
So the attacker may know msg_c(alice,bob,sid_5) in phase 1.
attacker_p1(msg_c(alice,bob,sid_5)).

41. By 40, attacker_p1(msg_c(alice,bob,sid_5)).
The goal is reached, represented in the following fact:
attacker_p1(msg_c(alice,bob,sid_5)).


RESULT not attacker_p1(msg_c(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakM(px,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5))) && begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> attacker_p1(msg_c(alice,bob,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakM(px,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(px,bob)) && event(LeakM(px,bob)) && event(LeakS(pz,alice)) && event(LeakM(pz,alice)))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5))) && begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> attacker_p1(msg_c(alice,bob,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(px,bob)) && event(LeakM(px,bob)) && event(LeakS(pz,alice)) && event(LeakM(pz,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5))) && begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> attacker_p1(msg_c(alice,bob,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m_20)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m_20))
goal reachable: attacker(m_20) && begin(SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5))) && begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(alice,bob,stagepack_d(sid_5),m_20))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {49}.
table(statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

2. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {120}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {117}.
So the entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {118}.
table(statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

3. The attacker has some term plaintext_b_2.
attacker(plaintext_b_2).

4. Using the function zero the attacker may obtain zero.
attacker(zero).

5. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {120}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {117}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) may be sent to the attacker at output {119}.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

6. By 5, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).

7. By 5, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_5),g))).

8. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {815}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

9. By 8, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

10. By 8, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

11. Using the function empty the attacker may obtain empty.
attacker(empty).

12. Using the function somename the attacker may obtain somename.
attacker(somename).

13. By 12, the attacker may know somename.
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

14. By 13, the attacker may know hash(somename,empty).
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

15. By 14, the attacker may know hash(hash(somename,empty),empty).
By 10, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

16. By 15, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 9, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

17. By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
By 4, the attacker may know zero.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero).
attacker(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero)).

20. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

21. The event LeakS(phase0,bob) may be executed at {1208}.
The event LeakM(phase0,bob) may be executed at {1209}.
So the message (key_s(bob),key_m(bob)) may be sent to the attacker at output {1210}.
attacker((key_s(bob),key_m(bob))).

22. By 21, the attacker may know (key_s(bob),key_m(bob)).
Using the function 2-proj-2-tuple the attacker may obtain key_m(bob).
attacker(key_m(bob)).

23. By 22, the attacker may know key_m(bob).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g)).
attacker(dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))).

24. By 21, the attacker may know (key_s(bob),key_m(bob)).
Using the function 1-proj-2-tuple the attacker may obtain key_s(bob).
attacker(key_s(bob)).

25. By 24, the attacker may know key_s(bob).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g)).
attacker(dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))).

26. By 13, the attacker may know hash(somename,empty).
By 4, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),zero).
attacker(hmac_hash1(hash(somename,empty),zero)).

27. By 26, the attacker may know hmac_hash1(hash(somename,empty),zero).
By 25, the attacker may know dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))).
attacker(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g)))).

28. By 27, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))).
By 23, the attacker may know dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))).
attacker(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g)))).

29. By 28, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))).
By 20, the attacker may know minnonce.
By 19, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero).
By 3, the attacker may know plaintext_b_2.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)).

30. The attacker has some term ns_16.
attacker(ns_16).

31. By 4, the attacker may know zero.
By 30, the attacker may know ns_16.
By 29, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)).
attacker(concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))).

32. The entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {277}.
The message concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)) that the attacker may have by 31 may be received at input {121}.
So the entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce))) may be inserted in a table at insert {276}.
table(statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce)))).

33. The entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce))) that may be in a table by 32 may be read at get {336}.
The event SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5)) may be executed at {333}.
So the entry statestore(alice,bob,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce))) may be inserted in a table at insert {334}.
table(statestore(alice,bob,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce)))).

34. We assume as hypothesis that
attacker(m_20).

35. The attacker has some term ns_17.
attacker(ns_17).

36. By 4, the attacker may know zero.
By 35, the attacker may know ns_17.
By 29, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_17,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)).
attacker(concat3(zero,ns_17,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))).

37. The entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {277}.
The message concat3(zero,ns_17,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)) that the attacker may have by 36 may be received at input {121}.
So the entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce))) may be inserted in a table at insert {276}.
table(statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce)))).

38. The entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce))) that may be in a table by 37 may be read at get {336}.
The event SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5)) may be executed at {333}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))) may be sent to the attacker at output {335}.
attacker(concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)))).

39. By 38, the attacker may know concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)).
attacker(encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))).

40. By 19, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero).
By 29, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))).

41. By 40, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)).
By 39, the attacker may know encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)))).

42. By 27, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))).
By 23, the attacker may know dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g)))).

43. By 42, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))).
By 4, the attacker may know zero.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero).
attacker(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero)).

44. By 43, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero).
By 20, the attacker may know minnonce.
By 41, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))).
By 34, the attacker may know m_20.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))),m_20).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))),m_20)).

45. The attacker has some term ns_18.
attacker(ns_18).

46. The attacker has some term ne_20.
attacker(ne_20).

47. By 46, the attacker may know ne_20.
By 45, the attacker may know ns_18.
By 44, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))),m_20).
Using the function concat3 the attacker may obtain concat3(ne_20,ns_18,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))),m_20)).
attacker(concat3(ne_20,ns_18,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))),m_20))).

48. The entry statestore(alice,bob,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce))) that may be in a table by 33 may be read at get {403}.
The message concat3(ne_20,ns_18,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))),m_20)) that the attacker may have by 47 may be received at input {339}.
So event RecvMsg(alice,bob,stagepack_d(sid_5),m_20) may be executed at {401}.
end(RecvMsg(alice,bob,stagepack_d(sid_5),m_20)).

49. By 48, end(RecvMsg(alice,bob,stagepack_d(sid_5),m_20)).
The goal is reached, represented in the following fact:
end(RecvMsg(alice,bob,stagepack_d(sid_5),m_20)).


RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m_20)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m_20)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m_20)) ==> event(SendMsg(bob,c,stagepack_d(sid_b),m_20)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || false
goal reachable: attacker(m_20) && begin(SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5))) && begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(alice,bob,stagepack_d(sid_5),m_20))
Abbreviations:
sid_5 = sid[!1 = @sid]
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid_5),msg_d(bob,alice,sid_5))) && begin(SendMsg(alice,bob,stagepack_c(sid_6),msg_c(alice,bob,sid_6))) && begin(SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5))) && begin(SendMsg(alice,bob,stagepack_a(sid_6),msg_a(alice,bob,sid_6))) -> end(RecvMsg(alice,bob,stagepack_d(sid_6),msg_d(bob,alice,sid_5)))
Abbreviations:
sid_6 = sid[!1 = @sid]
sid_5 = sid[!1 = @sid_1]
goal reachable: begin(SendMsg(bob,charlie,stagepack_d(sid_5),msg_d(bob,charlie,sid_5))) && begin(SendMsg(alice,bob,stagepack_c(sid_6),msg_c(alice,bob,sid_6))) && begin(SendMsg(bob,charlie,stagepack_b(sid_5),msg_b(bob,charlie,sid_5))) && begin(SendMsg(alice,bob,stagepack_a(sid_6),msg_a(alice,bob,sid_6))) -> end(RecvMsg(alice,bob,stagepack_d(sid_6),msg_d(bob,charlie,sid_5)))
Abbreviations:
sid_6 = sid[!1 = @sid]
sid_5 = sid[!1 = @sid_1]
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m_20)) ==> event(SendMsg(bob,c,stagepack_d(sid_b),m_20)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || false is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m_20)) ==> event(SendMsg(bob,c,stagepack_d(sid_b),m_20)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)))
goal reachable: attacker(m_20) && begin(SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5))) && begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(alice,bob,stagepack_d(sid_5),m_20))
Abbreviations:
sid_5 = sid[!1 = @sid]
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid_5),msg_d(bob,alice,sid_5))) && begin(SendMsg(alice,bob,stagepack_c(sid_6),msg_c(alice,bob,sid_6))) && begin(SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5))) && begin(SendMsg(alice,bob,stagepack_a(sid_6),msg_a(alice,bob,sid_6))) -> end(RecvMsg(alice,bob,stagepack_d(sid_6),msg_d(bob,alice,sid_5)))
Abbreviations:
sid_6 = sid[!1 = @sid]
sid_5 = sid[!1 = @sid_1]
goal reachable: begin(SendMsg(bob,charlie,stagepack_d(sid_5),msg_d(bob,charlie,sid_5))) && begin(SendMsg(alice,bob,stagepack_c(sid_6),msg_c(alice,bob,sid_6))) && begin(SendMsg(bob,charlie,stagepack_b(sid_5),msg_b(bob,charlie,sid_5))) && begin(SendMsg(alice,bob,stagepack_a(sid_6),msg_a(alice,bob,sid_6))) -> end(RecvMsg(alice,bob,stagepack_d(sid_6),msg_d(bob,charlie,sid_5)))
Abbreviations:
sid_6 = sid[!1 = @sid]
sid_5 = sid[!1 = @sid_1]
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m_20)) ==> event(SendMsg(bob,c,stagepack_d(sid_b),m_20)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m_20)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m_20)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || false
goal reachable: begin(SendMsg(bob,charlie,stagepack_d(sid_5),msg_d(bob,charlie,sid_5))) && begin(SendMsg(alice,bob,stagepack_c(sid_6),msg_c(alice,bob,sid_6))) && begin(SendMsg(bob,charlie,stagepack_b(sid_5),msg_b(bob,charlie,sid_5))) && begin(SendMsg(alice,bob,stagepack_a(sid_6),msg_a(alice,bob,sid_6))) -> end(RecvMsg(alice,bob,stagepack_d(sid_6),msg_d(bob,charlie,sid_5)))
Abbreviations:
sid_6 = sid[!1 = @sid]
sid_5 = sid[!1 = @sid_1]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]
sid_6 = sid[!1 = @sid_1]

1. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {49}.
table(statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

2. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {120}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {117}.
So the entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {118}.
table(statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

3. The entry statestore(bob,charlie,sid_6,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) may be inserted in a table at insert {1265}.
table(statestore(bob,charlie,sid_6,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false)))).

4. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {120}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {117}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) may be sent to the attacker at output {119}.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).

6. The attacker has some term ns_16.
attacker(ns_16).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_5),g))).

8. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
By 6, the attacker may know ns_16.
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
Using the function concat3 the attacker may obtain concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

9. The entry statestore(bob,charlie,sid_6,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 3 may be read at get {1338}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) that the attacker may have by 8 may be received at input {1266}.
So the entry statestore(bob,charlie,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false))) may be inserted in a table at insert {1337}.
table(statestore(bob,charlie,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false)))).

10. The entry statestore(bob,charlie,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false))) that may be in a table by 9 may be read at get {1493}.
The event SendMsg(bob,charlie,stagepack_b(sid_6),msg_b(bob,charlie,sid_6)) may be executed at {1490}.
So the message concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))) may be sent to the attacker at output {1492}.
attacker(concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)))).

11. By 10, the attacker may know concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))).

12. The attacker has some term ns_17.
attacker(ns_17).

13. The attacker has some term ns_18.
attacker(ns_18).

14. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
By 13, the attacker may know ns_18.
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
Using the function concat3 the attacker may obtain concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

15. The entry statestore(bob,charlie,sid_6,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 3 may be read at get {1338}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) that the attacker may have by 14 may be received at input {1266}.
So the entry statestore(bob,charlie,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false))) may be inserted in a table at insert {1337}.
table(statestore(bob,charlie,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false)))).

16. The entry statestore(bob,charlie,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false))) that may be in a table by 15 may be read at get {1493}.
The event SendMsg(bob,charlie,stagepack_b(sid_6),msg_b(bob,charlie,sid_6)) may be executed at {1490}.
So the message concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,charlie,sid_6),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))) may be sent to the attacker at output {1492}.
attacker(concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,charlie,sid_6),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)))).

17. By 16, the attacker may know concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,charlie,sid_6),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(bob,charlie,sid_6),g)).
attacker(validkey(dhexp_real(key_e(bob,charlie,sid_6),g))).

18. By 17, the attacker may know validkey(dhexp_real(key_e(bob,charlie,sid_6),g)).
By 12, the attacker may know ns_17.
By 11, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)).
Using the function concat3 the attacker may obtain concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),ns_17,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))).
attacker(concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),ns_17,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)))).

19. The entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {277}.
The message concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),ns_17,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))) that the attacker may have by 18 may be received at input {121}.
So the entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce))) may be inserted in a table at insert {276}.
table(statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce)))).

20. The entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce))) that may be in a table by 19 may be read at get {336}.
The event SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5)) may be executed at {333}.
So the entry statestore(alice,bob,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce))) may be inserted in a table at insert {334}.
table(statestore(alice,bob,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce)))).

21. The attacker has some term ns_19.
attacker(ns_19).

22. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
By 21, the attacker may know ns_19.
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
Using the function concat3 the attacker may obtain concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),ns_19,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),ns_19,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

23. The entry statestore(bob,charlie,sid_6,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 3 may be read at get {1338}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),ns_19,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) that the attacker may have by 22 may be received at input {1266}.
So the entry statestore(bob,charlie,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false))) may be inserted in a table at insert {1337}.
table(statestore(bob,charlie,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false)))).

24. The entry statestore(bob,charlie,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false))) that may be in a table by 23 may be read at get {1493}.
The event SendMsg(bob,charlie,stagepack_b(sid_6),msg_b(bob,charlie,sid_6)) may be executed at {1490}.
So the entry statestore(bob,charlie,sid_6,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),key_e(bob,charlie,sid_6)),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce))) may be inserted in a table at insert {1491}.
table(statestore(bob,charlie,sid_6,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),key_e(bob,charlie,sid_6)),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce)))).

25. The attacker has some term ns_20.
attacker(ns_20).

26. By 17, the attacker may know validkey(dhexp_real(key_e(bob,charlie,sid_6),g)).
By 25, the attacker may know ns_20.
By 11, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)).
Using the function concat3 the attacker may obtain concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),ns_20,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))).
attacker(concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),ns_20,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)))).

27. The entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {277}.
The message concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),ns_20,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))) that the attacker may have by 26 may be received at input {121}.
So the entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce))) may be inserted in a table at insert {276}.
table(statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce)))).

28. The entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce))) that may be in a table by 27 may be read at get {336}.
The event SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5)) may be executed at {333}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5))) may be sent to the attacker at output {335}.
attacker(concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5)))).

29. By 28, the attacker may know concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5)).
attacker(encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5))).

30. The attacker has some term ns_21.
attacker(ns_21).

31. The attacker has some term ne_20.
attacker(ne_20).

32. By 31, the attacker may know ne_20.
By 30, the attacker may know ns_21.
By 29, the attacker may know encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5)).
Using the function concat3 the attacker may obtain concat3(ne_20,ns_21,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5))).
attacker(concat3(ne_20,ns_21,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5)))).

33. The entry statestore(bob,charlie,sid_6,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),key_e(bob,charlie,sid_6)),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce))) that may be in a table by 24 may be read at get {1560}.
The message concat3(ne_20,ns_21,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5))) that the attacker may have by 32 may be received at input {1496}.
So the entry statestore(bob,charlie,sid_6,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),key_e(bob,charlie,sid_6)),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce))) may be inserted in a table at insert {1559}.
table(statestore(bob,charlie,sid_6,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),key_e(bob,charlie,sid_6)),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce)))).

34. The entry statestore(bob,charlie,sid_6,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),key_e(bob,charlie,sid_6)),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce))) that may be in a table by 33 may be read at get {1618}.
The event SendMsg(bob,charlie,stagepack_d(sid_6),msg_d(bob,charlie,sid_6)) may be executed at {1616}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5))),msg_d(bob,charlie,sid_6))) may be sent to the attacker at output {1617}.
attacker(concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5))),msg_d(bob,charlie,sid_6)))).

35. By 34, the attacker may know concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5))),msg_d(bob,charlie,sid_6))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5))),msg_d(bob,charlie,sid_6)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5))),msg_d(bob,charlie,sid_6))).

36. The attacker has some term ns_22.
attacker(ns_22).

37. The attacker has some term ne_21.
attacker(ne_21).

38. By 37, the attacker may know ne_21.
By 36, the attacker may know ns_22.
By 35, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5))),msg_d(bob,charlie,sid_6)).
Using the function concat3 the attacker may obtain concat3(ne_21,ns_22,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5))),msg_d(bob,charlie,sid_6))).
attacker(concat3(ne_21,ns_22,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5))),msg_d(bob,charlie,sid_6)))).

39. The entry statestore(alice,bob,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce))) that may be in a table by 20 may be read at get {403}.
The message concat3(ne_21,ns_22,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5))),msg_d(bob,charlie,sid_6))) that the attacker may have by 38 may be received at input {339}.
So event RecvMsg(alice,bob,stagepack_d(sid_5),msg_d(bob,charlie,sid_6)) may be executed at {401}.
end(RecvMsg(alice,bob,stagepack_d(sid_5),msg_d(bob,charlie,sid_6))).

40. By 39, end(RecvMsg(alice,bob,stagepack_d(sid_5),msg_d(bob,charlie,sid_6))).
The goal is reached, represented in the following fact:
end(RecvMsg(alice,bob,stagepack_d(sid_5),msg_d(bob,charlie,sid_6))).


RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m_20)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m_20)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || false cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m_20)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m_20)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)))
goal reachable: begin(SendMsg(bob,charlie,stagepack_d(sid_5),msg_d(bob,charlie,sid_5))) && begin(SendMsg(alice,bob,stagepack_c(sid_6),msg_c(alice,bob,sid_6))) && begin(SendMsg(bob,charlie,stagepack_b(sid_5),msg_b(bob,charlie,sid_5))) && begin(SendMsg(alice,bob,stagepack_a(sid_6),msg_a(alice,bob,sid_6))) -> end(RecvMsg(alice,bob,stagepack_d(sid_6),msg_d(bob,charlie,sid_5)))
Abbreviations:
sid_6 = sid[!1 = @sid]
sid_5 = sid[!1 = @sid_1]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]
sid_6 = sid[!1 = @sid_1]

1. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {49}.
table(statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

2. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {120}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {117}.
So the entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {118}.
table(statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

3. The entry statestore(bob,charlie,sid_6,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) may be inserted in a table at insert {1265}.
table(statestore(bob,charlie,sid_6,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false)))).

4. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {120}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {117}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) may be sent to the attacker at output {119}.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).

6. The attacker has some term ns_16.
attacker(ns_16).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_5),g))).

8. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
By 6, the attacker may know ns_16.
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
Using the function concat3 the attacker may obtain concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

9. The entry statestore(bob,charlie,sid_6,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 3 may be read at get {1338}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) that the attacker may have by 8 may be received at input {1266}.
So the entry statestore(bob,charlie,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false))) may be inserted in a table at insert {1337}.
table(statestore(bob,charlie,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false)))).

10. The entry statestore(bob,charlie,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false))) that may be in a table by 9 may be read at get {1493}.
The event SendMsg(bob,charlie,stagepack_b(sid_6),msg_b(bob,charlie,sid_6)) may be executed at {1490}.
So the message concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))) may be sent to the attacker at output {1492}.
attacker(concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)))).

11. By 10, the attacker may know concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))).

12. The attacker has some term ns_17.
attacker(ns_17).

13. The attacker has some term ns_18.
attacker(ns_18).

14. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
By 13, the attacker may know ns_18.
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
Using the function concat3 the attacker may obtain concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

15. The entry statestore(bob,charlie,sid_6,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 3 may be read at get {1338}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) that the attacker may have by 14 may be received at input {1266}.
So the entry statestore(bob,charlie,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false))) may be inserted in a table at insert {1337}.
table(statestore(bob,charlie,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false)))).

16. The entry statestore(bob,charlie,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false))) that may be in a table by 15 may be read at get {1493}.
The event SendMsg(bob,charlie,stagepack_b(sid_6),msg_b(bob,charlie,sid_6)) may be executed at {1490}.
So the message concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,charlie,sid_6),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))) may be sent to the attacker at output {1492}.
attacker(concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,charlie,sid_6),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)))).

17. By 16, the attacker may know concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,charlie,sid_6),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(bob,charlie,sid_6),g)).
attacker(validkey(dhexp_real(key_e(bob,charlie,sid_6),g))).

18. By 17, the attacker may know validkey(dhexp_real(key_e(bob,charlie,sid_6),g)).
By 12, the attacker may know ns_17.
By 11, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)).
Using the function concat3 the attacker may obtain concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),ns_17,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))).
attacker(concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),ns_17,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)))).

19. The entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {277}.
The message concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),ns_17,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))) that the attacker may have by 18 may be received at input {121}.
So the entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce))) may be inserted in a table at insert {276}.
table(statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce)))).

20. The entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce))) that may be in a table by 19 may be read at get {336}.
The event SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5)) may be executed at {333}.
So the entry statestore(alice,bob,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce))) may be inserted in a table at insert {334}.
table(statestore(alice,bob,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce)))).

21. The attacker has some term ns_19.
attacker(ns_19).

22. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
By 21, the attacker may know ns_19.
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
Using the function concat3 the attacker may obtain concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),ns_19,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),ns_19,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

23. The entry statestore(bob,charlie,sid_6,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 3 may be read at get {1338}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),ns_19,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) that the attacker may have by 22 may be received at input {1266}.
So the entry statestore(bob,charlie,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false))) may be inserted in a table at insert {1337}.
table(statestore(bob,charlie,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false)))).

24. The entry statestore(bob,charlie,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false))) that may be in a table by 23 may be read at get {1493}.
The event SendMsg(bob,charlie,stagepack_b(sid_6),msg_b(bob,charlie,sid_6)) may be executed at {1490}.
So the entry statestore(bob,charlie,sid_6,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),key_e(bob,charlie,sid_6)),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce))) may be inserted in a table at insert {1491}.
table(statestore(bob,charlie,sid_6,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),key_e(bob,charlie,sid_6)),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce)))).

25. The attacker has some term ns_20.
attacker(ns_20).

26. By 17, the attacker may know validkey(dhexp_real(key_e(bob,charlie,sid_6),g)).
By 25, the attacker may know ns_20.
By 11, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)).
Using the function concat3 the attacker may obtain concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),ns_20,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))).
attacker(concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),ns_20,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)))).

27. The entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {277}.
The message concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),ns_20,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))) that the attacker may have by 26 may be received at input {121}.
So the entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce))) may be inserted in a table at insert {276}.
table(statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce)))).

28. The entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce))) that may be in a table by 27 may be read at get {336}.
The event SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5)) may be executed at {333}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5))) may be sent to the attacker at output {335}.
attacker(concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5)))).

29. By 28, the attacker may know concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5)).
attacker(encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5))).

30. The attacker has some term ns_21.
attacker(ns_21).

31. The attacker has some term ne_20.
attacker(ne_20).

32. By 31, the attacker may know ne_20.
By 30, the attacker may know ns_21.
By 29, the attacker may know encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5)).
Using the function concat3 the attacker may obtain concat3(ne_20,ns_21,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5))).
attacker(concat3(ne_20,ns_21,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5)))).

33. The entry statestore(bob,charlie,sid_6,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),key_e(bob,charlie,sid_6)),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce))) that may be in a table by 24 may be read at get {1560}.
The message concat3(ne_20,ns_21,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5))) that the attacker may have by 32 may be received at input {1496}.
So the entry statestore(bob,charlie,sid_6,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),key_e(bob,charlie,sid_6)),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce))) may be inserted in a table at insert {1559}.
table(statestore(bob,charlie,sid_6,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),key_e(bob,charlie,sid_6)),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce)))).

34. The entry statestore(bob,charlie,sid_6,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),key_e(bob,charlie,sid_6)),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce))) that may be in a table by 33 may be read at get {1618}.
The event SendMsg(bob,charlie,stagepack_d(sid_6),msg_d(bob,charlie,sid_6)) may be executed at {1616}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5))),msg_d(bob,charlie,sid_6))) may be sent to the attacker at output {1617}.
attacker(concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5))),msg_d(bob,charlie,sid_6)))).

35. By 34, the attacker may know concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5))),msg_d(bob,charlie,sid_6))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5))),msg_d(bob,charlie,sid_6)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5))),msg_d(bob,charlie,sid_6))).

36. The attacker has some term ns_22.
attacker(ns_22).

37. The attacker has some term ne_21.
attacker(ne_21).

38. By 37, the attacker may know ne_21.
By 36, the attacker may know ns_22.
By 35, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5))),msg_d(bob,charlie,sid_6)).
Using the function concat3 the attacker may obtain concat3(ne_21,ns_22,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5))),msg_d(bob,charlie,sid_6))).
attacker(concat3(ne_21,ns_22,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5))),msg_d(bob,charlie,sid_6)))).

39. The entry statestore(alice,bob,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce))) that may be in a table by 20 may be read at get {403}.
The message concat3(ne_21,ns_22,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))),msg_c(alice,bob,sid_5))),msg_d(bob,charlie,sid_6))) that the attacker may have by 38 may be received at input {339}.
So event RecvMsg(alice,bob,stagepack_d(sid_5),msg_d(bob,charlie,sid_6)) may be executed at {401}.
end(RecvMsg(alice,bob,stagepack_d(sid_5),msg_d(bob,charlie,sid_6))).

40. By 39, end(RecvMsg(alice,bob,stagepack_d(sid_5),msg_d(bob,charlie,sid_6))).
The goal is reached, represented in the following fact:
end(RecvMsg(alice,bob,stagepack_d(sid_5),msg_d(bob,charlie,sid_6))).


RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m_20)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m_20)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) cannot be proved.
Starting query not attacker_p1(msg_d(bob,alice,sid_b))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid_5),msg_d(bob,alice,sid_5))) && begin(SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5))) -> attacker_p1(msg_d(bob,alice,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) may be inserted in a table at insert {854}.
table(statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false)))).

2. The attacker has some term plaintext_a_2.
attacker(plaintext_a_2).

3. Using the function zero the attacker may obtain zero.
attacker(zero).

4. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {815}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

5. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

6. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

11. By 10, the attacker may know hash(hash(somename,empty),empty).
By 6, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

12. By 11, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 5, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

13. By 12, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 3, the attacker may know zero.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero)).

14. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

15. By 7, the attacker may know empty.
By 14, the attacker may know minnonce.
By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 2, the attacker may know plaintext_a_2.
Using the function encrypt the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).

16. The attacker has some term ns_16.
attacker(ns_16).

17. By 3, the attacker may know zero.
By 16, the attacker may know ns_16.
By 15, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(concat3(zero,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

18. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {927}.
The message concat3(zero,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)) that the attacker may have by 17 may be received at input {855}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) may be inserted in a table at insert {926}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false)))).

19. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) that may be in a table by 18 may be read at get {1082}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1079}.
So the entry statestore(bob,alice,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),empty,empty,zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce))) may be inserted in a table at insert {1080}.
table(statestore(bob,alice,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),empty,empty,zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce)))).

20. The attacker has some term plaintext_c_2.
attacker(plaintext_c_2).

21. The attacker has some term ns_17.
attacker(ns_17).

22. By 3, the attacker may know zero.
By 21, the attacker may know ns_17.
By 15, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_17,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(concat3(zero,ns_17,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

23. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {927}.
The message concat3(zero,ns_17,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)) that the attacker may have by 22 may be received at input {855}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) may be inserted in a table at insert {926}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false)))).

24. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) that may be in a table by 23 may be read at get {1082}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1079}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))) may be sent to the attacker at output {1081}.
attacker(concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

25. By 24, the attacker may know concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).

26. The attacker has some term plaintext_a_3.
attacker(plaintext_a_3).

27. By 7, the attacker may know empty.
By 14, the attacker may know minnonce.
By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 26, the attacker may know plaintext_a_3.
Using the function encrypt the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)).

28. The attacker has some term ns_18.
attacker(ns_18).

29. By 3, the attacker may know zero.
By 28, the attacker may know ns_18.
By 27, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3).
Using the function concat3 the attacker may obtain concat3(zero,ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)).
attacker(concat3(zero,ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))).

30. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {927}.
The message concat3(zero,ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)) that the attacker may have by 29 may be received at input {855}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) may be inserted in a table at insert {926}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false)))).

31. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) that may be in a table by 30 may be read at get {1082}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1079}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))) may be sent to the attacker at output {1081}.
attacker(concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

32. By 31, the attacker may know concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(bob,alice,sid_5),g)).
attacker(validkey(dhexp_real(key_e(bob,alice,sid_5),g))).

33. By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 15, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

34. By 33, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
By 32, the attacker may know validkey(dhexp_real(key_e(bob,alice,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))).
attacker(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g)))).

35. By 34, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))).
By 25, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

36. By 9, the attacker may know hash(somename,empty).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),zero).
attacker(hmac_hash1(hash(somename,empty),zero)).

37. By 36, the attacker may know hmac_hash1(hash(somename,empty),zero).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero).
attacker(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero)).

38. By 37, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero)).

39. By 38, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero)).

40. By 39, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero).
By 14, the attacker may know minnonce.
By 35, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
By 20, the attacker may know plaintext_c_2.
Using the function encrypt the attacker may obtain encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2).
attacker(encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)).

41. The attacker has some term ns_19.
attacker(ns_19).

42. The attacker has some term ne_20.
attacker(ne_20).

43. By 42, the attacker may know ne_20.
By 41, the attacker may know ns_19.
By 40, the attacker may know encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2).
Using the function concat3 the attacker may obtain concat3(ne_20,ns_19,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)).
attacker(concat3(ne_20,ns_19,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2))).

44. The entry statestore(bob,alice,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),empty,empty,zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce))) that may be in a table by 19 may be read at get {1149}.
The message concat3(ne_20,ns_19,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)) that the attacker may have by 43 may be received at input {1085}.
So the entry statestore(bob,alice,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),empty,empty,zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce))) may be inserted in a table at insert {1148}.
table(statestore(bob,alice,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),empty,empty,zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce)))).

45. The entry statestore(bob,alice,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),empty,empty,zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce))) that may be in a table by 44 may be read at get {1207}.
The event SendMsg(bob,alice,stagepack_d(sid_5),msg_d(bob,alice,sid_5)) may be executed at {1205}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5))) may be sent to the attacker at output {1206}.
attacker(concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5)))).

46. By 45, the attacker may know concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5))).

47. By 35, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
By 40, the attacker may know encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2))).

48. By 38, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero).
By 3, the attacker may know zero.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero).
attacker(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero)).

49. By 48, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero).
By 14, the attacker may know minnonce.
By 47, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)).
By 46, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5)).
attacker(aeadpack(true,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5))).

50. By 49, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5)).
Using the function 3-proj-aeadpack the attacker may obtain msg_d(bob,alice,sid_5).
attacker(msg_d(bob,alice,sid_5)).

51. By 50, the attacker may know msg_d(bob,alice,sid_5).
So the attacker may know msg_d(bob,alice,sid_5) in phase 1.
attacker_p1(msg_d(bob,alice,sid_5)).

52. By 51, attacker_p1(msg_d(bob,alice,sid_5)).
The goal is reached, represented in the following fact:
attacker_p1(msg_d(bob,alice,sid_5)).


RESULT not attacker_p1(msg_d(bob,alice,sid_b)) cannot be proved.
Starting query not attacker_p1(msg_d(bob,alice,sid_b))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid_5),msg_d(bob,alice,sid_5))) && begin(SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5))) -> attacker_p1(msg_d(bob,alice,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) may be inserted in a table at insert {854}.
table(statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false)))).

2. The attacker has some term plaintext_a_2.
attacker(plaintext_a_2).

3. Using the function zero the attacker may obtain zero.
attacker(zero).

4. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {815}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

5. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

6. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

11. By 10, the attacker may know hash(hash(somename,empty),empty).
By 6, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

12. By 11, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 5, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

13. By 12, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 3, the attacker may know zero.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero)).

14. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

15. By 7, the attacker may know empty.
By 14, the attacker may know minnonce.
By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 2, the attacker may know plaintext_a_2.
Using the function encrypt the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).

16. The attacker has some term ns_16.
attacker(ns_16).

17. By 3, the attacker may know zero.
By 16, the attacker may know ns_16.
By 15, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(concat3(zero,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

18. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {927}.
The message concat3(zero,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)) that the attacker may have by 17 may be received at input {855}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) may be inserted in a table at insert {926}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false)))).

19. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) that may be in a table by 18 may be read at get {1082}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1079}.
So the entry statestore(bob,alice,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),empty,empty,zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce))) may be inserted in a table at insert {1080}.
table(statestore(bob,alice,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),empty,empty,zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce)))).

20. The attacker has some term plaintext_c_2.
attacker(plaintext_c_2).

21. The attacker has some term ns_17.
attacker(ns_17).

22. By 3, the attacker may know zero.
By 21, the attacker may know ns_17.
By 15, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_17,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(concat3(zero,ns_17,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

23. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {927}.
The message concat3(zero,ns_17,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)) that the attacker may have by 22 may be received at input {855}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) may be inserted in a table at insert {926}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false)))).

24. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) that may be in a table by 23 may be read at get {1082}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1079}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))) may be sent to the attacker at output {1081}.
attacker(concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

25. By 24, the attacker may know concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).

26. The attacker has some term plaintext_a_3.
attacker(plaintext_a_3).

27. By 7, the attacker may know empty.
By 14, the attacker may know minnonce.
By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 26, the attacker may know plaintext_a_3.
Using the function encrypt the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)).

28. The attacker has some term ns_18.
attacker(ns_18).

29. By 3, the attacker may know zero.
By 28, the attacker may know ns_18.
By 27, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3).
Using the function concat3 the attacker may obtain concat3(zero,ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)).
attacker(concat3(zero,ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))).

30. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {927}.
The message concat3(zero,ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)) that the attacker may have by 29 may be received at input {855}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) may be inserted in a table at insert {926}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false)))).

31. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) that may be in a table by 30 may be read at get {1082}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1079}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))) may be sent to the attacker at output {1081}.
attacker(concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

32. By 31, the attacker may know concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(bob,alice,sid_5),g)).
attacker(validkey(dhexp_real(key_e(bob,alice,sid_5),g))).

33. By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 15, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

34. By 33, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
By 32, the attacker may know validkey(dhexp_real(key_e(bob,alice,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))).
attacker(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g)))).

35. By 34, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))).
By 25, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

36. By 9, the attacker may know hash(somename,empty).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),zero).
attacker(hmac_hash1(hash(somename,empty),zero)).

37. By 36, the attacker may know hmac_hash1(hash(somename,empty),zero).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero).
attacker(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero)).

38. By 37, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero)).

39. By 38, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero)).

40. By 39, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero).
By 14, the attacker may know minnonce.
By 35, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
By 20, the attacker may know plaintext_c_2.
Using the function encrypt the attacker may obtain encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2).
attacker(encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)).

41. The attacker has some term ns_19.
attacker(ns_19).

42. The attacker has some term ne_20.
attacker(ne_20).

43. By 42, the attacker may know ne_20.
By 41, the attacker may know ns_19.
By 40, the attacker may know encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2).
Using the function concat3 the attacker may obtain concat3(ne_20,ns_19,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)).
attacker(concat3(ne_20,ns_19,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2))).

44. The entry statestore(bob,alice,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),empty,empty,zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce))) that may be in a table by 19 may be read at get {1149}.
The message concat3(ne_20,ns_19,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)) that the attacker may have by 43 may be received at input {1085}.
So the entry statestore(bob,alice,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),empty,empty,zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce))) may be inserted in a table at insert {1148}.
table(statestore(bob,alice,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),empty,empty,zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce)))).

45. The entry statestore(bob,alice,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),empty,empty,zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce))) that may be in a table by 44 may be read at get {1207}.
The event SendMsg(bob,alice,stagepack_d(sid_5),msg_d(bob,alice,sid_5)) may be executed at {1205}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5))) may be sent to the attacker at output {1206}.
attacker(concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5)))).

46. By 45, the attacker may know concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5))).

47. By 35, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
By 40, the attacker may know encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2))).

48. By 38, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero).
By 3, the attacker may know zero.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero).
attacker(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero)).

49. By 48, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero).
By 14, the attacker may know minnonce.
By 47, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)).
By 46, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5)).
attacker(aeadpack(true,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5))).

50. By 49, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5)).
Using the function 3-proj-aeadpack the attacker may obtain msg_d(bob,alice,sid_5).
attacker(msg_d(bob,alice,sid_5)).

51. By 50, the attacker may know msg_d(bob,alice,sid_5).
So the attacker may know msg_d(bob,alice,sid_5) in phase 1.
attacker_p1(msg_d(bob,alice,sid_5)).

52. By 51, attacker_p1(msg_d(bob,alice,sid_5)).
The goal is reached, represented in the following fact:
attacker_p1(msg_d(bob,alice,sid_5)).


RESULT not attacker_p1(msg_d(bob,alice,sid_b)) cannot be proved.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(px,alice)) && event(LeakM(px,alice)) && event(LeakS(pz,bob)) && event(LeakM(pz,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid_5),msg_d(bob,alice,sid_5))) && begin(SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5))) -> attacker_p1(msg_d(bob,alice,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) may be inserted in a table at insert {854}.
table(statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false)))).

2. The attacker has some term plaintext_a_2.
attacker(plaintext_a_2).

3. Using the function zero the attacker may obtain zero.
attacker(zero).

4. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {815}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

5. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

6. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

11. By 10, the attacker may know hash(hash(somename,empty),empty).
By 6, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

12. By 11, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 5, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

13. By 12, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 3, the attacker may know zero.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero)).

14. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

15. By 7, the attacker may know empty.
By 14, the attacker may know minnonce.
By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 2, the attacker may know plaintext_a_2.
Using the function encrypt the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).

16. The attacker has some term ns_16.
attacker(ns_16).

17. By 3, the attacker may know zero.
By 16, the attacker may know ns_16.
By 15, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(concat3(zero,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

18. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {927}.
The message concat3(zero,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)) that the attacker may have by 17 may be received at input {855}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) may be inserted in a table at insert {926}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false)))).

19. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) that may be in a table by 18 may be read at get {1082}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1079}.
So the entry statestore(bob,alice,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),empty,empty,zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce))) may be inserted in a table at insert {1080}.
table(statestore(bob,alice,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),empty,empty,zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce)))).

20. The attacker has some term plaintext_c_2.
attacker(plaintext_c_2).

21. The attacker has some term ns_17.
attacker(ns_17).

22. By 3, the attacker may know zero.
By 21, the attacker may know ns_17.
By 15, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_17,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(concat3(zero,ns_17,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

23. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {927}.
The message concat3(zero,ns_17,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)) that the attacker may have by 22 may be received at input {855}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) may be inserted in a table at insert {926}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false)))).

24. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) that may be in a table by 23 may be read at get {1082}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1079}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))) may be sent to the attacker at output {1081}.
attacker(concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

25. By 24, the attacker may know concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).

26. The attacker has some term plaintext_a_3.
attacker(plaintext_a_3).

27. By 7, the attacker may know empty.
By 14, the attacker may know minnonce.
By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 26, the attacker may know plaintext_a_3.
Using the function encrypt the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)).

28. The attacker has some term ns_18.
attacker(ns_18).

29. By 3, the attacker may know zero.
By 28, the attacker may know ns_18.
By 27, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3).
Using the function concat3 the attacker may obtain concat3(zero,ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)).
attacker(concat3(zero,ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))).

30. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {927}.
The message concat3(zero,ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)) that the attacker may have by 29 may be received at input {855}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) may be inserted in a table at insert {926}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false)))).

31. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) that may be in a table by 30 may be read at get {1082}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1079}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))) may be sent to the attacker at output {1081}.
attacker(concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

32. By 31, the attacker may know concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(bob,alice,sid_5),g)).
attacker(validkey(dhexp_real(key_e(bob,alice,sid_5),g))).

33. By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 15, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

34. By 33, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
By 32, the attacker may know validkey(dhexp_real(key_e(bob,alice,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))).
attacker(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g)))).

35. By 34, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))).
By 25, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

36. By 9, the attacker may know hash(somename,empty).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),zero).
attacker(hmac_hash1(hash(somename,empty),zero)).

37. By 36, the attacker may know hmac_hash1(hash(somename,empty),zero).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero).
attacker(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero)).

38. By 37, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero)).

39. By 38, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero)).

40. By 39, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero).
By 14, the attacker may know minnonce.
By 35, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
By 20, the attacker may know plaintext_c_2.
Using the function encrypt the attacker may obtain encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2).
attacker(encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)).

41. The attacker has some term ns_19.
attacker(ns_19).

42. The attacker has some term ne_20.
attacker(ne_20).

43. By 42, the attacker may know ne_20.
By 41, the attacker may know ns_19.
By 40, the attacker may know encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2).
Using the function concat3 the attacker may obtain concat3(ne_20,ns_19,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)).
attacker(concat3(ne_20,ns_19,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2))).

44. The entry statestore(bob,alice,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),empty,empty,zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce))) that may be in a table by 19 may be read at get {1149}.
The message concat3(ne_20,ns_19,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)) that the attacker may have by 43 may be received at input {1085}.
So the entry statestore(bob,alice,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),empty,empty,zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce))) may be inserted in a table at insert {1148}.
table(statestore(bob,alice,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),empty,empty,zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce)))).

45. The entry statestore(bob,alice,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),empty,empty,zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce))) that may be in a table by 44 may be read at get {1207}.
The event SendMsg(bob,alice,stagepack_d(sid_5),msg_d(bob,alice,sid_5)) may be executed at {1205}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5))) may be sent to the attacker at output {1206}.
attacker(concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5)))).

46. By 45, the attacker may know concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5))).

47. By 35, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
By 40, the attacker may know encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2))).

48. By 38, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero).
By 3, the attacker may know zero.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero).
attacker(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero)).

49. By 48, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero).
By 14, the attacker may know minnonce.
By 47, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)).
By 46, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5)).
attacker(aeadpack(true,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5))).

50. By 49, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5)).
Using the function 3-proj-aeadpack the attacker may obtain msg_d(bob,alice,sid_5).
attacker(msg_d(bob,alice,sid_5)).

51. By 50, the attacker may know msg_d(bob,alice,sid_5).
So the attacker may know msg_d(bob,alice,sid_5) in phase 1.
attacker_p1(msg_d(bob,alice,sid_5)).

52. By 51, attacker_p1(msg_d(bob,alice,sid_5)).
The goal is reached, represented in the following fact:
attacker_p1(msg_d(bob,alice,sid_5)).


RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(px,alice)) && event(LeakM(px,alice)) && event(LeakS(pz,bob)) && event(LeakM(pz,bob))) cannot be proved.
Starting query not attacker_p1(msg_d(bob,alice,sid_b))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid_5),msg_d(bob,alice,sid_5))) && begin(SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5))) -> attacker_p1(msg_d(bob,alice,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) may be inserted in a table at insert {854}.
table(statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false)))).

2. The attacker has some term plaintext_a_2.
attacker(plaintext_a_2).

3. Using the function zero the attacker may obtain zero.
attacker(zero).

4. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {815}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

5. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

6. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

11. By 10, the attacker may know hash(hash(somename,empty),empty).
By 6, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

12. By 11, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 5, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

13. By 12, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 3, the attacker may know zero.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero)).

14. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

15. By 7, the attacker may know empty.
By 14, the attacker may know minnonce.
By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 2, the attacker may know plaintext_a_2.
Using the function encrypt the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).

16. The attacker has some term ns_16.
attacker(ns_16).

17. By 3, the attacker may know zero.
By 16, the attacker may know ns_16.
By 15, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(concat3(zero,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

18. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {927}.
The message concat3(zero,ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)) that the attacker may have by 17 may be received at input {855}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) may be inserted in a table at insert {926}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false)))).

19. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) that may be in a table by 18 may be read at get {1082}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1079}.
So the entry statestore(bob,alice,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),empty,empty,zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce))) may be inserted in a table at insert {1080}.
table(statestore(bob,alice,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),empty,empty,zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce)))).

20. The attacker has some term plaintext_c_2.
attacker(plaintext_c_2).

21. The attacker has some term ns_17.
attacker(ns_17).

22. By 3, the attacker may know zero.
By 21, the attacker may know ns_17.
By 15, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_17,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(concat3(zero,ns_17,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

23. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {927}.
The message concat3(zero,ns_17,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)) that the attacker may have by 22 may be received at input {855}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) may be inserted in a table at insert {926}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false)))).

24. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) that may be in a table by 23 may be read at get {1082}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1079}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))) may be sent to the attacker at output {1081}.
attacker(concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

25. By 24, the attacker may know concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).

26. The attacker has some term plaintext_a_3.
attacker(plaintext_a_3).

27. By 7, the attacker may know empty.
By 14, the attacker may know minnonce.
By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 26, the attacker may know plaintext_a_3.
Using the function encrypt the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)).

28. The attacker has some term ns_18.
attacker(ns_18).

29. By 3, the attacker may know zero.
By 28, the attacker may know ns_18.
By 27, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3).
Using the function concat3 the attacker may obtain concat3(zero,ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)).
attacker(concat3(zero,ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))).

30. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {927}.
The message concat3(zero,ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)) that the attacker may have by 29 may be received at input {855}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) may be inserted in a table at insert {926}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false)))).

31. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,zero,empty,false))) that may be in a table by 30 may be read at get {1082}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1079}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))) may be sent to the attacker at output {1081}.
attacker(concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

32. By 31, the attacker may know concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(bob,alice,sid_5),g)).
attacker(validkey(dhexp_real(key_e(bob,alice,sid_5),g))).

33. By 13, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 15, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

34. By 33, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
By 32, the attacker may know validkey(dhexp_real(key_e(bob,alice,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))).
attacker(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g)))).

35. By 34, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))).
By 25, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

36. By 9, the attacker may know hash(somename,empty).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),zero).
attacker(hmac_hash1(hash(somename,empty),zero)).

37. By 36, the attacker may know hmac_hash1(hash(somename,empty),zero).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero).
attacker(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero)).

38. By 37, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero)).

39. By 38, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero)).

40. By 39, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero).
By 14, the attacker may know minnonce.
By 35, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
By 20, the attacker may know plaintext_c_2.
Using the function encrypt the attacker may obtain encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2).
attacker(encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)).

41. The attacker has some term ns_19.
attacker(ns_19).

42. The attacker has some term ne_20.
attacker(ne_20).

43. By 42, the attacker may know ne_20.
By 41, the attacker may know ns_19.
By 40, the attacker may know encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2).
Using the function concat3 the attacker may obtain concat3(ne_20,ns_19,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)).
attacker(concat3(ne_20,ns_19,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2))).

44. The entry statestore(bob,alice,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),empty,empty,zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce))) that may be in a table by 19 may be read at get {1149}.
The message concat3(ne_20,ns_19,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)) that the attacker may have by 43 may be received at input {1085}.
So the entry statestore(bob,alice,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),empty,empty,zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce))) may be inserted in a table at insert {1148}.
table(statestore(bob,alice,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),empty,empty,zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce)))).

45. The entry statestore(bob,alice,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),empty,empty,zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce))) that may be in a table by 44 may be read at get {1207}.
The event SendMsg(bob,alice,stagepack_d(sid_5),msg_d(bob,alice,sid_5)) may be executed at {1205}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5))) may be sent to the attacker at output {1206}.
attacker(concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5)))).

46. By 45, the attacker may know concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5))).

47. By 35, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
By 40, the attacker may know encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2))).

48. By 38, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero).
By 3, the attacker may know zero.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero).
attacker(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero)).

49. By 48, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero).
By 14, the attacker may know minnonce.
By 47, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)).
By 46, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5)).
attacker(aeadpack(true,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5))).

50. By 49, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5)).
Using the function 3-proj-aeadpack the attacker may obtain msg_d(bob,alice,sid_5).
attacker(msg_d(bob,alice,sid_5)).

51. By 50, the attacker may know msg_d(bob,alice,sid_5).
So the attacker may know msg_d(bob,alice,sid_5) in phase 1.
attacker_p1(msg_d(bob,alice,sid_5)).

52. By 51, attacker_p1(msg_d(bob,alice,sid_5)).
The goal is reached, represented in the following fact:
attacker_p1(msg_d(bob,alice,sid_5)).


RESULT not attacker_p1(msg_d(bob,alice,sid_b)) cannot be proved.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid_5),msg_d(bob,alice,sid_5))) && begin(SendMsg(alice,bob,stagepack_c(sid_6),msg_c(alice,bob,sid_6))) && begin(SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5))) && begin(SendMsg(alice,bob,stagepack_a(sid_6),msg_a(alice,bob,sid_6))) -> end(RecvEnd(true))
Abbreviations:
sid_5 = sid[!1 = @sid]
sid_6 = sid[!1 = @sid_1]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]
sid_6 = sid[!1 = @sid_1]

1. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {49}.
table(statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

2. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {120}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {117}.
So the entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {118}.
table(statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

3. The entry statestore(bob,alice,sid_6,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) may be inserted in a table at insert {854}.
table(statestore(bob,alice,sid_6,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false)))).

4. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {120}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {117}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) may be sent to the attacker at output {119}.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).

6. The attacker has some term ns_16.
attacker(ns_16).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_5),g))).

8. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
By 6, the attacker may know ns_16.
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
Using the function concat3 the attacker may obtain concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

9. The entry statestore(bob,alice,sid_6,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 3 may be read at get {927}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),ns_16,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) that the attacker may have by 8 may be received at input {855}.
So the entry statestore(bob,alice,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false))) may be inserted in a table at insert {926}.
table(statestore(bob,alice,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false)))).

10. The entry statestore(bob,alice,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false))) that may be in a table by 9 may be read at get {1082}.
The event SendMsg(bob,alice,stagepack_b(sid_6),msg_b(bob,alice,sid_6)) may be executed at {1079}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))) may be sent to the attacker at output {1081}.
attacker(concat3(validkey(dhexp_real(key_e(bob,alice,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6)))).

11. By 10, the attacker may know concat3(validkey(dhexp_real(key_e(bob,alice,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))).

12. The attacker has some term ns_17.
attacker(ns_17).

13. The attacker has some term ns_18.
attacker(ns_18).

14. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
By 13, the attacker may know ns_18.
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
Using the function concat3 the attacker may obtain concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

15. The entry statestore(bob,alice,sid_6,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 3 may be read at get {927}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),ns_18,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) that the attacker may have by 14 may be received at input {855}.
So the entry statestore(bob,alice,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false))) may be inserted in a table at insert {926}.
table(statestore(bob,alice,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false)))).

16. The entry statestore(bob,alice,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false))) that may be in a table by 15 may be read at get {1082}.
The event SendMsg(bob,alice,stagepack_b(sid_6),msg_b(bob,alice,sid_6)) may be executed at {1079}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))) may be sent to the attacker at output {1081}.
attacker(concat3(validkey(dhexp_real(key_e(bob,alice,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6)))).

17. By 16, the attacker may know concat3(validkey(dhexp_real(key_e(bob,alice,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(bob,alice,sid_6),g)).
attacker(validkey(dhexp_real(key_e(bob,alice,sid_6),g))).

18. By 17, the attacker may know validkey(dhexp_real(key_e(bob,alice,sid_6),g)).
By 12, the attacker may know ns_17.
By 11, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6)).
Using the function concat3 the attacker may obtain concat3(validkey(dhexp_real(key_e(bob,alice,sid_6),g)),ns_17,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))).
attacker(concat3(validkey(dhexp_real(key_e(bob,alice,sid_6),g)),ns_17,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6)))).

19. The entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {277}.
The message concat3(validkey(dhexp_real(key_e(bob,alice,sid_6),g)),ns_17,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))) that the attacker may have by 18 may be received at input {121}.
So the entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_6),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce))) may be inserted in a table at insert {276}.
table(statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_6),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce)))).

20. The entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_6),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce))) that may be in a table by 19 may be read at get {336}.
The event SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5)) may be executed at {333}.
So the entry statestore(alice,bob,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),msg_c(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_6),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce))) may be inserted in a table at insert {334}.
table(statestore(alice,bob,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),msg_c(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_6),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce)))).

21. The attacker has some term ns_19.
attacker(ns_19).

22. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
By 21, the attacker may know ns_19.
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
Using the function concat3 the attacker may obtain concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),ns_19,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),ns_19,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

23. The entry statestore(bob,alice,sid_6,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 3 may be read at get {927}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),ns_19,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) that the attacker may have by 22 may be received at input {855}.
So the entry statestore(bob,alice,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false))) may be inserted in a table at insert {926}.
table(statestore(bob,alice,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false)))).

24. The entry statestore(bob,alice,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false))) that may be in a table by 23 may be read at get {1082}.
The event SendMsg(bob,alice,stagepack_b(sid_6),msg_b(bob,alice,sid_6)) may be executed at {1079}.
So the entry statestore(bob,alice,sid_6,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_6),g)),key_e(bob,alice,sid_6)),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce))) may be inserted in a table at insert {1080}.
table(statestore(bob,alice,sid_6,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_6),g)),key_e(bob,alice,sid_6)),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce)))).

25. The attacker has some term ns_20.
attacker(ns_20).

26. By 17, the attacker may know validkey(dhexp_real(key_e(bob,alice,sid_6),g)).
By 25, the attacker may know ns_20.
By 11, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6)).
Using the function concat3 the attacker may obtain concat3(validkey(dhexp_real(key_e(bob,alice,sid_6),g)),ns_20,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))).
attacker(concat3(validkey(dhexp_real(key_e(bob,alice,sid_6),g)),ns_20,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6)))).

27. The entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {277}.
The message concat3(validkey(dhexp_real(key_e(bob,alice,sid_6),g)),ns_20,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))) that the attacker may have by 26 may be received at input {121}.
So the entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_6),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce))) may be inserted in a table at insert {276}.
table(statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_6),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce)))).

28. The entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_6),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce))) that may be in a table by 27 may be read at get {336}.
The event SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5)) may be executed at {333}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),msg_c(alice,bob,sid_5))) may be sent to the attacker at output {335}.
attacker(concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),msg_c(alice,bob,sid_5)))).

29. By 28, the attacker may know concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),msg_c(alice,bob,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),msg_c(alice,bob,sid_5)).
attacker(encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),msg_c(alice,bob,sid_5))).

30. The attacker has some term ns_21.
attacker(ns_21).

31. The attacker has some term ne_20.
attacker(ne_20).

32. By 31, the attacker may know ne_20.
By 30, the attacker may know ns_21.
By 29, the attacker may know encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),msg_c(alice,bob,sid_5)).
Using the function concat3 the attacker may obtain concat3(ne_20,ns_21,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),msg_c(alice,bob,sid_5))).
attacker(concat3(ne_20,ns_21,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),msg_c(alice,bob,sid_5)))).

33. The entry statestore(bob,alice,sid_6,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_6),g)),key_e(bob,alice,sid_6)),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce))) that may be in a table by 24 may be read at get {1149}.
The message concat3(ne_20,ns_21,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),msg_c(alice,bob,sid_5))) that the attacker may have by 32 may be received at input {1085}.
So the entry statestore(bob,alice,sid_6,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),msg_c(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_6),g)),key_e(bob,alice,sid_6)),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce))) may be inserted in a table at insert {1148}.
table(statestore(bob,alice,sid_6,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),msg_c(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_6),g)),key_e(bob,alice,sid_6)),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce)))).

34. The entry statestore(bob,alice,sid_6,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),msg_c(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_6),g)),key_e(bob,alice,sid_6)),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce))) that may be in a table by 33 may be read at get {1207}.
The event SendMsg(bob,alice,stagepack_d(sid_6),msg_d(bob,alice,sid_6)) may be executed at {1205}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),msg_c(alice,bob,sid_5))),msg_d(bob,alice,sid_6))) may be sent to the attacker at output {1206}.
attacker(concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),msg_c(alice,bob,sid_5))),msg_d(bob,alice,sid_6)))).

35. By 34, the attacker may know concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),msg_c(alice,bob,sid_5))),msg_d(bob,alice,sid_6))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),msg_c(alice,bob,sid_5))),msg_d(bob,alice,sid_6)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),msg_c(alice,bob,sid_5))),msg_d(bob,alice,sid_6))).

36. The attacker has some term ns_22.
attacker(ns_22).

37. The attacker has some term ne_21.
attacker(ne_21).

38. By 37, the attacker may know ne_21.
By 36, the attacker may know ns_22.
By 35, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),msg_c(alice,bob,sid_5))),msg_d(bob,alice,sid_6)).
Using the function concat3 the attacker may obtain concat3(ne_21,ns_22,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),msg_c(alice,bob,sid_5))),msg_d(bob,alice,sid_6))).
attacker(concat3(ne_21,ns_22,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),msg_c(alice,bob,sid_5))),msg_d(bob,alice,sid_6)))).

39. The entry statestore(alice,bob,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),msg_c(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_6),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce))) that may be in a table by 20 may be read at get {403}.
The message concat3(ne_21,ns_22,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),msg_c(alice,bob,sid_5))),msg_d(bob,alice,sid_6))) that the attacker may have by 38 may be received at input {339}.
So event RecvEnd(true) may be executed at {402}.
end(RecvEnd(true)).

40. By 39, end(RecvEnd(true)).
The goal is reached, represented in the following fact:
end(RecvEnd(true)).


RESULT not event(RecvEnd(true)) cannot be proved.

--------------------------------------------------------------
Verification summary:

Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m_20)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m_20)) cannot be proved.

Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m_20)) ==> event(SendMsg(alice,c,stagepack_a(sid_a),m_20)) || false || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) cannot be proved.

Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m_20)) ==> event(SendMsg(alice,c,stagepack_a(sid_a),m_20)) || false cannot be proved.

Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m_20)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m_20)) || false || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) cannot be proved.

Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m_20)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m_20)) || false cannot be proved.

Query not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.

Query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakM(px,bob)) cannot be proved.

Query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(px,bob)) && event(LeakM(px,bob)) && event(LeakS(pz,alice)) && event(LeakM(pz,alice))) cannot be proved.

Query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)) cannot be proved.

Query event(RecvMsg(alice,bob,stagepack_b(sid_a),m_20)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m_20)) cannot be proved.

Query event(RecvMsg(alice,bob,stagepack_b(sid_a),m_20)) ==> event(SendMsg(bob,c,stagepack_b(sid_b),m_20)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || false is true.

Query event(RecvMsg(alice,bob,stagepack_b(sid_a),m_20)) ==> event(SendMsg(bob,c,stagepack_b(sid_b),m_20)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.

Query event(RecvMsg(alice,bob,stagepack_b(sid_a),m_20)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m_20)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || false cannot be proved.

Query event(RecvMsg(alice,bob,stagepack_b(sid_a),m_20)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m_20)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) cannot be proved.

Query not attacker_p1(msg_b(bob,alice,sid_b)) cannot be proved.

Query not attacker_p1(msg_b(bob,alice,sid_b)) cannot be proved.

Query attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(px,alice)) && event(LeakM(px,alice)) && event(LeakS(pz,bob)) && event(LeakM(pz,bob))) cannot be proved.

Query not attacker_p1(msg_b(bob,alice,sid_b)) cannot be proved.

Query event(RecvMsg(bob,alice,stagepack_c(sid_b),m_20)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m_20)) cannot be proved.

Query event(RecvMsg(bob,alice,stagepack_c(sid_b),m_20)) ==> event(SendMsg(alice,c,stagepack_c(sid_a),m_20)) || false || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) cannot be proved.

Query event(RecvMsg(bob,alice,stagepack_c(sid_b),m_20)) ==> event(SendMsg(alice,c,stagepack_c(sid_a),m_20)) || false cannot be proved.

Query event(RecvMsg(bob,alice,stagepack_c(sid_b),m_20)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m_20)) || false || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) cannot be proved.

Query event(RecvMsg(bob,alice,stagepack_c(sid_b),m_20)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m_20)) || false cannot be proved.

Query not attacker_p1(msg_c(alice,bob,sid_a)) cannot be proved.

Query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakM(px,bob)) is true.

Query attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(px,bob)) && event(LeakM(px,bob)) && event(LeakS(pz,alice)) && event(LeakM(pz,alice))) is true.

Query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)) is true.

Query event(RecvMsg(alice,bob,stagepack_d(sid_a),m_20)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m_20)) cannot be proved.

Query event(RecvMsg(alice,bob,stagepack_d(sid_a),m_20)) ==> event(SendMsg(bob,c,stagepack_d(sid_b),m_20)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || false is true.

Query event(RecvMsg(alice,bob,stagepack_d(sid_a),m_20)) ==> event(SendMsg(bob,c,stagepack_d(sid_b),m_20)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.

Query event(RecvMsg(alice,bob,stagepack_d(sid_a),m_20)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m_20)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || false cannot be proved.

Query event(RecvMsg(alice,bob,stagepack_d(sid_a),m_20)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m_20)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) cannot be proved.

Query not attacker_p1(msg_d(bob,alice,sid_b)) cannot be proved.

Query not attacker_p1(msg_d(bob,alice,sid_b)) cannot be proved.

Query attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(px,alice)) && event(LeakM(px,alice)) && event(LeakS(pz,bob)) && event(LeakM(pz,bob))) cannot be proved.

Query not attacker_p1(msg_d(bob,alice,sid_b)) cannot be proved.

Query not event(RecvEnd(true)) cannot be proved.

--------------------------------------------------------------

