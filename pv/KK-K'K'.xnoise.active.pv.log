File "pv/KK-K'K'.xnoise.active.pv", line 219, characters 7-8:
Warning: identifier ck rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 228, characters 7-8:
Warning: identifier ck rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 229, characters 7-8:
Warning: identifier cs rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 229, character 36:
Warning: identifier h rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 259, characters 6-7:
Warning: identifier ss rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 261, characters 6-7:
Warning: identifier ss rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 262, characters 6-7:
Warning: identifier ss rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 267, characters 6-7:
Warning: identifier ss rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 268, characters 6-7:
Warning: identifier ss rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 269, characters 6-7:
Warning: identifier ss rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 270, characters 6-7:
Warning: identifier ss rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 276, character 6:
Warning: identifier e rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 277, characters 6-7:
Warning: identifier ne rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 280, characters 6-7:
Warning: identifier ss rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 282, characters 7-8:
Warning: identifier ss rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 282, characters 26-35:
Warning: identifier ciphertext rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 283, characters 6-7:
Warning: identifier hs rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 290, character 6:
Warning: identifier e rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 291, characters 6-7:
Warning: identifier ne rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 294, characters 6-7:
Warning: identifier ss rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 295, characters 6-7:
Warning: identifier ss rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 296, characters 6-7:
Warning: identifier ss rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 297, characters 7-8:
Warning: identifier ss rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 297, characters 26-35:
Warning: identifier ciphertext rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 298, characters 6-7:
Warning: identifier hs rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 306, characters 7-8:
Warning: identifier ss rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 306, characters 26-35:
Warning: identifier ciphertext rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 307, characters 6-7:
Warning: identifier hs rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 314, characters 7-8:
Warning: identifier ss rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 314, characters 26-35:
Warning: identifier ciphertext rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 315, characters 6-7:
Warning: identifier hs rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 323, characters 6-7:
Warning: identifier re rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 324, characters 6-7:
Warning: identifier ss rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 326, characters 6-7:
Warning: identifier ss rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 327, characters 6-7:
Warning: identifier ss rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 328, characters 7-8:
Warning: identifier ss rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 330, characters 7-8:
Warning: identifier hs rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 338, characters 6-7:
Warning: identifier re rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 339, characters 6-7:
Warning: identifier ss rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 341, characters 6-7:
Warning: identifier ss rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 342, characters 6-7:
Warning: identifier ss rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 343, characters 6-7:
Warning: identifier ss rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 344, characters 7-8:
Warning: identifier ss rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 346, characters 7-8:
Warning: identifier hs rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 355, characters 7-8:
Warning: identifier ss rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 357, characters 7-8:
Warning: identifier hs rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 365, characters 7-8:
Warning: identifier ss rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 367, characters 7-8:
Warning: identifier hs rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 526, characters 7-8:
Warning: identifier hs rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 528, characters 8-9:
Warning: identifier hs rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 519, characters 7-8:
Warning: identifier hs rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 520, characters 8-9:
Warning: identifier hs rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 513, characters 8-9:
Warning: identifier hs rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 506, characters 8-9:
Warning: identifier hs rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 577, characters 7-8:
Warning: identifier hs rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 578, characters 8-9:
Warning: identifier hs rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 569, characters 7-8:
Warning: identifier hs rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 571, characters 8-9:
Warning: identifier hs rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 563, characters 8-9:
Warning: identifier hs rebound.
File "pv/KK-K'K'.xnoise.active.pv", line 557, characters 8-9:
Warning: identifier hs rebound.
Linear part:
dhexp_real(b,dhexp_real(a,g)) = dhexp_real(a,dhexp_real(b,g))
Completing equations...
Completed equations:
dhexp_real(b,dhexp_real(a,g)) = dhexp_real(a,dhexp_real(b,g))
Convergent part: No equation.
Process 0 (that is, the initial process):
{1}out(pub, (key_s(charlie),key_m(charlie)));
{2}!
{3}new sid: sessionid;
(
    {4}let me: principal = alice in
    {5}let them: principal = bob in
    {6}let sid_1: sessionid = sid in
    {7}let basis: key = key_s(me) in
    {8}let public_key: key = catch-fail(dhexp(basis,validkey(g))) in
    {9}let v: bool = not-caught-fail(public_key) in
    {10}let s: keypair = (if v then keypairpack(validkey(public_key),basis) else fail-any) in
    {11}let basis_1: key = key_m(me) in
    {12}let public_key_1: key = catch-fail(dhexp(basis_1,validkey(g))) in
    {13}let v_1: bool = not-caught-fail(public_key_1) in
    {14}let m: keypair = (if v_1 then keypairpack(validkey(public_key_1),basis_1) else fail-any) in
    {15}out(pub, (getpublickey(s),getpublickey(m)));
    (
        {16}let e: keypair = keypairpack(empty,empty) in
        {17}let basis_2: key = key_s(them) in
        {18}let public_key_2: key = catch-fail(dhexp(basis_2,validkey(g))) in
        {19}let v_2: bool = not-caught-fail(public_key_2) in
        {20}let rs: key = getpublickey((if v_2 then keypairpack(validkey(public_key_2),basis_2) else fail-any)) in
        {21}let basis_3: key = key_s(them) in
        {22}let public_key_3: key = catch-fail(dhexp(basis_3,validkey(g))) in
        {23}let v_3: bool = not-caught-fail(public_key_3) in
        {24}let rm: key = getpublickey((if v_3 then keypairpack(validkey(public_key_3),basis_3) else fail-any)) in
        {25}let re: key = empty in
        {26}let prologue: bitstring = empty in
        {27}let psk: key = empty in
        {28}let protocol_name: bitstring = somename in
        {29}let h: bitstring = hash(protocol_name,empty) in
        {30}let ck: key = h in
        {31}let k: key = empty in
        {32}let cs: cipherstate = cipherstatepack(k,minnonce) in
        {33}let ss: symmetricstate = symmetricstatepack(cs,ck,h) in
        {34}let v_4: bitstring = catch-fail(symmetricstateunpack(ss)) in
        {35}let v_5: bool = (not-caught-fail(v_4) && success?(1-proj-3-tuple(v_4))) in
        {36}let h_1: bitstring = (if v_5 then 3-proj-3-tuple(v_4) else caught-fail) in
        {37}let ck_1: key = (if v_5 then 2-proj-3-tuple(v_4) else caught-fail) in
        {38}let cs_1: cipherstate = (if v_5 then 1-proj-3-tuple(v_4) else caught-fail) in
        {39}let ss_1: symmetricstate = catch-fail((if v_5 then symmetricstatepack(cs_1,ck_1,hash(h_1,prologue)) else fail-any)) in
        {40}let v_6: bool = not-caught-fail(ss_1) in
        {41}let data: bitstring = (if v_6 then catch-fail(getpublickey(s)) else caught-fail) in
        {42}let v_7: bool = not-caught-fail(data) in
        {43}let v_8: bitstring = (if v_7 then catch-fail(symmetricstateunpack(ss_1)) else caught-fail) in
        {44}let v_9: bool = (not-caught-fail(v_8) && success?(1-proj-3-tuple(v_8))) in
        {45}let h_2: bitstring = (if v_9 then 3-proj-3-tuple(v_8) else caught-fail) in
        {46}let ck_2: key = (if v_9 then 2-proj-3-tuple(v_8) else caught-fail) in
        {47}let cs_2: cipherstate = (if v_9 then 1-proj-3-tuple(v_8) else caught-fail) in
        {48}let ss_2: symmetricstate = (if v_6 then catch-fail((if v_7 then (if v_9 then symmetricstatepack(cs_2,ck_2,hash(h_2,data)) else fail-any) else fail-any)) else caught-fail) in
        {49}let v_10: bool = not-caught-fail(ss_2) in
        {50}let data_1: bitstring = (if v_10 then catch-fail(getpublickey(m)) else caught-fail) in
        {51}let v_11: bool = not-caught-fail(data_1) in
        {52}let v_12: bitstring = (if v_11 then catch-fail(symmetricstateunpack(ss_2)) else caught-fail) in
        {53}let v_13: bool = (not-caught-fail(v_12) && success?(1-proj-3-tuple(v_12))) in
        {54}let h_3: bitstring = (if v_13 then 3-proj-3-tuple(v_12) else caught-fail) in
        {55}let ck_3: key = (if v_13 then 2-proj-3-tuple(v_12) else caught-fail) in
        {56}let cs_3: cipherstate = (if v_13 then 1-proj-3-tuple(v_12) else caught-fail) in
        {57}let ss_3: symmetricstate = (if v_10 then catch-fail((if v_11 then (if v_13 then symmetricstatepack(cs_3,ck_3,hash(h_3,data_1)) else fail-any) else fail-any)) else caught-fail) in
        {58}let v_14: bool = not-caught-fail(ss_3) in
        {59}let v_15: bitstring = (if v_14 then catch-fail(symmetricstateunpack(ss_3)) else caught-fail) in
        {60}let v_16: bool = (not-caught-fail(v_15) && success?(1-proj-3-tuple(v_15))) in
        {61}let h_4: bitstring = (if v_16 then 3-proj-3-tuple(v_15) else caught-fail) in
        {62}let ck_4: key = (if v_16 then 2-proj-3-tuple(v_15) else caught-fail) in
        {63}let cs_4: cipherstate = (if v_16 then 1-proj-3-tuple(v_15) else caught-fail) in
        {64}let ss_4: symmetricstate = (if v_14 then catch-fail((if v_16 then symmetricstatepack(cs_4,ck_4,hash(h_4,rs)) else fail-any)) else caught-fail) in
        {65}let v_17: bool = not-caught-fail(ss_4) in
        {66}let v_18: bitstring = (if v_17 then catch-fail(symmetricstateunpack(ss_4)) else caught-fail) in
        {67}let v_19: bool = (not-caught-fail(v_18) && success?(1-proj-3-tuple(v_18))) in
        {68}let h_5: bitstring = (if v_19 then 3-proj-3-tuple(v_18) else caught-fail) in
        {69}let ck_5: key = (if v_19 then 2-proj-3-tuple(v_18) else caught-fail) in
        {70}let cs_5: cipherstate = (if v_19 then 1-proj-3-tuple(v_18) else caught-fail) in
        {71}let ss_5: symmetricstate = (if v_17 then catch-fail((if v_19 then symmetricstatepack(cs_5,ck_5,hash(h_5,rm)) else fail-any)) else caught-fail) in
        {72}let v_20: bool = not-caught-fail(ss_5) in
        {73}let hs: handshakestate = (if v_6 then (if v_10 then (if v_14 then (if v_17 then (if v_20 then handshakestatepack(ss_5,s,m,e,rs,rm,re,psk,true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {74}insert statestore(me,them,sid_1,statepack_a(hs))
    ) | (
        {187}get statestore(=me,=them,=sid_1,statepack_a(hs_1: handshakestate)) in
        {75}let payload: bitstring = msg_a(me,them,sid_1) in
        {76}let v_21: bitstring = catch-fail(handshakestateunpack(hs_1)) in
        {77}let v_22: bool = (not-caught-fail(v_21) && success?(1-proj-9-tuple(v_21))) in
        {78}let initiator_1: bool = (if v_22 then 9-proj-9-tuple(v_21) else caught-fail) in
        {79}let psk_1: key = (if v_22 then 8-proj-9-tuple(v_21) else caught-fail) in
        {80}let re_1: key = (if v_22 then 7-proj-9-tuple(v_21) else caught-fail) in
        {81}let rm_1: key = (if v_22 then 6-proj-9-tuple(v_21) else caught-fail) in
        {82}let rs_1: key = (if v_22 then 5-proj-9-tuple(v_21) else caught-fail) in
        {83}let e_1: keypair = (if v_22 then 4-proj-9-tuple(v_21) else caught-fail) in
        {84}let m_1: keypair = (if v_22 then 3-proj-9-tuple(v_21) else caught-fail) in
        {85}let s_1: keypair = (if v_22 then 2-proj-9-tuple(v_21) else caught-fail) in
        {86}let ss_6: symmetricstate = (if v_22 then 1-proj-9-tuple(v_21) else caught-fail) in
        {87}let v_23: bitstring = (if v_22 then catch-fail((empty,empty,empty)) else caught-fail) in
        {88}let v_24: bool = (not-caught-fail(v_23) && success?(1-proj-3-tuple(v_23))) in
        {89}let ciphertext: bitstring = (if v_24 then 3-proj-3-tuple(v_23) else caught-fail) in
        {90}let ns: bitstring = (if v_24 then 2-proj-3-tuple(v_23) else caught-fail) in
        {91}let ne: bitstring = (if v_24 then 1-proj-3-tuple(v_23) else caught-fail) in
        {92}let basis_4: key = (if v_24 then key_e(me,them,sid_1) else caught-fail) in
        {93}let public_key_4: key = (if v_24 then catch-fail(dhexp(basis_4,validkey(g))) else caught-fail) in
        {94}let v_25: bool = not-caught-fail(public_key_4) in
        {95}let e_2: keypair = (if v_24 then catch-fail((if v_25 then keypairpack(validkey(public_key_4),basis_4) else fail-any)) else caught-fail) in
        {96}let v_26: bool = not-caught-fail(e_2) in
        {97}let ne_1: bitstring = (if v_26 then catch-fail(getpublickey(e_2)) else caught-fail) in
        {98}let v_27: bool = not-caught-fail(ne_1) in
        {99}let v_28: bitstring = (if v_27 then catch-fail(symmetricstateunpack(ss_6)) else caught-fail) in
        {100}let v_29: bool = (not-caught-fail(v_28) && success?(1-proj-3-tuple(v_28))) in
        {101}let h_6: bitstring = (if v_29 then 3-proj-3-tuple(v_28) else caught-fail) in
        {102}let ck_6: key = (if v_29 then 2-proj-3-tuple(v_28) else caught-fail) in
        {103}let cs_6: cipherstate = (if v_29 then 1-proj-3-tuple(v_28) else caught-fail) in
        {104}let ss_7: symmetricstate = (if v_27 then catch-fail((if v_29 then symmetricstatepack(cs_6,ck_6,hash(h_6,ne_1)) else fail-any)) else caught-fail) in
        {105}let v_30: bool = not-caught-fail(ss_7) in
        {106}let v_31: bitstring = (if v_30 then catch-fail(keypairunpack(e_2)) else caught-fail) in
        {107}let v_32: bool = (not-caught-fail(v_31) && success?(1-proj-2-tuple(v_31))) in
        {108}let my_private_key: key = (if v_32 then 2-proj-2-tuple(v_31) else caught-fail) in
        {109}let my_public_key: key = (if v_32 then 1-proj-2-tuple(v_31) else caught-fail) in
        {110}let input_key_material: key = (if v_30 then catch-fail((if v_32 then dhexp(my_private_key,rm_1) else fail-any)) else caught-fail) in
        {111}let v_33: bool = not-caught-fail(input_key_material) in
        {112}let v_34: bitstring = (if v_33 then catch-fail(symmetricstateunpack(ss_7)) else caught-fail) in
        {113}let v_35: bool = (not-caught-fail(v_34) && success?(1-proj-3-tuple(v_34))) in
        {114}let h_7: bitstring = (if v_35 then 3-proj-3-tuple(v_34) else caught-fail) in
        {115}let ck_7: key = (if v_35 then 2-proj-3-tuple(v_34) else caught-fail) in
        {116}let cs_7: cipherstate = (if v_35 then 1-proj-3-tuple(v_34) else caught-fail) in
        {117}let output1: key = (if v_35 then hmac_hash1(ck_7,input_key_material) else caught-fail) in
        {118}let output2: key = (if v_35 then hmac_hash2(ck_7,input_key_material) else caught-fail) in
        {119}let output3: key = (if v_35 then hmac_hash3(ck_7,input_key_material) else caught-fail) in
        {120}let v_36: bitstring = (if v_35 then catch-fail((output1,output2,output3)) else caught-fail) in
        {121}let v_37: bool = (not-caught-fail(v_36) && success?(1-proj-3-tuple(v_36))) in
        {122}let output_3: key = (if v_37 then 3-proj-3-tuple(v_36) else caught-fail) in
        {123}let temp_k: key = (if v_37 then 2-proj-3-tuple(v_36) else caught-fail) in
        {124}let ck_8: key = (if v_37 then 1-proj-3-tuple(v_36) else caught-fail) in
        {125}let ss_8: symmetricstate = (if v_30 then catch-fail((if v_33 then (if v_35 then (if v_37 then symmetricstatepack(cipherstatepack(temp_k,minnonce),ck_8,h_7) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {126}let v_38: bool = not-caught-fail(ss_8) in
        {127}let v_39: bitstring = (if v_38 then catch-fail(keypairunpack(m_1)) else caught-fail) in
        {128}let v_40: bool = (not-caught-fail(v_39) && success?(1-proj-2-tuple(v_39))) in
        {129}let my_private_key_1: key = (if v_40 then 2-proj-2-tuple(v_39) else caught-fail) in
        {130}let my_public_key_1: key = (if v_40 then 1-proj-2-tuple(v_39) else caught-fail) in
        {131}let input_key_material_1: key = (if v_38 then catch-fail((if v_40 then dhexp(my_private_key_1,rs_1) else fail-any)) else caught-fail) in
        {132}let v_41: bool = not-caught-fail(input_key_material_1) in
        {133}let v_42: bitstring = (if v_41 then catch-fail(symmetricstateunpack(ss_8)) else caught-fail) in
        {134}let v_43: bool = (not-caught-fail(v_42) && success?(1-proj-3-tuple(v_42))) in
        {135}let h_8: bitstring = (if v_43 then 3-proj-3-tuple(v_42) else caught-fail) in
        {136}let ck_9: key = (if v_43 then 2-proj-3-tuple(v_42) else caught-fail) in
        {137}let cs_8: cipherstate = (if v_43 then 1-proj-3-tuple(v_42) else caught-fail) in
        {138}let output1_1: key = (if v_43 then hmac_hash1(ck_9,input_key_material_1) else caught-fail) in
        {139}let output2_1: key = (if v_43 then hmac_hash2(ck_9,input_key_material_1) else caught-fail) in
        {140}let output3_1: key = (if v_43 then hmac_hash3(ck_9,input_key_material_1) else caught-fail) in
        {141}let v_44: bitstring = (if v_43 then catch-fail((output1_1,output2_1,output3_1)) else caught-fail) in
        {142}let v_45: bool = (not-caught-fail(v_44) && success?(1-proj-3-tuple(v_44))) in
        {143}let output: key = (if v_45 then 3-proj-3-tuple(v_44) else caught-fail) in
        {144}let temp_k_1: key = (if v_45 then 2-proj-3-tuple(v_44) else caught-fail) in
        {145}let ck_10: key = (if v_45 then 1-proj-3-tuple(v_44) else caught-fail) in
        {146}let ss_9: symmetricstate = (if v_38 then catch-fail((if v_41 then (if v_43 then (if v_45 then symmetricstatepack(cipherstatepack(temp_k_1,minnonce),ck_10,h_8) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {147}let v_46: bool = not-caught-fail(ss_9) in
        {148}let v_47: bitstring = (if v_46 then catch-fail(symmetricstateunpack(ss_9)) else caught-fail) in
        {149}let v_48: bool = (not-caught-fail(v_47) && success?(1-proj-3-tuple(v_47))) in
        {150}let h_9: bitstring = (if v_48 then 3-proj-3-tuple(v_47) else caught-fail) in
        {151}let ck_11: key = (if v_48 then 2-proj-3-tuple(v_47) else caught-fail) in
        {152}let cs_9: cipherstate = (if v_48 then 1-proj-3-tuple(v_47) else caught-fail) in
        {153}let v_49: bitstring = (if v_48 then catch-fail(cipherstateunpack(cs_9)) else caught-fail) in
        {154}let v_50: bool = (not-caught-fail(v_49) && success?(1-proj-2-tuple(v_49))) in
        {155}let n: nonce = (if v_50 then 2-proj-2-tuple(v_49) else caught-fail) in
        {156}let k_1: key = (if v_50 then 1-proj-2-tuple(v_49) else caught-fail) in
        {157}let e_3: bitstring = (if v_50 then encrypt(k_1,n,h_9,payload) else caught-fail) in
        {158}let n_1: nonce = (if v_50 then increment_nonce(n) else caught-fail) in
        {159}let v_51: bitstring = (if v_50 then catch-fail(cipherstateunpack(cs_9)) else caught-fail) in
        {160}let v_52: bool = (not-caught-fail(v_51) && success?(1-proj-2-tuple(v_51))) in
        {161}let o: nonce = (if v_52 then 2-proj-2-tuple(v_51) else caught-fail) in
        {162}let k_2: key = (if v_52 then 1-proj-2-tuple(v_51) else caught-fail) in
        {163}let csi: cipherstate = (if v_50 then catch-fail((if v_52 then cipherstatepack(k_2,n_1) else fail-any)) else caught-fail) in
        {164}let v_53: bool = not-caught-fail(csi) in
        {165}let v_54: bitstring = (if v_48 then catch-fail((if v_50 then (if v_53 then (csi,e_3) else fail-any) else fail-any)) else caught-fail) in
        {166}let v_55: bool = (not-caught-fail(v_54) && success?(1-proj-2-tuple(v_54))) in
        {167}let ciphertext_1: bitstring = (if v_55 then 2-proj-2-tuple(v_54) else caught-fail) in
        {168}let csi_1: cipherstate = (if v_55 then 1-proj-2-tuple(v_54) else caught-fail) in
        {169}let ss_10: symmetricstate = (if v_55 then symmetricstatepack(csi_1,ck_11,h_9) else caught-fail) in
        {170}let v_56: bitstring = (if v_55 then catch-fail(symmetricstateunpack(ss_10)) else caught-fail) in
        {171}let v_57: bool = (not-caught-fail(v_56) && success?(1-proj-3-tuple(v_56))) in
        {172}let h_10: bitstring = (if v_57 then 3-proj-3-tuple(v_56) else caught-fail) in
        {173}let ck_12: key = (if v_57 then 2-proj-3-tuple(v_56) else caught-fail) in
        {174}let cs_10: cipherstate = (if v_57 then 1-proj-3-tuple(v_56) else caught-fail) in
        {175}let ssi: symmetricstate = (if v_55 then catch-fail((if v_57 then symmetricstatepack(cs_10,ck_12,hash(h_10,ciphertext_1)) else fail-any)) else caught-fail) in
        {176}let v_58: bool = not-caught-fail(ssi) in
        {177}let v_59: bitstring = (if v_46 then catch-fail((if v_48 then (if v_55 then (if v_58 then (ssi,ciphertext_1) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {178}let v_60: bool = (not-caught-fail(v_59) && success?(1-proj-2-tuple(v_59))) in
        {179}let ciphertext_2: bitstring = (if v_60 then 2-proj-2-tuple(v_59) else caught-fail) in
        {180}let ss_11: symmetricstate = (if v_60 then 1-proj-2-tuple(v_59) else caught-fail) in
        {181}let hs_2: handshakestate = (if v_60 then handshakestatepack(ss_11,s_1,m_1,e_2,rs_1,rm_1,re_1,psk_1,initiator_1) else caught-fail) in
        {182}let message_buffer: bitstring = (if v_60 then concat3(ne_1,ns,ciphertext_2) else caught-fail) in
        {183}let (hs_3: handshakestate,message_a: bitstring) = (if v_22 then (if v_24 then (if v_26 then (if v_27 then (if v_30 then (if v_38 then (if v_46 then (if v_60 then (hs_2,message_buffer) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {184}event SendMsg(me,them,stagepack_a(sid_1),msg_a(me,them,sid_1));
        {185}insert statestore(me,them,sid_1,statepack_b(hs_3));
        {186}out(pub, message_a)
    ) | (
        {344}get statestore(=me,=them,=sid_1,statepack_b(hs_4: handshakestate)) in
        {188}in(pub, message_b: bitstring);
        {189}let v_61: bitstring = catch-fail(handshakestateunpack(hs_4)) in
        {190}let v_62: bool = (not-caught-fail(v_61) && success?(1-proj-9-tuple(v_61))) in
        {191}let initiator_2: bool = (if v_62 then 9-proj-9-tuple(v_61) else caught-fail) in
        {192}let psk_2: key = (if v_62 then 8-proj-9-tuple(v_61) else caught-fail) in
        {193}let re_2: key = (if v_62 then 7-proj-9-tuple(v_61) else caught-fail) in
        {194}let rm_2: key = (if v_62 then 6-proj-9-tuple(v_61) else caught-fail) in
        {195}let rs_2: key = (if v_62 then 5-proj-9-tuple(v_61) else caught-fail) in
        {196}let e_4: keypair = (if v_62 then 4-proj-9-tuple(v_61) else caught-fail) in
        {197}let m_2: keypair = (if v_62 then 3-proj-9-tuple(v_61) else caught-fail) in
        {198}let s_2: keypair = (if v_62 then 2-proj-9-tuple(v_61) else caught-fail) in
        {199}let ss_12: symmetricstate = (if v_62 then 1-proj-9-tuple(v_61) else caught-fail) in
        {200}let v_63: bitstring = (if v_62 then catch-fail(deconcat3(message_b)) else caught-fail) in
        {201}let v_64: bool = (not-caught-fail(v_63) && success?(1-proj-3-tuple(v_63))) in
        {202}let ciphertext_3: bitstring = (if v_64 then 3-proj-3-tuple(v_63) else caught-fail) in
        {203}let ns_1: bitstring = (if v_64 then 2-proj-3-tuple(v_63) else caught-fail) in
        {204}let ne_2: bitstring = (if v_64 then 1-proj-3-tuple(v_63) else caught-fail) in
        {205}let valid1: bool = (if v_64 then true else caught-fail) in
        {206}let re_3: key = (if v_64 then ne_2 else caught-fail) in
        {207}let v_65: bitstring = (if v_64 then catch-fail(symmetricstateunpack(ss_12)) else caught-fail) in
        {208}let v_66: bool = (not-caught-fail(v_65) && success?(1-proj-3-tuple(v_65))) in
        {209}let h_11: bitstring = (if v_66 then 3-proj-3-tuple(v_65) else caught-fail) in
        {210}let ck_13: key = (if v_66 then 2-proj-3-tuple(v_65) else caught-fail) in
        {211}let cs_11: cipherstate = (if v_66 then 1-proj-3-tuple(v_65) else caught-fail) in
        {212}let ss_13: symmetricstate = (if v_64 then catch-fail((if v_66 then symmetricstatepack(cs_11,ck_13,hash(h_11,re_3)) else fail-any)) else caught-fail) in
        {213}let v_67: bool = not-caught-fail(ss_13) in
        {214}let v_68: bitstring = (if v_67 then catch-fail(keypairunpack(e_4)) else caught-fail) in
        {215}let v_69: bool = (not-caught-fail(v_68) && success?(1-proj-2-tuple(v_68))) in
        {216}let my_private_key_2: key = (if v_69 then 2-proj-2-tuple(v_68) else caught-fail) in
        {217}let my_public_key_2: key = (if v_69 then 1-proj-2-tuple(v_68) else caught-fail) in
        {218}let input_key_material_2: key = (if v_67 then catch-fail((if v_69 then dhexp(my_private_key_2,re_3) else fail-any)) else caught-fail) in
        {219}let v_70: bool = not-caught-fail(input_key_material_2) in
        {220}let v_71: bitstring = (if v_70 then catch-fail(symmetricstateunpack(ss_13)) else caught-fail) in
        {221}let v_72: bool = (not-caught-fail(v_71) && success?(1-proj-3-tuple(v_71))) in
        {222}let h_12: bitstring = (if v_72 then 3-proj-3-tuple(v_71) else caught-fail) in
        {223}let ck_14: key = (if v_72 then 2-proj-3-tuple(v_71) else caught-fail) in
        {224}let cs_12: cipherstate = (if v_72 then 1-proj-3-tuple(v_71) else caught-fail) in
        {225}let output1_2: key = (if v_72 then hmac_hash1(ck_14,input_key_material_2) else caught-fail) in
        {226}let output2_2: key = (if v_72 then hmac_hash2(ck_14,input_key_material_2) else caught-fail) in
        {227}let output3_2: key = (if v_72 then hmac_hash3(ck_14,input_key_material_2) else caught-fail) in
        {228}let v_73: bitstring = (if v_72 then catch-fail((output1_2,output2_2,output3_2)) else caught-fail) in
        {229}let v_74: bool = (not-caught-fail(v_73) && success?(1-proj-3-tuple(v_73))) in
        {230}let output_1: key = (if v_74 then 3-proj-3-tuple(v_73) else caught-fail) in
        {231}let temp_k_2: key = (if v_74 then 2-proj-3-tuple(v_73) else caught-fail) in
        {232}let ck_15: key = (if v_74 then 1-proj-3-tuple(v_73) else caught-fail) in
        {233}let ss_14: symmetricstate = (if v_67 then catch-fail((if v_70 then (if v_72 then (if v_74 then symmetricstatepack(cipherstatepack(temp_k_2,minnonce),ck_15,h_12) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {234}let v_75: bool = not-caught-fail(ss_14) in
        {235}let v_76: bitstring = (if v_75 then catch-fail(keypairunpack(s_2)) else caught-fail) in
        {236}let v_77: bool = (not-caught-fail(v_76) && success?(1-proj-2-tuple(v_76))) in
        {237}let my_private_key_3: key = (if v_77 then 2-proj-2-tuple(v_76) else caught-fail) in
        {238}let my_public_key_3: key = (if v_77 then 1-proj-2-tuple(v_76) else caught-fail) in
        {239}let input_key_material_3: key = (if v_75 then catch-fail((if v_77 then dhexp(my_private_key_3,re_3) else fail-any)) else caught-fail) in
        {240}let v_78: bool = not-caught-fail(input_key_material_3) in
        {241}let v_79: bitstring = (if v_78 then catch-fail(symmetricstateunpack(ss_14)) else caught-fail) in
        {242}let v_80: bool = (not-caught-fail(v_79) && success?(1-proj-3-tuple(v_79))) in
        {243}let h_13: bitstring = (if v_80 then 3-proj-3-tuple(v_79) else caught-fail) in
        {244}let ck_16: key = (if v_80 then 2-proj-3-tuple(v_79) else caught-fail) in
        {245}let cs_13: cipherstate = (if v_80 then 1-proj-3-tuple(v_79) else caught-fail) in
        {246}let output1_3: key = (if v_80 then hmac_hash1(ck_16,input_key_material_3) else caught-fail) in
        {247}let output2_3: key = (if v_80 then hmac_hash2(ck_16,input_key_material_3) else caught-fail) in
        {248}let output3_3: key = (if v_80 then hmac_hash3(ck_16,input_key_material_3) else caught-fail) in
        {249}let v_81: bitstring = (if v_80 then catch-fail((output1_3,output2_3,output3_3)) else caught-fail) in
        {250}let v_82: bool = (not-caught-fail(v_81) && success?(1-proj-3-tuple(v_81))) in
        {251}let output_2: key = (if v_82 then 3-proj-3-tuple(v_81) else caught-fail) in
        {252}let temp_k_3: key = (if v_82 then 2-proj-3-tuple(v_81) else caught-fail) in
        {253}let ck_17: key = (if v_82 then 1-proj-3-tuple(v_81) else caught-fail) in
        {254}let ss_15: symmetricstate = (if v_75 then catch-fail((if v_78 then (if v_80 then (if v_82 then symmetricstatepack(cipherstatepack(temp_k_3,minnonce),ck_17,h_13) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {255}let v_83: bool = not-caught-fail(ss_15) in
        {256}let v_84: bitstring = (if v_83 then catch-fail(keypairunpack(m_2)) else caught-fail) in
        {257}let v_85: bool = (not-caught-fail(v_84) && success?(1-proj-2-tuple(v_84))) in
        {258}let my_private_key_4: key = (if v_85 then 2-proj-2-tuple(v_84) else caught-fail) in
        {259}let my_public_key_4: key = (if v_85 then 1-proj-2-tuple(v_84) else caught-fail) in
        {260}let input_key_material_4: key = (if v_83 then catch-fail((if v_85 then dhexp(my_private_key_4,re_3) else fail-any)) else caught-fail) in
        {261}let v_86: bool = not-caught-fail(input_key_material_4) in
        {262}let v_87: bitstring = (if v_86 then catch-fail(symmetricstateunpack(ss_15)) else caught-fail) in
        {263}let v_88: bool = (not-caught-fail(v_87) && success?(1-proj-3-tuple(v_87))) in
        {264}let h_14: bitstring = (if v_88 then 3-proj-3-tuple(v_87) else caught-fail) in
        {265}let ck_18: key = (if v_88 then 2-proj-3-tuple(v_87) else caught-fail) in
        {266}let cs_14: cipherstate = (if v_88 then 1-proj-3-tuple(v_87) else caught-fail) in
        {267}let output1_4: key = (if v_88 then hmac_hash1(ck_18,input_key_material_4) else caught-fail) in
        {268}let output2_4: key = (if v_88 then hmac_hash2(ck_18,input_key_material_4) else caught-fail) in
        {269}let output3_4: key = (if v_88 then hmac_hash3(ck_18,input_key_material_4) else caught-fail) in
        {270}let v_89: bitstring = (if v_88 then catch-fail((output1_4,output2_4,output3_4)) else caught-fail) in
        {271}let v_90: bool = (not-caught-fail(v_89) && success?(1-proj-3-tuple(v_89))) in
        {272}let output_4: key = (if v_90 then 3-proj-3-tuple(v_89) else caught-fail) in
        {273}let temp_k_4: key = (if v_90 then 2-proj-3-tuple(v_89) else caught-fail) in
        {274}let ck_19: key = (if v_90 then 1-proj-3-tuple(v_89) else caught-fail) in
        {275}let ss_16: symmetricstate = (if v_83 then catch-fail((if v_86 then (if v_88 then (if v_90 then symmetricstatepack(cipherstatepack(temp_k_4,minnonce),ck_19,h_14) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {276}let v_91: bool = not-caught-fail(ss_16) in
        {277}let v_92: bitstring = (if v_91 then catch-fail(symmetricstateunpack(ss_16)) else caught-fail) in
        {278}let v_93: bool = (not-caught-fail(v_92) && success?(1-proj-3-tuple(v_92))) in
        {279}let h_15: bitstring = (if v_93 then 3-proj-3-tuple(v_92) else caught-fail) in
        {280}let ck_20: key = (if v_93 then 2-proj-3-tuple(v_92) else caught-fail) in
        {281}let cs_15: cipherstate = (if v_93 then 1-proj-3-tuple(v_92) else caught-fail) in
        {282}let v_94: bitstring = (if v_93 then catch-fail(cipherstateunpack(cs_15)) else caught-fail) in
        {283}let v_95: bool = (not-caught-fail(v_94) && success?(1-proj-2-tuple(v_94))) in
        {284}let n_2: nonce = (if v_95 then 2-proj-2-tuple(v_94) else caught-fail) in
        {285}let k_3: key = (if v_95 then 1-proj-2-tuple(v_94) else caught-fail) in
        {286}let d: aead = (if v_95 then catch-fail(decrypt(k_3,n_2,h_15,ciphertext_3)) else caught-fail) in
        {287}let v_96: bool = not-caught-fail(d) in
        {288}let v_97: bitstring = (if v_96 then catch-fail(aeadunpack(d)) else caught-fail) in
        {289}let v_98: bool = (not-caught-fail(v_97) && success?(1-proj-3-tuple(v_97))) in
        {290}let plaintext: bitstring = (if v_98 then 3-proj-3-tuple(v_97) else caught-fail) in
        {291}let adi: bitstring = (if v_98 then 2-proj-3-tuple(v_97) else caught-fail) in
        {292}let valid: bool = (if v_98 then 1-proj-3-tuple(v_97) else caught-fail) in
        {293}let n_3: nonce = (if v_98 then increment_nonce(n_2) else caught-fail) in
        {294}let v_99: bitstring = (if v_98 then catch-fail(cipherstateunpack(cs_15)) else caught-fail) in
        {295}let v_100: bool = (not-caught-fail(v_99) && success?(1-proj-2-tuple(v_99))) in
        {296}let o_1: nonce = (if v_100 then 2-proj-2-tuple(v_99) else caught-fail) in
        {297}let k_4: key = (if v_100 then 1-proj-2-tuple(v_99) else caught-fail) in
        {298}let csi_2: cipherstate = (if v_98 then catch-fail((if v_100 then cipherstatepack(k_4,n_3) else fail-any)) else caught-fail) in
        {299}let v_101: bool = not-caught-fail(csi_2) in
        {300}let v_102: bitstring = (if v_93 then catch-fail((if v_95 then (if v_96 then (if v_98 then (if v_101 then (csi_2,plaintext,valid) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {301}let v_103: bool = (not-caught-fail(v_102) && success?(1-proj-3-tuple(v_102))) in
        {302}let valid_1: bool = (if v_103 then 3-proj-3-tuple(v_102) else caught-fail) in
        {303}let plaintext_1: bitstring = (if v_103 then 2-proj-3-tuple(v_102) else caught-fail) in
        {304}let csi_3: cipherstate = (if v_103 then 1-proj-3-tuple(v_102) else caught-fail) in
        {305}let ss_17: symmetricstate = (if v_103 then symmetricstatepack(csi_3,ck_20,h_15) else caught-fail) in
        {306}let v_104: bitstring = (if v_103 then catch-fail(symmetricstateunpack(ss_17)) else caught-fail) in
        {307}let v_105: bool = (not-caught-fail(v_104) && success?(1-proj-3-tuple(v_104))) in
        {308}let h_16: bitstring = (if v_105 then 3-proj-3-tuple(v_104) else caught-fail) in
        {309}let ck_21: key = (if v_105 then 2-proj-3-tuple(v_104) else caught-fail) in
        {310}let cs_16: cipherstate = (if v_105 then 1-proj-3-tuple(v_104) else caught-fail) in
        {311}let ssi_1: symmetricstate = (if v_103 then catch-fail((if v_105 then symmetricstatepack(cs_16,ck_21,hash(h_16,ciphertext_3)) else fail-any)) else caught-fail) in
        {312}let v_106: bool = not-caught-fail(ssi_1) in
        {313}let v_107: bitstring = (if v_91 then catch-fail((if v_93 then (if v_103 then (if v_106 then (ssi_1,plaintext_1,valid_1) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {314}let v_108: bool = (not-caught-fail(v_107) && success?(1-proj-3-tuple(v_107))) in
        {315}let valid2: bool = (if v_108 then 3-proj-3-tuple(v_107) else caught-fail) in
        {316}let plaintext_2: bitstring = (if v_108 then 2-proj-3-tuple(v_107) else caught-fail) in
        {317}let ss_18: symmetricstate = (if v_108 then 1-proj-3-tuple(v_107) else caught-fail) in
        {318}let v_109: bool = (if v_108 then catch-fail((valid1 && valid2)) else caught-fail) in
        {319}let hs_5: handshakestate = (if v_109 then handshakestatepack(ss_18,s_2,m_2,e_4,rs_2,rm_2,re_3,psk_2,initiator_2) else caught-fail) in
        {320}let v_110: bitstring = (if v_109 then catch-fail(symmetricstateunpack(ss_18)) else caught-fail) in
        {321}let v_111: bool = (not-caught-fail(v_110) && success?(1-proj-3-tuple(v_110))) in
        {322}let h_17: bitstring = (if v_111 then 3-proj-3-tuple(v_110) else caught-fail) in
        {323}let ck_22: key = (if v_111 then 2-proj-3-tuple(v_110) else caught-fail) in
        {324}let cs_17: cipherstate = (if v_111 then 1-proj-3-tuple(v_110) else caught-fail) in
        {325}let input_key_material_5: key = (if v_111 then zero else caught-fail) in
        {326}let output1_5: key = (if v_111 then hmac_hash1(ck_22,input_key_material_5) else caught-fail) in
        {327}let output2_5: key = (if v_111 then hmac_hash2(ck_22,input_key_material_5) else caught-fail) in
        {328}let output3_5: key = (if v_111 then hmac_hash3(ck_22,input_key_material_5) else caught-fail) in
        {329}let v_112: bitstring = (if v_111 then catch-fail((output1_5,output2_5,output3_5)) else caught-fail) in
        {330}let v_113: bool = (not-caught-fail(v_112) && success?(1-proj-3-tuple(v_112))) in
        {331}let temp_k3: key = (if v_113 then 3-proj-3-tuple(v_112) else caught-fail) in
        {332}let temp_k2: key = (if v_113 then 2-proj-3-tuple(v_112) else caught-fail) in
        {333}let temp_k1: key = (if v_113 then 1-proj-3-tuple(v_112) else caught-fail) in
        {334}let cs1: cipherstate = (if v_113 then cipherstatepack(temp_k1,minnonce) else caught-fail) in
        {335}let cs2: cipherstate = (if v_113 then cipherstatepack(temp_k2,minnonce) else caught-fail) in
        {336}let v_114: bitstring = (if v_109 then catch-fail((if v_111 then (if v_113 then (ss_18,cs1,cs2) else fail-any) else fail-any)) else caught-fail) in
        {337}let v_115: bool = (not-caught-fail(v_114) && success?(1-proj-3-tuple(v_114))) in
        {338}let cs2_1: cipherstate = (if v_115 then 3-proj-3-tuple(v_114) else caught-fail) in
        {339}let cs1_1: cipherstate = (if v_115 then 2-proj-3-tuple(v_114) else caught-fail) in
        {340}let ssi_2: symmetricstate = (if v_115 then 1-proj-3-tuple(v_114) else caught-fail) in
        {341}let (hs_6: handshakestate,plaintext_b: bitstring,valid_2: bool,cs1_2: cipherstate,cs2_2: cipherstate) = (if v_62 then (if v_64 then (if v_67 then (if v_75 then (if v_83 then (if v_91 then (if v_108 then (if undo-catch-fail(v_109) then (if v_115 then (hs_5,plaintext_2,true,cs1_1,cs2_1) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {342}event RecvMsg(me,them,stagepack_b(sid_1),plaintext_b);
        {343}insert statestore(me,them,sid_1,statepack_c(hs_6,cs1_2,cs2_2))
    ) | (
        {345}!
        {403}get statestore(=me,=them,=sid_1,statepack_c(hs_7: handshakestate,cs1_3: cipherstate,cs2_3: cipherstate)) in
        {346}let hs_8: handshakestate = handshakestatesetcs(hs_7,cs1_3) in
        {347}let payload_1: bitstring = msg_c(me,them,sid_1) in
        {348}let v_116: bitstring = catch-fail(handshakestateunpack(hs_8)) in
        {349}let v_117: bool = (not-caught-fail(v_116) && success?(1-proj-9-tuple(v_116))) in
        {350}let initiator_3: bool = (if v_117 then 9-proj-9-tuple(v_116) else caught-fail) in
        {351}let psk_3: key = (if v_117 then 8-proj-9-tuple(v_116) else caught-fail) in
        {352}let re_4: key = (if v_117 then 7-proj-9-tuple(v_116) else caught-fail) in
        {353}let rm_3: key = (if v_117 then 6-proj-9-tuple(v_116) else caught-fail) in
        {354}let rs_3: key = (if v_117 then 5-proj-9-tuple(v_116) else caught-fail) in
        {355}let e_5: keypair = (if v_117 then 4-proj-9-tuple(v_116) else caught-fail) in
        {356}let m_3: keypair = (if v_117 then 3-proj-9-tuple(v_116) else caught-fail) in
        {357}let s_3: keypair = (if v_117 then 2-proj-9-tuple(v_116) else caught-fail) in
        {358}let ss_19: symmetricstate = (if v_117 then 1-proj-9-tuple(v_116) else caught-fail) in
        {359}let v_118: bitstring = (if v_117 then catch-fail((empty,empty,empty)) else caught-fail) in
        {360}let v_119: bool = (not-caught-fail(v_118) && success?(1-proj-3-tuple(v_118))) in
        {361}let ciphertext_4: bitstring = (if v_119 then 3-proj-3-tuple(v_118) else caught-fail) in
        {362}let ns_2: bitstring = (if v_119 then 2-proj-3-tuple(v_118) else caught-fail) in
        {363}let ne_3: bitstring = (if v_119 then 1-proj-3-tuple(v_118) else caught-fail) in
        {364}let v_120: bitstring = (if v_119 then catch-fail(symmetricstateunpack(ss_19)) else caught-fail) in
        {365}let v_121: bool = (not-caught-fail(v_120) && success?(1-proj-3-tuple(v_120))) in
        {366}let h_18: bitstring = (if v_121 then 3-proj-3-tuple(v_120) else caught-fail) in
        {367}let ck_23: key = (if v_121 then 2-proj-3-tuple(v_120) else caught-fail) in
        {368}let cs_18: cipherstate = (if v_121 then 1-proj-3-tuple(v_120) else caught-fail) in
        {369}let v_122: bitstring = (if v_121 then catch-fail(cipherstateunpack(cs_18)) else caught-fail) in
        {370}let v_123: bool = (not-caught-fail(v_122) && success?(1-proj-2-tuple(v_122))) in
        {371}let n_4: nonce = (if v_123 then 2-proj-2-tuple(v_122) else caught-fail) in
        {372}let k_5: key = (if v_123 then 1-proj-2-tuple(v_122) else caught-fail) in
        {373}let e_6: bitstring = (if v_123 then encrypt(k_5,n_4,h_18,payload_1) else caught-fail) in
        {374}let n_5: nonce = (if v_123 then increment_nonce(n_4) else caught-fail) in
        {375}let v_124: bitstring = (if v_123 then catch-fail(cipherstateunpack(cs_18)) else caught-fail) in
        {376}let v_125: bool = (not-caught-fail(v_124) && success?(1-proj-2-tuple(v_124))) in
        {377}let o_2: nonce = (if v_125 then 2-proj-2-tuple(v_124) else caught-fail) in
        {378}let k_6: key = (if v_125 then 1-proj-2-tuple(v_124) else caught-fail) in
        {379}let csi_4: cipherstate = (if v_123 then catch-fail((if v_125 then cipherstatepack(k_6,n_5) else fail-any)) else caught-fail) in
        {380}let v_126: bool = not-caught-fail(csi_4) in
        {381}let v_127: bitstring = (if v_121 then catch-fail((if v_123 then (if v_126 then (csi_4,e_6) else fail-any) else fail-any)) else caught-fail) in
        {382}let v_128: bool = (not-caught-fail(v_127) && success?(1-proj-2-tuple(v_127))) in
        {383}let ciphertext_5: bitstring = (if v_128 then 2-proj-2-tuple(v_127) else caught-fail) in
        {384}let csi_5: cipherstate = (if v_128 then 1-proj-2-tuple(v_127) else caught-fail) in
        {385}let ss_20: symmetricstate = (if v_128 then symmetricstatepack(csi_5,ck_23,h_18) else caught-fail) in
        {386}let v_129: bitstring = (if v_128 then catch-fail(symmetricstateunpack(ss_20)) else caught-fail) in
        {387}let v_130: bool = (not-caught-fail(v_129) && success?(1-proj-3-tuple(v_129))) in
        {388}let h_19: bitstring = (if v_130 then 3-proj-3-tuple(v_129) else caught-fail) in
        {389}let ck_24: key = (if v_130 then 2-proj-3-tuple(v_129) else caught-fail) in
        {390}let cs_19: cipherstate = (if v_130 then 1-proj-3-tuple(v_129) else caught-fail) in
        {391}let ssi_3: symmetricstate = (if v_128 then catch-fail((if v_130 then symmetricstatepack(cs_19,ck_24,hash(h_19,ciphertext_5)) else fail-any)) else caught-fail) in
        {392}let v_131: bool = not-caught-fail(ssi_3) in
        {393}let v_132: bitstring = (if v_119 then catch-fail((if v_121 then (if v_128 then (if v_131 then (ssi_3,ciphertext_5) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {394}let v_133: bool = (not-caught-fail(v_132) && success?(1-proj-2-tuple(v_132))) in
        {395}let ciphertext_6: bitstring = (if v_133 then 2-proj-2-tuple(v_132) else caught-fail) in
        {396}let ss_21: symmetricstate = (if v_133 then 1-proj-2-tuple(v_132) else caught-fail) in
        {397}let hs_9: handshakestate = (if v_133 then handshakestatepack(ss_21,s_3,m_3,e_5,rs_3,rm_3,re_4,psk_3,initiator_3) else caught-fail) in
        {398}let message_buffer_1: bitstring = (if v_133 then concat3(ne_3,ns_2,ciphertext_6) else caught-fail) in
        {399}let (hs_10: handshakestate,message_c: bitstring) = (if v_117 then (if v_119 then (if v_133 then (hs_9,message_buffer_1) else fail-any) else fail-any) else fail-any) in
        {400}event SendMsg(me,them,stagepack_c(sid_1),msg_c(me,them,sid_1));
        {401}insert statestore(me,them,sid_1,statepack_d(hs_10,handshakestategetcs(hs_10),cs2_3));
        {402}out(pub, message_c)
    ) | (
        {404}!
        {470}get statestore(=me,=them,=sid_1,statepack_d(hs_11: handshakestate,cs1_4: cipherstate,cs2_4: cipherstate)) in
        {405}let hs_12: handshakestate = handshakestatesetcs(hs_11,cs2_4) in
        {406}in(pub, message_d: bitstring);
        {407}let v_134: bitstring = catch-fail(handshakestateunpack(hs_12)) in
        {408}let v_135: bool = (not-caught-fail(v_134) && success?(1-proj-9-tuple(v_134))) in
        {409}let initiator_4: bool = (if v_135 then 9-proj-9-tuple(v_134) else caught-fail) in
        {410}let psk_4: key = (if v_135 then 8-proj-9-tuple(v_134) else caught-fail) in
        {411}let re_5: key = (if v_135 then 7-proj-9-tuple(v_134) else caught-fail) in
        {412}let rm_4: key = (if v_135 then 6-proj-9-tuple(v_134) else caught-fail) in
        {413}let rs_4: key = (if v_135 then 5-proj-9-tuple(v_134) else caught-fail) in
        {414}let e_7: keypair = (if v_135 then 4-proj-9-tuple(v_134) else caught-fail) in
        {415}let m_4: keypair = (if v_135 then 3-proj-9-tuple(v_134) else caught-fail) in
        {416}let s_4: keypair = (if v_135 then 2-proj-9-tuple(v_134) else caught-fail) in
        {417}let ss_22: symmetricstate = (if v_135 then 1-proj-9-tuple(v_134) else caught-fail) in
        {418}let v_136: bitstring = (if v_135 then catch-fail(deconcat3(message_d)) else caught-fail) in
        {419}let v_137: bool = (not-caught-fail(v_136) && success?(1-proj-3-tuple(v_136))) in
        {420}let ciphertext_7: bitstring = (if v_137 then 3-proj-3-tuple(v_136) else caught-fail) in
        {421}let ns_3: bitstring = (if v_137 then 2-proj-3-tuple(v_136) else caught-fail) in
        {422}let ne_4: bitstring = (if v_137 then 1-proj-3-tuple(v_136) else caught-fail) in
        {423}let valid1_1: bool = (if v_137 then true else caught-fail) in
        {424}let v_138: bitstring = (if v_137 then catch-fail(symmetricstateunpack(ss_22)) else caught-fail) in
        {425}let v_139: bool = (not-caught-fail(v_138) && success?(1-proj-3-tuple(v_138))) in
        {426}let h_20: bitstring = (if v_139 then 3-proj-3-tuple(v_138) else caught-fail) in
        {427}let ck_25: key = (if v_139 then 2-proj-3-tuple(v_138) else caught-fail) in
        {428}let cs_20: cipherstate = (if v_139 then 1-proj-3-tuple(v_138) else caught-fail) in
        {429}let v_140: bitstring = (if v_139 then catch-fail(cipherstateunpack(cs_20)) else caught-fail) in
        {430}let v_141: bool = (not-caught-fail(v_140) && success?(1-proj-2-tuple(v_140))) in
        {431}let n_6: nonce = (if v_141 then 2-proj-2-tuple(v_140) else caught-fail) in
        {432}let k_7: key = (if v_141 then 1-proj-2-tuple(v_140) else caught-fail) in
        {433}let d_1: aead = (if v_141 then catch-fail(decrypt(k_7,n_6,h_20,ciphertext_7)) else caught-fail) in
        {434}let v_142: bool = not-caught-fail(d_1) in
        {435}let v_143: bitstring = (if v_142 then catch-fail(aeadunpack(d_1)) else caught-fail) in
        {436}let v_144: bool = (not-caught-fail(v_143) && success?(1-proj-3-tuple(v_143))) in
        {437}let plaintext_3: bitstring = (if v_144 then 3-proj-3-tuple(v_143) else caught-fail) in
        {438}let adi_1: bitstring = (if v_144 then 2-proj-3-tuple(v_143) else caught-fail) in
        {439}let valid_3: bool = (if v_144 then 1-proj-3-tuple(v_143) else caught-fail) in
        {440}let n_7: nonce = (if v_144 then increment_nonce(n_6) else caught-fail) in
        {441}let v_145: bitstring = (if v_144 then catch-fail(cipherstateunpack(cs_20)) else caught-fail) in
        {442}let v_146: bool = (not-caught-fail(v_145) && success?(1-proj-2-tuple(v_145))) in
        {443}let o_3: nonce = (if v_146 then 2-proj-2-tuple(v_145) else caught-fail) in
        {444}let k_8: key = (if v_146 then 1-proj-2-tuple(v_145) else caught-fail) in
        {445}let csi_6: cipherstate = (if v_144 then catch-fail((if v_146 then cipherstatepack(k_8,n_7) else fail-any)) else caught-fail) in
        {446}let v_147: bool = not-caught-fail(csi_6) in
        {447}let v_148: bitstring = (if v_139 then catch-fail((if v_141 then (if v_142 then (if v_144 then (if v_147 then (csi_6,plaintext_3,valid_3) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {448}let v_149: bool = (not-caught-fail(v_148) && success?(1-proj-3-tuple(v_148))) in
        {449}let valid_4: bool = (if v_149 then 3-proj-3-tuple(v_148) else caught-fail) in
        {450}let plaintext_4: bitstring = (if v_149 then 2-proj-3-tuple(v_148) else caught-fail) in
        {451}let csi_7: cipherstate = (if v_149 then 1-proj-3-tuple(v_148) else caught-fail) in
        {452}let ss_23: symmetricstate = (if v_149 then symmetricstatepack(csi_7,ck_25,h_20) else caught-fail) in
        {453}let v_150: bitstring = (if v_149 then catch-fail(symmetricstateunpack(ss_23)) else caught-fail) in
        {454}let v_151: bool = (not-caught-fail(v_150) && success?(1-proj-3-tuple(v_150))) in
        {455}let h_21: bitstring = (if v_151 then 3-proj-3-tuple(v_150) else caught-fail) in
        {456}let ck_26: key = (if v_151 then 2-proj-3-tuple(v_150) else caught-fail) in
        {457}let cs_21: cipherstate = (if v_151 then 1-proj-3-tuple(v_150) else caught-fail) in
        {458}let ssi_4: symmetricstate = (if v_149 then catch-fail((if v_151 then symmetricstatepack(cs_21,ck_26,hash(h_21,ciphertext_7)) else fail-any)) else caught-fail) in
        {459}let v_152: bool = not-caught-fail(ssi_4) in
        {460}let v_153: bitstring = (if v_137 then catch-fail((if v_139 then (if v_149 then (if v_152 then (ssi_4,plaintext_4,valid_4) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {461}let v_154: bool = (not-caught-fail(v_153) && success?(1-proj-3-tuple(v_153))) in
        {462}let valid2_1: bool = (if v_154 then 3-proj-3-tuple(v_153) else caught-fail) in
        {463}let plaintext_5: bitstring = (if v_154 then 2-proj-3-tuple(v_153) else caught-fail) in
        {464}let ss_24: symmetricstate = (if v_154 then 1-proj-3-tuple(v_153) else caught-fail) in
        {465}let v_155: bool = (if v_154 then catch-fail((valid1_1 && valid2_1)) else caught-fail) in
        {466}let hs_13: handshakestate = (if v_155 then handshakestatepack(ss_24,s_4,m_4,e_7,rs_4,rm_4,re_5,psk_4,initiator_4) else caught-fail) in
        {467}let (hs_14: handshakestate,plaintext_d: bitstring,valid_5: bool) = (if v_135 then (if v_137 then (if v_154 then (if undo-catch-fail(v_155) then (hs_13,plaintext_5,true) else fail-any) else fail-any) else fail-any) else fail-any) in
        {468}event RecvMsg(me,them,stagepack_d(sid_1),plaintext_d);
        {469}event RecvEnd(valid_5)
    ) | (
        {471}event LeakS(phase0,me);
        {472}event LeakM(phase0,me);
        {473}out(pub, (key_s(me),key_m(me)))
    ) | (
        {474}phase 1;
        {475}event LeakS(phase1,me);
        {476}event LeakM(phase1,me);
        {477}out(pub, (key_s(me),key_m(me)))
    )
) | (
    {478}let me_1: principal = alice in
    {479}let them_1: principal = charlie in
    {480}let sid_2: sessionid = sid in
    {481}let basis_5: key = key_s(me_1) in
    {482}let public_key_5: key = catch-fail(dhexp(basis_5,validkey(g))) in
    {483}let v_156: bool = not-caught-fail(public_key_5) in
    {484}let s_5: keypair = (if v_156 then keypairpack(validkey(public_key_5),basis_5) else fail-any) in
    {485}let basis_6: key = key_m(me_1) in
    {486}let public_key_6: key = catch-fail(dhexp(basis_6,validkey(g))) in
    {487}let v_157: bool = not-caught-fail(public_key_6) in
    {488}let m_5: keypair = (if v_157 then keypairpack(validkey(public_key_6),basis_6) else fail-any) in
    {489}out(pub, (getpublickey(s_5),getpublickey(m_5)));
    (
        {490}let e_8: keypair = keypairpack(empty,empty) in
        {491}let basis_7: key = key_s(them_1) in
        {492}let public_key_7: key = catch-fail(dhexp(basis_7,validkey(g))) in
        {493}let v_158: bool = not-caught-fail(public_key_7) in
        {494}let rs_5: key = getpublickey((if v_158 then keypairpack(validkey(public_key_7),basis_7) else fail-any)) in
        {495}let basis_8: key = key_s(them_1) in
        {496}let public_key_8: key = catch-fail(dhexp(basis_8,validkey(g))) in
        {497}let v_159: bool = not-caught-fail(public_key_8) in
        {498}let rm_5: key = getpublickey((if v_159 then keypairpack(validkey(public_key_8),basis_8) else fail-any)) in
        {499}let re_6: key = empty in
        {500}let prologue_1: bitstring = empty in
        {501}let psk_5: key = empty in
        {502}let protocol_name_1: bitstring = somename in
        {503}let h_22: bitstring = hash(protocol_name_1,empty) in
        {504}let ck_27: key = h_22 in
        {505}let k_9: key = empty in
        {506}let cs_22: cipherstate = cipherstatepack(k_9,minnonce) in
        {507}let ss_25: symmetricstate = symmetricstatepack(cs_22,ck_27,h_22) in
        {508}let v_160: bitstring = catch-fail(symmetricstateunpack(ss_25)) in
        {509}let v_161: bool = (not-caught-fail(v_160) && success?(1-proj-3-tuple(v_160))) in
        {510}let h_23: bitstring = (if v_161 then 3-proj-3-tuple(v_160) else caught-fail) in
        {511}let ck_28: key = (if v_161 then 2-proj-3-tuple(v_160) else caught-fail) in
        {512}let cs_23: cipherstate = (if v_161 then 1-proj-3-tuple(v_160) else caught-fail) in
        {513}let ss_26: symmetricstate = catch-fail((if v_161 then symmetricstatepack(cs_23,ck_28,hash(h_23,prologue_1)) else fail-any)) in
        {514}let v_162: bool = not-caught-fail(ss_26) in
        {515}let data_2: bitstring = (if v_162 then catch-fail(getpublickey(s_5)) else caught-fail) in
        {516}let v_163: bool = not-caught-fail(data_2) in
        {517}let v_164: bitstring = (if v_163 then catch-fail(symmetricstateunpack(ss_26)) else caught-fail) in
        {518}let v_165: bool = (not-caught-fail(v_164) && success?(1-proj-3-tuple(v_164))) in
        {519}let h_24: bitstring = (if v_165 then 3-proj-3-tuple(v_164) else caught-fail) in
        {520}let ck_29: key = (if v_165 then 2-proj-3-tuple(v_164) else caught-fail) in
        {521}let cs_24: cipherstate = (if v_165 then 1-proj-3-tuple(v_164) else caught-fail) in
        {522}let ss_27: symmetricstate = (if v_162 then catch-fail((if v_163 then (if v_165 then symmetricstatepack(cs_24,ck_29,hash(h_24,data_2)) else fail-any) else fail-any)) else caught-fail) in
        {523}let v_166: bool = not-caught-fail(ss_27) in
        {524}let data_3: bitstring = (if v_166 then catch-fail(getpublickey(m_5)) else caught-fail) in
        {525}let v_167: bool = not-caught-fail(data_3) in
        {526}let v_168: bitstring = (if v_167 then catch-fail(symmetricstateunpack(ss_27)) else caught-fail) in
        {527}let v_169: bool = (not-caught-fail(v_168) && success?(1-proj-3-tuple(v_168))) in
        {528}let h_25: bitstring = (if v_169 then 3-proj-3-tuple(v_168) else caught-fail) in
        {529}let ck_30: key = (if v_169 then 2-proj-3-tuple(v_168) else caught-fail) in
        {530}let cs_25: cipherstate = (if v_169 then 1-proj-3-tuple(v_168) else caught-fail) in
        {531}let ss_28: symmetricstate = (if v_166 then catch-fail((if v_167 then (if v_169 then symmetricstatepack(cs_25,ck_30,hash(h_25,data_3)) else fail-any) else fail-any)) else caught-fail) in
        {532}let v_170: bool = not-caught-fail(ss_28) in
        {533}let v_171: bitstring = (if v_170 then catch-fail(symmetricstateunpack(ss_28)) else caught-fail) in
        {534}let v_172: bool = (not-caught-fail(v_171) && success?(1-proj-3-tuple(v_171))) in
        {535}let h_26: bitstring = (if v_172 then 3-proj-3-tuple(v_171) else caught-fail) in
        {536}let ck_31: key = (if v_172 then 2-proj-3-tuple(v_171) else caught-fail) in
        {537}let cs_26: cipherstate = (if v_172 then 1-proj-3-tuple(v_171) else caught-fail) in
        {538}let ss_29: symmetricstate = (if v_170 then catch-fail((if v_172 then symmetricstatepack(cs_26,ck_31,hash(h_26,rs_5)) else fail-any)) else caught-fail) in
        {539}let v_173: bool = not-caught-fail(ss_29) in
        {540}let v_174: bitstring = (if v_173 then catch-fail(symmetricstateunpack(ss_29)) else caught-fail) in
        {541}let v_175: bool = (not-caught-fail(v_174) && success?(1-proj-3-tuple(v_174))) in
        {542}let h_27: bitstring = (if v_175 then 3-proj-3-tuple(v_174) else caught-fail) in
        {543}let ck_32: key = (if v_175 then 2-proj-3-tuple(v_174) else caught-fail) in
        {544}let cs_27: cipherstate = (if v_175 then 1-proj-3-tuple(v_174) else caught-fail) in
        {545}let ss_30: symmetricstate = (if v_173 then catch-fail((if v_175 then symmetricstatepack(cs_27,ck_32,hash(h_27,rm_5)) else fail-any)) else caught-fail) in
        {546}let v_176: bool = not-caught-fail(ss_30) in
        {547}let hs_15: handshakestate = (if v_162 then (if v_166 then (if v_170 then (if v_173 then (if v_176 then handshakestatepack(ss_30,s_5,m_5,e_8,rs_5,rm_5,re_6,psk_5,true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {548}insert statestore(me_1,them_1,sid_2,statepack_a(hs_15))
    ) | (
        {661}get statestore(=me_1,=them_1,=sid_2,statepack_a(hs_16: handshakestate)) in
        {549}let payload_2: bitstring = msg_a(me_1,them_1,sid_2) in
        {550}let v_177: bitstring = catch-fail(handshakestateunpack(hs_16)) in
        {551}let v_178: bool = (not-caught-fail(v_177) && success?(1-proj-9-tuple(v_177))) in
        {552}let initiator_5: bool = (if v_178 then 9-proj-9-tuple(v_177) else caught-fail) in
        {553}let psk_6: key = (if v_178 then 8-proj-9-tuple(v_177) else caught-fail) in
        {554}let re_7: key = (if v_178 then 7-proj-9-tuple(v_177) else caught-fail) in
        {555}let rm_6: key = (if v_178 then 6-proj-9-tuple(v_177) else caught-fail) in
        {556}let rs_6: key = (if v_178 then 5-proj-9-tuple(v_177) else caught-fail) in
        {557}let e_9: keypair = (if v_178 then 4-proj-9-tuple(v_177) else caught-fail) in
        {558}let m_6: keypair = (if v_178 then 3-proj-9-tuple(v_177) else caught-fail) in
        {559}let s_6: keypair = (if v_178 then 2-proj-9-tuple(v_177) else caught-fail) in
        {560}let ss_31: symmetricstate = (if v_178 then 1-proj-9-tuple(v_177) else caught-fail) in
        {561}let v_179: bitstring = (if v_178 then catch-fail((empty,empty,empty)) else caught-fail) in
        {562}let v_180: bool = (not-caught-fail(v_179) && success?(1-proj-3-tuple(v_179))) in
        {563}let ciphertext_8: bitstring = (if v_180 then 3-proj-3-tuple(v_179) else caught-fail) in
        {564}let ns_4: bitstring = (if v_180 then 2-proj-3-tuple(v_179) else caught-fail) in
        {565}let ne_5: bitstring = (if v_180 then 1-proj-3-tuple(v_179) else caught-fail) in
        {566}let basis_9: key = (if v_180 then key_e(me_1,them_1,sid_2) else caught-fail) in
        {567}let public_key_9: key = (if v_180 then catch-fail(dhexp(basis_9,validkey(g))) else caught-fail) in
        {568}let v_181: bool = not-caught-fail(public_key_9) in
        {569}let e_10: keypair = (if v_180 then catch-fail((if v_181 then keypairpack(validkey(public_key_9),basis_9) else fail-any)) else caught-fail) in
        {570}let v_182: bool = not-caught-fail(e_10) in
        {571}let ne_6: bitstring = (if v_182 then catch-fail(getpublickey(e_10)) else caught-fail) in
        {572}let v_183: bool = not-caught-fail(ne_6) in
        {573}let v_184: bitstring = (if v_183 then catch-fail(symmetricstateunpack(ss_31)) else caught-fail) in
        {574}let v_185: bool = (not-caught-fail(v_184) && success?(1-proj-3-tuple(v_184))) in
        {575}let h_28: bitstring = (if v_185 then 3-proj-3-tuple(v_184) else caught-fail) in
        {576}let ck_33: key = (if v_185 then 2-proj-3-tuple(v_184) else caught-fail) in
        {577}let cs_28: cipherstate = (if v_185 then 1-proj-3-tuple(v_184) else caught-fail) in
        {578}let ss_32: symmetricstate = (if v_183 then catch-fail((if v_185 then symmetricstatepack(cs_28,ck_33,hash(h_28,ne_6)) else fail-any)) else caught-fail) in
        {579}let v_186: bool = not-caught-fail(ss_32) in
        {580}let v_187: bitstring = (if v_186 then catch-fail(keypairunpack(e_10)) else caught-fail) in
        {581}let v_188: bool = (not-caught-fail(v_187) && success?(1-proj-2-tuple(v_187))) in
        {582}let my_private_key_5: key = (if v_188 then 2-proj-2-tuple(v_187) else caught-fail) in
        {583}let my_public_key_5: key = (if v_188 then 1-proj-2-tuple(v_187) else caught-fail) in
        {584}let input_key_material_6: key = (if v_186 then catch-fail((if v_188 then dhexp(my_private_key_5,rm_6) else fail-any)) else caught-fail) in
        {585}let v_189: bool = not-caught-fail(input_key_material_6) in
        {586}let v_190: bitstring = (if v_189 then catch-fail(symmetricstateunpack(ss_32)) else caught-fail) in
        {587}let v_191: bool = (not-caught-fail(v_190) && success?(1-proj-3-tuple(v_190))) in
        {588}let h_29: bitstring = (if v_191 then 3-proj-3-tuple(v_190) else caught-fail) in
        {589}let ck_34: key = (if v_191 then 2-proj-3-tuple(v_190) else caught-fail) in
        {590}let cs_29: cipherstate = (if v_191 then 1-proj-3-tuple(v_190) else caught-fail) in
        {591}let output1_6: key = (if v_191 then hmac_hash1(ck_34,input_key_material_6) else caught-fail) in
        {592}let output2_6: key = (if v_191 then hmac_hash2(ck_34,input_key_material_6) else caught-fail) in
        {593}let output3_6: key = (if v_191 then hmac_hash3(ck_34,input_key_material_6) else caught-fail) in
        {594}let v_192: bitstring = (if v_191 then catch-fail((output1_6,output2_6,output3_6)) else caught-fail) in
        {595}let v_193: bool = (not-caught-fail(v_192) && success?(1-proj-3-tuple(v_192))) in
        {596}let output_5: key = (if v_193 then 3-proj-3-tuple(v_192) else caught-fail) in
        {597}let temp_k_5: key = (if v_193 then 2-proj-3-tuple(v_192) else caught-fail) in
        {598}let ck_35: key = (if v_193 then 1-proj-3-tuple(v_192) else caught-fail) in
        {599}let ss_33: symmetricstate = (if v_186 then catch-fail((if v_189 then (if v_191 then (if v_193 then symmetricstatepack(cipherstatepack(temp_k_5,minnonce),ck_35,h_29) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {600}let v_194: bool = not-caught-fail(ss_33) in
        {601}let v_195: bitstring = (if v_194 then catch-fail(keypairunpack(m_6)) else caught-fail) in
        {602}let v_196: bool = (not-caught-fail(v_195) && success?(1-proj-2-tuple(v_195))) in
        {603}let my_private_key_6: key = (if v_196 then 2-proj-2-tuple(v_195) else caught-fail) in
        {604}let my_public_key_6: key = (if v_196 then 1-proj-2-tuple(v_195) else caught-fail) in
        {605}let input_key_material_7: key = (if v_194 then catch-fail((if v_196 then dhexp(my_private_key_6,rs_6) else fail-any)) else caught-fail) in
        {606}let v_197: bool = not-caught-fail(input_key_material_7) in
        {607}let v_198: bitstring = (if v_197 then catch-fail(symmetricstateunpack(ss_33)) else caught-fail) in
        {608}let v_199: bool = (not-caught-fail(v_198) && success?(1-proj-3-tuple(v_198))) in
        {609}let h_30: bitstring = (if v_199 then 3-proj-3-tuple(v_198) else caught-fail) in
        {610}let ck_36: key = (if v_199 then 2-proj-3-tuple(v_198) else caught-fail) in
        {611}let cs_30: cipherstate = (if v_199 then 1-proj-3-tuple(v_198) else caught-fail) in
        {612}let output1_7: key = (if v_199 then hmac_hash1(ck_36,input_key_material_7) else caught-fail) in
        {613}let output2_7: key = (if v_199 then hmac_hash2(ck_36,input_key_material_7) else caught-fail) in
        {614}let output3_7: key = (if v_199 then hmac_hash3(ck_36,input_key_material_7) else caught-fail) in
        {615}let v_200: bitstring = (if v_199 then catch-fail((output1_7,output2_7,output3_7)) else caught-fail) in
        {616}let v_201: bool = (not-caught-fail(v_200) && success?(1-proj-3-tuple(v_200))) in
        {617}let output_6: key = (if v_201 then 3-proj-3-tuple(v_200) else caught-fail) in
        {618}let temp_k_6: key = (if v_201 then 2-proj-3-tuple(v_200) else caught-fail) in
        {619}let ck_37: key = (if v_201 then 1-proj-3-tuple(v_200) else caught-fail) in
        {620}let ss_34: symmetricstate = (if v_194 then catch-fail((if v_197 then (if v_199 then (if v_201 then symmetricstatepack(cipherstatepack(temp_k_6,minnonce),ck_37,h_30) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {621}let v_202: bool = not-caught-fail(ss_34) in
        {622}let v_203: bitstring = (if v_202 then catch-fail(symmetricstateunpack(ss_34)) else caught-fail) in
        {623}let v_204: bool = (not-caught-fail(v_203) && success?(1-proj-3-tuple(v_203))) in
        {624}let h_31: bitstring = (if v_204 then 3-proj-3-tuple(v_203) else caught-fail) in
        {625}let ck_38: key = (if v_204 then 2-proj-3-tuple(v_203) else caught-fail) in
        {626}let cs_31: cipherstate = (if v_204 then 1-proj-3-tuple(v_203) else caught-fail) in
        {627}let v_205: bitstring = (if v_204 then catch-fail(cipherstateunpack(cs_31)) else caught-fail) in
        {628}let v_206: bool = (not-caught-fail(v_205) && success?(1-proj-2-tuple(v_205))) in
        {629}let n_8: nonce = (if v_206 then 2-proj-2-tuple(v_205) else caught-fail) in
        {630}let k_10: key = (if v_206 then 1-proj-2-tuple(v_205) else caught-fail) in
        {631}let e_11: bitstring = (if v_206 then encrypt(k_10,n_8,h_31,payload_2) else caught-fail) in
        {632}let n_9: nonce = (if v_206 then increment_nonce(n_8) else caught-fail) in
        {633}let v_207: bitstring = (if v_206 then catch-fail(cipherstateunpack(cs_31)) else caught-fail) in
        {634}let v_208: bool = (not-caught-fail(v_207) && success?(1-proj-2-tuple(v_207))) in
        {635}let o_4: nonce = (if v_208 then 2-proj-2-tuple(v_207) else caught-fail) in
        {636}let k_11: key = (if v_208 then 1-proj-2-tuple(v_207) else caught-fail) in
        {637}let csi_8: cipherstate = (if v_206 then catch-fail((if v_208 then cipherstatepack(k_11,n_9) else fail-any)) else caught-fail) in
        {638}let v_209: bool = not-caught-fail(csi_8) in
        {639}let v_210: bitstring = (if v_204 then catch-fail((if v_206 then (if v_209 then (csi_8,e_11) else fail-any) else fail-any)) else caught-fail) in
        {640}let v_211: bool = (not-caught-fail(v_210) && success?(1-proj-2-tuple(v_210))) in
        {641}let ciphertext_9: bitstring = (if v_211 then 2-proj-2-tuple(v_210) else caught-fail) in
        {642}let csi_9: cipherstate = (if v_211 then 1-proj-2-tuple(v_210) else caught-fail) in
        {643}let ss_35: symmetricstate = (if v_211 then symmetricstatepack(csi_9,ck_38,h_31) else caught-fail) in
        {644}let v_212: bitstring = (if v_211 then catch-fail(symmetricstateunpack(ss_35)) else caught-fail) in
        {645}let v_213: bool = (not-caught-fail(v_212) && success?(1-proj-3-tuple(v_212))) in
        {646}let h_32: bitstring = (if v_213 then 3-proj-3-tuple(v_212) else caught-fail) in
        {647}let ck_39: key = (if v_213 then 2-proj-3-tuple(v_212) else caught-fail) in
        {648}let cs_32: cipherstate = (if v_213 then 1-proj-3-tuple(v_212) else caught-fail) in
        {649}let ssi_5: symmetricstate = (if v_211 then catch-fail((if v_213 then symmetricstatepack(cs_32,ck_39,hash(h_32,ciphertext_9)) else fail-any)) else caught-fail) in
        {650}let v_214: bool = not-caught-fail(ssi_5) in
        {651}let v_215: bitstring = (if v_202 then catch-fail((if v_204 then (if v_211 then (if v_214 then (ssi_5,ciphertext_9) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {652}let v_216: bool = (not-caught-fail(v_215) && success?(1-proj-2-tuple(v_215))) in
        {653}let ciphertext_10: bitstring = (if v_216 then 2-proj-2-tuple(v_215) else caught-fail) in
        {654}let ss_36: symmetricstate = (if v_216 then 1-proj-2-tuple(v_215) else caught-fail) in
        {655}let hs_17: handshakestate = (if v_216 then handshakestatepack(ss_36,s_6,m_6,e_10,rs_6,rm_6,re_7,psk_6,initiator_5) else caught-fail) in
        {656}let message_buffer_2: bitstring = (if v_216 then concat3(ne_6,ns_4,ciphertext_10) else caught-fail) in
        {657}let (hs_18: handshakestate,message_a_1: bitstring) = (if v_178 then (if v_180 then (if v_182 then (if v_183 then (if v_186 then (if v_194 then (if v_202 then (if v_216 then (hs_17,message_buffer_2) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {658}event SendMsg(me_1,them_1,stagepack_a(sid_2),msg_a(me_1,them_1,sid_2));
        {659}insert statestore(me_1,them_1,sid_2,statepack_b(hs_18));
        {660}out(pub, message_a_1)
    ) | (
        {818}get statestore(=me_1,=them_1,=sid_2,statepack_b(hs_19: handshakestate)) in
        {662}in(pub, message_b_1: bitstring);
        {663}let v_217: bitstring = catch-fail(handshakestateunpack(hs_19)) in
        {664}let v_218: bool = (not-caught-fail(v_217) && success?(1-proj-9-tuple(v_217))) in
        {665}let initiator_6: bool = (if v_218 then 9-proj-9-tuple(v_217) else caught-fail) in
        {666}let psk_7: key = (if v_218 then 8-proj-9-tuple(v_217) else caught-fail) in
        {667}let re_8: key = (if v_218 then 7-proj-9-tuple(v_217) else caught-fail) in
        {668}let rm_7: key = (if v_218 then 6-proj-9-tuple(v_217) else caught-fail) in
        {669}let rs_7: key = (if v_218 then 5-proj-9-tuple(v_217) else caught-fail) in
        {670}let e_12: keypair = (if v_218 then 4-proj-9-tuple(v_217) else caught-fail) in
        {671}let m_7: keypair = (if v_218 then 3-proj-9-tuple(v_217) else caught-fail) in
        {672}let s_7: keypair = (if v_218 then 2-proj-9-tuple(v_217) else caught-fail) in
        {673}let ss_37: symmetricstate = (if v_218 then 1-proj-9-tuple(v_217) else caught-fail) in
        {674}let v_219: bitstring = (if v_218 then catch-fail(deconcat3(message_b_1)) else caught-fail) in
        {675}let v_220: bool = (not-caught-fail(v_219) && success?(1-proj-3-tuple(v_219))) in
        {676}let ciphertext_11: bitstring = (if v_220 then 3-proj-3-tuple(v_219) else caught-fail) in
        {677}let ns_5: bitstring = (if v_220 then 2-proj-3-tuple(v_219) else caught-fail) in
        {678}let ne_7: bitstring = (if v_220 then 1-proj-3-tuple(v_219) else caught-fail) in
        {679}let valid1_2: bool = (if v_220 then true else caught-fail) in
        {680}let re_9: key = (if v_220 then ne_7 else caught-fail) in
        {681}let v_221: bitstring = (if v_220 then catch-fail(symmetricstateunpack(ss_37)) else caught-fail) in
        {682}let v_222: bool = (not-caught-fail(v_221) && success?(1-proj-3-tuple(v_221))) in
        {683}let h_33: bitstring = (if v_222 then 3-proj-3-tuple(v_221) else caught-fail) in
        {684}let ck_40: key = (if v_222 then 2-proj-3-tuple(v_221) else caught-fail) in
        {685}let cs_33: cipherstate = (if v_222 then 1-proj-3-tuple(v_221) else caught-fail) in
        {686}let ss_38: symmetricstate = (if v_220 then catch-fail((if v_222 then symmetricstatepack(cs_33,ck_40,hash(h_33,re_9)) else fail-any)) else caught-fail) in
        {687}let v_223: bool = not-caught-fail(ss_38) in
        {688}let v_224: bitstring = (if v_223 then catch-fail(keypairunpack(e_12)) else caught-fail) in
        {689}let v_225: bool = (not-caught-fail(v_224) && success?(1-proj-2-tuple(v_224))) in
        {690}let my_private_key_7: key = (if v_225 then 2-proj-2-tuple(v_224) else caught-fail) in
        {691}let my_public_key_7: key = (if v_225 then 1-proj-2-tuple(v_224) else caught-fail) in
        {692}let input_key_material_8: key = (if v_223 then catch-fail((if v_225 then dhexp(my_private_key_7,re_9) else fail-any)) else caught-fail) in
        {693}let v_226: bool = not-caught-fail(input_key_material_8) in
        {694}let v_227: bitstring = (if v_226 then catch-fail(symmetricstateunpack(ss_38)) else caught-fail) in
        {695}let v_228: bool = (not-caught-fail(v_227) && success?(1-proj-3-tuple(v_227))) in
        {696}let h_34: bitstring = (if v_228 then 3-proj-3-tuple(v_227) else caught-fail) in
        {697}let ck_41: key = (if v_228 then 2-proj-3-tuple(v_227) else caught-fail) in
        {698}let cs_34: cipherstate = (if v_228 then 1-proj-3-tuple(v_227) else caught-fail) in
        {699}let output1_8: key = (if v_228 then hmac_hash1(ck_41,input_key_material_8) else caught-fail) in
        {700}let output2_8: key = (if v_228 then hmac_hash2(ck_41,input_key_material_8) else caught-fail) in
        {701}let output3_8: key = (if v_228 then hmac_hash3(ck_41,input_key_material_8) else caught-fail) in
        {702}let v_229: bitstring = (if v_228 then catch-fail((output1_8,output2_8,output3_8)) else caught-fail) in
        {703}let v_230: bool = (not-caught-fail(v_229) && success?(1-proj-3-tuple(v_229))) in
        {704}let output_7: key = (if v_230 then 3-proj-3-tuple(v_229) else caught-fail) in
        {705}let temp_k_7: key = (if v_230 then 2-proj-3-tuple(v_229) else caught-fail) in
        {706}let ck_42: key = (if v_230 then 1-proj-3-tuple(v_229) else caught-fail) in
        {707}let ss_39: symmetricstate = (if v_223 then catch-fail((if v_226 then (if v_228 then (if v_230 then symmetricstatepack(cipherstatepack(temp_k_7,minnonce),ck_42,h_34) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {708}let v_231: bool = not-caught-fail(ss_39) in
        {709}let v_232: bitstring = (if v_231 then catch-fail(keypairunpack(s_7)) else caught-fail) in
        {710}let v_233: bool = (not-caught-fail(v_232) && success?(1-proj-2-tuple(v_232))) in
        {711}let my_private_key_8: key = (if v_233 then 2-proj-2-tuple(v_232) else caught-fail) in
        {712}let my_public_key_8: key = (if v_233 then 1-proj-2-tuple(v_232) else caught-fail) in
        {713}let input_key_material_9: key = (if v_231 then catch-fail((if v_233 then dhexp(my_private_key_8,re_9) else fail-any)) else caught-fail) in
        {714}let v_234: bool = not-caught-fail(input_key_material_9) in
        {715}let v_235: bitstring = (if v_234 then catch-fail(symmetricstateunpack(ss_39)) else caught-fail) in
        {716}let v_236: bool = (not-caught-fail(v_235) && success?(1-proj-3-tuple(v_235))) in
        {717}let h_35: bitstring = (if v_236 then 3-proj-3-tuple(v_235) else caught-fail) in
        {718}let ck_43: key = (if v_236 then 2-proj-3-tuple(v_235) else caught-fail) in
        {719}let cs_35: cipherstate = (if v_236 then 1-proj-3-tuple(v_235) else caught-fail) in
        {720}let output1_9: key = (if v_236 then hmac_hash1(ck_43,input_key_material_9) else caught-fail) in
        {721}let output2_9: key = (if v_236 then hmac_hash2(ck_43,input_key_material_9) else caught-fail) in
        {722}let output3_9: key = (if v_236 then hmac_hash3(ck_43,input_key_material_9) else caught-fail) in
        {723}let v_237: bitstring = (if v_236 then catch-fail((output1_9,output2_9,output3_9)) else caught-fail) in
        {724}let v_238: bool = (not-caught-fail(v_237) && success?(1-proj-3-tuple(v_237))) in
        {725}let output_8: key = (if v_238 then 3-proj-3-tuple(v_237) else caught-fail) in
        {726}let temp_k_8: key = (if v_238 then 2-proj-3-tuple(v_237) else caught-fail) in
        {727}let ck_44: key = (if v_238 then 1-proj-3-tuple(v_237) else caught-fail) in
        {728}let ss_40: symmetricstate = (if v_231 then catch-fail((if v_234 then (if v_236 then (if v_238 then symmetricstatepack(cipherstatepack(temp_k_8,minnonce),ck_44,h_35) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {729}let v_239: bool = not-caught-fail(ss_40) in
        {730}let v_240: bitstring = (if v_239 then catch-fail(keypairunpack(m_7)) else caught-fail) in
        {731}let v_241: bool = (not-caught-fail(v_240) && success?(1-proj-2-tuple(v_240))) in
        {732}let my_private_key_9: key = (if v_241 then 2-proj-2-tuple(v_240) else caught-fail) in
        {733}let my_public_key_9: key = (if v_241 then 1-proj-2-tuple(v_240) else caught-fail) in
        {734}let input_key_material_10: key = (if v_239 then catch-fail((if v_241 then dhexp(my_private_key_9,re_9) else fail-any)) else caught-fail) in
        {735}let v_242: bool = not-caught-fail(input_key_material_10) in
        {736}let v_243: bitstring = (if v_242 then catch-fail(symmetricstateunpack(ss_40)) else caught-fail) in
        {737}let v_244: bool = (not-caught-fail(v_243) && success?(1-proj-3-tuple(v_243))) in
        {738}let h_36: bitstring = (if v_244 then 3-proj-3-tuple(v_243) else caught-fail) in
        {739}let ck_45: key = (if v_244 then 2-proj-3-tuple(v_243) else caught-fail) in
        {740}let cs_36: cipherstate = (if v_244 then 1-proj-3-tuple(v_243) else caught-fail) in
        {741}let output1_10: key = (if v_244 then hmac_hash1(ck_45,input_key_material_10) else caught-fail) in
        {742}let output2_10: key = (if v_244 then hmac_hash2(ck_45,input_key_material_10) else caught-fail) in
        {743}let output3_10: key = (if v_244 then hmac_hash3(ck_45,input_key_material_10) else caught-fail) in
        {744}let v_245: bitstring = (if v_244 then catch-fail((output1_10,output2_10,output3_10)) else caught-fail) in
        {745}let v_246: bool = (not-caught-fail(v_245) && success?(1-proj-3-tuple(v_245))) in
        {746}let output_9: key = (if v_246 then 3-proj-3-tuple(v_245) else caught-fail) in
        {747}let temp_k_9: key = (if v_246 then 2-proj-3-tuple(v_245) else caught-fail) in
        {748}let ck_46: key = (if v_246 then 1-proj-3-tuple(v_245) else caught-fail) in
        {749}let ss_41: symmetricstate = (if v_239 then catch-fail((if v_242 then (if v_244 then (if v_246 then symmetricstatepack(cipherstatepack(temp_k_9,minnonce),ck_46,h_36) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {750}let v_247: bool = not-caught-fail(ss_41) in
        {751}let v_248: bitstring = (if v_247 then catch-fail(symmetricstateunpack(ss_41)) else caught-fail) in
        {752}let v_249: bool = (not-caught-fail(v_248) && success?(1-proj-3-tuple(v_248))) in
        {753}let h_37: bitstring = (if v_249 then 3-proj-3-tuple(v_248) else caught-fail) in
        {754}let ck_47: key = (if v_249 then 2-proj-3-tuple(v_248) else caught-fail) in
        {755}let cs_37: cipherstate = (if v_249 then 1-proj-3-tuple(v_248) else caught-fail) in
        {756}let v_250: bitstring = (if v_249 then catch-fail(cipherstateunpack(cs_37)) else caught-fail) in
        {757}let v_251: bool = (not-caught-fail(v_250) && success?(1-proj-2-tuple(v_250))) in
        {758}let n_10: nonce = (if v_251 then 2-proj-2-tuple(v_250) else caught-fail) in
        {759}let k_12: key = (if v_251 then 1-proj-2-tuple(v_250) else caught-fail) in
        {760}let d_2: aead = (if v_251 then catch-fail(decrypt(k_12,n_10,h_37,ciphertext_11)) else caught-fail) in
        {761}let v_252: bool = not-caught-fail(d_2) in
        {762}let v_253: bitstring = (if v_252 then catch-fail(aeadunpack(d_2)) else caught-fail) in
        {763}let v_254: bool = (not-caught-fail(v_253) && success?(1-proj-3-tuple(v_253))) in
        {764}let plaintext_6: bitstring = (if v_254 then 3-proj-3-tuple(v_253) else caught-fail) in
        {765}let adi_2: bitstring = (if v_254 then 2-proj-3-tuple(v_253) else caught-fail) in
        {766}let valid_6: bool = (if v_254 then 1-proj-3-tuple(v_253) else caught-fail) in
        {767}let n_11: nonce = (if v_254 then increment_nonce(n_10) else caught-fail) in
        {768}let v_255: bitstring = (if v_254 then catch-fail(cipherstateunpack(cs_37)) else caught-fail) in
        {769}let v_256: bool = (not-caught-fail(v_255) && success?(1-proj-2-tuple(v_255))) in
        {770}let o_5: nonce = (if v_256 then 2-proj-2-tuple(v_255) else caught-fail) in
        {771}let k_13: key = (if v_256 then 1-proj-2-tuple(v_255) else caught-fail) in
        {772}let csi_10: cipherstate = (if v_254 then catch-fail((if v_256 then cipherstatepack(k_13,n_11) else fail-any)) else caught-fail) in
        {773}let v_257: bool = not-caught-fail(csi_10) in
        {774}let v_258: bitstring = (if v_249 then catch-fail((if v_251 then (if v_252 then (if v_254 then (if v_257 then (csi_10,plaintext_6,valid_6) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {775}let v_259: bool = (not-caught-fail(v_258) && success?(1-proj-3-tuple(v_258))) in
        {776}let valid_7: bool = (if v_259 then 3-proj-3-tuple(v_258) else caught-fail) in
        {777}let plaintext_7: bitstring = (if v_259 then 2-proj-3-tuple(v_258) else caught-fail) in
        {778}let csi_11: cipherstate = (if v_259 then 1-proj-3-tuple(v_258) else caught-fail) in
        {779}let ss_42: symmetricstate = (if v_259 then symmetricstatepack(csi_11,ck_47,h_37) else caught-fail) in
        {780}let v_260: bitstring = (if v_259 then catch-fail(symmetricstateunpack(ss_42)) else caught-fail) in
        {781}let v_261: bool = (not-caught-fail(v_260) && success?(1-proj-3-tuple(v_260))) in
        {782}let h_38: bitstring = (if v_261 then 3-proj-3-tuple(v_260) else caught-fail) in
        {783}let ck_48: key = (if v_261 then 2-proj-3-tuple(v_260) else caught-fail) in
        {784}let cs_38: cipherstate = (if v_261 then 1-proj-3-tuple(v_260) else caught-fail) in
        {785}let ssi_6: symmetricstate = (if v_259 then catch-fail((if v_261 then symmetricstatepack(cs_38,ck_48,hash(h_38,ciphertext_11)) else fail-any)) else caught-fail) in
        {786}let v_262: bool = not-caught-fail(ssi_6) in
        {787}let v_263: bitstring = (if v_247 then catch-fail((if v_249 then (if v_259 then (if v_262 then (ssi_6,plaintext_7,valid_7) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {788}let v_264: bool = (not-caught-fail(v_263) && success?(1-proj-3-tuple(v_263))) in
        {789}let valid2_2: bool = (if v_264 then 3-proj-3-tuple(v_263) else caught-fail) in
        {790}let plaintext_8: bitstring = (if v_264 then 2-proj-3-tuple(v_263) else caught-fail) in
        {791}let ss_43: symmetricstate = (if v_264 then 1-proj-3-tuple(v_263) else caught-fail) in
        {792}let v_265: bool = (if v_264 then catch-fail((valid1_2 && valid2_2)) else caught-fail) in
        {793}let hs_20: handshakestate = (if v_265 then handshakestatepack(ss_43,s_7,m_7,e_12,rs_7,rm_7,re_9,psk_7,initiator_6) else caught-fail) in
        {794}let v_266: bitstring = (if v_265 then catch-fail(symmetricstateunpack(ss_43)) else caught-fail) in
        {795}let v_267: bool = (not-caught-fail(v_266) && success?(1-proj-3-tuple(v_266))) in
        {796}let h_39: bitstring = (if v_267 then 3-proj-3-tuple(v_266) else caught-fail) in
        {797}let ck_49: key = (if v_267 then 2-proj-3-tuple(v_266) else caught-fail) in
        {798}let cs_39: cipherstate = (if v_267 then 1-proj-3-tuple(v_266) else caught-fail) in
        {799}let input_key_material_11: key = (if v_267 then zero else caught-fail) in
        {800}let output1_11: key = (if v_267 then hmac_hash1(ck_49,input_key_material_11) else caught-fail) in
        {801}let output2_11: key = (if v_267 then hmac_hash2(ck_49,input_key_material_11) else caught-fail) in
        {802}let output3_11: key = (if v_267 then hmac_hash3(ck_49,input_key_material_11) else caught-fail) in
        {803}let v_268: bitstring = (if v_267 then catch-fail((output1_11,output2_11,output3_11)) else caught-fail) in
        {804}let v_269: bool = (not-caught-fail(v_268) && success?(1-proj-3-tuple(v_268))) in
        {805}let temp_k3_1: key = (if v_269 then 3-proj-3-tuple(v_268) else caught-fail) in
        {806}let temp_k2_1: key = (if v_269 then 2-proj-3-tuple(v_268) else caught-fail) in
        {807}let temp_k1_1: key = (if v_269 then 1-proj-3-tuple(v_268) else caught-fail) in
        {808}let cs1_5: cipherstate = (if v_269 then cipherstatepack(temp_k1_1,minnonce) else caught-fail) in
        {809}let cs2_5: cipherstate = (if v_269 then cipherstatepack(temp_k2_1,minnonce) else caught-fail) in
        {810}let v_270: bitstring = (if v_265 then catch-fail((if v_267 then (if v_269 then (ss_43,cs1_5,cs2_5) else fail-any) else fail-any)) else caught-fail) in
        {811}let v_271: bool = (not-caught-fail(v_270) && success?(1-proj-3-tuple(v_270))) in
        {812}let cs2_6: cipherstate = (if v_271 then 3-proj-3-tuple(v_270) else caught-fail) in
        {813}let cs1_6: cipherstate = (if v_271 then 2-proj-3-tuple(v_270) else caught-fail) in
        {814}let ssi_7: symmetricstate = (if v_271 then 1-proj-3-tuple(v_270) else caught-fail) in
        {815}let (hs_21: handshakestate,plaintext_b_1: bitstring,valid_8: bool,cs1_7: cipherstate,cs2_7: cipherstate) = (if v_218 then (if v_220 then (if v_223 then (if v_231 then (if v_239 then (if v_247 then (if v_264 then (if undo-catch-fail(v_265) then (if v_271 then (hs_20,plaintext_8,true,cs1_6,cs2_6) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {816}event RecvMsg(me_1,them_1,stagepack_b(sid_2),plaintext_b_1);
        {817}insert statestore(me_1,them_1,sid_2,statepack_c(hs_21,cs1_7,cs2_7))
    ) | (
        {819}!
        {877}get statestore(=me_1,=them_1,=sid_2,statepack_c(hs_22: handshakestate,cs1_8: cipherstate,cs2_8: cipherstate)) in
        {820}let hs_23: handshakestate = handshakestatesetcs(hs_22,cs1_8) in
        {821}let payload_3: bitstring = msg_c(me_1,them_1,sid_2) in
        {822}let v_272: bitstring = catch-fail(handshakestateunpack(hs_23)) in
        {823}let v_273: bool = (not-caught-fail(v_272) && success?(1-proj-9-tuple(v_272))) in
        {824}let initiator_7: bool = (if v_273 then 9-proj-9-tuple(v_272) else caught-fail) in
        {825}let psk_8: key = (if v_273 then 8-proj-9-tuple(v_272) else caught-fail) in
        {826}let re_10: key = (if v_273 then 7-proj-9-tuple(v_272) else caught-fail) in
        {827}let rm_8: key = (if v_273 then 6-proj-9-tuple(v_272) else caught-fail) in
        {828}let rs_8: key = (if v_273 then 5-proj-9-tuple(v_272) else caught-fail) in
        {829}let e_13: keypair = (if v_273 then 4-proj-9-tuple(v_272) else caught-fail) in
        {830}let m_8: keypair = (if v_273 then 3-proj-9-tuple(v_272) else caught-fail) in
        {831}let s_8: keypair = (if v_273 then 2-proj-9-tuple(v_272) else caught-fail) in
        {832}let ss_44: symmetricstate = (if v_273 then 1-proj-9-tuple(v_272) else caught-fail) in
        {833}let v_274: bitstring = (if v_273 then catch-fail((empty,empty,empty)) else caught-fail) in
        {834}let v_275: bool = (not-caught-fail(v_274) && success?(1-proj-3-tuple(v_274))) in
        {835}let ciphertext_12: bitstring = (if v_275 then 3-proj-3-tuple(v_274) else caught-fail) in
        {836}let ns_6: bitstring = (if v_275 then 2-proj-3-tuple(v_274) else caught-fail) in
        {837}let ne_8: bitstring = (if v_275 then 1-proj-3-tuple(v_274) else caught-fail) in
        {838}let v_276: bitstring = (if v_275 then catch-fail(symmetricstateunpack(ss_44)) else caught-fail) in
        {839}let v_277: bool = (not-caught-fail(v_276) && success?(1-proj-3-tuple(v_276))) in
        {840}let h_40: bitstring = (if v_277 then 3-proj-3-tuple(v_276) else caught-fail) in
        {841}let ck_50: key = (if v_277 then 2-proj-3-tuple(v_276) else caught-fail) in
        {842}let cs_40: cipherstate = (if v_277 then 1-proj-3-tuple(v_276) else caught-fail) in
        {843}let v_278: bitstring = (if v_277 then catch-fail(cipherstateunpack(cs_40)) else caught-fail) in
        {844}let v_279: bool = (not-caught-fail(v_278) && success?(1-proj-2-tuple(v_278))) in
        {845}let n_12: nonce = (if v_279 then 2-proj-2-tuple(v_278) else caught-fail) in
        {846}let k_14: key = (if v_279 then 1-proj-2-tuple(v_278) else caught-fail) in
        {847}let e_14: bitstring = (if v_279 then encrypt(k_14,n_12,h_40,payload_3) else caught-fail) in
        {848}let n_13: nonce = (if v_279 then increment_nonce(n_12) else caught-fail) in
        {849}let v_280: bitstring = (if v_279 then catch-fail(cipherstateunpack(cs_40)) else caught-fail) in
        {850}let v_281: bool = (not-caught-fail(v_280) && success?(1-proj-2-tuple(v_280))) in
        {851}let o_6: nonce = (if v_281 then 2-proj-2-tuple(v_280) else caught-fail) in
        {852}let k_15: key = (if v_281 then 1-proj-2-tuple(v_280) else caught-fail) in
        {853}let csi_12: cipherstate = (if v_279 then catch-fail((if v_281 then cipherstatepack(k_15,n_13) else fail-any)) else caught-fail) in
        {854}let v_282: bool = not-caught-fail(csi_12) in
        {855}let v_283: bitstring = (if v_277 then catch-fail((if v_279 then (if v_282 then (csi_12,e_14) else fail-any) else fail-any)) else caught-fail) in
        {856}let v_284: bool = (not-caught-fail(v_283) && success?(1-proj-2-tuple(v_283))) in
        {857}let ciphertext_13: bitstring = (if v_284 then 2-proj-2-tuple(v_283) else caught-fail) in
        {858}let csi_13: cipherstate = (if v_284 then 1-proj-2-tuple(v_283) else caught-fail) in
        {859}let ss_45: symmetricstate = (if v_284 then symmetricstatepack(csi_13,ck_50,h_40) else caught-fail) in
        {860}let v_285: bitstring = (if v_284 then catch-fail(symmetricstateunpack(ss_45)) else caught-fail) in
        {861}let v_286: bool = (not-caught-fail(v_285) && success?(1-proj-3-tuple(v_285))) in
        {862}let h_41: bitstring = (if v_286 then 3-proj-3-tuple(v_285) else caught-fail) in
        {863}let ck_51: key = (if v_286 then 2-proj-3-tuple(v_285) else caught-fail) in
        {864}let cs_41: cipherstate = (if v_286 then 1-proj-3-tuple(v_285) else caught-fail) in
        {865}let ssi_8: symmetricstate = (if v_284 then catch-fail((if v_286 then symmetricstatepack(cs_41,ck_51,hash(h_41,ciphertext_13)) else fail-any)) else caught-fail) in
        {866}let v_287: bool = not-caught-fail(ssi_8) in
        {867}let v_288: bitstring = (if v_275 then catch-fail((if v_277 then (if v_284 then (if v_287 then (ssi_8,ciphertext_13) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {868}let v_289: bool = (not-caught-fail(v_288) && success?(1-proj-2-tuple(v_288))) in
        {869}let ciphertext_14: bitstring = (if v_289 then 2-proj-2-tuple(v_288) else caught-fail) in
        {870}let ss_46: symmetricstate = (if v_289 then 1-proj-2-tuple(v_288) else caught-fail) in
        {871}let hs_24: handshakestate = (if v_289 then handshakestatepack(ss_46,s_8,m_8,e_13,rs_8,rm_8,re_10,psk_8,initiator_7) else caught-fail) in
        {872}let message_buffer_3: bitstring = (if v_289 then concat3(ne_8,ns_6,ciphertext_14) else caught-fail) in
        {873}let (hs_25: handshakestate,message_c_1: bitstring) = (if v_273 then (if v_275 then (if v_289 then (hs_24,message_buffer_3) else fail-any) else fail-any) else fail-any) in
        {874}event SendMsg(me_1,them_1,stagepack_c(sid_2),msg_c(me_1,them_1,sid_2));
        {875}insert statestore(me_1,them_1,sid_2,statepack_d(hs_25,handshakestategetcs(hs_25),cs2_8));
        {876}out(pub, message_c_1)
    ) | (
        {878}!
        {944}get statestore(=me_1,=them_1,=sid_2,statepack_d(hs_26: handshakestate,cs1_9: cipherstate,cs2_9: cipherstate)) in
        {879}let hs_27: handshakestate = handshakestatesetcs(hs_26,cs2_9) in
        {880}in(pub, message_d_1: bitstring);
        {881}let v_290: bitstring = catch-fail(handshakestateunpack(hs_27)) in
        {882}let v_291: bool = (not-caught-fail(v_290) && success?(1-proj-9-tuple(v_290))) in
        {883}let initiator_8: bool = (if v_291 then 9-proj-9-tuple(v_290) else caught-fail) in
        {884}let psk_9: key = (if v_291 then 8-proj-9-tuple(v_290) else caught-fail) in
        {885}let re_11: key = (if v_291 then 7-proj-9-tuple(v_290) else caught-fail) in
        {886}let rm_9: key = (if v_291 then 6-proj-9-tuple(v_290) else caught-fail) in
        {887}let rs_9: key = (if v_291 then 5-proj-9-tuple(v_290) else caught-fail) in
        {888}let e_15: keypair = (if v_291 then 4-proj-9-tuple(v_290) else caught-fail) in
        {889}let m_9: keypair = (if v_291 then 3-proj-9-tuple(v_290) else caught-fail) in
        {890}let s_9: keypair = (if v_291 then 2-proj-9-tuple(v_290) else caught-fail) in
        {891}let ss_47: symmetricstate = (if v_291 then 1-proj-9-tuple(v_290) else caught-fail) in
        {892}let v_292: bitstring = (if v_291 then catch-fail(deconcat3(message_d_1)) else caught-fail) in
        {893}let v_293: bool = (not-caught-fail(v_292) && success?(1-proj-3-tuple(v_292))) in
        {894}let ciphertext_15: bitstring = (if v_293 then 3-proj-3-tuple(v_292) else caught-fail) in
        {895}let ns_7: bitstring = (if v_293 then 2-proj-3-tuple(v_292) else caught-fail) in
        {896}let ne_9: bitstring = (if v_293 then 1-proj-3-tuple(v_292) else caught-fail) in
        {897}let valid1_3: bool = (if v_293 then true else caught-fail) in
        {898}let v_294: bitstring = (if v_293 then catch-fail(symmetricstateunpack(ss_47)) else caught-fail) in
        {899}let v_295: bool = (not-caught-fail(v_294) && success?(1-proj-3-tuple(v_294))) in
        {900}let h_42: bitstring = (if v_295 then 3-proj-3-tuple(v_294) else caught-fail) in
        {901}let ck_52: key = (if v_295 then 2-proj-3-tuple(v_294) else caught-fail) in
        {902}let cs_42: cipherstate = (if v_295 then 1-proj-3-tuple(v_294) else caught-fail) in
        {903}let v_296: bitstring = (if v_295 then catch-fail(cipherstateunpack(cs_42)) else caught-fail) in
        {904}let v_297: bool = (not-caught-fail(v_296) && success?(1-proj-2-tuple(v_296))) in
        {905}let n_14: nonce = (if v_297 then 2-proj-2-tuple(v_296) else caught-fail) in
        {906}let k_16: key = (if v_297 then 1-proj-2-tuple(v_296) else caught-fail) in
        {907}let d_3: aead = (if v_297 then catch-fail(decrypt(k_16,n_14,h_42,ciphertext_15)) else caught-fail) in
        {908}let v_298: bool = not-caught-fail(d_3) in
        {909}let v_299: bitstring = (if v_298 then catch-fail(aeadunpack(d_3)) else caught-fail) in
        {910}let v_300: bool = (not-caught-fail(v_299) && success?(1-proj-3-tuple(v_299))) in
        {911}let plaintext_9: bitstring = (if v_300 then 3-proj-3-tuple(v_299) else caught-fail) in
        {912}let adi_3: bitstring = (if v_300 then 2-proj-3-tuple(v_299) else caught-fail) in
        {913}let valid_9: bool = (if v_300 then 1-proj-3-tuple(v_299) else caught-fail) in
        {914}let n_15: nonce = (if v_300 then increment_nonce(n_14) else caught-fail) in
        {915}let v_301: bitstring = (if v_300 then catch-fail(cipherstateunpack(cs_42)) else caught-fail) in
        {916}let v_302: bool = (not-caught-fail(v_301) && success?(1-proj-2-tuple(v_301))) in
        {917}let o_7: nonce = (if v_302 then 2-proj-2-tuple(v_301) else caught-fail) in
        {918}let k_17: key = (if v_302 then 1-proj-2-tuple(v_301) else caught-fail) in
        {919}let csi_14: cipherstate = (if v_300 then catch-fail((if v_302 then cipherstatepack(k_17,n_15) else fail-any)) else caught-fail) in
        {920}let v_303: bool = not-caught-fail(csi_14) in
        {921}let v_304: bitstring = (if v_295 then catch-fail((if v_297 then (if v_298 then (if v_300 then (if v_303 then (csi_14,plaintext_9,valid_9) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {922}let v_305: bool = (not-caught-fail(v_304) && success?(1-proj-3-tuple(v_304))) in
        {923}let valid_10: bool = (if v_305 then 3-proj-3-tuple(v_304) else caught-fail) in
        {924}let plaintext_10: bitstring = (if v_305 then 2-proj-3-tuple(v_304) else caught-fail) in
        {925}let csi_15: cipherstate = (if v_305 then 1-proj-3-tuple(v_304) else caught-fail) in
        {926}let ss_48: symmetricstate = (if v_305 then symmetricstatepack(csi_15,ck_52,h_42) else caught-fail) in
        {927}let v_306: bitstring = (if v_305 then catch-fail(symmetricstateunpack(ss_48)) else caught-fail) in
        {928}let v_307: bool = (not-caught-fail(v_306) && success?(1-proj-3-tuple(v_306))) in
        {929}let h_43: bitstring = (if v_307 then 3-proj-3-tuple(v_306) else caught-fail) in
        {930}let ck_53: key = (if v_307 then 2-proj-3-tuple(v_306) else caught-fail) in
        {931}let cs_43: cipherstate = (if v_307 then 1-proj-3-tuple(v_306) else caught-fail) in
        {932}let ssi_9: symmetricstate = (if v_305 then catch-fail((if v_307 then symmetricstatepack(cs_43,ck_53,hash(h_43,ciphertext_15)) else fail-any)) else caught-fail) in
        {933}let v_308: bool = not-caught-fail(ssi_9) in
        {934}let v_309: bitstring = (if v_293 then catch-fail((if v_295 then (if v_305 then (if v_308 then (ssi_9,plaintext_10,valid_10) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {935}let v_310: bool = (not-caught-fail(v_309) && success?(1-proj-3-tuple(v_309))) in
        {936}let valid2_3: bool = (if v_310 then 3-proj-3-tuple(v_309) else caught-fail) in
        {937}let plaintext_11: bitstring = (if v_310 then 2-proj-3-tuple(v_309) else caught-fail) in
        {938}let ss_49: symmetricstate = (if v_310 then 1-proj-3-tuple(v_309) else caught-fail) in
        {939}let v_311: bool = (if v_310 then catch-fail((valid1_3 && valid2_3)) else caught-fail) in
        {940}let hs_28: handshakestate = (if v_311 then handshakestatepack(ss_49,s_9,m_9,e_15,rs_9,rm_9,re_11,psk_9,initiator_8) else caught-fail) in
        {941}let (hs_29: handshakestate,plaintext_d_1: bitstring,valid_11: bool) = (if v_291 then (if v_293 then (if v_310 then (if undo-catch-fail(v_311) then (hs_28,plaintext_11,true) else fail-any) else fail-any) else fail-any) else fail-any) in
        {942}event RecvMsg(me_1,them_1,stagepack_d(sid_2),plaintext_d_1);
        {943}event RecvEnd(valid_11)
    ) | (
        {945}event LeakS(phase0,me_1);
        {946}event LeakM(phase0,me_1);
        {947}out(pub, (key_s(me_1),key_m(me_1)))
    ) | (
        {948}phase 1;
        {949}event LeakS(phase1,me_1);
        {950}event LeakM(phase1,me_1);
        {951}out(pub, (key_s(me_1),key_m(me_1)))
    )
) | (
    {952}let me_2: principal = bob in
    {953}let them_2: principal = alice in
    {954}let sid_3: sessionid = sid in
    {955}let basis_10: key = key_s(me_2) in
    {956}let public_key_10: key = catch-fail(dhexp(basis_10,validkey(g))) in
    {957}let v_312: bool = not-caught-fail(public_key_10) in
    {958}let s_10: keypair = (if v_312 then keypairpack(validkey(public_key_10),basis_10) else fail-any) in
    {959}let basis_11: key = key_m(me_2) in
    {960}let public_key_11: key = catch-fail(dhexp(basis_11,validkey(g))) in
    {961}let v_313: bool = not-caught-fail(public_key_11) in
    {962}let m_10: keypair = (if v_313 then keypairpack(validkey(public_key_11),basis_11) else fail-any) in
    {963}out(pub, (getpublickey(s_10),getpublickey(m_10)));
    (
        {964}let e_16: keypair = keypairpack(empty,empty) in
        {965}let basis_12: key = key_s(them_2) in
        {966}let public_key_12: key = catch-fail(dhexp(basis_12,validkey(g))) in
        {967}let v_314: bool = not-caught-fail(public_key_12) in
        {968}let rs_10: key = getpublickey((if v_314 then keypairpack(validkey(public_key_12),basis_12) else fail-any)) in
        {969}let basis_13: key = key_m(them_2) in
        {970}let public_key_13: key = catch-fail(dhexp(basis_13,validkey(g))) in
        {971}let v_315: bool = not-caught-fail(public_key_13) in
        {972}let rm_10: key = getpublickey((if v_315 then keypairpack(validkey(public_key_13),basis_13) else fail-any)) in
        {973}let re_12: key = empty in
        {974}let prologue_2: bitstring = empty in
        {975}let psk_10: key = empty in
        {976}let protocol_name_2: bitstring = somename in
        {977}let h_44: bitstring = hash(protocol_name_2,empty) in
        {978}let ck_54: key = h_44 in
        {979}let k_18: key = empty in
        {980}let cs_44: cipherstate = cipherstatepack(k_18,minnonce) in
        {981}let ss_50: symmetricstate = symmetricstatepack(cs_44,ck_54,h_44) in
        {982}let v_316: bitstring = catch-fail(symmetricstateunpack(ss_50)) in
        {983}let v_317: bool = (not-caught-fail(v_316) && success?(1-proj-3-tuple(v_316))) in
        {984}let h_45: bitstring = (if v_317 then 3-proj-3-tuple(v_316) else caught-fail) in
        {985}let ck_55: key = (if v_317 then 2-proj-3-tuple(v_316) else caught-fail) in
        {986}let cs_45: cipherstate = (if v_317 then 1-proj-3-tuple(v_316) else caught-fail) in
        {987}let ss_51: symmetricstate = catch-fail((if v_317 then symmetricstatepack(cs_45,ck_55,hash(h_45,prologue_2)) else fail-any)) in
        {988}let v_318: bool = not-caught-fail(ss_51) in
        {989}let v_319: bitstring = (if v_318 then catch-fail(symmetricstateunpack(ss_51)) else caught-fail) in
        {990}let v_320: bool = (not-caught-fail(v_319) && success?(1-proj-3-tuple(v_319))) in
        {991}let h_46: bitstring = (if v_320 then 3-proj-3-tuple(v_319) else caught-fail) in
        {992}let ck_56: key = (if v_320 then 2-proj-3-tuple(v_319) else caught-fail) in
        {993}let cs_46: cipherstate = (if v_320 then 1-proj-3-tuple(v_319) else caught-fail) in
        {994}let ss_52: symmetricstate = (if v_318 then catch-fail((if v_320 then symmetricstatepack(cs_46,ck_56,hash(h_46,rs_10)) else fail-any)) else caught-fail) in
        {995}let v_321: bool = not-caught-fail(ss_52) in
        {996}let v_322: bitstring = (if v_321 then catch-fail(symmetricstateunpack(ss_52)) else caught-fail) in
        {997}let v_323: bool = (not-caught-fail(v_322) && success?(1-proj-3-tuple(v_322))) in
        {998}let h_47: bitstring = (if v_323 then 3-proj-3-tuple(v_322) else caught-fail) in
        {999}let ck_57: key = (if v_323 then 2-proj-3-tuple(v_322) else caught-fail) in
        {1000}let cs_47: cipherstate = (if v_323 then 1-proj-3-tuple(v_322) else caught-fail) in
        {1001}let ss_53: symmetricstate = (if v_321 then catch-fail((if v_323 then symmetricstatepack(cs_47,ck_57,hash(h_47,rm_10)) else fail-any)) else caught-fail) in
        {1002}let v_324: bool = not-caught-fail(ss_53) in
        {1003}let data_4: bitstring = (if v_324 then catch-fail(getpublickey(s_10)) else caught-fail) in
        {1004}let v_325: bool = not-caught-fail(data_4) in
        {1005}let v_326: bitstring = (if v_325 then catch-fail(symmetricstateunpack(ss_53)) else caught-fail) in
        {1006}let v_327: bool = (not-caught-fail(v_326) && success?(1-proj-3-tuple(v_326))) in
        {1007}let h_48: bitstring = (if v_327 then 3-proj-3-tuple(v_326) else caught-fail) in
        {1008}let ck_58: key = (if v_327 then 2-proj-3-tuple(v_326) else caught-fail) in
        {1009}let cs_48: cipherstate = (if v_327 then 1-proj-3-tuple(v_326) else caught-fail) in
        {1010}let ss_54: symmetricstate = (if v_324 then catch-fail((if v_325 then (if v_327 then symmetricstatepack(cs_48,ck_58,hash(h_48,data_4)) else fail-any) else fail-any)) else caught-fail) in
        {1011}let v_328: bool = not-caught-fail(ss_54) in
        {1012}let data_5: bitstring = (if v_328 then catch-fail(getpublickey(m_10)) else caught-fail) in
        {1013}let v_329: bool = not-caught-fail(data_5) in
        {1014}let v_330: bitstring = (if v_329 then catch-fail(symmetricstateunpack(ss_54)) else caught-fail) in
        {1015}let v_331: bool = (not-caught-fail(v_330) && success?(1-proj-3-tuple(v_330))) in
        {1016}let h_49: bitstring = (if v_331 then 3-proj-3-tuple(v_330) else caught-fail) in
        {1017}let ck_59: key = (if v_331 then 2-proj-3-tuple(v_330) else caught-fail) in
        {1018}let cs_49: cipherstate = (if v_331 then 1-proj-3-tuple(v_330) else caught-fail) in
        {1019}let ss_55: symmetricstate = (if v_328 then catch-fail((if v_329 then (if v_331 then symmetricstatepack(cs_49,ck_59,hash(h_49,data_5)) else fail-any) else fail-any)) else caught-fail) in
        {1020}let v_332: bool = not-caught-fail(ss_55) in
        {1021}let hs_30: handshakestate = (if v_318 then (if v_321 then (if v_324 then (if v_328 then (if v_332 then handshakestatepack(ss_55,s_10,m_10,e_16,rs_10,rm_10,re_12,psk_10,false) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1022}insert statestore(me_2,them_2,sid_3,statepack_a(hs_30))
    ) | (
        {1137}get statestore(=me_2,=them_2,=sid_3,statepack_a(hs_31: handshakestate)) in
        {1023}in(pub, message_a_2: bitstring);
        {1024}let v_333: bitstring = catch-fail(handshakestateunpack(hs_31)) in
        {1025}let v_334: bool = (not-caught-fail(v_333) && success?(1-proj-9-tuple(v_333))) in
        {1026}let initiator_9: bool = (if v_334 then 9-proj-9-tuple(v_333) else caught-fail) in
        {1027}let psk_11: key = (if v_334 then 8-proj-9-tuple(v_333) else caught-fail) in
        {1028}let re_13: key = (if v_334 then 7-proj-9-tuple(v_333) else caught-fail) in
        {1029}let rm_11: key = (if v_334 then 6-proj-9-tuple(v_333) else caught-fail) in
        {1030}let rs_11: key = (if v_334 then 5-proj-9-tuple(v_333) else caught-fail) in
        {1031}let e_17: keypair = (if v_334 then 4-proj-9-tuple(v_333) else caught-fail) in
        {1032}let m_11: keypair = (if v_334 then 3-proj-9-tuple(v_333) else caught-fail) in
        {1033}let s_11: keypair = (if v_334 then 2-proj-9-tuple(v_333) else caught-fail) in
        {1034}let ss_56: symmetricstate = (if v_334 then 1-proj-9-tuple(v_333) else caught-fail) in
        {1035}let v_335: bitstring = (if v_334 then catch-fail(deconcat3(message_a_2)) else caught-fail) in
        {1036}let v_336: bool = (not-caught-fail(v_335) && success?(1-proj-3-tuple(v_335))) in
        {1037}let ciphertext_16: bitstring = (if v_336 then 3-proj-3-tuple(v_335) else caught-fail) in
        {1038}let ns_8: bitstring = (if v_336 then 2-proj-3-tuple(v_335) else caught-fail) in
        {1039}let ne_10: bitstring = (if v_336 then 1-proj-3-tuple(v_335) else caught-fail) in
        {1040}let valid1_4: bool = (if v_336 then true else caught-fail) in
        {1041}let re_14: key = (if v_336 then ne_10 else caught-fail) in
        {1042}let v_337: bitstring = (if v_336 then catch-fail(symmetricstateunpack(ss_56)) else caught-fail) in
        {1043}let v_338: bool = (not-caught-fail(v_337) && success?(1-proj-3-tuple(v_337))) in
        {1044}let h_50: bitstring = (if v_338 then 3-proj-3-tuple(v_337) else caught-fail) in
        {1045}let ck_60: key = (if v_338 then 2-proj-3-tuple(v_337) else caught-fail) in
        {1046}let cs_50: cipherstate = (if v_338 then 1-proj-3-tuple(v_337) else caught-fail) in
        {1047}let ss_57: symmetricstate = (if v_336 then catch-fail((if v_338 then symmetricstatepack(cs_50,ck_60,hash(h_50,re_14)) else fail-any)) else caught-fail) in
        {1048}let v_339: bool = not-caught-fail(ss_57) in
        {1049}let v_340: bitstring = (if v_339 then catch-fail(keypairunpack(m_11)) else caught-fail) in
        {1050}let v_341: bool = (not-caught-fail(v_340) && success?(1-proj-2-tuple(v_340))) in
        {1051}let my_private_key_10: key = (if v_341 then 2-proj-2-tuple(v_340) else caught-fail) in
        {1052}let my_public_key_10: key = (if v_341 then 1-proj-2-tuple(v_340) else caught-fail) in
        {1053}let input_key_material_12: key = (if v_339 then catch-fail((if v_341 then dhexp(my_private_key_10,re_14) else fail-any)) else caught-fail) in
        {1054}let v_342: bool = not-caught-fail(input_key_material_12) in
        {1055}let v_343: bitstring = (if v_342 then catch-fail(symmetricstateunpack(ss_57)) else caught-fail) in
        {1056}let v_344: bool = (not-caught-fail(v_343) && success?(1-proj-3-tuple(v_343))) in
        {1057}let h_51: bitstring = (if v_344 then 3-proj-3-tuple(v_343) else caught-fail) in
        {1058}let ck_61: key = (if v_344 then 2-proj-3-tuple(v_343) else caught-fail) in
        {1059}let cs_51: cipherstate = (if v_344 then 1-proj-3-tuple(v_343) else caught-fail) in
        {1060}let output1_12: key = (if v_344 then hmac_hash1(ck_61,input_key_material_12) else caught-fail) in
        {1061}let output2_12: key = (if v_344 then hmac_hash2(ck_61,input_key_material_12) else caught-fail) in
        {1062}let output3_12: key = (if v_344 then hmac_hash3(ck_61,input_key_material_12) else caught-fail) in
        {1063}let v_345: bitstring = (if v_344 then catch-fail((output1_12,output2_12,output3_12)) else caught-fail) in
        {1064}let v_346: bool = (not-caught-fail(v_345) && success?(1-proj-3-tuple(v_345))) in
        {1065}let output_10: key = (if v_346 then 3-proj-3-tuple(v_345) else caught-fail) in
        {1066}let temp_k_10: key = (if v_346 then 2-proj-3-tuple(v_345) else caught-fail) in
        {1067}let ck_62: key = (if v_346 then 1-proj-3-tuple(v_345) else caught-fail) in
        {1068}let ss_58: symmetricstate = (if v_339 then catch-fail((if v_342 then (if v_344 then (if v_346 then symmetricstatepack(cipherstatepack(temp_k_10,minnonce),ck_62,h_51) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1069}let v_347: bool = not-caught-fail(ss_58) in
        {1070}let v_348: bitstring = (if v_347 then catch-fail(keypairunpack(s_11)) else caught-fail) in
        {1071}let v_349: bool = (not-caught-fail(v_348) && success?(1-proj-2-tuple(v_348))) in
        {1072}let my_private_key_11: key = (if v_349 then 2-proj-2-tuple(v_348) else caught-fail) in
        {1073}let my_public_key_11: key = (if v_349 then 1-proj-2-tuple(v_348) else caught-fail) in
        {1074}let input_key_material_13: key = (if v_347 then catch-fail((if v_349 then dhexp(my_private_key_11,rm_11) else fail-any)) else caught-fail) in
        {1075}let v_350: bool = not-caught-fail(input_key_material_13) in
        {1076}let v_351: bitstring = (if v_350 then catch-fail(symmetricstateunpack(ss_58)) else caught-fail) in
        {1077}let v_352: bool = (not-caught-fail(v_351) && success?(1-proj-3-tuple(v_351))) in
        {1078}let h_52: bitstring = (if v_352 then 3-proj-3-tuple(v_351) else caught-fail) in
        {1079}let ck_63: key = (if v_352 then 2-proj-3-tuple(v_351) else caught-fail) in
        {1080}let cs_52: cipherstate = (if v_352 then 1-proj-3-tuple(v_351) else caught-fail) in
        {1081}let output1_13: key = (if v_352 then hmac_hash1(ck_63,input_key_material_13) else caught-fail) in
        {1082}let output2_13: key = (if v_352 then hmac_hash2(ck_63,input_key_material_13) else caught-fail) in
        {1083}let output3_13: key = (if v_352 then hmac_hash3(ck_63,input_key_material_13) else caught-fail) in
        {1084}let v_353: bitstring = (if v_352 then catch-fail((output1_13,output2_13,output3_13)) else caught-fail) in
        {1085}let v_354: bool = (not-caught-fail(v_353) && success?(1-proj-3-tuple(v_353))) in
        {1086}let output_11: key = (if v_354 then 3-proj-3-tuple(v_353) else caught-fail) in
        {1087}let temp_k_11: key = (if v_354 then 2-proj-3-tuple(v_353) else caught-fail) in
        {1088}let ck_64: key = (if v_354 then 1-proj-3-tuple(v_353) else caught-fail) in
        {1089}let ss_59: symmetricstate = (if v_347 then catch-fail((if v_350 then (if v_352 then (if v_354 then symmetricstatepack(cipherstatepack(temp_k_11,minnonce),ck_64,h_52) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1090}let v_355: bool = not-caught-fail(ss_59) in
        {1091}let v_356: bitstring = (if v_355 then catch-fail(symmetricstateunpack(ss_59)) else caught-fail) in
        {1092}let v_357: bool = (not-caught-fail(v_356) && success?(1-proj-3-tuple(v_356))) in
        {1093}let h_53: bitstring = (if v_357 then 3-proj-3-tuple(v_356) else caught-fail) in
        {1094}let ck_65: key = (if v_357 then 2-proj-3-tuple(v_356) else caught-fail) in
        {1095}let cs_53: cipherstate = (if v_357 then 1-proj-3-tuple(v_356) else caught-fail) in
        {1096}let v_358: bitstring = (if v_357 then catch-fail(cipherstateunpack(cs_53)) else caught-fail) in
        {1097}let v_359: bool = (not-caught-fail(v_358) && success?(1-proj-2-tuple(v_358))) in
        {1098}let n_16: nonce = (if v_359 then 2-proj-2-tuple(v_358) else caught-fail) in
        {1099}let k_19: key = (if v_359 then 1-proj-2-tuple(v_358) else caught-fail) in
        {1100}let d_4: aead = (if v_359 then catch-fail(decrypt(k_19,n_16,h_53,ciphertext_16)) else caught-fail) in
        {1101}let v_360: bool = not-caught-fail(d_4) in
        {1102}let v_361: bitstring = (if v_360 then catch-fail(aeadunpack(d_4)) else caught-fail) in
        {1103}let v_362: bool = (not-caught-fail(v_361) && success?(1-proj-3-tuple(v_361))) in
        {1104}let plaintext_12: bitstring = (if v_362 then 3-proj-3-tuple(v_361) else caught-fail) in
        {1105}let adi_4: bitstring = (if v_362 then 2-proj-3-tuple(v_361) else caught-fail) in
        {1106}let valid_12: bool = (if v_362 then 1-proj-3-tuple(v_361) else caught-fail) in
        {1107}let n_17: nonce = (if v_362 then increment_nonce(n_16) else caught-fail) in
        {1108}let v_363: bitstring = (if v_362 then catch-fail(cipherstateunpack(cs_53)) else caught-fail) in
        {1109}let v_364: bool = (not-caught-fail(v_363) && success?(1-proj-2-tuple(v_363))) in
        {1110}let o_8: nonce = (if v_364 then 2-proj-2-tuple(v_363) else caught-fail) in
        {1111}let k_20: key = (if v_364 then 1-proj-2-tuple(v_363) else caught-fail) in
        {1112}let csi_16: cipherstate = (if v_362 then catch-fail((if v_364 then cipherstatepack(k_20,n_17) else fail-any)) else caught-fail) in
        {1113}let v_365: bool = not-caught-fail(csi_16) in
        {1114}let v_366: bitstring = (if v_357 then catch-fail((if v_359 then (if v_360 then (if v_362 then (if v_365 then (csi_16,plaintext_12,valid_12) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1115}let v_367: bool = (not-caught-fail(v_366) && success?(1-proj-3-tuple(v_366))) in
        {1116}let valid_13: bool = (if v_367 then 3-proj-3-tuple(v_366) else caught-fail) in
        {1117}let plaintext_13: bitstring = (if v_367 then 2-proj-3-tuple(v_366) else caught-fail) in
        {1118}let csi_17: cipherstate = (if v_367 then 1-proj-3-tuple(v_366) else caught-fail) in
        {1119}let ss_60: symmetricstate = (if v_367 then symmetricstatepack(csi_17,ck_65,h_53) else caught-fail) in
        {1120}let v_368: bitstring = (if v_367 then catch-fail(symmetricstateunpack(ss_60)) else caught-fail) in
        {1121}let v_369: bool = (not-caught-fail(v_368) && success?(1-proj-3-tuple(v_368))) in
        {1122}let h_54: bitstring = (if v_369 then 3-proj-3-tuple(v_368) else caught-fail) in
        {1123}let ck_66: key = (if v_369 then 2-proj-3-tuple(v_368) else caught-fail) in
        {1124}let cs_54: cipherstate = (if v_369 then 1-proj-3-tuple(v_368) else caught-fail) in
        {1125}let ssi_10: symmetricstate = (if v_367 then catch-fail((if v_369 then symmetricstatepack(cs_54,ck_66,hash(h_54,ciphertext_16)) else fail-any)) else caught-fail) in
        {1126}let v_370: bool = not-caught-fail(ssi_10) in
        {1127}let v_371: bitstring = (if v_355 then catch-fail((if v_357 then (if v_367 then (if v_370 then (ssi_10,plaintext_13,valid_13) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1128}let v_372: bool = (not-caught-fail(v_371) && success?(1-proj-3-tuple(v_371))) in
        {1129}let valid2_4: bool = (if v_372 then 3-proj-3-tuple(v_371) else caught-fail) in
        {1130}let plaintext_14: bitstring = (if v_372 then 2-proj-3-tuple(v_371) else caught-fail) in
        {1131}let ss_61: symmetricstate = (if v_372 then 1-proj-3-tuple(v_371) else caught-fail) in
        {1132}let v_373: bool = (if v_372 then catch-fail((valid1_4 && valid2_4)) else caught-fail) in
        {1133}let hs_32: handshakestate = (if v_373 then handshakestatepack(ss_61,s_11,m_11,e_17,rs_11,rm_11,re_14,psk_11,initiator_9) else caught-fail) in
        {1134}let (hs_33: handshakestate,plaintext_a: bitstring,valid_14: bool) = (if v_334 then (if v_336 then (if v_339 then (if v_347 then (if v_355 then (if v_372 then (if undo-catch-fail(v_373) then (hs_32,plaintext_14,true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1135}event RecvMsg(me_2,them_2,stagepack_a(sid_3),plaintext_a);
        {1136}insert statestore(me_2,them_2,sid_3,statepack_b(hs_33))
    ) | (
        {1292}get statestore(=me_2,=them_2,=sid_3,statepack_b(hs_34: handshakestate)) in
        {1138}let payload_4: bitstring = msg_b(me_2,them_2,sid_3) in
        {1139}let v_374: bitstring = catch-fail(handshakestateunpack(hs_34)) in
        {1140}let v_375: bool = (not-caught-fail(v_374) && success?(1-proj-9-tuple(v_374))) in
        {1141}let initiator_10: bool = (if v_375 then 9-proj-9-tuple(v_374) else caught-fail) in
        {1142}let psk_12: key = (if v_375 then 8-proj-9-tuple(v_374) else caught-fail) in
        {1143}let re_15: key = (if v_375 then 7-proj-9-tuple(v_374) else caught-fail) in
        {1144}let rm_12: key = (if v_375 then 6-proj-9-tuple(v_374) else caught-fail) in
        {1145}let rs_12: key = (if v_375 then 5-proj-9-tuple(v_374) else caught-fail) in
        {1146}let e_18: keypair = (if v_375 then 4-proj-9-tuple(v_374) else caught-fail) in
        {1147}let m_12: keypair = (if v_375 then 3-proj-9-tuple(v_374) else caught-fail) in
        {1148}let s_12: keypair = (if v_375 then 2-proj-9-tuple(v_374) else caught-fail) in
        {1149}let ss_62: symmetricstate = (if v_375 then 1-proj-9-tuple(v_374) else caught-fail) in
        {1150}let v_376: bitstring = (if v_375 then catch-fail((empty,empty,empty)) else caught-fail) in
        {1151}let v_377: bool = (not-caught-fail(v_376) && success?(1-proj-3-tuple(v_376))) in
        {1152}let ciphertext_17: bitstring = (if v_377 then 3-proj-3-tuple(v_376) else caught-fail) in
        {1153}let ns_9: bitstring = (if v_377 then 2-proj-3-tuple(v_376) else caught-fail) in
        {1154}let ne_11: bitstring = (if v_377 then 1-proj-3-tuple(v_376) else caught-fail) in
        {1155}let basis_14: key = (if v_377 then key_e(me_2,them_2,sid_3) else caught-fail) in
        {1156}let public_key_14: key = (if v_377 then catch-fail(dhexp(basis_14,validkey(g))) else caught-fail) in
        {1157}let v_378: bool = not-caught-fail(public_key_14) in
        {1158}let e_19: keypair = (if v_377 then catch-fail((if v_378 then keypairpack(validkey(public_key_14),basis_14) else fail-any)) else caught-fail) in
        {1159}let v_379: bool = not-caught-fail(e_19) in
        {1160}let ne_12: bitstring = (if v_379 then catch-fail(getpublickey(e_19)) else caught-fail) in
        {1161}let v_380: bool = not-caught-fail(ne_12) in
        {1162}let v_381: bitstring = (if v_380 then catch-fail(symmetricstateunpack(ss_62)) else caught-fail) in
        {1163}let v_382: bool = (not-caught-fail(v_381) && success?(1-proj-3-tuple(v_381))) in
        {1164}let h_55: bitstring = (if v_382 then 3-proj-3-tuple(v_381) else caught-fail) in
        {1165}let ck_67: key = (if v_382 then 2-proj-3-tuple(v_381) else caught-fail) in
        {1166}let cs_55: cipherstate = (if v_382 then 1-proj-3-tuple(v_381) else caught-fail) in
        {1167}let ss_63: symmetricstate = (if v_380 then catch-fail((if v_382 then symmetricstatepack(cs_55,ck_67,hash(h_55,ne_12)) else fail-any)) else caught-fail) in
        {1168}let v_383: bool = not-caught-fail(ss_63) in
        {1169}let v_384: bitstring = (if v_383 then catch-fail(keypairunpack(e_19)) else caught-fail) in
        {1170}let v_385: bool = (not-caught-fail(v_384) && success?(1-proj-2-tuple(v_384))) in
        {1171}let my_private_key_12: key = (if v_385 then 2-proj-2-tuple(v_384) else caught-fail) in
        {1172}let my_public_key_12: key = (if v_385 then 1-proj-2-tuple(v_384) else caught-fail) in
        {1173}let input_key_material_14: key = (if v_383 then catch-fail((if v_385 then dhexp(my_private_key_12,re_15) else fail-any)) else caught-fail) in
        {1174}let v_386: bool = not-caught-fail(input_key_material_14) in
        {1175}let v_387: bitstring = (if v_386 then catch-fail(symmetricstateunpack(ss_63)) else caught-fail) in
        {1176}let v_388: bool = (not-caught-fail(v_387) && success?(1-proj-3-tuple(v_387))) in
        {1177}let h_56: bitstring = (if v_388 then 3-proj-3-tuple(v_387) else caught-fail) in
        {1178}let ck_68: key = (if v_388 then 2-proj-3-tuple(v_387) else caught-fail) in
        {1179}let cs_56: cipherstate = (if v_388 then 1-proj-3-tuple(v_387) else caught-fail) in
        {1180}let output1_14: key = (if v_388 then hmac_hash1(ck_68,input_key_material_14) else caught-fail) in
        {1181}let output2_14: key = (if v_388 then hmac_hash2(ck_68,input_key_material_14) else caught-fail) in
        {1182}let output3_14: key = (if v_388 then hmac_hash3(ck_68,input_key_material_14) else caught-fail) in
        {1183}let v_389: bitstring = (if v_388 then catch-fail((output1_14,output2_14,output3_14)) else caught-fail) in
        {1184}let v_390: bool = (not-caught-fail(v_389) && success?(1-proj-3-tuple(v_389))) in
        {1185}let output_12: key = (if v_390 then 3-proj-3-tuple(v_389) else caught-fail) in
        {1186}let temp_k_12: key = (if v_390 then 2-proj-3-tuple(v_389) else caught-fail) in
        {1187}let ck_69: key = (if v_390 then 1-proj-3-tuple(v_389) else caught-fail) in
        {1188}let ss_64: symmetricstate = (if v_383 then catch-fail((if v_386 then (if v_388 then (if v_390 then symmetricstatepack(cipherstatepack(temp_k_12,minnonce),ck_69,h_56) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1189}let v_391: bool = not-caught-fail(ss_64) in
        {1190}let v_392: bitstring = (if v_391 then catch-fail(keypairunpack(e_19)) else caught-fail) in
        {1191}let v_393: bool = (not-caught-fail(v_392) && success?(1-proj-2-tuple(v_392))) in
        {1192}let my_private_key_13: key = (if v_393 then 2-proj-2-tuple(v_392) else caught-fail) in
        {1193}let my_public_key_13: key = (if v_393 then 1-proj-2-tuple(v_392) else caught-fail) in
        {1194}let input_key_material_15: key = (if v_391 then catch-fail((if v_393 then dhexp(my_private_key_13,rs_12) else fail-any)) else caught-fail) in
        {1195}let v_394: bool = not-caught-fail(input_key_material_15) in
        {1196}let v_395: bitstring = (if v_394 then catch-fail(symmetricstateunpack(ss_64)) else caught-fail) in
        {1197}let v_396: bool = (not-caught-fail(v_395) && success?(1-proj-3-tuple(v_395))) in
        {1198}let h_57: bitstring = (if v_396 then 3-proj-3-tuple(v_395) else caught-fail) in
        {1199}let ck_70: key = (if v_396 then 2-proj-3-tuple(v_395) else caught-fail) in
        {1200}let cs_57: cipherstate = (if v_396 then 1-proj-3-tuple(v_395) else caught-fail) in
        {1201}let output1_15: key = (if v_396 then hmac_hash1(ck_70,input_key_material_15) else caught-fail) in
        {1202}let output2_15: key = (if v_396 then hmac_hash2(ck_70,input_key_material_15) else caught-fail) in
        {1203}let output3_15: key = (if v_396 then hmac_hash3(ck_70,input_key_material_15) else caught-fail) in
        {1204}let v_397: bitstring = (if v_396 then catch-fail((output1_15,output2_15,output3_15)) else caught-fail) in
        {1205}let v_398: bool = (not-caught-fail(v_397) && success?(1-proj-3-tuple(v_397))) in
        {1206}let output_13: key = (if v_398 then 3-proj-3-tuple(v_397) else caught-fail) in
        {1207}let temp_k_13: key = (if v_398 then 2-proj-3-tuple(v_397) else caught-fail) in
        {1208}let ck_71: key = (if v_398 then 1-proj-3-tuple(v_397) else caught-fail) in
        {1209}let ss_65: symmetricstate = (if v_391 then catch-fail((if v_394 then (if v_396 then (if v_398 then symmetricstatepack(cipherstatepack(temp_k_13,minnonce),ck_71,h_57) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1210}let v_399: bool = not-caught-fail(ss_65) in
        {1211}let v_400: bitstring = (if v_399 then catch-fail(keypairunpack(e_19)) else caught-fail) in
        {1212}let v_401: bool = (not-caught-fail(v_400) && success?(1-proj-2-tuple(v_400))) in
        {1213}let my_private_key_14: key = (if v_401 then 2-proj-2-tuple(v_400) else caught-fail) in
        {1214}let my_public_key_14: key = (if v_401 then 1-proj-2-tuple(v_400) else caught-fail) in
        {1215}let input_key_material_16: key = (if v_399 then catch-fail((if v_401 then dhexp(my_private_key_14,rm_12) else fail-any)) else caught-fail) in
        {1216}let v_402: bool = not-caught-fail(input_key_material_16) in
        {1217}let v_403: bitstring = (if v_402 then catch-fail(symmetricstateunpack(ss_65)) else caught-fail) in
        {1218}let v_404: bool = (not-caught-fail(v_403) && success?(1-proj-3-tuple(v_403))) in
        {1219}let h_58: bitstring = (if v_404 then 3-proj-3-tuple(v_403) else caught-fail) in
        {1220}let ck_72: key = (if v_404 then 2-proj-3-tuple(v_403) else caught-fail) in
        {1221}let cs_58: cipherstate = (if v_404 then 1-proj-3-tuple(v_403) else caught-fail) in
        {1222}let output1_16: key = (if v_404 then hmac_hash1(ck_72,input_key_material_16) else caught-fail) in
        {1223}let output2_16: key = (if v_404 then hmac_hash2(ck_72,input_key_material_16) else caught-fail) in
        {1224}let output3_16: key = (if v_404 then hmac_hash3(ck_72,input_key_material_16) else caught-fail) in
        {1225}let v_405: bitstring = (if v_404 then catch-fail((output1_16,output2_16,output3_16)) else caught-fail) in
        {1226}let v_406: bool = (not-caught-fail(v_405) && success?(1-proj-3-tuple(v_405))) in
        {1227}let output_14: key = (if v_406 then 3-proj-3-tuple(v_405) else caught-fail) in
        {1228}let temp_k_14: key = (if v_406 then 2-proj-3-tuple(v_405) else caught-fail) in
        {1229}let ck_73: key = (if v_406 then 1-proj-3-tuple(v_405) else caught-fail) in
        {1230}let ss_66: symmetricstate = (if v_399 then catch-fail((if v_402 then (if v_404 then (if v_406 then symmetricstatepack(cipherstatepack(temp_k_14,minnonce),ck_73,h_58) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1231}let v_407: bool = not-caught-fail(ss_66) in
        {1232}let v_408: bitstring = (if v_407 then catch-fail(symmetricstateunpack(ss_66)) else caught-fail) in
        {1233}let v_409: bool = (not-caught-fail(v_408) && success?(1-proj-3-tuple(v_408))) in
        {1234}let h_59: bitstring = (if v_409 then 3-proj-3-tuple(v_408) else caught-fail) in
        {1235}let ck_74: key = (if v_409 then 2-proj-3-tuple(v_408) else caught-fail) in
        {1236}let cs_59: cipherstate = (if v_409 then 1-proj-3-tuple(v_408) else caught-fail) in
        {1237}let v_410: bitstring = (if v_409 then catch-fail(cipherstateunpack(cs_59)) else caught-fail) in
        {1238}let v_411: bool = (not-caught-fail(v_410) && success?(1-proj-2-tuple(v_410))) in
        {1239}let n_18: nonce = (if v_411 then 2-proj-2-tuple(v_410) else caught-fail) in
        {1240}let k_21: key = (if v_411 then 1-proj-2-tuple(v_410) else caught-fail) in
        {1241}let e_20: bitstring = (if v_411 then encrypt(k_21,n_18,h_59,payload_4) else caught-fail) in
        {1242}let n_19: nonce = (if v_411 then increment_nonce(n_18) else caught-fail) in
        {1243}let v_412: bitstring = (if v_411 then catch-fail(cipherstateunpack(cs_59)) else caught-fail) in
        {1244}let v_413: bool = (not-caught-fail(v_412) && success?(1-proj-2-tuple(v_412))) in
        {1245}let o_9: nonce = (if v_413 then 2-proj-2-tuple(v_412) else caught-fail) in
        {1246}let k_22: key = (if v_413 then 1-proj-2-tuple(v_412) else caught-fail) in
        {1247}let csi_18: cipherstate = (if v_411 then catch-fail((if v_413 then cipherstatepack(k_22,n_19) else fail-any)) else caught-fail) in
        {1248}let v_414: bool = not-caught-fail(csi_18) in
        {1249}let v_415: bitstring = (if v_409 then catch-fail((if v_411 then (if v_414 then (csi_18,e_20) else fail-any) else fail-any)) else caught-fail) in
        {1250}let v_416: bool = (not-caught-fail(v_415) && success?(1-proj-2-tuple(v_415))) in
        {1251}let ciphertext_18: bitstring = (if v_416 then 2-proj-2-tuple(v_415) else caught-fail) in
        {1252}let csi_19: cipherstate = (if v_416 then 1-proj-2-tuple(v_415) else caught-fail) in
        {1253}let ss_67: symmetricstate = (if v_416 then symmetricstatepack(csi_19,ck_74,h_59) else caught-fail) in
        {1254}let v_417: bitstring = (if v_416 then catch-fail(symmetricstateunpack(ss_67)) else caught-fail) in
        {1255}let v_418: bool = (not-caught-fail(v_417) && success?(1-proj-3-tuple(v_417))) in
        {1256}let h_60: bitstring = (if v_418 then 3-proj-3-tuple(v_417) else caught-fail) in
        {1257}let ck_75: key = (if v_418 then 2-proj-3-tuple(v_417) else caught-fail) in
        {1258}let cs_60: cipherstate = (if v_418 then 1-proj-3-tuple(v_417) else caught-fail) in
        {1259}let ssi_11: symmetricstate = (if v_416 then catch-fail((if v_418 then symmetricstatepack(cs_60,ck_75,hash(h_60,ciphertext_18)) else fail-any)) else caught-fail) in
        {1260}let v_419: bool = not-caught-fail(ssi_11) in
        {1261}let v_420: bitstring = (if v_407 then catch-fail((if v_409 then (if v_416 then (if v_419 then (ssi_11,ciphertext_18) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1262}let v_421: bool = (not-caught-fail(v_420) && success?(1-proj-2-tuple(v_420))) in
        {1263}let ciphertext_19: bitstring = (if v_421 then 2-proj-2-tuple(v_420) else caught-fail) in
        {1264}let ss_68: symmetricstate = (if v_421 then 1-proj-2-tuple(v_420) else caught-fail) in
        {1265}let hs_35: handshakestate = (if v_421 then handshakestatepack(ss_68,s_12,m_12,e_19,rs_12,rm_12,re_15,psk_12,initiator_10) else caught-fail) in
        {1266}let message_buffer_4: bitstring = (if v_421 then concat3(ne_12,ns_9,ciphertext_19) else caught-fail) in
        {1267}let v_422: bitstring = (if v_421 then catch-fail(symmetricstateunpack(ss_68)) else caught-fail) in
        {1268}let v_423: bool = (not-caught-fail(v_422) && success?(1-proj-3-tuple(v_422))) in
        {1269}let h_61: bitstring = (if v_423 then 3-proj-3-tuple(v_422) else caught-fail) in
        {1270}let ck_76: key = (if v_423 then 2-proj-3-tuple(v_422) else caught-fail) in
        {1271}let cs_61: cipherstate = (if v_423 then 1-proj-3-tuple(v_422) else caught-fail) in
        {1272}let input_key_material_17: key = (if v_423 then zero else caught-fail) in
        {1273}let output1_17: key = (if v_423 then hmac_hash1(ck_76,input_key_material_17) else caught-fail) in
        {1274}let output2_17: key = (if v_423 then hmac_hash2(ck_76,input_key_material_17) else caught-fail) in
        {1275}let output3_17: key = (if v_423 then hmac_hash3(ck_76,input_key_material_17) else caught-fail) in
        {1276}let v_424: bitstring = (if v_423 then catch-fail((output1_17,output2_17,output3_17)) else caught-fail) in
        {1277}let v_425: bool = (not-caught-fail(v_424) && success?(1-proj-3-tuple(v_424))) in
        {1278}let temp_k3_2: key = (if v_425 then 3-proj-3-tuple(v_424) else caught-fail) in
        {1279}let temp_k2_2: key = (if v_425 then 2-proj-3-tuple(v_424) else caught-fail) in
        {1280}let temp_k1_2: key = (if v_425 then 1-proj-3-tuple(v_424) else caught-fail) in
        {1281}let cs1_10: cipherstate = (if v_425 then cipherstatepack(temp_k1_2,minnonce) else caught-fail) in
        {1282}let cs2_10: cipherstate = (if v_425 then cipherstatepack(temp_k2_2,minnonce) else caught-fail) in
        {1283}let v_426: bitstring = (if v_421 then catch-fail((if v_423 then (if v_425 then (ss_68,cs1_10,cs2_10) else fail-any) else fail-any)) else caught-fail) in
        {1284}let v_427: bool = (not-caught-fail(v_426) && success?(1-proj-3-tuple(v_426))) in
        {1285}let cs2_11: cipherstate = (if v_427 then 3-proj-3-tuple(v_426) else caught-fail) in
        {1286}let cs1_11: cipherstate = (if v_427 then 2-proj-3-tuple(v_426) else caught-fail) in
        {1287}let ssi_12: symmetricstate = (if v_427 then 1-proj-3-tuple(v_426) else caught-fail) in
        {1288}let (hs_36: handshakestate,message_b_2: bitstring,cs1_12: cipherstate,cs2_12: cipherstate) = (if v_375 then (if v_377 then (if v_379 then (if v_380 then (if v_383 then (if v_391 then (if v_399 then (if v_407 then (if v_421 then (if v_427 then (hs_35,message_buffer_4,cs1_11,cs2_11) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1289}event SendMsg(me_2,them_2,stagepack_b(sid_3),msg_b(me_2,them_2,sid_3));
        {1290}insert statestore(me_2,them_2,sid_3,statepack_c(hs_36,cs1_12,cs2_12));
        {1291}out(pub, message_b_2)
    ) | (
        {1293}!
        {1359}get statestore(=me_2,=them_2,=sid_3,statepack_c(hs_37: handshakestate,cs1_13: cipherstate,cs2_13: cipherstate)) in
        {1294}let hs_38: handshakestate = handshakestatesetcs(hs_37,cs1_13) in
        {1295}in(pub, message_c_2: bitstring);
        {1296}let v_428: bitstring = catch-fail(handshakestateunpack(hs_38)) in
        {1297}let v_429: bool = (not-caught-fail(v_428) && success?(1-proj-9-tuple(v_428))) in
        {1298}let initiator_11: bool = (if v_429 then 9-proj-9-tuple(v_428) else caught-fail) in
        {1299}let psk_13: key = (if v_429 then 8-proj-9-tuple(v_428) else caught-fail) in
        {1300}let re_16: key = (if v_429 then 7-proj-9-tuple(v_428) else caught-fail) in
        {1301}let rm_13: key = (if v_429 then 6-proj-9-tuple(v_428) else caught-fail) in
        {1302}let rs_13: key = (if v_429 then 5-proj-9-tuple(v_428) else caught-fail) in
        {1303}let e_21: keypair = (if v_429 then 4-proj-9-tuple(v_428) else caught-fail) in
        {1304}let m_13: keypair = (if v_429 then 3-proj-9-tuple(v_428) else caught-fail) in
        {1305}let s_13: keypair = (if v_429 then 2-proj-9-tuple(v_428) else caught-fail) in
        {1306}let ss_69: symmetricstate = (if v_429 then 1-proj-9-tuple(v_428) else caught-fail) in
        {1307}let v_430: bitstring = (if v_429 then catch-fail(deconcat3(message_c_2)) else caught-fail) in
        {1308}let v_431: bool = (not-caught-fail(v_430) && success?(1-proj-3-tuple(v_430))) in
        {1309}let ciphertext_20: bitstring = (if v_431 then 3-proj-3-tuple(v_430) else caught-fail) in
        {1310}let ns_10: bitstring = (if v_431 then 2-proj-3-tuple(v_430) else caught-fail) in
        {1311}let ne_13: bitstring = (if v_431 then 1-proj-3-tuple(v_430) else caught-fail) in
        {1312}let valid1_5: bool = (if v_431 then true else caught-fail) in
        {1313}let v_432: bitstring = (if v_431 then catch-fail(symmetricstateunpack(ss_69)) else caught-fail) in
        {1314}let v_433: bool = (not-caught-fail(v_432) && success?(1-proj-3-tuple(v_432))) in
        {1315}let h_62: bitstring = (if v_433 then 3-proj-3-tuple(v_432) else caught-fail) in
        {1316}let ck_77: key = (if v_433 then 2-proj-3-tuple(v_432) else caught-fail) in
        {1317}let cs_62: cipherstate = (if v_433 then 1-proj-3-tuple(v_432) else caught-fail) in
        {1318}let v_434: bitstring = (if v_433 then catch-fail(cipherstateunpack(cs_62)) else caught-fail) in
        {1319}let v_435: bool = (not-caught-fail(v_434) && success?(1-proj-2-tuple(v_434))) in
        {1320}let n_20: nonce = (if v_435 then 2-proj-2-tuple(v_434) else caught-fail) in
        {1321}let k_23: key = (if v_435 then 1-proj-2-tuple(v_434) else caught-fail) in
        {1322}let d_5: aead = (if v_435 then catch-fail(decrypt(k_23,n_20,h_62,ciphertext_20)) else caught-fail) in
        {1323}let v_436: bool = not-caught-fail(d_5) in
        {1324}let v_437: bitstring = (if v_436 then catch-fail(aeadunpack(d_5)) else caught-fail) in
        {1325}let v_438: bool = (not-caught-fail(v_437) && success?(1-proj-3-tuple(v_437))) in
        {1326}let plaintext_15: bitstring = (if v_438 then 3-proj-3-tuple(v_437) else caught-fail) in
        {1327}let adi_5: bitstring = (if v_438 then 2-proj-3-tuple(v_437) else caught-fail) in
        {1328}let valid_15: bool = (if v_438 then 1-proj-3-tuple(v_437) else caught-fail) in
        {1329}let n_21: nonce = (if v_438 then increment_nonce(n_20) else caught-fail) in
        {1330}let v_439: bitstring = (if v_438 then catch-fail(cipherstateunpack(cs_62)) else caught-fail) in
        {1331}let v_440: bool = (not-caught-fail(v_439) && success?(1-proj-2-tuple(v_439))) in
        {1332}let o_10: nonce = (if v_440 then 2-proj-2-tuple(v_439) else caught-fail) in
        {1333}let k_24: key = (if v_440 then 1-proj-2-tuple(v_439) else caught-fail) in
        {1334}let csi_20: cipherstate = (if v_438 then catch-fail((if v_440 then cipherstatepack(k_24,n_21) else fail-any)) else caught-fail) in
        {1335}let v_441: bool = not-caught-fail(csi_20) in
        {1336}let v_442: bitstring = (if v_433 then catch-fail((if v_435 then (if v_436 then (if v_438 then (if v_441 then (csi_20,plaintext_15,valid_15) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1337}let v_443: bool = (not-caught-fail(v_442) && success?(1-proj-3-tuple(v_442))) in
        {1338}let valid_16: bool = (if v_443 then 3-proj-3-tuple(v_442) else caught-fail) in
        {1339}let plaintext_16: bitstring = (if v_443 then 2-proj-3-tuple(v_442) else caught-fail) in
        {1340}let csi_21: cipherstate = (if v_443 then 1-proj-3-tuple(v_442) else caught-fail) in
        {1341}let ss_70: symmetricstate = (if v_443 then symmetricstatepack(csi_21,ck_77,h_62) else caught-fail) in
        {1342}let v_444: bitstring = (if v_443 then catch-fail(symmetricstateunpack(ss_70)) else caught-fail) in
        {1343}let v_445: bool = (not-caught-fail(v_444) && success?(1-proj-3-tuple(v_444))) in
        {1344}let h_63: bitstring = (if v_445 then 3-proj-3-tuple(v_444) else caught-fail) in
        {1345}let ck_78: key = (if v_445 then 2-proj-3-tuple(v_444) else caught-fail) in
        {1346}let cs_63: cipherstate = (if v_445 then 1-proj-3-tuple(v_444) else caught-fail) in
        {1347}let ssi_13: symmetricstate = (if v_443 then catch-fail((if v_445 then symmetricstatepack(cs_63,ck_78,hash(h_63,ciphertext_20)) else fail-any)) else caught-fail) in
        {1348}let v_446: bool = not-caught-fail(ssi_13) in
        {1349}let v_447: bitstring = (if v_431 then catch-fail((if v_433 then (if v_443 then (if v_446 then (ssi_13,plaintext_16,valid_16) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1350}let v_448: bool = (not-caught-fail(v_447) && success?(1-proj-3-tuple(v_447))) in
        {1351}let valid2_5: bool = (if v_448 then 3-proj-3-tuple(v_447) else caught-fail) in
        {1352}let plaintext_17: bitstring = (if v_448 then 2-proj-3-tuple(v_447) else caught-fail) in
        {1353}let ss_71: symmetricstate = (if v_448 then 1-proj-3-tuple(v_447) else caught-fail) in
        {1354}let v_449: bool = (if v_448 then catch-fail((valid1_5 && valid2_5)) else caught-fail) in
        {1355}let hs_39: handshakestate = (if v_449 then handshakestatepack(ss_71,s_13,m_13,e_21,rs_13,rm_13,re_16,psk_13,initiator_11) else caught-fail) in
        {1356}let (hs_40: handshakestate,plaintext_c: bitstring,valid_17: bool) = (if v_429 then (if v_431 then (if v_448 then (if undo-catch-fail(v_449) then (hs_39,plaintext_17,true) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1357}event RecvMsg(me_2,them_2,stagepack_c(sid_3),plaintext_c);
        {1358}insert statestore(me_2,them_2,sid_3,statepack_d(hs_40,handshakestategetcs(hs_40),cs2_13))
    ) | (
        {1360}!
        {1417}get statestore(=me_2,=them_2,=sid_3,statepack_d(hs_41: handshakestate,cs1_14: cipherstate,cs2_14: cipherstate)) in
        {1361}let hs_42: handshakestate = handshakestatesetcs(hs_41,cs2_14) in
        {1362}let payload_5: bitstring = msg_d(me_2,them_2,sid_3) in
        {1363}let v_450: bitstring = catch-fail(handshakestateunpack(hs_42)) in
        {1364}let v_451: bool = (not-caught-fail(v_450) && success?(1-proj-9-tuple(v_450))) in
        {1365}let initiator_12: bool = (if v_451 then 9-proj-9-tuple(v_450) else caught-fail) in
        {1366}let psk_14: key = (if v_451 then 8-proj-9-tuple(v_450) else caught-fail) in
        {1367}let re_17: key = (if v_451 then 7-proj-9-tuple(v_450) else caught-fail) in
        {1368}let rm_14: key = (if v_451 then 6-proj-9-tuple(v_450) else caught-fail) in
        {1369}let rs_14: key = (if v_451 then 5-proj-9-tuple(v_450) else caught-fail) in
        {1370}let e_22: keypair = (if v_451 then 4-proj-9-tuple(v_450) else caught-fail) in
        {1371}let m_14: keypair = (if v_451 then 3-proj-9-tuple(v_450) else caught-fail) in
        {1372}let s_14: keypair = (if v_451 then 2-proj-9-tuple(v_450) else caught-fail) in
        {1373}let ss_72: symmetricstate = (if v_451 then 1-proj-9-tuple(v_450) else caught-fail) in
        {1374}let v_452: bitstring = (if v_451 then catch-fail((empty,empty,empty)) else caught-fail) in
        {1375}let v_453: bool = (not-caught-fail(v_452) && success?(1-proj-3-tuple(v_452))) in
        {1376}let ciphertext_21: bitstring = (if v_453 then 3-proj-3-tuple(v_452) else caught-fail) in
        {1377}let ns_11: bitstring = (if v_453 then 2-proj-3-tuple(v_452) else caught-fail) in
        {1378}let ne_14: bitstring = (if v_453 then 1-proj-3-tuple(v_452) else caught-fail) in
        {1379}let v_454: bitstring = (if v_453 then catch-fail(symmetricstateunpack(ss_72)) else caught-fail) in
        {1380}let v_455: bool = (not-caught-fail(v_454) && success?(1-proj-3-tuple(v_454))) in
        {1381}let h_64: bitstring = (if v_455 then 3-proj-3-tuple(v_454) else caught-fail) in
        {1382}let ck_79: key = (if v_455 then 2-proj-3-tuple(v_454) else caught-fail) in
        {1383}let cs_64: cipherstate = (if v_455 then 1-proj-3-tuple(v_454) else caught-fail) in
        {1384}let v_456: bitstring = (if v_455 then catch-fail(cipherstateunpack(cs_64)) else caught-fail) in
        {1385}let v_457: bool = (not-caught-fail(v_456) && success?(1-proj-2-tuple(v_456))) in
        {1386}let n_22: nonce = (if v_457 then 2-proj-2-tuple(v_456) else caught-fail) in
        {1387}let k_25: key = (if v_457 then 1-proj-2-tuple(v_456) else caught-fail) in
        {1388}let e_23: bitstring = (if v_457 then encrypt(k_25,n_22,h_64,payload_5) else caught-fail) in
        {1389}let n_23: nonce = (if v_457 then increment_nonce(n_22) else caught-fail) in
        {1390}let v_458: bitstring = (if v_457 then catch-fail(cipherstateunpack(cs_64)) else caught-fail) in
        {1391}let v_459: bool = (not-caught-fail(v_458) && success?(1-proj-2-tuple(v_458))) in
        {1392}let o_11: nonce = (if v_459 then 2-proj-2-tuple(v_458) else caught-fail) in
        {1393}let k_26: key = (if v_459 then 1-proj-2-tuple(v_458) else caught-fail) in
        {1394}let csi_22: cipherstate = (if v_457 then catch-fail((if v_459 then cipherstatepack(k_26,n_23) else fail-any)) else caught-fail) in
        {1395}let v_460: bool = not-caught-fail(csi_22) in
        {1396}let v_461: bitstring = (if v_455 then catch-fail((if v_457 then (if v_460 then (csi_22,e_23) else fail-any) else fail-any)) else caught-fail) in
        {1397}let v_462: bool = (not-caught-fail(v_461) && success?(1-proj-2-tuple(v_461))) in
        {1398}let ciphertext_22: bitstring = (if v_462 then 2-proj-2-tuple(v_461) else caught-fail) in
        {1399}let csi_23: cipherstate = (if v_462 then 1-proj-2-tuple(v_461) else caught-fail) in
        {1400}let ss_73: symmetricstate = (if v_462 then symmetricstatepack(csi_23,ck_79,h_64) else caught-fail) in
        {1401}let v_463: bitstring = (if v_462 then catch-fail(symmetricstateunpack(ss_73)) else caught-fail) in
        {1402}let v_464: bool = (not-caught-fail(v_463) && success?(1-proj-3-tuple(v_463))) in
        {1403}let h_65: bitstring = (if v_464 then 3-proj-3-tuple(v_463) else caught-fail) in
        {1404}let ck_80: key = (if v_464 then 2-proj-3-tuple(v_463) else caught-fail) in
        {1405}let cs_65: cipherstate = (if v_464 then 1-proj-3-tuple(v_463) else caught-fail) in
        {1406}let ssi_14: symmetricstate = (if v_462 then catch-fail((if v_464 then symmetricstatepack(cs_65,ck_80,hash(h_65,ciphertext_22)) else fail-any)) else caught-fail) in
        {1407}let v_465: bool = not-caught-fail(ssi_14) in
        {1408}let v_466: bitstring = (if v_453 then catch-fail((if v_455 then (if v_462 then (if v_465 then (ssi_14,ciphertext_22) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1409}let v_467: bool = (not-caught-fail(v_466) && success?(1-proj-2-tuple(v_466))) in
        {1410}let ciphertext_23: bitstring = (if v_467 then 2-proj-2-tuple(v_466) else caught-fail) in
        {1411}let ss_74: symmetricstate = (if v_467 then 1-proj-2-tuple(v_466) else caught-fail) in
        {1412}let hs_43: handshakestate = (if v_467 then handshakestatepack(ss_74,s_14,m_14,e_22,rs_14,rm_14,re_17,psk_14,initiator_12) else caught-fail) in
        {1413}let message_buffer_5: bitstring = (if v_467 then concat3(ne_14,ns_11,ciphertext_23) else caught-fail) in
        {1414}let (hs_44: handshakestate,message_d_2: bitstring) = (if v_451 then (if v_453 then (if v_467 then (hs_43,message_buffer_5) else fail-any) else fail-any) else fail-any) in
        {1415}event SendMsg(me_2,them_2,stagepack_d(sid_3),msg_d(me_2,them_2,sid_3));
        {1416}out(pub, message_d_2)
    ) | (
        {1418}event LeakS(phase0,me_2);
        {1419}event LeakM(phase0,me_2);
        {1420}out(pub, (key_s(me_2),key_m(me_2)))
    ) | (
        {1421}phase 1;
        {1422}event LeakS(phase1,me_2);
        {1423}event LeakM(phase1,me_2);
        {1424}out(pub, (key_s(me_2),key_m(me_2)))
    )
) | (
    {1425}let me_3: principal = bob in
    {1426}let them_3: principal = charlie in
    {1427}let sid_4: sessionid = sid in
    {1428}let basis_15: key = key_s(me_3) in
    {1429}let public_key_15: key = catch-fail(dhexp(basis_15,validkey(g))) in
    {1430}let v_468: bool = not-caught-fail(public_key_15) in
    {1431}let s_15: keypair = (if v_468 then keypairpack(validkey(public_key_15),basis_15) else fail-any) in
    {1432}let basis_16: key = key_m(me_3) in
    {1433}let public_key_16: key = catch-fail(dhexp(basis_16,validkey(g))) in
    {1434}let v_469: bool = not-caught-fail(public_key_16) in
    {1435}let m_15: keypair = (if v_469 then keypairpack(validkey(public_key_16),basis_16) else fail-any) in
    {1436}out(pub, (getpublickey(s_15),getpublickey(m_15)));
    (
        {1437}let e_24: keypair = keypairpack(empty,empty) in
        {1438}let basis_17: key = key_s(them_3) in
        {1439}let public_key_17: key = catch-fail(dhexp(basis_17,validkey(g))) in
        {1440}let v_470: bool = not-caught-fail(public_key_17) in
        {1441}let rs_15: key = getpublickey((if v_470 then keypairpack(validkey(public_key_17),basis_17) else fail-any)) in
        {1442}let basis_18: key = key_m(them_3) in
        {1443}let public_key_18: key = catch-fail(dhexp(basis_18,validkey(g))) in
        {1444}let v_471: bool = not-caught-fail(public_key_18) in
        {1445}let rm_15: key = getpublickey((if v_471 then keypairpack(validkey(public_key_18),basis_18) else fail-any)) in
        {1446}let re_18: key = empty in
        {1447}let prologue_3: bitstring = empty in
        {1448}let psk_15: key = empty in
        {1449}let protocol_name_3: bitstring = somename in
        {1450}let h_66: bitstring = hash(protocol_name_3,empty) in
        {1451}let ck_81: key = h_66 in
        {1452}let k_27: key = empty in
        {1453}let cs_66: cipherstate = cipherstatepack(k_27,minnonce) in
        {1454}let ss_75: symmetricstate = symmetricstatepack(cs_66,ck_81,h_66) in
        {1455}let v_472: bitstring = catch-fail(symmetricstateunpack(ss_75)) in
        {1456}let v_473: bool = (not-caught-fail(v_472) && success?(1-proj-3-tuple(v_472))) in
        {1457}let h_67: bitstring = (if v_473 then 3-proj-3-tuple(v_472) else caught-fail) in
        {1458}let ck_82: key = (if v_473 then 2-proj-3-tuple(v_472) else caught-fail) in
        {1459}let cs_67: cipherstate = (if v_473 then 1-proj-3-tuple(v_472) else caught-fail) in
        {1460}let ss_76: symmetricstate = catch-fail((if v_473 then symmetricstatepack(cs_67,ck_82,hash(h_67,prologue_3)) else fail-any)) in
        {1461}let v_474: bool = not-caught-fail(ss_76) in
        {1462}let v_475: bitstring = (if v_474 then catch-fail(symmetricstateunpack(ss_76)) else caught-fail) in
        {1463}let v_476: bool = (not-caught-fail(v_475) && success?(1-proj-3-tuple(v_475))) in
        {1464}let h_68: bitstring = (if v_476 then 3-proj-3-tuple(v_475) else caught-fail) in
        {1465}let ck_83: key = (if v_476 then 2-proj-3-tuple(v_475) else caught-fail) in
        {1466}let cs_68: cipherstate = (if v_476 then 1-proj-3-tuple(v_475) else caught-fail) in
        {1467}let ss_77: symmetricstate = (if v_474 then catch-fail((if v_476 then symmetricstatepack(cs_68,ck_83,hash(h_68,rs_15)) else fail-any)) else caught-fail) in
        {1468}let v_477: bool = not-caught-fail(ss_77) in
        {1469}let v_478: bitstring = (if v_477 then catch-fail(symmetricstateunpack(ss_77)) else caught-fail) in
        {1470}let v_479: bool = (not-caught-fail(v_478) && success?(1-proj-3-tuple(v_478))) in
        {1471}let h_69: bitstring = (if v_479 then 3-proj-3-tuple(v_478) else caught-fail) in
        {1472}let ck_84: key = (if v_479 then 2-proj-3-tuple(v_478) else caught-fail) in
        {1473}let cs_69: cipherstate = (if v_479 then 1-proj-3-tuple(v_478) else caught-fail) in
        {1474}let ss_78: symmetricstate = (if v_477 then catch-fail((if v_479 then symmetricstatepack(cs_69,ck_84,hash(h_69,rm_15)) else fail-any)) else caught-fail) in
        {1475}let v_480: bool = not-caught-fail(ss_78) in
        {1476}let data_6: bitstring = (if v_480 then catch-fail(getpublickey(s_15)) else caught-fail) in
        {1477}let v_481: bool = not-caught-fail(data_6) in
        {1478}let v_482: bitstring = (if v_481 then catch-fail(symmetricstateunpack(ss_78)) else caught-fail) in
        {1479}let v_483: bool = (not-caught-fail(v_482) && success?(1-proj-3-tuple(v_482))) in
        {1480}let h_70: bitstring = (if v_483 then 3-proj-3-tuple(v_482) else caught-fail) in
        {1481}let ck_85: key = (if v_483 then 2-proj-3-tuple(v_482) else caught-fail) in
        {1482}let cs_70: cipherstate = (if v_483 then 1-proj-3-tuple(v_482) else caught-fail) in
        {1483}let ss_79: symmetricstate = (if v_480 then catch-fail((if v_481 then (if v_483 then symmetricstatepack(cs_70,ck_85,hash(h_70,data_6)) else fail-any) else fail-any)) else caught-fail) in
        {1484}let v_484: bool = not-caught-fail(ss_79) in
        {1485}let data_7: bitstring = (if v_484 then catch-fail(getpublickey(m_15)) else caught-fail) in
        {1486}let v_485: bool = not-caught-fail(data_7) in
        {1487}let v_486: bitstring = (if v_485 then catch-fail(symmetricstateunpack(ss_79)) else caught-fail) in
        {1488}let v_487: bool = (not-caught-fail(v_486) && success?(1-proj-3-tuple(v_486))) in
        {1489}let h_71: bitstring = (if v_487 then 3-proj-3-tuple(v_486) else caught-fail) in
        {1490}let ck_86: key = (if v_487 then 2-proj-3-tuple(v_486) else caught-fail) in
        {1491}let cs_71: cipherstate = (if v_487 then 1-proj-3-tuple(v_486) else caught-fail) in
        {1492}let ss_80: symmetricstate = (if v_484 then catch-fail((if v_485 then (if v_487 then symmetricstatepack(cs_71,ck_86,hash(h_71,data_7)) else fail-any) else fail-any)) else caught-fail) in
        {1493}let v_488: bool = not-caught-fail(ss_80) in
        {1494}let hs_45: handshakestate = (if v_474 then (if v_477 then (if v_480 then (if v_484 then (if v_488 then handshakestatepack(ss_80,s_15,m_15,e_24,rs_15,rm_15,re_18,psk_15,false) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1495}insert statestore(me_3,them_3,sid_4,statepack_a(hs_45))
    ) | (
        {1610}get statestore(=me_3,=them_3,=sid_4,statepack_a(hs_46: handshakestate)) in
        {1496}in(pub, message_a_3: bitstring);
        {1497}let v_489: bitstring = catch-fail(handshakestateunpack(hs_46)) in
        {1498}let v_490: bool = (not-caught-fail(v_489) && success?(1-proj-9-tuple(v_489))) in
        {1499}let initiator_13: bool = (if v_490 then 9-proj-9-tuple(v_489) else caught-fail) in
        {1500}let psk_16: key = (if v_490 then 8-proj-9-tuple(v_489) else caught-fail) in
        {1501}let re_19: key = (if v_490 then 7-proj-9-tuple(v_489) else caught-fail) in
        {1502}let rm_16: key = (if v_490 then 6-proj-9-tuple(v_489) else caught-fail) in
        {1503}let rs_16: key = (if v_490 then 5-proj-9-tuple(v_489) else caught-fail) in
        {1504}let e_25: keypair = (if v_490 then 4-proj-9-tuple(v_489) else caught-fail) in
        {1505}let m_16: keypair = (if v_490 then 3-proj-9-tuple(v_489) else caught-fail) in
        {1506}let s_16: keypair = (if v_490 then 2-proj-9-tuple(v_489) else caught-fail) in
        {1507}let ss_81: symmetricstate = (if v_490 then 1-proj-9-tuple(v_489) else caught-fail) in
        {1508}let v_491: bitstring = (if v_490 then catch-fail(deconcat3(message_a_3)) else caught-fail) in
        {1509}let v_492: bool = (not-caught-fail(v_491) && success?(1-proj-3-tuple(v_491))) in
        {1510}let ciphertext_24: bitstring = (if v_492 then 3-proj-3-tuple(v_491) else caught-fail) in
        {1511}let ns_12: bitstring = (if v_492 then 2-proj-3-tuple(v_491) else caught-fail) in
        {1512}let ne_15: bitstring = (if v_492 then 1-proj-3-tuple(v_491) else caught-fail) in
        {1513}let valid1_6: bool = (if v_492 then true else caught-fail) in
        {1514}let re_20: key = (if v_492 then ne_15 else caught-fail) in
        {1515}let v_493: bitstring = (if v_492 then catch-fail(symmetricstateunpack(ss_81)) else caught-fail) in
        {1516}let v_494: bool = (not-caught-fail(v_493) && success?(1-proj-3-tuple(v_493))) in
        {1517}let h_72: bitstring = (if v_494 then 3-proj-3-tuple(v_493) else caught-fail) in
        {1518}let ck_87: key = (if v_494 then 2-proj-3-tuple(v_493) else caught-fail) in
        {1519}let cs_72: cipherstate = (if v_494 then 1-proj-3-tuple(v_493) else caught-fail) in
        {1520}let ss_82: symmetricstate = (if v_492 then catch-fail((if v_494 then symmetricstatepack(cs_72,ck_87,hash(h_72,re_20)) else fail-any)) else caught-fail) in
        {1521}let v_495: bool = not-caught-fail(ss_82) in
        {1522}let v_496: bitstring = (if v_495 then catch-fail(keypairunpack(m_16)) else caught-fail) in
        {1523}let v_497: bool = (not-caught-fail(v_496) && success?(1-proj-2-tuple(v_496))) in
        {1524}let my_private_key_15: key = (if v_497 then 2-proj-2-tuple(v_496) else caught-fail) in
        {1525}let my_public_key_15: key = (if v_497 then 1-proj-2-tuple(v_496) else caught-fail) in
        {1526}let input_key_material_18: key = (if v_495 then catch-fail((if v_497 then dhexp(my_private_key_15,re_20) else fail-any)) else caught-fail) in
        {1527}let v_498: bool = not-caught-fail(input_key_material_18) in
        {1528}let v_499: bitstring = (if v_498 then catch-fail(symmetricstateunpack(ss_82)) else caught-fail) in
        {1529}let v_500: bool = (not-caught-fail(v_499) && success?(1-proj-3-tuple(v_499))) in
        {1530}let h_73: bitstring = (if v_500 then 3-proj-3-tuple(v_499) else caught-fail) in
        {1531}let ck_88: key = (if v_500 then 2-proj-3-tuple(v_499) else caught-fail) in
        {1532}let cs_73: cipherstate = (if v_500 then 1-proj-3-tuple(v_499) else caught-fail) in
        {1533}let output1_18: key = (if v_500 then hmac_hash1(ck_88,input_key_material_18) else caught-fail) in
        {1534}let output2_18: key = (if v_500 then hmac_hash2(ck_88,input_key_material_18) else caught-fail) in
        {1535}let output3_18: key = (if v_500 then hmac_hash3(ck_88,input_key_material_18) else caught-fail) in
        {1536}let v_501: bitstring = (if v_500 then catch-fail((output1_18,output2_18,output3_18)) else caught-fail) in
        {1537}let v_502: bool = (not-caught-fail(v_501) && success?(1-proj-3-tuple(v_501))) in
        {1538}let output_15: key = (if v_502 then 3-proj-3-tuple(v_501) else caught-fail) in
        {1539}let temp_k_15: key = (if v_502 then 2-proj-3-tuple(v_501) else caught-fail) in
        {1540}let ck_89: key = (if v_502 then 1-proj-3-tuple(v_501) else caught-fail) in
        {1541}let ss_83: symmetricstate = (if v_495 then catch-fail((if v_498 then (if v_500 then (if v_502 then symmetricstatepack(cipherstatepack(temp_k_15,minnonce),ck_89,h_73) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1542}let v_503: bool = not-caught-fail(ss_83) in
        {1543}let v_504: bitstring = (if v_503 then catch-fail(keypairunpack(s_16)) else caught-fail) in
        {1544}let v_505: bool = (not-caught-fail(v_504) && success?(1-proj-2-tuple(v_504))) in
        {1545}let my_private_key_16: key = (if v_505 then 2-proj-2-tuple(v_504) else caught-fail) in
        {1546}let my_public_key_16: key = (if v_505 then 1-proj-2-tuple(v_504) else caught-fail) in
        {1547}let input_key_material_19: key = (if v_503 then catch-fail((if v_505 then dhexp(my_private_key_16,rm_16) else fail-any)) else caught-fail) in
        {1548}let v_506: bool = not-caught-fail(input_key_material_19) in
        {1549}let v_507: bitstring = (if v_506 then catch-fail(symmetricstateunpack(ss_83)) else caught-fail) in
        {1550}let v_508: bool = (not-caught-fail(v_507) && success?(1-proj-3-tuple(v_507))) in
        {1551}let h_74: bitstring = (if v_508 then 3-proj-3-tuple(v_507) else caught-fail) in
        {1552}let ck_90: key = (if v_508 then 2-proj-3-tuple(v_507) else caught-fail) in
        {1553}let cs_74: cipherstate = (if v_508 then 1-proj-3-tuple(v_507) else caught-fail) in
        {1554}let output1_19: key = (if v_508 then hmac_hash1(ck_90,input_key_material_19) else caught-fail) in
        {1555}let output2_19: key = (if v_508 then hmac_hash2(ck_90,input_key_material_19) else caught-fail) in
        {1556}let output3_19: key = (if v_508 then hmac_hash3(ck_90,input_key_material_19) else caught-fail) in
        {1557}let v_509: bitstring = (if v_508 then catch-fail((output1_19,output2_19,output3_19)) else caught-fail) in
        {1558}let v_510: bool = (not-caught-fail(v_509) && success?(1-proj-3-tuple(v_509))) in
        {1559}let output_16: key = (if v_510 then 3-proj-3-tuple(v_509) else caught-fail) in
        {1560}let temp_k_16: key = (if v_510 then 2-proj-3-tuple(v_509) else caught-fail) in
        {1561}let ck_91: key = (if v_510 then 1-proj-3-tuple(v_509) else caught-fail) in
        {1562}let ss_84: symmetricstate = (if v_503 then catch-fail((if v_506 then (if v_508 then (if v_510 then symmetricstatepack(cipherstatepack(temp_k_16,minnonce),ck_91,h_74) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1563}let v_511: bool = not-caught-fail(ss_84) in
        {1564}let v_512: bitstring = (if v_511 then catch-fail(symmetricstateunpack(ss_84)) else caught-fail) in
        {1565}let v_513: bool = (not-caught-fail(v_512) && success?(1-proj-3-tuple(v_512))) in
        {1566}let h_75: bitstring = (if v_513 then 3-proj-3-tuple(v_512) else caught-fail) in
        {1567}let ck_92: key = (if v_513 then 2-proj-3-tuple(v_512) else caught-fail) in
        {1568}let cs_75: cipherstate = (if v_513 then 1-proj-3-tuple(v_512) else caught-fail) in
        {1569}let v_514: bitstring = (if v_513 then catch-fail(cipherstateunpack(cs_75)) else caught-fail) in
        {1570}let v_515: bool = (not-caught-fail(v_514) && success?(1-proj-2-tuple(v_514))) in
        {1571}let n_24: nonce = (if v_515 then 2-proj-2-tuple(v_514) else caught-fail) in
        {1572}let k_28: key = (if v_515 then 1-proj-2-tuple(v_514) else caught-fail) in
        {1573}let d_6: aead = (if v_515 then catch-fail(decrypt(k_28,n_24,h_75,ciphertext_24)) else caught-fail) in
        {1574}let v_516: bool = not-caught-fail(d_6) in
        {1575}let v_517: bitstring = (if v_516 then catch-fail(aeadunpack(d_6)) else caught-fail) in
        {1576}let v_518: bool = (not-caught-fail(v_517) && success?(1-proj-3-tuple(v_517))) in
        {1577}let plaintext_18: bitstring = (if v_518 then 3-proj-3-tuple(v_517) else caught-fail) in
        {1578}let adi_6: bitstring = (if v_518 then 2-proj-3-tuple(v_517) else caught-fail) in
        {1579}let valid_18: bool = (if v_518 then 1-proj-3-tuple(v_517) else caught-fail) in
        {1580}let n_25: nonce = (if v_518 then increment_nonce(n_24) else caught-fail) in
        {1581}let v_519: bitstring = (if v_518 then catch-fail(cipherstateunpack(cs_75)) else caught-fail) in
        {1582}let v_520: bool = (not-caught-fail(v_519) && success?(1-proj-2-tuple(v_519))) in
        {1583}let o_12: nonce = (if v_520 then 2-proj-2-tuple(v_519) else caught-fail) in
        {1584}let k_29: key = (if v_520 then 1-proj-2-tuple(v_519) else caught-fail) in
        {1585}let csi_24: cipherstate = (if v_518 then catch-fail((if v_520 then cipherstatepack(k_29,n_25) else fail-any)) else caught-fail) in
        {1586}let v_521: bool = not-caught-fail(csi_24) in
        {1587}let v_522: bitstring = (if v_513 then catch-fail((if v_515 then (if v_516 then (if v_518 then (if v_521 then (csi_24,plaintext_18,valid_18) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1588}let v_523: bool = (not-caught-fail(v_522) && success?(1-proj-3-tuple(v_522))) in
        {1589}let valid_19: bool = (if v_523 then 3-proj-3-tuple(v_522) else caught-fail) in
        {1590}let plaintext_19: bitstring = (if v_523 then 2-proj-3-tuple(v_522) else caught-fail) in
        {1591}let csi_25: cipherstate = (if v_523 then 1-proj-3-tuple(v_522) else caught-fail) in
        {1592}let ss_85: symmetricstate = (if v_523 then symmetricstatepack(csi_25,ck_92,h_75) else caught-fail) in
        {1593}let v_524: bitstring = (if v_523 then catch-fail(symmetricstateunpack(ss_85)) else caught-fail) in
        {1594}let v_525: bool = (not-caught-fail(v_524) && success?(1-proj-3-tuple(v_524))) in
        {1595}let h_76: bitstring = (if v_525 then 3-proj-3-tuple(v_524) else caught-fail) in
        {1596}let ck_93: key = (if v_525 then 2-proj-3-tuple(v_524) else caught-fail) in
        {1597}let cs_76: cipherstate = (if v_525 then 1-proj-3-tuple(v_524) else caught-fail) in
        {1598}let ssi_15: symmetricstate = (if v_523 then catch-fail((if v_525 then symmetricstatepack(cs_76,ck_93,hash(h_76,ciphertext_24)) else fail-any)) else caught-fail) in
        {1599}let v_526: bool = not-caught-fail(ssi_15) in
        {1600}let v_527: bitstring = (if v_511 then catch-fail((if v_513 then (if v_523 then (if v_526 then (ssi_15,plaintext_19,valid_19) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1601}let v_528: bool = (not-caught-fail(v_527) && success?(1-proj-3-tuple(v_527))) in
        {1602}let valid2_6: bool = (if v_528 then 3-proj-3-tuple(v_527) else caught-fail) in
        {1603}let plaintext_20: bitstring = (if v_528 then 2-proj-3-tuple(v_527) else caught-fail) in
        {1604}let ss_86: symmetricstate = (if v_528 then 1-proj-3-tuple(v_527) else caught-fail) in
        {1605}let v_529: bool = (if v_528 then catch-fail((valid1_6 && valid2_6)) else caught-fail) in
        {1606}let hs_47: handshakestate = (if v_529 then handshakestatepack(ss_86,s_16,m_16,e_25,rs_16,rm_16,re_20,psk_16,initiator_13) else caught-fail) in
        {1607}let (hs_48: handshakestate,plaintext_a_1: bitstring,valid_20: bool) = (if v_490 then (if v_492 then (if v_495 then (if v_503 then (if v_511 then (if v_528 then (if undo-catch-fail(v_529) then (hs_47,plaintext_20,true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1608}event RecvMsg(me_3,them_3,stagepack_a(sid_4),plaintext_a_1);
        {1609}insert statestore(me_3,them_3,sid_4,statepack_b(hs_48))
    ) | (
        {1765}get statestore(=me_3,=them_3,=sid_4,statepack_b(hs_49: handshakestate)) in
        {1611}let payload_6: bitstring = msg_b(me_3,them_3,sid_4) in
        {1612}let v_530: bitstring = catch-fail(handshakestateunpack(hs_49)) in
        {1613}let v_531: bool = (not-caught-fail(v_530) && success?(1-proj-9-tuple(v_530))) in
        {1614}let initiator_14: bool = (if v_531 then 9-proj-9-tuple(v_530) else caught-fail) in
        {1615}let psk_17: key = (if v_531 then 8-proj-9-tuple(v_530) else caught-fail) in
        {1616}let re_21: key = (if v_531 then 7-proj-9-tuple(v_530) else caught-fail) in
        {1617}let rm_17: key = (if v_531 then 6-proj-9-tuple(v_530) else caught-fail) in
        {1618}let rs_17: key = (if v_531 then 5-proj-9-tuple(v_530) else caught-fail) in
        {1619}let e_26: keypair = (if v_531 then 4-proj-9-tuple(v_530) else caught-fail) in
        {1620}let m_17: keypair = (if v_531 then 3-proj-9-tuple(v_530) else caught-fail) in
        {1621}let s_17: keypair = (if v_531 then 2-proj-9-tuple(v_530) else caught-fail) in
        {1622}let ss_87: symmetricstate = (if v_531 then 1-proj-9-tuple(v_530) else caught-fail) in
        {1623}let v_532: bitstring = (if v_531 then catch-fail((empty,empty,empty)) else caught-fail) in
        {1624}let v_533: bool = (not-caught-fail(v_532) && success?(1-proj-3-tuple(v_532))) in
        {1625}let ciphertext_25: bitstring = (if v_533 then 3-proj-3-tuple(v_532) else caught-fail) in
        {1626}let ns_13: bitstring = (if v_533 then 2-proj-3-tuple(v_532) else caught-fail) in
        {1627}let ne_16: bitstring = (if v_533 then 1-proj-3-tuple(v_532) else caught-fail) in
        {1628}let basis_19: key = (if v_533 then key_e(me_3,them_3,sid_4) else caught-fail) in
        {1629}let public_key_19: key = (if v_533 then catch-fail(dhexp(basis_19,validkey(g))) else caught-fail) in
        {1630}let v_534: bool = not-caught-fail(public_key_19) in
        {1631}let e_27: keypair = (if v_533 then catch-fail((if v_534 then keypairpack(validkey(public_key_19),basis_19) else fail-any)) else caught-fail) in
        {1632}let v_535: bool = not-caught-fail(e_27) in
        {1633}let ne_17: bitstring = (if v_535 then catch-fail(getpublickey(e_27)) else caught-fail) in
        {1634}let v_536: bool = not-caught-fail(ne_17) in
        {1635}let v_537: bitstring = (if v_536 then catch-fail(symmetricstateunpack(ss_87)) else caught-fail) in
        {1636}let v_538: bool = (not-caught-fail(v_537) && success?(1-proj-3-tuple(v_537))) in
        {1637}let h_77: bitstring = (if v_538 then 3-proj-3-tuple(v_537) else caught-fail) in
        {1638}let ck_94: key = (if v_538 then 2-proj-3-tuple(v_537) else caught-fail) in
        {1639}let cs_77: cipherstate = (if v_538 then 1-proj-3-tuple(v_537) else caught-fail) in
        {1640}let ss_88: symmetricstate = (if v_536 then catch-fail((if v_538 then symmetricstatepack(cs_77,ck_94,hash(h_77,ne_17)) else fail-any)) else caught-fail) in
        {1641}let v_539: bool = not-caught-fail(ss_88) in
        {1642}let v_540: bitstring = (if v_539 then catch-fail(keypairunpack(e_27)) else caught-fail) in
        {1643}let v_541: bool = (not-caught-fail(v_540) && success?(1-proj-2-tuple(v_540))) in
        {1644}let my_private_key_17: key = (if v_541 then 2-proj-2-tuple(v_540) else caught-fail) in
        {1645}let my_public_key_17: key = (if v_541 then 1-proj-2-tuple(v_540) else caught-fail) in
        {1646}let input_key_material_20: key = (if v_539 then catch-fail((if v_541 then dhexp(my_private_key_17,re_21) else fail-any)) else caught-fail) in
        {1647}let v_542: bool = not-caught-fail(input_key_material_20) in
        {1648}let v_543: bitstring = (if v_542 then catch-fail(symmetricstateunpack(ss_88)) else caught-fail) in
        {1649}let v_544: bool = (not-caught-fail(v_543) && success?(1-proj-3-tuple(v_543))) in
        {1650}let h_78: bitstring = (if v_544 then 3-proj-3-tuple(v_543) else caught-fail) in
        {1651}let ck_95: key = (if v_544 then 2-proj-3-tuple(v_543) else caught-fail) in
        {1652}let cs_78: cipherstate = (if v_544 then 1-proj-3-tuple(v_543) else caught-fail) in
        {1653}let output1_20: key = (if v_544 then hmac_hash1(ck_95,input_key_material_20) else caught-fail) in
        {1654}let output2_20: key = (if v_544 then hmac_hash2(ck_95,input_key_material_20) else caught-fail) in
        {1655}let output3_20: key = (if v_544 then hmac_hash3(ck_95,input_key_material_20) else caught-fail) in
        {1656}let v_545: bitstring = (if v_544 then catch-fail((output1_20,output2_20,output3_20)) else caught-fail) in
        {1657}let v_546: bool = (not-caught-fail(v_545) && success?(1-proj-3-tuple(v_545))) in
        {1658}let output_17: key = (if v_546 then 3-proj-3-tuple(v_545) else caught-fail) in
        {1659}let temp_k_17: key = (if v_546 then 2-proj-3-tuple(v_545) else caught-fail) in
        {1660}let ck_96: key = (if v_546 then 1-proj-3-tuple(v_545) else caught-fail) in
        {1661}let ss_89: symmetricstate = (if v_539 then catch-fail((if v_542 then (if v_544 then (if v_546 then symmetricstatepack(cipherstatepack(temp_k_17,minnonce),ck_96,h_78) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1662}let v_547: bool = not-caught-fail(ss_89) in
        {1663}let v_548: bitstring = (if v_547 then catch-fail(keypairunpack(e_27)) else caught-fail) in
        {1664}let v_549: bool = (not-caught-fail(v_548) && success?(1-proj-2-tuple(v_548))) in
        {1665}let my_private_key_18: key = (if v_549 then 2-proj-2-tuple(v_548) else caught-fail) in
        {1666}let my_public_key_18: key = (if v_549 then 1-proj-2-tuple(v_548) else caught-fail) in
        {1667}let input_key_material_21: key = (if v_547 then catch-fail((if v_549 then dhexp(my_private_key_18,rs_17) else fail-any)) else caught-fail) in
        {1668}let v_550: bool = not-caught-fail(input_key_material_21) in
        {1669}let v_551: bitstring = (if v_550 then catch-fail(symmetricstateunpack(ss_89)) else caught-fail) in
        {1670}let v_552: bool = (not-caught-fail(v_551) && success?(1-proj-3-tuple(v_551))) in
        {1671}let h_79: bitstring = (if v_552 then 3-proj-3-tuple(v_551) else caught-fail) in
        {1672}let ck_97: key = (if v_552 then 2-proj-3-tuple(v_551) else caught-fail) in
        {1673}let cs_79: cipherstate = (if v_552 then 1-proj-3-tuple(v_551) else caught-fail) in
        {1674}let output1_21: key = (if v_552 then hmac_hash1(ck_97,input_key_material_21) else caught-fail) in
        {1675}let output2_21: key = (if v_552 then hmac_hash2(ck_97,input_key_material_21) else caught-fail) in
        {1676}let output3_21: key = (if v_552 then hmac_hash3(ck_97,input_key_material_21) else caught-fail) in
        {1677}let v_553: bitstring = (if v_552 then catch-fail((output1_21,output2_21,output3_21)) else caught-fail) in
        {1678}let v_554: bool = (not-caught-fail(v_553) && success?(1-proj-3-tuple(v_553))) in
        {1679}let output_18: key = (if v_554 then 3-proj-3-tuple(v_553) else caught-fail) in
        {1680}let temp_k_18: key = (if v_554 then 2-proj-3-tuple(v_553) else caught-fail) in
        {1681}let ck_98: key = (if v_554 then 1-proj-3-tuple(v_553) else caught-fail) in
        {1682}let ss_90: symmetricstate = (if v_547 then catch-fail((if v_550 then (if v_552 then (if v_554 then symmetricstatepack(cipherstatepack(temp_k_18,minnonce),ck_98,h_79) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1683}let v_555: bool = not-caught-fail(ss_90) in
        {1684}let v_556: bitstring = (if v_555 then catch-fail(keypairunpack(e_27)) else caught-fail) in
        {1685}let v_557: bool = (not-caught-fail(v_556) && success?(1-proj-2-tuple(v_556))) in
        {1686}let my_private_key_19: key = (if v_557 then 2-proj-2-tuple(v_556) else caught-fail) in
        {1687}let my_public_key_19: key = (if v_557 then 1-proj-2-tuple(v_556) else caught-fail) in
        {1688}let input_key_material_22: key = (if v_555 then catch-fail((if v_557 then dhexp(my_private_key_19,rm_17) else fail-any)) else caught-fail) in
        {1689}let v_558: bool = not-caught-fail(input_key_material_22) in
        {1690}let v_559: bitstring = (if v_558 then catch-fail(symmetricstateunpack(ss_90)) else caught-fail) in
        {1691}let v_560: bool = (not-caught-fail(v_559) && success?(1-proj-3-tuple(v_559))) in
        {1692}let h_80: bitstring = (if v_560 then 3-proj-3-tuple(v_559) else caught-fail) in
        {1693}let ck_99: key = (if v_560 then 2-proj-3-tuple(v_559) else caught-fail) in
        {1694}let cs_80: cipherstate = (if v_560 then 1-proj-3-tuple(v_559) else caught-fail) in
        {1695}let output1_22: key = (if v_560 then hmac_hash1(ck_99,input_key_material_22) else caught-fail) in
        {1696}let output2_22: key = (if v_560 then hmac_hash2(ck_99,input_key_material_22) else caught-fail) in
        {1697}let output3_22: key = (if v_560 then hmac_hash3(ck_99,input_key_material_22) else caught-fail) in
        {1698}let v_561: bitstring = (if v_560 then catch-fail((output1_22,output2_22,output3_22)) else caught-fail) in
        {1699}let v_562: bool = (not-caught-fail(v_561) && success?(1-proj-3-tuple(v_561))) in
        {1700}let output_19: key = (if v_562 then 3-proj-3-tuple(v_561) else caught-fail) in
        {1701}let temp_k_19: key = (if v_562 then 2-proj-3-tuple(v_561) else caught-fail) in
        {1702}let ck_100: key = (if v_562 then 1-proj-3-tuple(v_561) else caught-fail) in
        {1703}let ss_91: symmetricstate = (if v_555 then catch-fail((if v_558 then (if v_560 then (if v_562 then symmetricstatepack(cipherstatepack(temp_k_19,minnonce),ck_100,h_80) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1704}let v_563: bool = not-caught-fail(ss_91) in
        {1705}let v_564: bitstring = (if v_563 then catch-fail(symmetricstateunpack(ss_91)) else caught-fail) in
        {1706}let v_565: bool = (not-caught-fail(v_564) && success?(1-proj-3-tuple(v_564))) in
        {1707}let h_81: bitstring = (if v_565 then 3-proj-3-tuple(v_564) else caught-fail) in
        {1708}let ck_101: key = (if v_565 then 2-proj-3-tuple(v_564) else caught-fail) in
        {1709}let cs_81: cipherstate = (if v_565 then 1-proj-3-tuple(v_564) else caught-fail) in
        {1710}let v_566: bitstring = (if v_565 then catch-fail(cipherstateunpack(cs_81)) else caught-fail) in
        {1711}let v_567: bool = (not-caught-fail(v_566) && success?(1-proj-2-tuple(v_566))) in
        {1712}let n_26: nonce = (if v_567 then 2-proj-2-tuple(v_566) else caught-fail) in
        {1713}let k_30: key = (if v_567 then 1-proj-2-tuple(v_566) else caught-fail) in
        {1714}let e_28: bitstring = (if v_567 then encrypt(k_30,n_26,h_81,payload_6) else caught-fail) in
        {1715}let n_27: nonce = (if v_567 then increment_nonce(n_26) else caught-fail) in
        {1716}let v_568: bitstring = (if v_567 then catch-fail(cipherstateunpack(cs_81)) else caught-fail) in
        {1717}let v_569: bool = (not-caught-fail(v_568) && success?(1-proj-2-tuple(v_568))) in
        {1718}let o_13: nonce = (if v_569 then 2-proj-2-tuple(v_568) else caught-fail) in
        {1719}let k_31: key = (if v_569 then 1-proj-2-tuple(v_568) else caught-fail) in
        {1720}let csi_26: cipherstate = (if v_567 then catch-fail((if v_569 then cipherstatepack(k_31,n_27) else fail-any)) else caught-fail) in
        {1721}let v_570: bool = not-caught-fail(csi_26) in
        {1722}let v_571: bitstring = (if v_565 then catch-fail((if v_567 then (if v_570 then (csi_26,e_28) else fail-any) else fail-any)) else caught-fail) in
        {1723}let v_572: bool = (not-caught-fail(v_571) && success?(1-proj-2-tuple(v_571))) in
        {1724}let ciphertext_26: bitstring = (if v_572 then 2-proj-2-tuple(v_571) else caught-fail) in
        {1725}let csi_27: cipherstate = (if v_572 then 1-proj-2-tuple(v_571) else caught-fail) in
        {1726}let ss_92: symmetricstate = (if v_572 then symmetricstatepack(csi_27,ck_101,h_81) else caught-fail) in
        {1727}let v_573: bitstring = (if v_572 then catch-fail(symmetricstateunpack(ss_92)) else caught-fail) in
        {1728}let v_574: bool = (not-caught-fail(v_573) && success?(1-proj-3-tuple(v_573))) in
        {1729}let h_82: bitstring = (if v_574 then 3-proj-3-tuple(v_573) else caught-fail) in
        {1730}let ck_102: key = (if v_574 then 2-proj-3-tuple(v_573) else caught-fail) in
        {1731}let cs_82: cipherstate = (if v_574 then 1-proj-3-tuple(v_573) else caught-fail) in
        {1732}let ssi_16: symmetricstate = (if v_572 then catch-fail((if v_574 then symmetricstatepack(cs_82,ck_102,hash(h_82,ciphertext_26)) else fail-any)) else caught-fail) in
        {1733}let v_575: bool = not-caught-fail(ssi_16) in
        {1734}let v_576: bitstring = (if v_563 then catch-fail((if v_565 then (if v_572 then (if v_575 then (ssi_16,ciphertext_26) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1735}let v_577: bool = (not-caught-fail(v_576) && success?(1-proj-2-tuple(v_576))) in
        {1736}let ciphertext_27: bitstring = (if v_577 then 2-proj-2-tuple(v_576) else caught-fail) in
        {1737}let ss_93: symmetricstate = (if v_577 then 1-proj-2-tuple(v_576) else caught-fail) in
        {1738}let hs_50: handshakestate = (if v_577 then handshakestatepack(ss_93,s_17,m_17,e_27,rs_17,rm_17,re_21,psk_17,initiator_14) else caught-fail) in
        {1739}let message_buffer_6: bitstring = (if v_577 then concat3(ne_17,ns_13,ciphertext_27) else caught-fail) in
        {1740}let v_578: bitstring = (if v_577 then catch-fail(symmetricstateunpack(ss_93)) else caught-fail) in
        {1741}let v_579: bool = (not-caught-fail(v_578) && success?(1-proj-3-tuple(v_578))) in
        {1742}let h_83: bitstring = (if v_579 then 3-proj-3-tuple(v_578) else caught-fail) in
        {1743}let ck_103: key = (if v_579 then 2-proj-3-tuple(v_578) else caught-fail) in
        {1744}let cs_83: cipherstate = (if v_579 then 1-proj-3-tuple(v_578) else caught-fail) in
        {1745}let input_key_material_23: key = (if v_579 then zero else caught-fail) in
        {1746}let output1_23: key = (if v_579 then hmac_hash1(ck_103,input_key_material_23) else caught-fail) in
        {1747}let output2_23: key = (if v_579 then hmac_hash2(ck_103,input_key_material_23) else caught-fail) in
        {1748}let output3_23: key = (if v_579 then hmac_hash3(ck_103,input_key_material_23) else caught-fail) in
        {1749}let v_580: bitstring = (if v_579 then catch-fail((output1_23,output2_23,output3_23)) else caught-fail) in
        {1750}let v_581: bool = (not-caught-fail(v_580) && success?(1-proj-3-tuple(v_580))) in
        {1751}let temp_k3_3: key = (if v_581 then 3-proj-3-tuple(v_580) else caught-fail) in
        {1752}let temp_k2_3: key = (if v_581 then 2-proj-3-tuple(v_580) else caught-fail) in
        {1753}let temp_k1_3: key = (if v_581 then 1-proj-3-tuple(v_580) else caught-fail) in
        {1754}let cs1_15: cipherstate = (if v_581 then cipherstatepack(temp_k1_3,minnonce) else caught-fail) in
        {1755}let cs2_15: cipherstate = (if v_581 then cipherstatepack(temp_k2_3,minnonce) else caught-fail) in
        {1756}let v_582: bitstring = (if v_577 then catch-fail((if v_579 then (if v_581 then (ss_93,cs1_15,cs2_15) else fail-any) else fail-any)) else caught-fail) in
        {1757}let v_583: bool = (not-caught-fail(v_582) && success?(1-proj-3-tuple(v_582))) in
        {1758}let cs2_16: cipherstate = (if v_583 then 3-proj-3-tuple(v_582) else caught-fail) in
        {1759}let cs1_16: cipherstate = (if v_583 then 2-proj-3-tuple(v_582) else caught-fail) in
        {1760}let ssi_17: symmetricstate = (if v_583 then 1-proj-3-tuple(v_582) else caught-fail) in
        {1761}let (hs_51: handshakestate,message_b_3: bitstring,cs1_17: cipherstate,cs2_17: cipherstate) = (if v_531 then (if v_533 then (if v_535 then (if v_536 then (if v_539 then (if v_547 then (if v_555 then (if v_563 then (if v_577 then (if v_583 then (hs_50,message_buffer_6,cs1_16,cs2_16) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1762}event SendMsg(me_3,them_3,stagepack_b(sid_4),msg_b(me_3,them_3,sid_4));
        {1763}insert statestore(me_3,them_3,sid_4,statepack_c(hs_51,cs1_17,cs2_17));
        {1764}out(pub, message_b_3)
    ) | (
        {1766}!
        {1832}get statestore(=me_3,=them_3,=sid_4,statepack_c(hs_52: handshakestate,cs1_18: cipherstate,cs2_18: cipherstate)) in
        {1767}let hs_53: handshakestate = handshakestatesetcs(hs_52,cs1_18) in
        {1768}in(pub, message_c_3: bitstring);
        {1769}let v_584: bitstring = catch-fail(handshakestateunpack(hs_53)) in
        {1770}let v_585: bool = (not-caught-fail(v_584) && success?(1-proj-9-tuple(v_584))) in
        {1771}let initiator_15: bool = (if v_585 then 9-proj-9-tuple(v_584) else caught-fail) in
        {1772}let psk_18: key = (if v_585 then 8-proj-9-tuple(v_584) else caught-fail) in
        {1773}let re_22: key = (if v_585 then 7-proj-9-tuple(v_584) else caught-fail) in
        {1774}let rm_18: key = (if v_585 then 6-proj-9-tuple(v_584) else caught-fail) in
        {1775}let rs_18: key = (if v_585 then 5-proj-9-tuple(v_584) else caught-fail) in
        {1776}let e_29: keypair = (if v_585 then 4-proj-9-tuple(v_584) else caught-fail) in
        {1777}let m_18: keypair = (if v_585 then 3-proj-9-tuple(v_584) else caught-fail) in
        {1778}let s_18: keypair = (if v_585 then 2-proj-9-tuple(v_584) else caught-fail) in
        {1779}let ss_94: symmetricstate = (if v_585 then 1-proj-9-tuple(v_584) else caught-fail) in
        {1780}let v_586: bitstring = (if v_585 then catch-fail(deconcat3(message_c_3)) else caught-fail) in
        {1781}let v_587: bool = (not-caught-fail(v_586) && success?(1-proj-3-tuple(v_586))) in
        {1782}let ciphertext_28: bitstring = (if v_587 then 3-proj-3-tuple(v_586) else caught-fail) in
        {1783}let ns_14: bitstring = (if v_587 then 2-proj-3-tuple(v_586) else caught-fail) in
        {1784}let ne_18: bitstring = (if v_587 then 1-proj-3-tuple(v_586) else caught-fail) in
        {1785}let valid1_7: bool = (if v_587 then true else caught-fail) in
        {1786}let v_588: bitstring = (if v_587 then catch-fail(symmetricstateunpack(ss_94)) else caught-fail) in
        {1787}let v_589: bool = (not-caught-fail(v_588) && success?(1-proj-3-tuple(v_588))) in
        {1788}let h_84: bitstring = (if v_589 then 3-proj-3-tuple(v_588) else caught-fail) in
        {1789}let ck_104: key = (if v_589 then 2-proj-3-tuple(v_588) else caught-fail) in
        {1790}let cs_84: cipherstate = (if v_589 then 1-proj-3-tuple(v_588) else caught-fail) in
        {1791}let v_590: bitstring = (if v_589 then catch-fail(cipherstateunpack(cs_84)) else caught-fail) in
        {1792}let v_591: bool = (not-caught-fail(v_590) && success?(1-proj-2-tuple(v_590))) in
        {1793}let n_28: nonce = (if v_591 then 2-proj-2-tuple(v_590) else caught-fail) in
        {1794}let k_32: key = (if v_591 then 1-proj-2-tuple(v_590) else caught-fail) in
        {1795}let d_7: aead = (if v_591 then catch-fail(decrypt(k_32,n_28,h_84,ciphertext_28)) else caught-fail) in
        {1796}let v_592: bool = not-caught-fail(d_7) in
        {1797}let v_593: bitstring = (if v_592 then catch-fail(aeadunpack(d_7)) else caught-fail) in
        {1798}let v_594: bool = (not-caught-fail(v_593) && success?(1-proj-3-tuple(v_593))) in
        {1799}let plaintext_21: bitstring = (if v_594 then 3-proj-3-tuple(v_593) else caught-fail) in
        {1800}let adi_7: bitstring = (if v_594 then 2-proj-3-tuple(v_593) else caught-fail) in
        {1801}let valid_21: bool = (if v_594 then 1-proj-3-tuple(v_593) else caught-fail) in
        {1802}let n_29: nonce = (if v_594 then increment_nonce(n_28) else caught-fail) in
        {1803}let v_595: bitstring = (if v_594 then catch-fail(cipherstateunpack(cs_84)) else caught-fail) in
        {1804}let v_596: bool = (not-caught-fail(v_595) && success?(1-proj-2-tuple(v_595))) in
        {1805}let o_14: nonce = (if v_596 then 2-proj-2-tuple(v_595) else caught-fail) in
        {1806}let k_33: key = (if v_596 then 1-proj-2-tuple(v_595) else caught-fail) in
        {1807}let csi_28: cipherstate = (if v_594 then catch-fail((if v_596 then cipherstatepack(k_33,n_29) else fail-any)) else caught-fail) in
        {1808}let v_597: bool = not-caught-fail(csi_28) in
        {1809}let v_598: bitstring = (if v_589 then catch-fail((if v_591 then (if v_592 then (if v_594 then (if v_597 then (csi_28,plaintext_21,valid_21) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1810}let v_599: bool = (not-caught-fail(v_598) && success?(1-proj-3-tuple(v_598))) in
        {1811}let valid_22: bool = (if v_599 then 3-proj-3-tuple(v_598) else caught-fail) in
        {1812}let plaintext_22: bitstring = (if v_599 then 2-proj-3-tuple(v_598) else caught-fail) in
        {1813}let csi_29: cipherstate = (if v_599 then 1-proj-3-tuple(v_598) else caught-fail) in
        {1814}let ss_95: symmetricstate = (if v_599 then symmetricstatepack(csi_29,ck_104,h_84) else caught-fail) in
        {1815}let v_600: bitstring = (if v_599 then catch-fail(symmetricstateunpack(ss_95)) else caught-fail) in
        {1816}let v_601: bool = (not-caught-fail(v_600) && success?(1-proj-3-tuple(v_600))) in
        {1817}let h_85: bitstring = (if v_601 then 3-proj-3-tuple(v_600) else caught-fail) in
        {1818}let ck_105: key = (if v_601 then 2-proj-3-tuple(v_600) else caught-fail) in
        {1819}let cs_85: cipherstate = (if v_601 then 1-proj-3-tuple(v_600) else caught-fail) in
        {1820}let ssi_18: symmetricstate = (if v_599 then catch-fail((if v_601 then symmetricstatepack(cs_85,ck_105,hash(h_85,ciphertext_28)) else fail-any)) else caught-fail) in
        {1821}let v_602: bool = not-caught-fail(ssi_18) in
        {1822}let v_603: bitstring = (if v_587 then catch-fail((if v_589 then (if v_599 then (if v_602 then (ssi_18,plaintext_22,valid_22) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1823}let v_604: bool = (not-caught-fail(v_603) && success?(1-proj-3-tuple(v_603))) in
        {1824}let valid2_7: bool = (if v_604 then 3-proj-3-tuple(v_603) else caught-fail) in
        {1825}let plaintext_23: bitstring = (if v_604 then 2-proj-3-tuple(v_603) else caught-fail) in
        {1826}let ss_96: symmetricstate = (if v_604 then 1-proj-3-tuple(v_603) else caught-fail) in
        {1827}let v_605: bool = (if v_604 then catch-fail((valid1_7 && valid2_7)) else caught-fail) in
        {1828}let hs_54: handshakestate = (if v_605 then handshakestatepack(ss_96,s_18,m_18,e_29,rs_18,rm_18,re_22,psk_18,initiator_15) else caught-fail) in
        {1829}let (hs_55: handshakestate,plaintext_c_1: bitstring,valid_23: bool) = (if v_585 then (if v_587 then (if v_604 then (if undo-catch-fail(v_605) then (hs_54,plaintext_23,true) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1830}event RecvMsg(me_3,them_3,stagepack_c(sid_4),plaintext_c_1);
        {1831}insert statestore(me_3,them_3,sid_4,statepack_d(hs_55,handshakestategetcs(hs_55),cs2_18))
    ) | (
        {1833}!
        {1890}get statestore(=me_3,=them_3,=sid_4,statepack_d(hs_56: handshakestate,cs1_19: cipherstate,cs2_19: cipherstate)) in
        {1834}let hs_57: handshakestate = handshakestatesetcs(hs_56,cs2_19) in
        {1835}let payload_7: bitstring = msg_d(me_3,them_3,sid_4) in
        {1836}let v_606: bitstring = catch-fail(handshakestateunpack(hs_57)) in
        {1837}let v_607: bool = (not-caught-fail(v_606) && success?(1-proj-9-tuple(v_606))) in
        {1838}let initiator_16: bool = (if v_607 then 9-proj-9-tuple(v_606) else caught-fail) in
        {1839}let psk_19: key = (if v_607 then 8-proj-9-tuple(v_606) else caught-fail) in
        {1840}let re_23: key = (if v_607 then 7-proj-9-tuple(v_606) else caught-fail) in
        {1841}let rm_19: key = (if v_607 then 6-proj-9-tuple(v_606) else caught-fail) in
        {1842}let rs_19: key = (if v_607 then 5-proj-9-tuple(v_606) else caught-fail) in
        {1843}let e_30: keypair = (if v_607 then 4-proj-9-tuple(v_606) else caught-fail) in
        {1844}let m_19: keypair = (if v_607 then 3-proj-9-tuple(v_606) else caught-fail) in
        {1845}let s_19: keypair = (if v_607 then 2-proj-9-tuple(v_606) else caught-fail) in
        {1846}let ss_97: symmetricstate = (if v_607 then 1-proj-9-tuple(v_606) else caught-fail) in
        {1847}let v_608: bitstring = (if v_607 then catch-fail((empty,empty,empty)) else caught-fail) in
        {1848}let v_609: bool = (not-caught-fail(v_608) && success?(1-proj-3-tuple(v_608))) in
        {1849}let ciphertext_29: bitstring = (if v_609 then 3-proj-3-tuple(v_608) else caught-fail) in
        {1850}let ns_15: bitstring = (if v_609 then 2-proj-3-tuple(v_608) else caught-fail) in
        {1851}let ne_19: bitstring = (if v_609 then 1-proj-3-tuple(v_608) else caught-fail) in
        {1852}let v_610: bitstring = (if v_609 then catch-fail(symmetricstateunpack(ss_97)) else caught-fail) in
        {1853}let v_611: bool = (not-caught-fail(v_610) && success?(1-proj-3-tuple(v_610))) in
        {1854}let h_86: bitstring = (if v_611 then 3-proj-3-tuple(v_610) else caught-fail) in
        {1855}let ck_106: key = (if v_611 then 2-proj-3-tuple(v_610) else caught-fail) in
        {1856}let cs_86: cipherstate = (if v_611 then 1-proj-3-tuple(v_610) else caught-fail) in
        {1857}let v_612: bitstring = (if v_611 then catch-fail(cipherstateunpack(cs_86)) else caught-fail) in
        {1858}let v_613: bool = (not-caught-fail(v_612) && success?(1-proj-2-tuple(v_612))) in
        {1859}let n_30: nonce = (if v_613 then 2-proj-2-tuple(v_612) else caught-fail) in
        {1860}let k_34: key = (if v_613 then 1-proj-2-tuple(v_612) else caught-fail) in
        {1861}let e_31: bitstring = (if v_613 then encrypt(k_34,n_30,h_86,payload_7) else caught-fail) in
        {1862}let n_31: nonce = (if v_613 then increment_nonce(n_30) else caught-fail) in
        {1863}let v_614: bitstring = (if v_613 then catch-fail(cipherstateunpack(cs_86)) else caught-fail) in
        {1864}let v_615: bool = (not-caught-fail(v_614) && success?(1-proj-2-tuple(v_614))) in
        {1865}let o_15: nonce = (if v_615 then 2-proj-2-tuple(v_614) else caught-fail) in
        {1866}let k_35: key = (if v_615 then 1-proj-2-tuple(v_614) else caught-fail) in
        {1867}let csi_30: cipherstate = (if v_613 then catch-fail((if v_615 then cipherstatepack(k_35,n_31) else fail-any)) else caught-fail) in
        {1868}let v_616: bool = not-caught-fail(csi_30) in
        {1869}let v_617: bitstring = (if v_611 then catch-fail((if v_613 then (if v_616 then (csi_30,e_31) else fail-any) else fail-any)) else caught-fail) in
        {1870}let v_618: bool = (not-caught-fail(v_617) && success?(1-proj-2-tuple(v_617))) in
        {1871}let ciphertext_30: bitstring = (if v_618 then 2-proj-2-tuple(v_617) else caught-fail) in
        {1872}let csi_31: cipherstate = (if v_618 then 1-proj-2-tuple(v_617) else caught-fail) in
        {1873}let ss_98: symmetricstate = (if v_618 then symmetricstatepack(csi_31,ck_106,h_86) else caught-fail) in
        {1874}let v_619: bitstring = (if v_618 then catch-fail(symmetricstateunpack(ss_98)) else caught-fail) in
        {1875}let v_620: bool = (not-caught-fail(v_619) && success?(1-proj-3-tuple(v_619))) in
        {1876}let h_87: bitstring = (if v_620 then 3-proj-3-tuple(v_619) else caught-fail) in
        {1877}let ck_107: key = (if v_620 then 2-proj-3-tuple(v_619) else caught-fail) in
        {1878}let cs_87: cipherstate = (if v_620 then 1-proj-3-tuple(v_619) else caught-fail) in
        {1879}let ssi_19: symmetricstate = (if v_618 then catch-fail((if v_620 then symmetricstatepack(cs_87,ck_107,hash(h_87,ciphertext_30)) else fail-any)) else caught-fail) in
        {1880}let v_621: bool = not-caught-fail(ssi_19) in
        {1881}let v_622: bitstring = (if v_609 then catch-fail((if v_611 then (if v_618 then (if v_621 then (ssi_19,ciphertext_30) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1882}let v_623: bool = (not-caught-fail(v_622) && success?(1-proj-2-tuple(v_622))) in
        {1883}let ciphertext_31: bitstring = (if v_623 then 2-proj-2-tuple(v_622) else caught-fail) in
        {1884}let ss_99: symmetricstate = (if v_623 then 1-proj-2-tuple(v_622) else caught-fail) in
        {1885}let hs_58: handshakestate = (if v_623 then handshakestatepack(ss_99,s_19,m_19,e_30,rs_19,rm_19,re_23,psk_19,initiator_16) else caught-fail) in
        {1886}let message_buffer_7: bitstring = (if v_623 then concat3(ne_19,ns_15,ciphertext_31) else caught-fail) in
        {1887}let (hs_59: handshakestate,message_d_3: bitstring) = (if v_607 then (if v_609 then (if v_623 then (hs_58,message_buffer_7) else fail-any) else fail-any) else fail-any) in
        {1888}event SendMsg(me_3,them_3,stagepack_d(sid_4),msg_d(me_3,them_3,sid_4));
        {1889}out(pub, message_d_3)
    ) | (
        {1891}event LeakS(phase0,me_3);
        {1892}event LeakM(phase0,me_3);
        {1893}out(pub, (key_s(me_3),key_m(me_3)))
    ) | (
        {1894}phase 1;
        {1895}event LeakS(phase1,me_3);
        {1896}event LeakM(phase1,me_3);
        {1897}out(pub, (key_s(me_3),key_m(me_3)))
    )
)

--  Process 1 (that is, process 0, with let moved downwards):
{1}out(pub, (key_s(charlie),key_m(charlie)));
{2}!
{3}new sid: sessionid;
(
    {4}let me: principal = alice in
    {7}let basis: key = key_s(me) in
    {8}let public_key: key = catch-fail(dhexp(basis,validkey(g))) in
    {9}let v: bool = not-caught-fail(public_key) in
    {10}let s: keypair = (if v then keypairpack(validkey(public_key),basis) else fail-any) in
    {11}let basis_1: key = key_m(me) in
    {12}let public_key_1: key = catch-fail(dhexp(basis_1,validkey(g))) in
    {13}let v_1: bool = not-caught-fail(public_key_1) in
    {14}let m: keypair = (if v_1 then keypairpack(validkey(public_key_1),basis_1) else fail-any) in
    {15}out(pub, (getpublickey(s),getpublickey(m)));
    {6}let sid_1: sessionid = sid in
    {5}let them: principal = bob in
    (
        {17}let basis_2: key = key_s(them) in
        {18}let public_key_2: key = catch-fail(dhexp(basis_2,validkey(g))) in
        {19}let v_2: bool = not-caught-fail(public_key_2) in
        {20}let rs: key = getpublickey((if v_2 then keypairpack(validkey(public_key_2),basis_2) else fail-any)) in
        {21}let basis_3: key = key_s(them) in
        {22}let public_key_3: key = catch-fail(dhexp(basis_3,validkey(g))) in
        {23}let v_3: bool = not-caught-fail(public_key_3) in
        {24}let rm: key = getpublickey((if v_3 then keypairpack(validkey(public_key_3),basis_3) else fail-any)) in
        {31}let k: key = empty in
        {32}let cs: cipherstate = cipherstatepack(k,minnonce) in
        {28}let protocol_name: bitstring = somename in
        {29}let h: bitstring = hash(protocol_name,empty) in
        {30}let ck: key = h in
        {33}let ss: symmetricstate = symmetricstatepack(cs,ck,h) in
        {34}let v_4: bitstring = catch-fail(symmetricstateunpack(ss)) in
        {35}let v_5: bool = (not-caught-fail(v_4) && success?(1-proj-3-tuple(v_4))) in
        {36}let h_1: bitstring = (if v_5 then 3-proj-3-tuple(v_4) else caught-fail) in
        {37}let ck_1: key = (if v_5 then 2-proj-3-tuple(v_4) else caught-fail) in
        {38}let cs_1: cipherstate = (if v_5 then 1-proj-3-tuple(v_4) else caught-fail) in
        {26}let prologue: bitstring = empty in
        {39}let ss_1: symmetricstate = catch-fail((if v_5 then symmetricstatepack(cs_1,ck_1,hash(h_1,prologue)) else fail-any)) in
        {40}let v_6: bool = not-caught-fail(ss_1) in
        {41}let data: bitstring = (if v_6 then catch-fail(getpublickey(s)) else caught-fail) in
        {42}let v_7: bool = not-caught-fail(data) in
        {43}let v_8: bitstring = (if v_7 then catch-fail(symmetricstateunpack(ss_1)) else caught-fail) in
        {44}let v_9: bool = (not-caught-fail(v_8) && success?(1-proj-3-tuple(v_8))) in
        {45}let h_2: bitstring = (if v_9 then 3-proj-3-tuple(v_8) else caught-fail) in
        {46}let ck_2: key = (if v_9 then 2-proj-3-tuple(v_8) else caught-fail) in
        {47}let cs_2: cipherstate = (if v_9 then 1-proj-3-tuple(v_8) else caught-fail) in
        {48}let ss_2: symmetricstate = (if v_6 then catch-fail((if v_7 then (if v_9 then symmetricstatepack(cs_2,ck_2,hash(h_2,data)) else fail-any) else fail-any)) else caught-fail) in
        {49}let v_10: bool = not-caught-fail(ss_2) in
        {50}let data_1: bitstring = (if v_10 then catch-fail(getpublickey(m)) else caught-fail) in
        {51}let v_11: bool = not-caught-fail(data_1) in
        {52}let v_12: bitstring = (if v_11 then catch-fail(symmetricstateunpack(ss_2)) else caught-fail) in
        {53}let v_13: bool = (not-caught-fail(v_12) && success?(1-proj-3-tuple(v_12))) in
        {54}let h_3: bitstring = (if v_13 then 3-proj-3-tuple(v_12) else caught-fail) in
        {55}let ck_3: key = (if v_13 then 2-proj-3-tuple(v_12) else caught-fail) in
        {56}let cs_3: cipherstate = (if v_13 then 1-proj-3-tuple(v_12) else caught-fail) in
        {57}let ss_3: symmetricstate = (if v_10 then catch-fail((if v_11 then (if v_13 then symmetricstatepack(cs_3,ck_3,hash(h_3,data_1)) else fail-any) else fail-any)) else caught-fail) in
        {58}let v_14: bool = not-caught-fail(ss_3) in
        {59}let v_15: bitstring = (if v_14 then catch-fail(symmetricstateunpack(ss_3)) else caught-fail) in
        {60}let v_16: bool = (not-caught-fail(v_15) && success?(1-proj-3-tuple(v_15))) in
        {61}let h_4: bitstring = (if v_16 then 3-proj-3-tuple(v_15) else caught-fail) in
        {62}let ck_4: key = (if v_16 then 2-proj-3-tuple(v_15) else caught-fail) in
        {63}let cs_4: cipherstate = (if v_16 then 1-proj-3-tuple(v_15) else caught-fail) in
        {64}let ss_4: symmetricstate = (if v_14 then catch-fail((if v_16 then symmetricstatepack(cs_4,ck_4,hash(h_4,rs)) else fail-any)) else caught-fail) in
        {65}let v_17: bool = not-caught-fail(ss_4) in
        {66}let v_18: bitstring = (if v_17 then catch-fail(symmetricstateunpack(ss_4)) else caught-fail) in
        {67}let v_19: bool = (not-caught-fail(v_18) && success?(1-proj-3-tuple(v_18))) in
        {68}let h_5: bitstring = (if v_19 then 3-proj-3-tuple(v_18) else caught-fail) in
        {69}let ck_5: key = (if v_19 then 2-proj-3-tuple(v_18) else caught-fail) in
        {70}let cs_5: cipherstate = (if v_19 then 1-proj-3-tuple(v_18) else caught-fail) in
        {71}let ss_5: symmetricstate = (if v_17 then catch-fail((if v_19 then symmetricstatepack(cs_5,ck_5,hash(h_5,rm)) else fail-any)) else caught-fail) in
        {72}let v_20: bool = not-caught-fail(ss_5) in
        {27}let psk: key = empty in
        {25}let re: key = empty in
        {16}let e: keypair = keypairpack(empty,empty) in
        {73}let hs: handshakestate = (if v_6 then (if v_10 then (if v_14 then (if v_17 then (if v_20 then handshakestatepack(ss_5,s,m,e,rs,rm,re,psk,true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {74}insert statestore(me,them,sid_1,statepack_a(hs))
    ) | (
        {187}get statestore(=me,=them,=sid_1,statepack_a(hs_1: handshakestate)) in
        {76}let v_21: bitstring = catch-fail(handshakestateunpack(hs_1)) in
        {77}let v_22: bool = (not-caught-fail(v_21) && success?(1-proj-9-tuple(v_21))) in
        {78}let initiator_1: bool = (if v_22 then 9-proj-9-tuple(v_21) else caught-fail) in
        {79}let psk_1: key = (if v_22 then 8-proj-9-tuple(v_21) else caught-fail) in
        {80}let re_1: key = (if v_22 then 7-proj-9-tuple(v_21) else caught-fail) in
        {81}let rm_1: key = (if v_22 then 6-proj-9-tuple(v_21) else caught-fail) in
        {82}let rs_1: key = (if v_22 then 5-proj-9-tuple(v_21) else caught-fail) in
        {83}let e_1: keypair = (if v_22 then 4-proj-9-tuple(v_21) else caught-fail) in
        {84}let m_1: keypair = (if v_22 then 3-proj-9-tuple(v_21) else caught-fail) in
        {85}let s_1: keypair = (if v_22 then 2-proj-9-tuple(v_21) else caught-fail) in
        {86}let ss_6: symmetricstate = (if v_22 then 1-proj-9-tuple(v_21) else caught-fail) in
        {87}let v_23: bitstring = (if v_22 then catch-fail((empty,empty,empty)) else caught-fail) in
        {88}let v_24: bool = (not-caught-fail(v_23) && success?(1-proj-3-tuple(v_23))) in
        {89}let ciphertext: bitstring = (if v_24 then 3-proj-3-tuple(v_23) else caught-fail) in
        {90}let ns: bitstring = (if v_24 then 2-proj-3-tuple(v_23) else caught-fail) in
        {91}let ne: bitstring = (if v_24 then 1-proj-3-tuple(v_23) else caught-fail) in
        {92}let basis_4: key = (if v_24 then key_e(me,them,sid_1) else caught-fail) in
        {93}let public_key_4: key = (if v_24 then catch-fail(dhexp(basis_4,validkey(g))) else caught-fail) in
        {94}let v_25: bool = not-caught-fail(public_key_4) in
        {95}let e_2: keypair = (if v_24 then catch-fail((if v_25 then keypairpack(validkey(public_key_4),basis_4) else fail-any)) else caught-fail) in
        {96}let v_26: bool = not-caught-fail(e_2) in
        {97}let ne_1: bitstring = (if v_26 then catch-fail(getpublickey(e_2)) else caught-fail) in
        {98}let v_27: bool = not-caught-fail(ne_1) in
        {99}let v_28: bitstring = (if v_27 then catch-fail(symmetricstateunpack(ss_6)) else caught-fail) in
        {100}let v_29: bool = (not-caught-fail(v_28) && success?(1-proj-3-tuple(v_28))) in
        {101}let h_6: bitstring = (if v_29 then 3-proj-3-tuple(v_28) else caught-fail) in
        {102}let ck_6: key = (if v_29 then 2-proj-3-tuple(v_28) else caught-fail) in
        {103}let cs_6: cipherstate = (if v_29 then 1-proj-3-tuple(v_28) else caught-fail) in
        {104}let ss_7: symmetricstate = (if v_27 then catch-fail((if v_29 then symmetricstatepack(cs_6,ck_6,hash(h_6,ne_1)) else fail-any)) else caught-fail) in
        {105}let v_30: bool = not-caught-fail(ss_7) in
        {106}let v_31: bitstring = (if v_30 then catch-fail(keypairunpack(e_2)) else caught-fail) in
        {107}let v_32: bool = (not-caught-fail(v_31) && success?(1-proj-2-tuple(v_31))) in
        {108}let my_private_key: key = (if v_32 then 2-proj-2-tuple(v_31) else caught-fail) in
        {109}let my_public_key: key = (if v_32 then 1-proj-2-tuple(v_31) else caught-fail) in
        {110}let input_key_material: key = (if v_30 then catch-fail((if v_32 then dhexp(my_private_key,rm_1) else fail-any)) else caught-fail) in
        {111}let v_33: bool = not-caught-fail(input_key_material) in
        {112}let v_34: bitstring = (if v_33 then catch-fail(symmetricstateunpack(ss_7)) else caught-fail) in
        {113}let v_35: bool = (not-caught-fail(v_34) && success?(1-proj-3-tuple(v_34))) in
        {114}let h_7: bitstring = (if v_35 then 3-proj-3-tuple(v_34) else caught-fail) in
        {115}let ck_7: key = (if v_35 then 2-proj-3-tuple(v_34) else caught-fail) in
        {116}let cs_7: cipherstate = (if v_35 then 1-proj-3-tuple(v_34) else caught-fail) in
        {119}let output3: key = (if v_35 then hmac_hash3(ck_7,input_key_material) else caught-fail) in
        {118}let output2: key = (if v_35 then hmac_hash2(ck_7,input_key_material) else caught-fail) in
        {117}let output1: key = (if v_35 then hmac_hash1(ck_7,input_key_material) else caught-fail) in
        {120}let v_36: bitstring = (if v_35 then catch-fail((output1,output2,output3)) else caught-fail) in
        {121}let v_37: bool = (not-caught-fail(v_36) && success?(1-proj-3-tuple(v_36))) in
        {122}let output_3: key = (if v_37 then 3-proj-3-tuple(v_36) else caught-fail) in
        {123}let temp_k: key = (if v_37 then 2-proj-3-tuple(v_36) else caught-fail) in
        {124}let ck_8: key = (if v_37 then 1-proj-3-tuple(v_36) else caught-fail) in
        {125}let ss_8: symmetricstate = (if v_30 then catch-fail((if v_33 then (if v_35 then (if v_37 then symmetricstatepack(cipherstatepack(temp_k,minnonce),ck_8,h_7) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {126}let v_38: bool = not-caught-fail(ss_8) in
        {127}let v_39: bitstring = (if v_38 then catch-fail(keypairunpack(m_1)) else caught-fail) in
        {128}let v_40: bool = (not-caught-fail(v_39) && success?(1-proj-2-tuple(v_39))) in
        {129}let my_private_key_1: key = (if v_40 then 2-proj-2-tuple(v_39) else caught-fail) in
        {130}let my_public_key_1: key = (if v_40 then 1-proj-2-tuple(v_39) else caught-fail) in
        {131}let input_key_material_1: key = (if v_38 then catch-fail((if v_40 then dhexp(my_private_key_1,rs_1) else fail-any)) else caught-fail) in
        {132}let v_41: bool = not-caught-fail(input_key_material_1) in
        {133}let v_42: bitstring = (if v_41 then catch-fail(symmetricstateunpack(ss_8)) else caught-fail) in
        {134}let v_43: bool = (not-caught-fail(v_42) && success?(1-proj-3-tuple(v_42))) in
        {135}let h_8: bitstring = (if v_43 then 3-proj-3-tuple(v_42) else caught-fail) in
        {136}let ck_9: key = (if v_43 then 2-proj-3-tuple(v_42) else caught-fail) in
        {137}let cs_8: cipherstate = (if v_43 then 1-proj-3-tuple(v_42) else caught-fail) in
        {140}let output3_1: key = (if v_43 then hmac_hash3(ck_9,input_key_material_1) else caught-fail) in
        {139}let output2_1: key = (if v_43 then hmac_hash2(ck_9,input_key_material_1) else caught-fail) in
        {138}let output1_1: key = (if v_43 then hmac_hash1(ck_9,input_key_material_1) else caught-fail) in
        {141}let v_44: bitstring = (if v_43 then catch-fail((output1_1,output2_1,output3_1)) else caught-fail) in
        {142}let v_45: bool = (not-caught-fail(v_44) && success?(1-proj-3-tuple(v_44))) in
        {143}let output: key = (if v_45 then 3-proj-3-tuple(v_44) else caught-fail) in
        {144}let temp_k_1: key = (if v_45 then 2-proj-3-tuple(v_44) else caught-fail) in
        {145}let ck_10: key = (if v_45 then 1-proj-3-tuple(v_44) else caught-fail) in
        {146}let ss_9: symmetricstate = (if v_38 then catch-fail((if v_41 then (if v_43 then (if v_45 then symmetricstatepack(cipherstatepack(temp_k_1,minnonce),ck_10,h_8) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {147}let v_46: bool = not-caught-fail(ss_9) in
        {148}let v_47: bitstring = (if v_46 then catch-fail(symmetricstateunpack(ss_9)) else caught-fail) in
        {149}let v_48: bool = (not-caught-fail(v_47) && success?(1-proj-3-tuple(v_47))) in
        {150}let h_9: bitstring = (if v_48 then 3-proj-3-tuple(v_47) else caught-fail) in
        {151}let ck_11: key = (if v_48 then 2-proj-3-tuple(v_47) else caught-fail) in
        {152}let cs_9: cipherstate = (if v_48 then 1-proj-3-tuple(v_47) else caught-fail) in
        {153}let v_49: bitstring = (if v_48 then catch-fail(cipherstateunpack(cs_9)) else caught-fail) in
        {154}let v_50: bool = (not-caught-fail(v_49) && success?(1-proj-2-tuple(v_49))) in
        {155}let n: nonce = (if v_50 then 2-proj-2-tuple(v_49) else caught-fail) in
        {156}let k_1: key = (if v_50 then 1-proj-2-tuple(v_49) else caught-fail) in
        {159}let v_51: bitstring = (if v_50 then catch-fail(cipherstateunpack(cs_9)) else caught-fail) in
        {160}let v_52: bool = (not-caught-fail(v_51) && success?(1-proj-2-tuple(v_51))) in
        {161}let o: nonce = (if v_52 then 2-proj-2-tuple(v_51) else caught-fail) in
        {162}let k_2: key = (if v_52 then 1-proj-2-tuple(v_51) else caught-fail) in
        {158}let n_1: nonce = (if v_50 then increment_nonce(n) else caught-fail) in
        {163}let csi: cipherstate = (if v_50 then catch-fail((if v_52 then cipherstatepack(k_2,n_1) else fail-any)) else caught-fail) in
        {164}let v_53: bool = not-caught-fail(csi) in
        {75}let payload: bitstring = msg_a(me,them,sid_1) in
        {157}let e_3: bitstring = (if v_50 then encrypt(k_1,n,h_9,payload) else caught-fail) in
        {165}let v_54: bitstring = (if v_48 then catch-fail((if v_50 then (if v_53 then (csi,e_3) else fail-any) else fail-any)) else caught-fail) in
        {166}let v_55: bool = (not-caught-fail(v_54) && success?(1-proj-2-tuple(v_54))) in
        {167}let ciphertext_1: bitstring = (if v_55 then 2-proj-2-tuple(v_54) else caught-fail) in
        {168}let csi_1: cipherstate = (if v_55 then 1-proj-2-tuple(v_54) else caught-fail) in
        {169}let ss_10: symmetricstate = (if v_55 then symmetricstatepack(csi_1,ck_11,h_9) else caught-fail) in
        {170}let v_56: bitstring = (if v_55 then catch-fail(symmetricstateunpack(ss_10)) else caught-fail) in
        {171}let v_57: bool = (not-caught-fail(v_56) && success?(1-proj-3-tuple(v_56))) in
        {172}let h_10: bitstring = (if v_57 then 3-proj-3-tuple(v_56) else caught-fail) in
        {173}let ck_12: key = (if v_57 then 2-proj-3-tuple(v_56) else caught-fail) in
        {174}let cs_10: cipherstate = (if v_57 then 1-proj-3-tuple(v_56) else caught-fail) in
        {175}let ssi: symmetricstate = (if v_55 then catch-fail((if v_57 then symmetricstatepack(cs_10,ck_12,hash(h_10,ciphertext_1)) else fail-any)) else caught-fail) in
        {176}let v_58: bool = not-caught-fail(ssi) in
        {177}let v_59: bitstring = (if v_46 then catch-fail((if v_48 then (if v_55 then (if v_58 then (ssi,ciphertext_1) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {178}let v_60: bool = (not-caught-fail(v_59) && success?(1-proj-2-tuple(v_59))) in
        {179}let ciphertext_2: bitstring = (if v_60 then 2-proj-2-tuple(v_59) else caught-fail) in
        {180}let ss_11: symmetricstate = (if v_60 then 1-proj-2-tuple(v_59) else caught-fail) in
        {182}let message_buffer: bitstring = (if v_60 then concat3(ne_1,ns,ciphertext_2) else caught-fail) in
        {181}let hs_2: handshakestate = (if v_60 then handshakestatepack(ss_11,s_1,m_1,e_2,rs_1,rm_1,re_1,psk_1,initiator_1) else caught-fail) in
        {183}let (hs_3: handshakestate,message_a: bitstring) = (if v_22 then (if v_24 then (if v_26 then (if v_27 then (if v_30 then (if v_38 then (if v_46 then (if v_60 then (hs_2,message_buffer) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {184}event SendMsg(me,them,stagepack_a(sid_1),msg_a(me,them,sid_1));
        {185}insert statestore(me,them,sid_1,statepack_b(hs_3));
        {186}out(pub, message_a)
    ) | (
        {344}get statestore(=me,=them,=sid_1,statepack_b(hs_4: handshakestate)) in
        {188}in(pub, message_b: bitstring);
        {189}let v_61: bitstring = catch-fail(handshakestateunpack(hs_4)) in
        {190}let v_62: bool = (not-caught-fail(v_61) && success?(1-proj-9-tuple(v_61))) in
        {191}let initiator_2: bool = (if v_62 then 9-proj-9-tuple(v_61) else caught-fail) in
        {192}let psk_2: key = (if v_62 then 8-proj-9-tuple(v_61) else caught-fail) in
        {193}let re_2: key = (if v_62 then 7-proj-9-tuple(v_61) else caught-fail) in
        {194}let rm_2: key = (if v_62 then 6-proj-9-tuple(v_61) else caught-fail) in
        {195}let rs_2: key = (if v_62 then 5-proj-9-tuple(v_61) else caught-fail) in
        {196}let e_4: keypair = (if v_62 then 4-proj-9-tuple(v_61) else caught-fail) in
        {197}let m_2: keypair = (if v_62 then 3-proj-9-tuple(v_61) else caught-fail) in
        {198}let s_2: keypair = (if v_62 then 2-proj-9-tuple(v_61) else caught-fail) in
        {199}let ss_12: symmetricstate = (if v_62 then 1-proj-9-tuple(v_61) else caught-fail) in
        {200}let v_63: bitstring = (if v_62 then catch-fail(deconcat3(message_b)) else caught-fail) in
        {201}let v_64: bool = (not-caught-fail(v_63) && success?(1-proj-3-tuple(v_63))) in
        {202}let ciphertext_3: bitstring = (if v_64 then 3-proj-3-tuple(v_63) else caught-fail) in
        {203}let ns_1: bitstring = (if v_64 then 2-proj-3-tuple(v_63) else caught-fail) in
        {204}let ne_2: bitstring = (if v_64 then 1-proj-3-tuple(v_63) else caught-fail) in
        {207}let v_65: bitstring = (if v_64 then catch-fail(symmetricstateunpack(ss_12)) else caught-fail) in
        {208}let v_66: bool = (not-caught-fail(v_65) && success?(1-proj-3-tuple(v_65))) in
        {209}let h_11: bitstring = (if v_66 then 3-proj-3-tuple(v_65) else caught-fail) in
        {210}let ck_13: key = (if v_66 then 2-proj-3-tuple(v_65) else caught-fail) in
        {211}let cs_11: cipherstate = (if v_66 then 1-proj-3-tuple(v_65) else caught-fail) in
        {206}let re_3: key = (if v_64 then ne_2 else caught-fail) in
        {212}let ss_13: symmetricstate = (if v_64 then catch-fail((if v_66 then symmetricstatepack(cs_11,ck_13,hash(h_11,re_3)) else fail-any)) else caught-fail) in
        {213}let v_67: bool = not-caught-fail(ss_13) in
        {214}let v_68: bitstring = (if v_67 then catch-fail(keypairunpack(e_4)) else caught-fail) in
        {215}let v_69: bool = (not-caught-fail(v_68) && success?(1-proj-2-tuple(v_68))) in
        {216}let my_private_key_2: key = (if v_69 then 2-proj-2-tuple(v_68) else caught-fail) in
        {217}let my_public_key_2: key = (if v_69 then 1-proj-2-tuple(v_68) else caught-fail) in
        {218}let input_key_material_2: key = (if v_67 then catch-fail((if v_69 then dhexp(my_private_key_2,re_3) else fail-any)) else caught-fail) in
        {219}let v_70: bool = not-caught-fail(input_key_material_2) in
        {220}let v_71: bitstring = (if v_70 then catch-fail(symmetricstateunpack(ss_13)) else caught-fail) in
        {221}let v_72: bool = (not-caught-fail(v_71) && success?(1-proj-3-tuple(v_71))) in
        {222}let h_12: bitstring = (if v_72 then 3-proj-3-tuple(v_71) else caught-fail) in
        {223}let ck_14: key = (if v_72 then 2-proj-3-tuple(v_71) else caught-fail) in
        {224}let cs_12: cipherstate = (if v_72 then 1-proj-3-tuple(v_71) else caught-fail) in
        {227}let output3_2: key = (if v_72 then hmac_hash3(ck_14,input_key_material_2) else caught-fail) in
        {226}let output2_2: key = (if v_72 then hmac_hash2(ck_14,input_key_material_2) else caught-fail) in
        {225}let output1_2: key = (if v_72 then hmac_hash1(ck_14,input_key_material_2) else caught-fail) in
        {228}let v_73: bitstring = (if v_72 then catch-fail((output1_2,output2_2,output3_2)) else caught-fail) in
        {229}let v_74: bool = (not-caught-fail(v_73) && success?(1-proj-3-tuple(v_73))) in
        {230}let output_1: key = (if v_74 then 3-proj-3-tuple(v_73) else caught-fail) in
        {231}let temp_k_2: key = (if v_74 then 2-proj-3-tuple(v_73) else caught-fail) in
        {232}let ck_15: key = (if v_74 then 1-proj-3-tuple(v_73) else caught-fail) in
        {233}let ss_14: symmetricstate = (if v_67 then catch-fail((if v_70 then (if v_72 then (if v_74 then symmetricstatepack(cipherstatepack(temp_k_2,minnonce),ck_15,h_12) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {234}let v_75: bool = not-caught-fail(ss_14) in
        {235}let v_76: bitstring = (if v_75 then catch-fail(keypairunpack(s_2)) else caught-fail) in
        {236}let v_77: bool = (not-caught-fail(v_76) && success?(1-proj-2-tuple(v_76))) in
        {237}let my_private_key_3: key = (if v_77 then 2-proj-2-tuple(v_76) else caught-fail) in
        {238}let my_public_key_3: key = (if v_77 then 1-proj-2-tuple(v_76) else caught-fail) in
        {239}let input_key_material_3: key = (if v_75 then catch-fail((if v_77 then dhexp(my_private_key_3,re_3) else fail-any)) else caught-fail) in
        {240}let v_78: bool = not-caught-fail(input_key_material_3) in
        {241}let v_79: bitstring = (if v_78 then catch-fail(symmetricstateunpack(ss_14)) else caught-fail) in
        {242}let v_80: bool = (not-caught-fail(v_79) && success?(1-proj-3-tuple(v_79))) in
        {243}let h_13: bitstring = (if v_80 then 3-proj-3-tuple(v_79) else caught-fail) in
        {244}let ck_16: key = (if v_80 then 2-proj-3-tuple(v_79) else caught-fail) in
        {245}let cs_13: cipherstate = (if v_80 then 1-proj-3-tuple(v_79) else caught-fail) in
        {248}let output3_3: key = (if v_80 then hmac_hash3(ck_16,input_key_material_3) else caught-fail) in
        {247}let output2_3: key = (if v_80 then hmac_hash2(ck_16,input_key_material_3) else caught-fail) in
        {246}let output1_3: key = (if v_80 then hmac_hash1(ck_16,input_key_material_3) else caught-fail) in
        {249}let v_81: bitstring = (if v_80 then catch-fail((output1_3,output2_3,output3_3)) else caught-fail) in
        {250}let v_82: bool = (not-caught-fail(v_81) && success?(1-proj-3-tuple(v_81))) in
        {251}let output_2: key = (if v_82 then 3-proj-3-tuple(v_81) else caught-fail) in
        {252}let temp_k_3: key = (if v_82 then 2-proj-3-tuple(v_81) else caught-fail) in
        {253}let ck_17: key = (if v_82 then 1-proj-3-tuple(v_81) else caught-fail) in
        {254}let ss_15: symmetricstate = (if v_75 then catch-fail((if v_78 then (if v_80 then (if v_82 then symmetricstatepack(cipherstatepack(temp_k_3,minnonce),ck_17,h_13) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {255}let v_83: bool = not-caught-fail(ss_15) in
        {256}let v_84: bitstring = (if v_83 then catch-fail(keypairunpack(m_2)) else caught-fail) in
        {257}let v_85: bool = (not-caught-fail(v_84) && success?(1-proj-2-tuple(v_84))) in
        {258}let my_private_key_4: key = (if v_85 then 2-proj-2-tuple(v_84) else caught-fail) in
        {259}let my_public_key_4: key = (if v_85 then 1-proj-2-tuple(v_84) else caught-fail) in
        {260}let input_key_material_4: key = (if v_83 then catch-fail((if v_85 then dhexp(my_private_key_4,re_3) else fail-any)) else caught-fail) in
        {261}let v_86: bool = not-caught-fail(input_key_material_4) in
        {262}let v_87: bitstring = (if v_86 then catch-fail(symmetricstateunpack(ss_15)) else caught-fail) in
        {263}let v_88: bool = (not-caught-fail(v_87) && success?(1-proj-3-tuple(v_87))) in
        {264}let h_14: bitstring = (if v_88 then 3-proj-3-tuple(v_87) else caught-fail) in
        {265}let ck_18: key = (if v_88 then 2-proj-3-tuple(v_87) else caught-fail) in
        {266}let cs_14: cipherstate = (if v_88 then 1-proj-3-tuple(v_87) else caught-fail) in
        {269}let output3_4: key = (if v_88 then hmac_hash3(ck_18,input_key_material_4) else caught-fail) in
        {268}let output2_4: key = (if v_88 then hmac_hash2(ck_18,input_key_material_4) else caught-fail) in
        {267}let output1_4: key = (if v_88 then hmac_hash1(ck_18,input_key_material_4) else caught-fail) in
        {270}let v_89: bitstring = (if v_88 then catch-fail((output1_4,output2_4,output3_4)) else caught-fail) in
        {271}let v_90: bool = (not-caught-fail(v_89) && success?(1-proj-3-tuple(v_89))) in
        {272}let output_4: key = (if v_90 then 3-proj-3-tuple(v_89) else caught-fail) in
        {273}let temp_k_4: key = (if v_90 then 2-proj-3-tuple(v_89) else caught-fail) in
        {274}let ck_19: key = (if v_90 then 1-proj-3-tuple(v_89) else caught-fail) in
        {275}let ss_16: symmetricstate = (if v_83 then catch-fail((if v_86 then (if v_88 then (if v_90 then symmetricstatepack(cipherstatepack(temp_k_4,minnonce),ck_19,h_14) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {276}let v_91: bool = not-caught-fail(ss_16) in
        {277}let v_92: bitstring = (if v_91 then catch-fail(symmetricstateunpack(ss_16)) else caught-fail) in
        {278}let v_93: bool = (not-caught-fail(v_92) && success?(1-proj-3-tuple(v_92))) in
        {279}let h_15: bitstring = (if v_93 then 3-proj-3-tuple(v_92) else caught-fail) in
        {280}let ck_20: key = (if v_93 then 2-proj-3-tuple(v_92) else caught-fail) in
        {281}let cs_15: cipherstate = (if v_93 then 1-proj-3-tuple(v_92) else caught-fail) in
        {282}let v_94: bitstring = (if v_93 then catch-fail(cipherstateunpack(cs_15)) else caught-fail) in
        {283}let v_95: bool = (not-caught-fail(v_94) && success?(1-proj-2-tuple(v_94))) in
        {284}let n_2: nonce = (if v_95 then 2-proj-2-tuple(v_94) else caught-fail) in
        {285}let k_3: key = (if v_95 then 1-proj-2-tuple(v_94) else caught-fail) in
        {286}let d: aead = (if v_95 then catch-fail(decrypt(k_3,n_2,h_15,ciphertext_3)) else caught-fail) in
        {287}let v_96: bool = not-caught-fail(d) in
        {288}let v_97: bitstring = (if v_96 then catch-fail(aeadunpack(d)) else caught-fail) in
        {289}let v_98: bool = (not-caught-fail(v_97) && success?(1-proj-3-tuple(v_97))) in
        {290}let plaintext: bitstring = (if v_98 then 3-proj-3-tuple(v_97) else caught-fail) in
        {291}let adi: bitstring = (if v_98 then 2-proj-3-tuple(v_97) else caught-fail) in
        {292}let valid: bool = (if v_98 then 1-proj-3-tuple(v_97) else caught-fail) in
        {294}let v_99: bitstring = (if v_98 then catch-fail(cipherstateunpack(cs_15)) else caught-fail) in
        {295}let v_100: bool = (not-caught-fail(v_99) && success?(1-proj-2-tuple(v_99))) in
        {296}let o_1: nonce = (if v_100 then 2-proj-2-tuple(v_99) else caught-fail) in
        {297}let k_4: key = (if v_100 then 1-proj-2-tuple(v_99) else caught-fail) in
        {293}let n_3: nonce = (if v_98 then increment_nonce(n_2) else caught-fail) in
        {298}let csi_2: cipherstate = (if v_98 then catch-fail((if v_100 then cipherstatepack(k_4,n_3) else fail-any)) else caught-fail) in
        {299}let v_101: bool = not-caught-fail(csi_2) in
        {300}let v_102: bitstring = (if v_93 then catch-fail((if v_95 then (if v_96 then (if v_98 then (if v_101 then (csi_2,plaintext,valid) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {301}let v_103: bool = (not-caught-fail(v_102) && success?(1-proj-3-tuple(v_102))) in
        {302}let valid_1: bool = (if v_103 then 3-proj-3-tuple(v_102) else caught-fail) in
        {303}let plaintext_1: bitstring = (if v_103 then 2-proj-3-tuple(v_102) else caught-fail) in
        {304}let csi_3: cipherstate = (if v_103 then 1-proj-3-tuple(v_102) else caught-fail) in
        {305}let ss_17: symmetricstate = (if v_103 then symmetricstatepack(csi_3,ck_20,h_15) else caught-fail) in
        {306}let v_104: bitstring = (if v_103 then catch-fail(symmetricstateunpack(ss_17)) else caught-fail) in
        {307}let v_105: bool = (not-caught-fail(v_104) && success?(1-proj-3-tuple(v_104))) in
        {308}let h_16: bitstring = (if v_105 then 3-proj-3-tuple(v_104) else caught-fail) in
        {309}let ck_21: key = (if v_105 then 2-proj-3-tuple(v_104) else caught-fail) in
        {310}let cs_16: cipherstate = (if v_105 then 1-proj-3-tuple(v_104) else caught-fail) in
        {311}let ssi_1: symmetricstate = (if v_103 then catch-fail((if v_105 then symmetricstatepack(cs_16,ck_21,hash(h_16,ciphertext_3)) else fail-any)) else caught-fail) in
        {312}let v_106: bool = not-caught-fail(ssi_1) in
        {313}let v_107: bitstring = (if v_91 then catch-fail((if v_93 then (if v_103 then (if v_106 then (ssi_1,plaintext_1,valid_1) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {314}let v_108: bool = (not-caught-fail(v_107) && success?(1-proj-3-tuple(v_107))) in
        {315}let valid2: bool = (if v_108 then 3-proj-3-tuple(v_107) else caught-fail) in
        {316}let plaintext_2: bitstring = (if v_108 then 2-proj-3-tuple(v_107) else caught-fail) in
        {317}let ss_18: symmetricstate = (if v_108 then 1-proj-3-tuple(v_107) else caught-fail) in
        {205}let valid1: bool = (if v_64 then true else caught-fail) in
        {318}let v_109: bool = (if v_108 then catch-fail((valid1 && valid2)) else caught-fail) in
        {320}let v_110: bitstring = (if v_109 then catch-fail(symmetricstateunpack(ss_18)) else caught-fail) in
        {321}let v_111: bool = (not-caught-fail(v_110) && success?(1-proj-3-tuple(v_110))) in
        {322}let h_17: bitstring = (if v_111 then 3-proj-3-tuple(v_110) else caught-fail) in
        {323}let ck_22: key = (if v_111 then 2-proj-3-tuple(v_110) else caught-fail) in
        {324}let cs_17: cipherstate = (if v_111 then 1-proj-3-tuple(v_110) else caught-fail) in
        {325}let input_key_material_5: key = (if v_111 then zero else caught-fail) in
        {328}let output3_5: key = (if v_111 then hmac_hash3(ck_22,input_key_material_5) else caught-fail) in
        {327}let output2_5: key = (if v_111 then hmac_hash2(ck_22,input_key_material_5) else caught-fail) in
        {326}let output1_5: key = (if v_111 then hmac_hash1(ck_22,input_key_material_5) else caught-fail) in
        {329}let v_112: bitstring = (if v_111 then catch-fail((output1_5,output2_5,output3_5)) else caught-fail) in
        {330}let v_113: bool = (not-caught-fail(v_112) && success?(1-proj-3-tuple(v_112))) in
        {331}let temp_k3: key = (if v_113 then 3-proj-3-tuple(v_112) else caught-fail) in
        {332}let temp_k2: key = (if v_113 then 2-proj-3-tuple(v_112) else caught-fail) in
        {333}let temp_k1: key = (if v_113 then 1-proj-3-tuple(v_112) else caught-fail) in
        {335}let cs2: cipherstate = (if v_113 then cipherstatepack(temp_k2,minnonce) else caught-fail) in
        {334}let cs1: cipherstate = (if v_113 then cipherstatepack(temp_k1,minnonce) else caught-fail) in
        {336}let v_114: bitstring = (if v_109 then catch-fail((if v_111 then (if v_113 then (ss_18,cs1,cs2) else fail-any) else fail-any)) else caught-fail) in
        {337}let v_115: bool = (not-caught-fail(v_114) && success?(1-proj-3-tuple(v_114))) in
        {338}let cs2_1: cipherstate = (if v_115 then 3-proj-3-tuple(v_114) else caught-fail) in
        {339}let cs1_1: cipherstate = (if v_115 then 2-proj-3-tuple(v_114) else caught-fail) in
        {340}let ssi_2: symmetricstate = (if v_115 then 1-proj-3-tuple(v_114) else caught-fail) in
        {319}let hs_5: handshakestate = (if v_109 then handshakestatepack(ss_18,s_2,m_2,e_4,rs_2,rm_2,re_3,psk_2,initiator_2) else caught-fail) in
        {341}let (hs_6: handshakestate,plaintext_b: bitstring,valid_2: bool,cs1_2: cipherstate,cs2_2: cipherstate) = (if v_62 then (if v_64 then (if v_67 then (if v_75 then (if v_83 then (if v_91 then (if v_108 then (if undo-catch-fail(v_109) then (if v_115 then (hs_5,plaintext_2,true,cs1_1,cs2_1) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {342}event RecvMsg(me,them,stagepack_b(sid_1),plaintext_b);
        {343}insert statestore(me,them,sid_1,statepack_c(hs_6,cs1_2,cs2_2))
    ) | (
        {345}!
        {403}get statestore(=me,=them,=sid_1,statepack_c(hs_7: handshakestate,cs1_3: cipherstate,cs2_3: cipherstate)) in
        {346}let hs_8: handshakestate = handshakestatesetcs(hs_7,cs1_3) in
        {348}let v_116: bitstring = catch-fail(handshakestateunpack(hs_8)) in
        {349}let v_117: bool = (not-caught-fail(v_116) && success?(1-proj-9-tuple(v_116))) in
        {350}let initiator_3: bool = (if v_117 then 9-proj-9-tuple(v_116) else caught-fail) in
        {351}let psk_3: key = (if v_117 then 8-proj-9-tuple(v_116) else caught-fail) in
        {352}let re_4: key = (if v_117 then 7-proj-9-tuple(v_116) else caught-fail) in
        {353}let rm_3: key = (if v_117 then 6-proj-9-tuple(v_116) else caught-fail) in
        {354}let rs_3: key = (if v_117 then 5-proj-9-tuple(v_116) else caught-fail) in
        {355}let e_5: keypair = (if v_117 then 4-proj-9-tuple(v_116) else caught-fail) in
        {356}let m_3: keypair = (if v_117 then 3-proj-9-tuple(v_116) else caught-fail) in
        {357}let s_3: keypair = (if v_117 then 2-proj-9-tuple(v_116) else caught-fail) in
        {358}let ss_19: symmetricstate = (if v_117 then 1-proj-9-tuple(v_116) else caught-fail) in
        {359}let v_118: bitstring = (if v_117 then catch-fail((empty,empty,empty)) else caught-fail) in
        {360}let v_119: bool = (not-caught-fail(v_118) && success?(1-proj-3-tuple(v_118))) in
        {361}let ciphertext_4: bitstring = (if v_119 then 3-proj-3-tuple(v_118) else caught-fail) in
        {362}let ns_2: bitstring = (if v_119 then 2-proj-3-tuple(v_118) else caught-fail) in
        {363}let ne_3: bitstring = (if v_119 then 1-proj-3-tuple(v_118) else caught-fail) in
        {364}let v_120: bitstring = (if v_119 then catch-fail(symmetricstateunpack(ss_19)) else caught-fail) in
        {365}let v_121: bool = (not-caught-fail(v_120) && success?(1-proj-3-tuple(v_120))) in
        {366}let h_18: bitstring = (if v_121 then 3-proj-3-tuple(v_120) else caught-fail) in
        {367}let ck_23: key = (if v_121 then 2-proj-3-tuple(v_120) else caught-fail) in
        {368}let cs_18: cipherstate = (if v_121 then 1-proj-3-tuple(v_120) else caught-fail) in
        {369}let v_122: bitstring = (if v_121 then catch-fail(cipherstateunpack(cs_18)) else caught-fail) in
        {370}let v_123: bool = (not-caught-fail(v_122) && success?(1-proj-2-tuple(v_122))) in
        {371}let n_4: nonce = (if v_123 then 2-proj-2-tuple(v_122) else caught-fail) in
        {372}let k_5: key = (if v_123 then 1-proj-2-tuple(v_122) else caught-fail) in
        {375}let v_124: bitstring = (if v_123 then catch-fail(cipherstateunpack(cs_18)) else caught-fail) in
        {376}let v_125: bool = (not-caught-fail(v_124) && success?(1-proj-2-tuple(v_124))) in
        {377}let o_2: nonce = (if v_125 then 2-proj-2-tuple(v_124) else caught-fail) in
        {378}let k_6: key = (if v_125 then 1-proj-2-tuple(v_124) else caught-fail) in
        {374}let n_5: nonce = (if v_123 then increment_nonce(n_4) else caught-fail) in
        {379}let csi_4: cipherstate = (if v_123 then catch-fail((if v_125 then cipherstatepack(k_6,n_5) else fail-any)) else caught-fail) in
        {380}let v_126: bool = not-caught-fail(csi_4) in
        {347}let payload_1: bitstring = msg_c(me,them,sid_1) in
        {373}let e_6: bitstring = (if v_123 then encrypt(k_5,n_4,h_18,payload_1) else caught-fail) in
        {381}let v_127: bitstring = (if v_121 then catch-fail((if v_123 then (if v_126 then (csi_4,e_6) else fail-any) else fail-any)) else caught-fail) in
        {382}let v_128: bool = (not-caught-fail(v_127) && success?(1-proj-2-tuple(v_127))) in
        {383}let ciphertext_5: bitstring = (if v_128 then 2-proj-2-tuple(v_127) else caught-fail) in
        {384}let csi_5: cipherstate = (if v_128 then 1-proj-2-tuple(v_127) else caught-fail) in
        {385}let ss_20: symmetricstate = (if v_128 then symmetricstatepack(csi_5,ck_23,h_18) else caught-fail) in
        {386}let v_129: bitstring = (if v_128 then catch-fail(symmetricstateunpack(ss_20)) else caught-fail) in
        {387}let v_130: bool = (not-caught-fail(v_129) && success?(1-proj-3-tuple(v_129))) in
        {388}let h_19: bitstring = (if v_130 then 3-proj-3-tuple(v_129) else caught-fail) in
        {389}let ck_24: key = (if v_130 then 2-proj-3-tuple(v_129) else caught-fail) in
        {390}let cs_19: cipherstate = (if v_130 then 1-proj-3-tuple(v_129) else caught-fail) in
        {391}let ssi_3: symmetricstate = (if v_128 then catch-fail((if v_130 then symmetricstatepack(cs_19,ck_24,hash(h_19,ciphertext_5)) else fail-any)) else caught-fail) in
        {392}let v_131: bool = not-caught-fail(ssi_3) in
        {393}let v_132: bitstring = (if v_119 then catch-fail((if v_121 then (if v_128 then (if v_131 then (ssi_3,ciphertext_5) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {394}let v_133: bool = (not-caught-fail(v_132) && success?(1-proj-2-tuple(v_132))) in
        {395}let ciphertext_6: bitstring = (if v_133 then 2-proj-2-tuple(v_132) else caught-fail) in
        {396}let ss_21: symmetricstate = (if v_133 then 1-proj-2-tuple(v_132) else caught-fail) in
        {398}let message_buffer_1: bitstring = (if v_133 then concat3(ne_3,ns_2,ciphertext_6) else caught-fail) in
        {397}let hs_9: handshakestate = (if v_133 then handshakestatepack(ss_21,s_3,m_3,e_5,rs_3,rm_3,re_4,psk_3,initiator_3) else caught-fail) in
        {399}let (hs_10: handshakestate,message_c: bitstring) = (if v_117 then (if v_119 then (if v_133 then (hs_9,message_buffer_1) else fail-any) else fail-any) else fail-any) in
        {400}event SendMsg(me,them,stagepack_c(sid_1),msg_c(me,them,sid_1));
        {401}insert statestore(me,them,sid_1,statepack_d(hs_10,handshakestategetcs(hs_10),cs2_3));
        {402}out(pub, message_c)
    ) | (
        {404}!
        {470}get statestore(=me,=them,=sid_1,statepack_d(hs_11: handshakestate,cs1_4: cipherstate,cs2_4: cipherstate)) in
        {405}let hs_12: handshakestate = handshakestatesetcs(hs_11,cs2_4) in
        {406}in(pub, message_d: bitstring);
        {407}let v_134: bitstring = catch-fail(handshakestateunpack(hs_12)) in
        {408}let v_135: bool = (not-caught-fail(v_134) && success?(1-proj-9-tuple(v_134))) in
        {409}let initiator_4: bool = (if v_135 then 9-proj-9-tuple(v_134) else caught-fail) in
        {410}let psk_4: key = (if v_135 then 8-proj-9-tuple(v_134) else caught-fail) in
        {411}let re_5: key = (if v_135 then 7-proj-9-tuple(v_134) else caught-fail) in
        {412}let rm_4: key = (if v_135 then 6-proj-9-tuple(v_134) else caught-fail) in
        {413}let rs_4: key = (if v_135 then 5-proj-9-tuple(v_134) else caught-fail) in
        {414}let e_7: keypair = (if v_135 then 4-proj-9-tuple(v_134) else caught-fail) in
        {415}let m_4: keypair = (if v_135 then 3-proj-9-tuple(v_134) else caught-fail) in
        {416}let s_4: keypair = (if v_135 then 2-proj-9-tuple(v_134) else caught-fail) in
        {417}let ss_22: symmetricstate = (if v_135 then 1-proj-9-tuple(v_134) else caught-fail) in
        {418}let v_136: bitstring = (if v_135 then catch-fail(deconcat3(message_d)) else caught-fail) in
        {419}let v_137: bool = (not-caught-fail(v_136) && success?(1-proj-3-tuple(v_136))) in
        {420}let ciphertext_7: bitstring = (if v_137 then 3-proj-3-tuple(v_136) else caught-fail) in
        {421}let ns_3: bitstring = (if v_137 then 2-proj-3-tuple(v_136) else caught-fail) in
        {422}let ne_4: bitstring = (if v_137 then 1-proj-3-tuple(v_136) else caught-fail) in
        {424}let v_138: bitstring = (if v_137 then catch-fail(symmetricstateunpack(ss_22)) else caught-fail) in
        {425}let v_139: bool = (not-caught-fail(v_138) && success?(1-proj-3-tuple(v_138))) in
        {426}let h_20: bitstring = (if v_139 then 3-proj-3-tuple(v_138) else caught-fail) in
        {427}let ck_25: key = (if v_139 then 2-proj-3-tuple(v_138) else caught-fail) in
        {428}let cs_20: cipherstate = (if v_139 then 1-proj-3-tuple(v_138) else caught-fail) in
        {429}let v_140: bitstring = (if v_139 then catch-fail(cipherstateunpack(cs_20)) else caught-fail) in
        {430}let v_141: bool = (not-caught-fail(v_140) && success?(1-proj-2-tuple(v_140))) in
        {431}let n_6: nonce = (if v_141 then 2-proj-2-tuple(v_140) else caught-fail) in
        {432}let k_7: key = (if v_141 then 1-proj-2-tuple(v_140) else caught-fail) in
        {433}let d_1: aead = (if v_141 then catch-fail(decrypt(k_7,n_6,h_20,ciphertext_7)) else caught-fail) in
        {434}let v_142: bool = not-caught-fail(d_1) in
        {435}let v_143: bitstring = (if v_142 then catch-fail(aeadunpack(d_1)) else caught-fail) in
        {436}let v_144: bool = (not-caught-fail(v_143) && success?(1-proj-3-tuple(v_143))) in
        {437}let plaintext_3: bitstring = (if v_144 then 3-proj-3-tuple(v_143) else caught-fail) in
        {438}let adi_1: bitstring = (if v_144 then 2-proj-3-tuple(v_143) else caught-fail) in
        {439}let valid_3: bool = (if v_144 then 1-proj-3-tuple(v_143) else caught-fail) in
        {441}let v_145: bitstring = (if v_144 then catch-fail(cipherstateunpack(cs_20)) else caught-fail) in
        {442}let v_146: bool = (not-caught-fail(v_145) && success?(1-proj-2-tuple(v_145))) in
        {443}let o_3: nonce = (if v_146 then 2-proj-2-tuple(v_145) else caught-fail) in
        {444}let k_8: key = (if v_146 then 1-proj-2-tuple(v_145) else caught-fail) in
        {440}let n_7: nonce = (if v_144 then increment_nonce(n_6) else caught-fail) in
        {445}let csi_6: cipherstate = (if v_144 then catch-fail((if v_146 then cipherstatepack(k_8,n_7) else fail-any)) else caught-fail) in
        {446}let v_147: bool = not-caught-fail(csi_6) in
        {447}let v_148: bitstring = (if v_139 then catch-fail((if v_141 then (if v_142 then (if v_144 then (if v_147 then (csi_6,plaintext_3,valid_3) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {448}let v_149: bool = (not-caught-fail(v_148) && success?(1-proj-3-tuple(v_148))) in
        {449}let valid_4: bool = (if v_149 then 3-proj-3-tuple(v_148) else caught-fail) in
        {450}let plaintext_4: bitstring = (if v_149 then 2-proj-3-tuple(v_148) else caught-fail) in
        {451}let csi_7: cipherstate = (if v_149 then 1-proj-3-tuple(v_148) else caught-fail) in
        {452}let ss_23: symmetricstate = (if v_149 then symmetricstatepack(csi_7,ck_25,h_20) else caught-fail) in
        {453}let v_150: bitstring = (if v_149 then catch-fail(symmetricstateunpack(ss_23)) else caught-fail) in
        {454}let v_151: bool = (not-caught-fail(v_150) && success?(1-proj-3-tuple(v_150))) in
        {455}let h_21: bitstring = (if v_151 then 3-proj-3-tuple(v_150) else caught-fail) in
        {456}let ck_26: key = (if v_151 then 2-proj-3-tuple(v_150) else caught-fail) in
        {457}let cs_21: cipherstate = (if v_151 then 1-proj-3-tuple(v_150) else caught-fail) in
        {458}let ssi_4: symmetricstate = (if v_149 then catch-fail((if v_151 then symmetricstatepack(cs_21,ck_26,hash(h_21,ciphertext_7)) else fail-any)) else caught-fail) in
        {459}let v_152: bool = not-caught-fail(ssi_4) in
        {460}let v_153: bitstring = (if v_137 then catch-fail((if v_139 then (if v_149 then (if v_152 then (ssi_4,plaintext_4,valid_4) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {461}let v_154: bool = (not-caught-fail(v_153) && success?(1-proj-3-tuple(v_153))) in
        {462}let valid2_1: bool = (if v_154 then 3-proj-3-tuple(v_153) else caught-fail) in
        {463}let plaintext_5: bitstring = (if v_154 then 2-proj-3-tuple(v_153) else caught-fail) in
        {464}let ss_24: symmetricstate = (if v_154 then 1-proj-3-tuple(v_153) else caught-fail) in
        {423}let valid1_1: bool = (if v_137 then true else caught-fail) in
        {465}let v_155: bool = (if v_154 then catch-fail((valid1_1 && valid2_1)) else caught-fail) in
        {466}let hs_13: handshakestate = (if v_155 then handshakestatepack(ss_24,s_4,m_4,e_7,rs_4,rm_4,re_5,psk_4,initiator_4) else caught-fail) in
        {467}let (hs_14: handshakestate,plaintext_d: bitstring,valid_5: bool) = (if v_135 then (if v_137 then (if v_154 then (if undo-catch-fail(v_155) then (hs_13,plaintext_5,true) else fail-any) else fail-any) else fail-any) else fail-any) in
        {468}event RecvMsg(me,them,stagepack_d(sid_1),plaintext_d);
        {469}event RecvEnd(valid_5)
    ) | (
        {471}event LeakS(phase0,me);
        {472}event LeakM(phase0,me);
        {473}out(pub, (key_s(me),key_m(me)))
    ) | (
        {474}phase 1;
        {475}event LeakS(phase1,me);
        {476}event LeakM(phase1,me);
        {477}out(pub, (key_s(me),key_m(me)))
    )
) | (
    {478}let me_1: principal = alice in
    {481}let basis_5: key = key_s(me_1) in
    {482}let public_key_5: key = catch-fail(dhexp(basis_5,validkey(g))) in
    {483}let v_156: bool = not-caught-fail(public_key_5) in
    {484}let s_5: keypair = (if v_156 then keypairpack(validkey(public_key_5),basis_5) else fail-any) in
    {485}let basis_6: key = key_m(me_1) in
    {486}let public_key_6: key = catch-fail(dhexp(basis_6,validkey(g))) in
    {487}let v_157: bool = not-caught-fail(public_key_6) in
    {488}let m_5: keypair = (if v_157 then keypairpack(validkey(public_key_6),basis_6) else fail-any) in
    {489}out(pub, (getpublickey(s_5),getpublickey(m_5)));
    {480}let sid_2: sessionid = sid in
    {479}let them_1: principal = charlie in
    (
        {491}let basis_7: key = key_s(them_1) in
        {492}let public_key_7: key = catch-fail(dhexp(basis_7,validkey(g))) in
        {493}let v_158: bool = not-caught-fail(public_key_7) in
        {494}let rs_5: key = getpublickey((if v_158 then keypairpack(validkey(public_key_7),basis_7) else fail-any)) in
        {495}let basis_8: key = key_s(them_1) in
        {496}let public_key_8: key = catch-fail(dhexp(basis_8,validkey(g))) in
        {497}let v_159: bool = not-caught-fail(public_key_8) in
        {498}let rm_5: key = getpublickey((if v_159 then keypairpack(validkey(public_key_8),basis_8) else fail-any)) in
        {505}let k_9: key = empty in
        {506}let cs_22: cipherstate = cipherstatepack(k_9,minnonce) in
        {502}let protocol_name_1: bitstring = somename in
        {503}let h_22: bitstring = hash(protocol_name_1,empty) in
        {504}let ck_27: key = h_22 in
        {507}let ss_25: symmetricstate = symmetricstatepack(cs_22,ck_27,h_22) in
        {508}let v_160: bitstring = catch-fail(symmetricstateunpack(ss_25)) in
        {509}let v_161: bool = (not-caught-fail(v_160) && success?(1-proj-3-tuple(v_160))) in
        {510}let h_23: bitstring = (if v_161 then 3-proj-3-tuple(v_160) else caught-fail) in
        {511}let ck_28: key = (if v_161 then 2-proj-3-tuple(v_160) else caught-fail) in
        {512}let cs_23: cipherstate = (if v_161 then 1-proj-3-tuple(v_160) else caught-fail) in
        {500}let prologue_1: bitstring = empty in
        {513}let ss_26: symmetricstate = catch-fail((if v_161 then symmetricstatepack(cs_23,ck_28,hash(h_23,prologue_1)) else fail-any)) in
        {514}let v_162: bool = not-caught-fail(ss_26) in
        {515}let data_2: bitstring = (if v_162 then catch-fail(getpublickey(s_5)) else caught-fail) in
        {516}let v_163: bool = not-caught-fail(data_2) in
        {517}let v_164: bitstring = (if v_163 then catch-fail(symmetricstateunpack(ss_26)) else caught-fail) in
        {518}let v_165: bool = (not-caught-fail(v_164) && success?(1-proj-3-tuple(v_164))) in
        {519}let h_24: bitstring = (if v_165 then 3-proj-3-tuple(v_164) else caught-fail) in
        {520}let ck_29: key = (if v_165 then 2-proj-3-tuple(v_164) else caught-fail) in
        {521}let cs_24: cipherstate = (if v_165 then 1-proj-3-tuple(v_164) else caught-fail) in
        {522}let ss_27: symmetricstate = (if v_162 then catch-fail((if v_163 then (if v_165 then symmetricstatepack(cs_24,ck_29,hash(h_24,data_2)) else fail-any) else fail-any)) else caught-fail) in
        {523}let v_166: bool = not-caught-fail(ss_27) in
        {524}let data_3: bitstring = (if v_166 then catch-fail(getpublickey(m_5)) else caught-fail) in
        {525}let v_167: bool = not-caught-fail(data_3) in
        {526}let v_168: bitstring = (if v_167 then catch-fail(symmetricstateunpack(ss_27)) else caught-fail) in
        {527}let v_169: bool = (not-caught-fail(v_168) && success?(1-proj-3-tuple(v_168))) in
        {528}let h_25: bitstring = (if v_169 then 3-proj-3-tuple(v_168) else caught-fail) in
        {529}let ck_30: key = (if v_169 then 2-proj-3-tuple(v_168) else caught-fail) in
        {530}let cs_25: cipherstate = (if v_169 then 1-proj-3-tuple(v_168) else caught-fail) in
        {531}let ss_28: symmetricstate = (if v_166 then catch-fail((if v_167 then (if v_169 then symmetricstatepack(cs_25,ck_30,hash(h_25,data_3)) else fail-any) else fail-any)) else caught-fail) in
        {532}let v_170: bool = not-caught-fail(ss_28) in
        {533}let v_171: bitstring = (if v_170 then catch-fail(symmetricstateunpack(ss_28)) else caught-fail) in
        {534}let v_172: bool = (not-caught-fail(v_171) && success?(1-proj-3-tuple(v_171))) in
        {535}let h_26: bitstring = (if v_172 then 3-proj-3-tuple(v_171) else caught-fail) in
        {536}let ck_31: key = (if v_172 then 2-proj-3-tuple(v_171) else caught-fail) in
        {537}let cs_26: cipherstate = (if v_172 then 1-proj-3-tuple(v_171) else caught-fail) in
        {538}let ss_29: symmetricstate = (if v_170 then catch-fail((if v_172 then symmetricstatepack(cs_26,ck_31,hash(h_26,rs_5)) else fail-any)) else caught-fail) in
        {539}let v_173: bool = not-caught-fail(ss_29) in
        {540}let v_174: bitstring = (if v_173 then catch-fail(symmetricstateunpack(ss_29)) else caught-fail) in
        {541}let v_175: bool = (not-caught-fail(v_174) && success?(1-proj-3-tuple(v_174))) in
        {542}let h_27: bitstring = (if v_175 then 3-proj-3-tuple(v_174) else caught-fail) in
        {543}let ck_32: key = (if v_175 then 2-proj-3-tuple(v_174) else caught-fail) in
        {544}let cs_27: cipherstate = (if v_175 then 1-proj-3-tuple(v_174) else caught-fail) in
        {545}let ss_30: symmetricstate = (if v_173 then catch-fail((if v_175 then symmetricstatepack(cs_27,ck_32,hash(h_27,rm_5)) else fail-any)) else caught-fail) in
        {546}let v_176: bool = not-caught-fail(ss_30) in
        {501}let psk_5: key = empty in
        {499}let re_6: key = empty in
        {490}let e_8: keypair = keypairpack(empty,empty) in
        {547}let hs_15: handshakestate = (if v_162 then (if v_166 then (if v_170 then (if v_173 then (if v_176 then handshakestatepack(ss_30,s_5,m_5,e_8,rs_5,rm_5,re_6,psk_5,true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {548}insert statestore(me_1,them_1,sid_2,statepack_a(hs_15))
    ) | (
        {661}get statestore(=me_1,=them_1,=sid_2,statepack_a(hs_16: handshakestate)) in
        {550}let v_177: bitstring = catch-fail(handshakestateunpack(hs_16)) in
        {551}let v_178: bool = (not-caught-fail(v_177) && success?(1-proj-9-tuple(v_177))) in
        {552}let initiator_5: bool = (if v_178 then 9-proj-9-tuple(v_177) else caught-fail) in
        {553}let psk_6: key = (if v_178 then 8-proj-9-tuple(v_177) else caught-fail) in
        {554}let re_7: key = (if v_178 then 7-proj-9-tuple(v_177) else caught-fail) in
        {555}let rm_6: key = (if v_178 then 6-proj-9-tuple(v_177) else caught-fail) in
        {556}let rs_6: key = (if v_178 then 5-proj-9-tuple(v_177) else caught-fail) in
        {557}let e_9: keypair = (if v_178 then 4-proj-9-tuple(v_177) else caught-fail) in
        {558}let m_6: keypair = (if v_178 then 3-proj-9-tuple(v_177) else caught-fail) in
        {559}let s_6: keypair = (if v_178 then 2-proj-9-tuple(v_177) else caught-fail) in
        {560}let ss_31: symmetricstate = (if v_178 then 1-proj-9-tuple(v_177) else caught-fail) in
        {561}let v_179: bitstring = (if v_178 then catch-fail((empty,empty,empty)) else caught-fail) in
        {562}let v_180: bool = (not-caught-fail(v_179) && success?(1-proj-3-tuple(v_179))) in
        {563}let ciphertext_8: bitstring = (if v_180 then 3-proj-3-tuple(v_179) else caught-fail) in
        {564}let ns_4: bitstring = (if v_180 then 2-proj-3-tuple(v_179) else caught-fail) in
        {565}let ne_5: bitstring = (if v_180 then 1-proj-3-tuple(v_179) else caught-fail) in
        {566}let basis_9: key = (if v_180 then key_e(me_1,them_1,sid_2) else caught-fail) in
        {567}let public_key_9: key = (if v_180 then catch-fail(dhexp(basis_9,validkey(g))) else caught-fail) in
        {568}let v_181: bool = not-caught-fail(public_key_9) in
        {569}let e_10: keypair = (if v_180 then catch-fail((if v_181 then keypairpack(validkey(public_key_9),basis_9) else fail-any)) else caught-fail) in
        {570}let v_182: bool = not-caught-fail(e_10) in
        {571}let ne_6: bitstring = (if v_182 then catch-fail(getpublickey(e_10)) else caught-fail) in
        {572}let v_183: bool = not-caught-fail(ne_6) in
        {573}let v_184: bitstring = (if v_183 then catch-fail(symmetricstateunpack(ss_31)) else caught-fail) in
        {574}let v_185: bool = (not-caught-fail(v_184) && success?(1-proj-3-tuple(v_184))) in
        {575}let h_28: bitstring = (if v_185 then 3-proj-3-tuple(v_184) else caught-fail) in
        {576}let ck_33: key = (if v_185 then 2-proj-3-tuple(v_184) else caught-fail) in
        {577}let cs_28: cipherstate = (if v_185 then 1-proj-3-tuple(v_184) else caught-fail) in
        {578}let ss_32: symmetricstate = (if v_183 then catch-fail((if v_185 then symmetricstatepack(cs_28,ck_33,hash(h_28,ne_6)) else fail-any)) else caught-fail) in
        {579}let v_186: bool = not-caught-fail(ss_32) in
        {580}let v_187: bitstring = (if v_186 then catch-fail(keypairunpack(e_10)) else caught-fail) in
        {581}let v_188: bool = (not-caught-fail(v_187) && success?(1-proj-2-tuple(v_187))) in
        {582}let my_private_key_5: key = (if v_188 then 2-proj-2-tuple(v_187) else caught-fail) in
        {583}let my_public_key_5: key = (if v_188 then 1-proj-2-tuple(v_187) else caught-fail) in
        {584}let input_key_material_6: key = (if v_186 then catch-fail((if v_188 then dhexp(my_private_key_5,rm_6) else fail-any)) else caught-fail) in
        {585}let v_189: bool = not-caught-fail(input_key_material_6) in
        {586}let v_190: bitstring = (if v_189 then catch-fail(symmetricstateunpack(ss_32)) else caught-fail) in
        {587}let v_191: bool = (not-caught-fail(v_190) && success?(1-proj-3-tuple(v_190))) in
        {588}let h_29: bitstring = (if v_191 then 3-proj-3-tuple(v_190) else caught-fail) in
        {589}let ck_34: key = (if v_191 then 2-proj-3-tuple(v_190) else caught-fail) in
        {590}let cs_29: cipherstate = (if v_191 then 1-proj-3-tuple(v_190) else caught-fail) in
        {593}let output3_6: key = (if v_191 then hmac_hash3(ck_34,input_key_material_6) else caught-fail) in
        {592}let output2_6: key = (if v_191 then hmac_hash2(ck_34,input_key_material_6) else caught-fail) in
        {591}let output1_6: key = (if v_191 then hmac_hash1(ck_34,input_key_material_6) else caught-fail) in
        {594}let v_192: bitstring = (if v_191 then catch-fail((output1_6,output2_6,output3_6)) else caught-fail) in
        {595}let v_193: bool = (not-caught-fail(v_192) && success?(1-proj-3-tuple(v_192))) in
        {596}let output_5: key = (if v_193 then 3-proj-3-tuple(v_192) else caught-fail) in
        {597}let temp_k_5: key = (if v_193 then 2-proj-3-tuple(v_192) else caught-fail) in
        {598}let ck_35: key = (if v_193 then 1-proj-3-tuple(v_192) else caught-fail) in
        {599}let ss_33: symmetricstate = (if v_186 then catch-fail((if v_189 then (if v_191 then (if v_193 then symmetricstatepack(cipherstatepack(temp_k_5,minnonce),ck_35,h_29) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {600}let v_194: bool = not-caught-fail(ss_33) in
        {601}let v_195: bitstring = (if v_194 then catch-fail(keypairunpack(m_6)) else caught-fail) in
        {602}let v_196: bool = (not-caught-fail(v_195) && success?(1-proj-2-tuple(v_195))) in
        {603}let my_private_key_6: key = (if v_196 then 2-proj-2-tuple(v_195) else caught-fail) in
        {604}let my_public_key_6: key = (if v_196 then 1-proj-2-tuple(v_195) else caught-fail) in
        {605}let input_key_material_7: key = (if v_194 then catch-fail((if v_196 then dhexp(my_private_key_6,rs_6) else fail-any)) else caught-fail) in
        {606}let v_197: bool = not-caught-fail(input_key_material_7) in
        {607}let v_198: bitstring = (if v_197 then catch-fail(symmetricstateunpack(ss_33)) else caught-fail) in
        {608}let v_199: bool = (not-caught-fail(v_198) && success?(1-proj-3-tuple(v_198))) in
        {609}let h_30: bitstring = (if v_199 then 3-proj-3-tuple(v_198) else caught-fail) in
        {610}let ck_36: key = (if v_199 then 2-proj-3-tuple(v_198) else caught-fail) in
        {611}let cs_30: cipherstate = (if v_199 then 1-proj-3-tuple(v_198) else caught-fail) in
        {614}let output3_7: key = (if v_199 then hmac_hash3(ck_36,input_key_material_7) else caught-fail) in
        {613}let output2_7: key = (if v_199 then hmac_hash2(ck_36,input_key_material_7) else caught-fail) in
        {612}let output1_7: key = (if v_199 then hmac_hash1(ck_36,input_key_material_7) else caught-fail) in
        {615}let v_200: bitstring = (if v_199 then catch-fail((output1_7,output2_7,output3_7)) else caught-fail) in
        {616}let v_201: bool = (not-caught-fail(v_200) && success?(1-proj-3-tuple(v_200))) in
        {617}let output_6: key = (if v_201 then 3-proj-3-tuple(v_200) else caught-fail) in
        {618}let temp_k_6: key = (if v_201 then 2-proj-3-tuple(v_200) else caught-fail) in
        {619}let ck_37: key = (if v_201 then 1-proj-3-tuple(v_200) else caught-fail) in
        {620}let ss_34: symmetricstate = (if v_194 then catch-fail((if v_197 then (if v_199 then (if v_201 then symmetricstatepack(cipherstatepack(temp_k_6,minnonce),ck_37,h_30) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {621}let v_202: bool = not-caught-fail(ss_34) in
        {622}let v_203: bitstring = (if v_202 then catch-fail(symmetricstateunpack(ss_34)) else caught-fail) in
        {623}let v_204: bool = (not-caught-fail(v_203) && success?(1-proj-3-tuple(v_203))) in
        {624}let h_31: bitstring = (if v_204 then 3-proj-3-tuple(v_203) else caught-fail) in
        {625}let ck_38: key = (if v_204 then 2-proj-3-tuple(v_203) else caught-fail) in
        {626}let cs_31: cipherstate = (if v_204 then 1-proj-3-tuple(v_203) else caught-fail) in
        {627}let v_205: bitstring = (if v_204 then catch-fail(cipherstateunpack(cs_31)) else caught-fail) in
        {628}let v_206: bool = (not-caught-fail(v_205) && success?(1-proj-2-tuple(v_205))) in
        {629}let n_8: nonce = (if v_206 then 2-proj-2-tuple(v_205) else caught-fail) in
        {630}let k_10: key = (if v_206 then 1-proj-2-tuple(v_205) else caught-fail) in
        {633}let v_207: bitstring = (if v_206 then catch-fail(cipherstateunpack(cs_31)) else caught-fail) in
        {634}let v_208: bool = (not-caught-fail(v_207) && success?(1-proj-2-tuple(v_207))) in
        {635}let o_4: nonce = (if v_208 then 2-proj-2-tuple(v_207) else caught-fail) in
        {636}let k_11: key = (if v_208 then 1-proj-2-tuple(v_207) else caught-fail) in
        {632}let n_9: nonce = (if v_206 then increment_nonce(n_8) else caught-fail) in
        {637}let csi_8: cipherstate = (if v_206 then catch-fail((if v_208 then cipherstatepack(k_11,n_9) else fail-any)) else caught-fail) in
        {638}let v_209: bool = not-caught-fail(csi_8) in
        {549}let payload_2: bitstring = msg_a(me_1,them_1,sid_2) in
        {631}let e_11: bitstring = (if v_206 then encrypt(k_10,n_8,h_31,payload_2) else caught-fail) in
        {639}let v_210: bitstring = (if v_204 then catch-fail((if v_206 then (if v_209 then (csi_8,e_11) else fail-any) else fail-any)) else caught-fail) in
        {640}let v_211: bool = (not-caught-fail(v_210) && success?(1-proj-2-tuple(v_210))) in
        {641}let ciphertext_9: bitstring = (if v_211 then 2-proj-2-tuple(v_210) else caught-fail) in
        {642}let csi_9: cipherstate = (if v_211 then 1-proj-2-tuple(v_210) else caught-fail) in
        {643}let ss_35: symmetricstate = (if v_211 then symmetricstatepack(csi_9,ck_38,h_31) else caught-fail) in
        {644}let v_212: bitstring = (if v_211 then catch-fail(symmetricstateunpack(ss_35)) else caught-fail) in
        {645}let v_213: bool = (not-caught-fail(v_212) && success?(1-proj-3-tuple(v_212))) in
        {646}let h_32: bitstring = (if v_213 then 3-proj-3-tuple(v_212) else caught-fail) in
        {647}let ck_39: key = (if v_213 then 2-proj-3-tuple(v_212) else caught-fail) in
        {648}let cs_32: cipherstate = (if v_213 then 1-proj-3-tuple(v_212) else caught-fail) in
        {649}let ssi_5: symmetricstate = (if v_211 then catch-fail((if v_213 then symmetricstatepack(cs_32,ck_39,hash(h_32,ciphertext_9)) else fail-any)) else caught-fail) in
        {650}let v_214: bool = not-caught-fail(ssi_5) in
        {651}let v_215: bitstring = (if v_202 then catch-fail((if v_204 then (if v_211 then (if v_214 then (ssi_5,ciphertext_9) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {652}let v_216: bool = (not-caught-fail(v_215) && success?(1-proj-2-tuple(v_215))) in
        {653}let ciphertext_10: bitstring = (if v_216 then 2-proj-2-tuple(v_215) else caught-fail) in
        {654}let ss_36: symmetricstate = (if v_216 then 1-proj-2-tuple(v_215) else caught-fail) in
        {656}let message_buffer_2: bitstring = (if v_216 then concat3(ne_6,ns_4,ciphertext_10) else caught-fail) in
        {655}let hs_17: handshakestate = (if v_216 then handshakestatepack(ss_36,s_6,m_6,e_10,rs_6,rm_6,re_7,psk_6,initiator_5) else caught-fail) in
        {657}let (hs_18: handshakestate,message_a_1: bitstring) = (if v_178 then (if v_180 then (if v_182 then (if v_183 then (if v_186 then (if v_194 then (if v_202 then (if v_216 then (hs_17,message_buffer_2) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {658}event SendMsg(me_1,them_1,stagepack_a(sid_2),msg_a(me_1,them_1,sid_2));
        {659}insert statestore(me_1,them_1,sid_2,statepack_b(hs_18));
        {660}out(pub, message_a_1)
    ) | (
        {818}get statestore(=me_1,=them_1,=sid_2,statepack_b(hs_19: handshakestate)) in
        {662}in(pub, message_b_1: bitstring);
        {663}let v_217: bitstring = catch-fail(handshakestateunpack(hs_19)) in
        {664}let v_218: bool = (not-caught-fail(v_217) && success?(1-proj-9-tuple(v_217))) in
        {665}let initiator_6: bool = (if v_218 then 9-proj-9-tuple(v_217) else caught-fail) in
        {666}let psk_7: key = (if v_218 then 8-proj-9-tuple(v_217) else caught-fail) in
        {667}let re_8: key = (if v_218 then 7-proj-9-tuple(v_217) else caught-fail) in
        {668}let rm_7: key = (if v_218 then 6-proj-9-tuple(v_217) else caught-fail) in
        {669}let rs_7: key = (if v_218 then 5-proj-9-tuple(v_217) else caught-fail) in
        {670}let e_12: keypair = (if v_218 then 4-proj-9-tuple(v_217) else caught-fail) in
        {671}let m_7: keypair = (if v_218 then 3-proj-9-tuple(v_217) else caught-fail) in
        {672}let s_7: keypair = (if v_218 then 2-proj-9-tuple(v_217) else caught-fail) in
        {673}let ss_37: symmetricstate = (if v_218 then 1-proj-9-tuple(v_217) else caught-fail) in
        {674}let v_219: bitstring = (if v_218 then catch-fail(deconcat3(message_b_1)) else caught-fail) in
        {675}let v_220: bool = (not-caught-fail(v_219) && success?(1-proj-3-tuple(v_219))) in
        {676}let ciphertext_11: bitstring = (if v_220 then 3-proj-3-tuple(v_219) else caught-fail) in
        {677}let ns_5: bitstring = (if v_220 then 2-proj-3-tuple(v_219) else caught-fail) in
        {678}let ne_7: bitstring = (if v_220 then 1-proj-3-tuple(v_219) else caught-fail) in
        {681}let v_221: bitstring = (if v_220 then catch-fail(symmetricstateunpack(ss_37)) else caught-fail) in
        {682}let v_222: bool = (not-caught-fail(v_221) && success?(1-proj-3-tuple(v_221))) in
        {683}let h_33: bitstring = (if v_222 then 3-proj-3-tuple(v_221) else caught-fail) in
        {684}let ck_40: key = (if v_222 then 2-proj-3-tuple(v_221) else caught-fail) in
        {685}let cs_33: cipherstate = (if v_222 then 1-proj-3-tuple(v_221) else caught-fail) in
        {680}let re_9: key = (if v_220 then ne_7 else caught-fail) in
        {686}let ss_38: symmetricstate = (if v_220 then catch-fail((if v_222 then symmetricstatepack(cs_33,ck_40,hash(h_33,re_9)) else fail-any)) else caught-fail) in
        {687}let v_223: bool = not-caught-fail(ss_38) in
        {688}let v_224: bitstring = (if v_223 then catch-fail(keypairunpack(e_12)) else caught-fail) in
        {689}let v_225: bool = (not-caught-fail(v_224) && success?(1-proj-2-tuple(v_224))) in
        {690}let my_private_key_7: key = (if v_225 then 2-proj-2-tuple(v_224) else caught-fail) in
        {691}let my_public_key_7: key = (if v_225 then 1-proj-2-tuple(v_224) else caught-fail) in
        {692}let input_key_material_8: key = (if v_223 then catch-fail((if v_225 then dhexp(my_private_key_7,re_9) else fail-any)) else caught-fail) in
        {693}let v_226: bool = not-caught-fail(input_key_material_8) in
        {694}let v_227: bitstring = (if v_226 then catch-fail(symmetricstateunpack(ss_38)) else caught-fail) in
        {695}let v_228: bool = (not-caught-fail(v_227) && success?(1-proj-3-tuple(v_227))) in
        {696}let h_34: bitstring = (if v_228 then 3-proj-3-tuple(v_227) else caught-fail) in
        {697}let ck_41: key = (if v_228 then 2-proj-3-tuple(v_227) else caught-fail) in
        {698}let cs_34: cipherstate = (if v_228 then 1-proj-3-tuple(v_227) else caught-fail) in
        {701}let output3_8: key = (if v_228 then hmac_hash3(ck_41,input_key_material_8) else caught-fail) in
        {700}let output2_8: key = (if v_228 then hmac_hash2(ck_41,input_key_material_8) else caught-fail) in
        {699}let output1_8: key = (if v_228 then hmac_hash1(ck_41,input_key_material_8) else caught-fail) in
        {702}let v_229: bitstring = (if v_228 then catch-fail((output1_8,output2_8,output3_8)) else caught-fail) in
        {703}let v_230: bool = (not-caught-fail(v_229) && success?(1-proj-3-tuple(v_229))) in
        {704}let output_7: key = (if v_230 then 3-proj-3-tuple(v_229) else caught-fail) in
        {705}let temp_k_7: key = (if v_230 then 2-proj-3-tuple(v_229) else caught-fail) in
        {706}let ck_42: key = (if v_230 then 1-proj-3-tuple(v_229) else caught-fail) in
        {707}let ss_39: symmetricstate = (if v_223 then catch-fail((if v_226 then (if v_228 then (if v_230 then symmetricstatepack(cipherstatepack(temp_k_7,minnonce),ck_42,h_34) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {708}let v_231: bool = not-caught-fail(ss_39) in
        {709}let v_232: bitstring = (if v_231 then catch-fail(keypairunpack(s_7)) else caught-fail) in
        {710}let v_233: bool = (not-caught-fail(v_232) && success?(1-proj-2-tuple(v_232))) in
        {711}let my_private_key_8: key = (if v_233 then 2-proj-2-tuple(v_232) else caught-fail) in
        {712}let my_public_key_8: key = (if v_233 then 1-proj-2-tuple(v_232) else caught-fail) in
        {713}let input_key_material_9: key = (if v_231 then catch-fail((if v_233 then dhexp(my_private_key_8,re_9) else fail-any)) else caught-fail) in
        {714}let v_234: bool = not-caught-fail(input_key_material_9) in
        {715}let v_235: bitstring = (if v_234 then catch-fail(symmetricstateunpack(ss_39)) else caught-fail) in
        {716}let v_236: bool = (not-caught-fail(v_235) && success?(1-proj-3-tuple(v_235))) in
        {717}let h_35: bitstring = (if v_236 then 3-proj-3-tuple(v_235) else caught-fail) in
        {718}let ck_43: key = (if v_236 then 2-proj-3-tuple(v_235) else caught-fail) in
        {719}let cs_35: cipherstate = (if v_236 then 1-proj-3-tuple(v_235) else caught-fail) in
        {722}let output3_9: key = (if v_236 then hmac_hash3(ck_43,input_key_material_9) else caught-fail) in
        {721}let output2_9: key = (if v_236 then hmac_hash2(ck_43,input_key_material_9) else caught-fail) in
        {720}let output1_9: key = (if v_236 then hmac_hash1(ck_43,input_key_material_9) else caught-fail) in
        {723}let v_237: bitstring = (if v_236 then catch-fail((output1_9,output2_9,output3_9)) else caught-fail) in
        {724}let v_238: bool = (not-caught-fail(v_237) && success?(1-proj-3-tuple(v_237))) in
        {725}let output_8: key = (if v_238 then 3-proj-3-tuple(v_237) else caught-fail) in
        {726}let temp_k_8: key = (if v_238 then 2-proj-3-tuple(v_237) else caught-fail) in
        {727}let ck_44: key = (if v_238 then 1-proj-3-tuple(v_237) else caught-fail) in
        {728}let ss_40: symmetricstate = (if v_231 then catch-fail((if v_234 then (if v_236 then (if v_238 then symmetricstatepack(cipherstatepack(temp_k_8,minnonce),ck_44,h_35) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {729}let v_239: bool = not-caught-fail(ss_40) in
        {730}let v_240: bitstring = (if v_239 then catch-fail(keypairunpack(m_7)) else caught-fail) in
        {731}let v_241: bool = (not-caught-fail(v_240) && success?(1-proj-2-tuple(v_240))) in
        {732}let my_private_key_9: key = (if v_241 then 2-proj-2-tuple(v_240) else caught-fail) in
        {733}let my_public_key_9: key = (if v_241 then 1-proj-2-tuple(v_240) else caught-fail) in
        {734}let input_key_material_10: key = (if v_239 then catch-fail((if v_241 then dhexp(my_private_key_9,re_9) else fail-any)) else caught-fail) in
        {735}let v_242: bool = not-caught-fail(input_key_material_10) in
        {736}let v_243: bitstring = (if v_242 then catch-fail(symmetricstateunpack(ss_40)) else caught-fail) in
        {737}let v_244: bool = (not-caught-fail(v_243) && success?(1-proj-3-tuple(v_243))) in
        {738}let h_36: bitstring = (if v_244 then 3-proj-3-tuple(v_243) else caught-fail) in
        {739}let ck_45: key = (if v_244 then 2-proj-3-tuple(v_243) else caught-fail) in
        {740}let cs_36: cipherstate = (if v_244 then 1-proj-3-tuple(v_243) else caught-fail) in
        {743}let output3_10: key = (if v_244 then hmac_hash3(ck_45,input_key_material_10) else caught-fail) in
        {742}let output2_10: key = (if v_244 then hmac_hash2(ck_45,input_key_material_10) else caught-fail) in
        {741}let output1_10: key = (if v_244 then hmac_hash1(ck_45,input_key_material_10) else caught-fail) in
        {744}let v_245: bitstring = (if v_244 then catch-fail((output1_10,output2_10,output3_10)) else caught-fail) in
        {745}let v_246: bool = (not-caught-fail(v_245) && success?(1-proj-3-tuple(v_245))) in
        {746}let output_9: key = (if v_246 then 3-proj-3-tuple(v_245) else caught-fail) in
        {747}let temp_k_9: key = (if v_246 then 2-proj-3-tuple(v_245) else caught-fail) in
        {748}let ck_46: key = (if v_246 then 1-proj-3-tuple(v_245) else caught-fail) in
        {749}let ss_41: symmetricstate = (if v_239 then catch-fail((if v_242 then (if v_244 then (if v_246 then symmetricstatepack(cipherstatepack(temp_k_9,minnonce),ck_46,h_36) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {750}let v_247: bool = not-caught-fail(ss_41) in
        {751}let v_248: bitstring = (if v_247 then catch-fail(symmetricstateunpack(ss_41)) else caught-fail) in
        {752}let v_249: bool = (not-caught-fail(v_248) && success?(1-proj-3-tuple(v_248))) in
        {753}let h_37: bitstring = (if v_249 then 3-proj-3-tuple(v_248) else caught-fail) in
        {754}let ck_47: key = (if v_249 then 2-proj-3-tuple(v_248) else caught-fail) in
        {755}let cs_37: cipherstate = (if v_249 then 1-proj-3-tuple(v_248) else caught-fail) in
        {756}let v_250: bitstring = (if v_249 then catch-fail(cipherstateunpack(cs_37)) else caught-fail) in
        {757}let v_251: bool = (not-caught-fail(v_250) && success?(1-proj-2-tuple(v_250))) in
        {758}let n_10: nonce = (if v_251 then 2-proj-2-tuple(v_250) else caught-fail) in
        {759}let k_12: key = (if v_251 then 1-proj-2-tuple(v_250) else caught-fail) in
        {760}let d_2: aead = (if v_251 then catch-fail(decrypt(k_12,n_10,h_37,ciphertext_11)) else caught-fail) in
        {761}let v_252: bool = not-caught-fail(d_2) in
        {762}let v_253: bitstring = (if v_252 then catch-fail(aeadunpack(d_2)) else caught-fail) in
        {763}let v_254: bool = (not-caught-fail(v_253) && success?(1-proj-3-tuple(v_253))) in
        {764}let plaintext_6: bitstring = (if v_254 then 3-proj-3-tuple(v_253) else caught-fail) in
        {765}let adi_2: bitstring = (if v_254 then 2-proj-3-tuple(v_253) else caught-fail) in
        {766}let valid_6: bool = (if v_254 then 1-proj-3-tuple(v_253) else caught-fail) in
        {768}let v_255: bitstring = (if v_254 then catch-fail(cipherstateunpack(cs_37)) else caught-fail) in
        {769}let v_256: bool = (not-caught-fail(v_255) && success?(1-proj-2-tuple(v_255))) in
        {770}let o_5: nonce = (if v_256 then 2-proj-2-tuple(v_255) else caught-fail) in
        {771}let k_13: key = (if v_256 then 1-proj-2-tuple(v_255) else caught-fail) in
        {767}let n_11: nonce = (if v_254 then increment_nonce(n_10) else caught-fail) in
        {772}let csi_10: cipherstate = (if v_254 then catch-fail((if v_256 then cipherstatepack(k_13,n_11) else fail-any)) else caught-fail) in
        {773}let v_257: bool = not-caught-fail(csi_10) in
        {774}let v_258: bitstring = (if v_249 then catch-fail((if v_251 then (if v_252 then (if v_254 then (if v_257 then (csi_10,plaintext_6,valid_6) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {775}let v_259: bool = (not-caught-fail(v_258) && success?(1-proj-3-tuple(v_258))) in
        {776}let valid_7: bool = (if v_259 then 3-proj-3-tuple(v_258) else caught-fail) in
        {777}let plaintext_7: bitstring = (if v_259 then 2-proj-3-tuple(v_258) else caught-fail) in
        {778}let csi_11: cipherstate = (if v_259 then 1-proj-3-tuple(v_258) else caught-fail) in
        {779}let ss_42: symmetricstate = (if v_259 then symmetricstatepack(csi_11,ck_47,h_37) else caught-fail) in
        {780}let v_260: bitstring = (if v_259 then catch-fail(symmetricstateunpack(ss_42)) else caught-fail) in
        {781}let v_261: bool = (not-caught-fail(v_260) && success?(1-proj-3-tuple(v_260))) in
        {782}let h_38: bitstring = (if v_261 then 3-proj-3-tuple(v_260) else caught-fail) in
        {783}let ck_48: key = (if v_261 then 2-proj-3-tuple(v_260) else caught-fail) in
        {784}let cs_38: cipherstate = (if v_261 then 1-proj-3-tuple(v_260) else caught-fail) in
        {785}let ssi_6: symmetricstate = (if v_259 then catch-fail((if v_261 then symmetricstatepack(cs_38,ck_48,hash(h_38,ciphertext_11)) else fail-any)) else caught-fail) in
        {786}let v_262: bool = not-caught-fail(ssi_6) in
        {787}let v_263: bitstring = (if v_247 then catch-fail((if v_249 then (if v_259 then (if v_262 then (ssi_6,plaintext_7,valid_7) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {788}let v_264: bool = (not-caught-fail(v_263) && success?(1-proj-3-tuple(v_263))) in
        {789}let valid2_2: bool = (if v_264 then 3-proj-3-tuple(v_263) else caught-fail) in
        {790}let plaintext_8: bitstring = (if v_264 then 2-proj-3-tuple(v_263) else caught-fail) in
        {791}let ss_43: symmetricstate = (if v_264 then 1-proj-3-tuple(v_263) else caught-fail) in
        {679}let valid1_2: bool = (if v_220 then true else caught-fail) in
        {792}let v_265: bool = (if v_264 then catch-fail((valid1_2 && valid2_2)) else caught-fail) in
        {794}let v_266: bitstring = (if v_265 then catch-fail(symmetricstateunpack(ss_43)) else caught-fail) in
        {795}let v_267: bool = (not-caught-fail(v_266) && success?(1-proj-3-tuple(v_266))) in
        {796}let h_39: bitstring = (if v_267 then 3-proj-3-tuple(v_266) else caught-fail) in
        {797}let ck_49: key = (if v_267 then 2-proj-3-tuple(v_266) else caught-fail) in
        {798}let cs_39: cipherstate = (if v_267 then 1-proj-3-tuple(v_266) else caught-fail) in
        {799}let input_key_material_11: key = (if v_267 then zero else caught-fail) in
        {802}let output3_11: key = (if v_267 then hmac_hash3(ck_49,input_key_material_11) else caught-fail) in
        {801}let output2_11: key = (if v_267 then hmac_hash2(ck_49,input_key_material_11) else caught-fail) in
        {800}let output1_11: key = (if v_267 then hmac_hash1(ck_49,input_key_material_11) else caught-fail) in
        {803}let v_268: bitstring = (if v_267 then catch-fail((output1_11,output2_11,output3_11)) else caught-fail) in
        {804}let v_269: bool = (not-caught-fail(v_268) && success?(1-proj-3-tuple(v_268))) in
        {805}let temp_k3_1: key = (if v_269 then 3-proj-3-tuple(v_268) else caught-fail) in
        {806}let temp_k2_1: key = (if v_269 then 2-proj-3-tuple(v_268) else caught-fail) in
        {807}let temp_k1_1: key = (if v_269 then 1-proj-3-tuple(v_268) else caught-fail) in
        {809}let cs2_5: cipherstate = (if v_269 then cipherstatepack(temp_k2_1,minnonce) else caught-fail) in
        {808}let cs1_5: cipherstate = (if v_269 then cipherstatepack(temp_k1_1,minnonce) else caught-fail) in
        {810}let v_270: bitstring = (if v_265 then catch-fail((if v_267 then (if v_269 then (ss_43,cs1_5,cs2_5) else fail-any) else fail-any)) else caught-fail) in
        {811}let v_271: bool = (not-caught-fail(v_270) && success?(1-proj-3-tuple(v_270))) in
        {812}let cs2_6: cipherstate = (if v_271 then 3-proj-3-tuple(v_270) else caught-fail) in
        {813}let cs1_6: cipherstate = (if v_271 then 2-proj-3-tuple(v_270) else caught-fail) in
        {814}let ssi_7: symmetricstate = (if v_271 then 1-proj-3-tuple(v_270) else caught-fail) in
        {793}let hs_20: handshakestate = (if v_265 then handshakestatepack(ss_43,s_7,m_7,e_12,rs_7,rm_7,re_9,psk_7,initiator_6) else caught-fail) in
        {815}let (hs_21: handshakestate,plaintext_b_1: bitstring,valid_8: bool,cs1_7: cipherstate,cs2_7: cipherstate) = (if v_218 then (if v_220 then (if v_223 then (if v_231 then (if v_239 then (if v_247 then (if v_264 then (if undo-catch-fail(v_265) then (if v_271 then (hs_20,plaintext_8,true,cs1_6,cs2_6) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {816}event RecvMsg(me_1,them_1,stagepack_b(sid_2),plaintext_b_1);
        {817}insert statestore(me_1,them_1,sid_2,statepack_c(hs_21,cs1_7,cs2_7))
    ) | (
        {819}!
        {877}get statestore(=me_1,=them_1,=sid_2,statepack_c(hs_22: handshakestate,cs1_8: cipherstate,cs2_8: cipherstate)) in
        {820}let hs_23: handshakestate = handshakestatesetcs(hs_22,cs1_8) in
        {822}let v_272: bitstring = catch-fail(handshakestateunpack(hs_23)) in
        {823}let v_273: bool = (not-caught-fail(v_272) && success?(1-proj-9-tuple(v_272))) in
        {824}let initiator_7: bool = (if v_273 then 9-proj-9-tuple(v_272) else caught-fail) in
        {825}let psk_8: key = (if v_273 then 8-proj-9-tuple(v_272) else caught-fail) in
        {826}let re_10: key = (if v_273 then 7-proj-9-tuple(v_272) else caught-fail) in
        {827}let rm_8: key = (if v_273 then 6-proj-9-tuple(v_272) else caught-fail) in
        {828}let rs_8: key = (if v_273 then 5-proj-9-tuple(v_272) else caught-fail) in
        {829}let e_13: keypair = (if v_273 then 4-proj-9-tuple(v_272) else caught-fail) in
        {830}let m_8: keypair = (if v_273 then 3-proj-9-tuple(v_272) else caught-fail) in
        {831}let s_8: keypair = (if v_273 then 2-proj-9-tuple(v_272) else caught-fail) in
        {832}let ss_44: symmetricstate = (if v_273 then 1-proj-9-tuple(v_272) else caught-fail) in
        {833}let v_274: bitstring = (if v_273 then catch-fail((empty,empty,empty)) else caught-fail) in
        {834}let v_275: bool = (not-caught-fail(v_274) && success?(1-proj-3-tuple(v_274))) in
        {835}let ciphertext_12: bitstring = (if v_275 then 3-proj-3-tuple(v_274) else caught-fail) in
        {836}let ns_6: bitstring = (if v_275 then 2-proj-3-tuple(v_274) else caught-fail) in
        {837}let ne_8: bitstring = (if v_275 then 1-proj-3-tuple(v_274) else caught-fail) in
        {838}let v_276: bitstring = (if v_275 then catch-fail(symmetricstateunpack(ss_44)) else caught-fail) in
        {839}let v_277: bool = (not-caught-fail(v_276) && success?(1-proj-3-tuple(v_276))) in
        {840}let h_40: bitstring = (if v_277 then 3-proj-3-tuple(v_276) else caught-fail) in
        {841}let ck_50: key = (if v_277 then 2-proj-3-tuple(v_276) else caught-fail) in
        {842}let cs_40: cipherstate = (if v_277 then 1-proj-3-tuple(v_276) else caught-fail) in
        {843}let v_278: bitstring = (if v_277 then catch-fail(cipherstateunpack(cs_40)) else caught-fail) in
        {844}let v_279: bool = (not-caught-fail(v_278) && success?(1-proj-2-tuple(v_278))) in
        {845}let n_12: nonce = (if v_279 then 2-proj-2-tuple(v_278) else caught-fail) in
        {846}let k_14: key = (if v_279 then 1-proj-2-tuple(v_278) else caught-fail) in
        {849}let v_280: bitstring = (if v_279 then catch-fail(cipherstateunpack(cs_40)) else caught-fail) in
        {850}let v_281: bool = (not-caught-fail(v_280) && success?(1-proj-2-tuple(v_280))) in
        {851}let o_6: nonce = (if v_281 then 2-proj-2-tuple(v_280) else caught-fail) in
        {852}let k_15: key = (if v_281 then 1-proj-2-tuple(v_280) else caught-fail) in
        {848}let n_13: nonce = (if v_279 then increment_nonce(n_12) else caught-fail) in
        {853}let csi_12: cipherstate = (if v_279 then catch-fail((if v_281 then cipherstatepack(k_15,n_13) else fail-any)) else caught-fail) in
        {854}let v_282: bool = not-caught-fail(csi_12) in
        {821}let payload_3: bitstring = msg_c(me_1,them_1,sid_2) in
        {847}let e_14: bitstring = (if v_279 then encrypt(k_14,n_12,h_40,payload_3) else caught-fail) in
        {855}let v_283: bitstring = (if v_277 then catch-fail((if v_279 then (if v_282 then (csi_12,e_14) else fail-any) else fail-any)) else caught-fail) in
        {856}let v_284: bool = (not-caught-fail(v_283) && success?(1-proj-2-tuple(v_283))) in
        {857}let ciphertext_13: bitstring = (if v_284 then 2-proj-2-tuple(v_283) else caught-fail) in
        {858}let csi_13: cipherstate = (if v_284 then 1-proj-2-tuple(v_283) else caught-fail) in
        {859}let ss_45: symmetricstate = (if v_284 then symmetricstatepack(csi_13,ck_50,h_40) else caught-fail) in
        {860}let v_285: bitstring = (if v_284 then catch-fail(symmetricstateunpack(ss_45)) else caught-fail) in
        {861}let v_286: bool = (not-caught-fail(v_285) && success?(1-proj-3-tuple(v_285))) in
        {862}let h_41: bitstring = (if v_286 then 3-proj-3-tuple(v_285) else caught-fail) in
        {863}let ck_51: key = (if v_286 then 2-proj-3-tuple(v_285) else caught-fail) in
        {864}let cs_41: cipherstate = (if v_286 then 1-proj-3-tuple(v_285) else caught-fail) in
        {865}let ssi_8: symmetricstate = (if v_284 then catch-fail((if v_286 then symmetricstatepack(cs_41,ck_51,hash(h_41,ciphertext_13)) else fail-any)) else caught-fail) in
        {866}let v_287: bool = not-caught-fail(ssi_8) in
        {867}let v_288: bitstring = (if v_275 then catch-fail((if v_277 then (if v_284 then (if v_287 then (ssi_8,ciphertext_13) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {868}let v_289: bool = (not-caught-fail(v_288) && success?(1-proj-2-tuple(v_288))) in
        {869}let ciphertext_14: bitstring = (if v_289 then 2-proj-2-tuple(v_288) else caught-fail) in
        {870}let ss_46: symmetricstate = (if v_289 then 1-proj-2-tuple(v_288) else caught-fail) in
        {872}let message_buffer_3: bitstring = (if v_289 then concat3(ne_8,ns_6,ciphertext_14) else caught-fail) in
        {871}let hs_24: handshakestate = (if v_289 then handshakestatepack(ss_46,s_8,m_8,e_13,rs_8,rm_8,re_10,psk_8,initiator_7) else caught-fail) in
        {873}let (hs_25: handshakestate,message_c_1: bitstring) = (if v_273 then (if v_275 then (if v_289 then (hs_24,message_buffer_3) else fail-any) else fail-any) else fail-any) in
        {874}event SendMsg(me_1,them_1,stagepack_c(sid_2),msg_c(me_1,them_1,sid_2));
        {875}insert statestore(me_1,them_1,sid_2,statepack_d(hs_25,handshakestategetcs(hs_25),cs2_8));
        {876}out(pub, message_c_1)
    ) | (
        {878}!
        {944}get statestore(=me_1,=them_1,=sid_2,statepack_d(hs_26: handshakestate,cs1_9: cipherstate,cs2_9: cipherstate)) in
        {879}let hs_27: handshakestate = handshakestatesetcs(hs_26,cs2_9) in
        {880}in(pub, message_d_1: bitstring);
        {881}let v_290: bitstring = catch-fail(handshakestateunpack(hs_27)) in
        {882}let v_291: bool = (not-caught-fail(v_290) && success?(1-proj-9-tuple(v_290))) in
        {883}let initiator_8: bool = (if v_291 then 9-proj-9-tuple(v_290) else caught-fail) in
        {884}let psk_9: key = (if v_291 then 8-proj-9-tuple(v_290) else caught-fail) in
        {885}let re_11: key = (if v_291 then 7-proj-9-tuple(v_290) else caught-fail) in
        {886}let rm_9: key = (if v_291 then 6-proj-9-tuple(v_290) else caught-fail) in
        {887}let rs_9: key = (if v_291 then 5-proj-9-tuple(v_290) else caught-fail) in
        {888}let e_15: keypair = (if v_291 then 4-proj-9-tuple(v_290) else caught-fail) in
        {889}let m_9: keypair = (if v_291 then 3-proj-9-tuple(v_290) else caught-fail) in
        {890}let s_9: keypair = (if v_291 then 2-proj-9-tuple(v_290) else caught-fail) in
        {891}let ss_47: symmetricstate = (if v_291 then 1-proj-9-tuple(v_290) else caught-fail) in
        {892}let v_292: bitstring = (if v_291 then catch-fail(deconcat3(message_d_1)) else caught-fail) in
        {893}let v_293: bool = (not-caught-fail(v_292) && success?(1-proj-3-tuple(v_292))) in
        {894}let ciphertext_15: bitstring = (if v_293 then 3-proj-3-tuple(v_292) else caught-fail) in
        {895}let ns_7: bitstring = (if v_293 then 2-proj-3-tuple(v_292) else caught-fail) in
        {896}let ne_9: bitstring = (if v_293 then 1-proj-3-tuple(v_292) else caught-fail) in
        {898}let v_294: bitstring = (if v_293 then catch-fail(symmetricstateunpack(ss_47)) else caught-fail) in
        {899}let v_295: bool = (not-caught-fail(v_294) && success?(1-proj-3-tuple(v_294))) in
        {900}let h_42: bitstring = (if v_295 then 3-proj-3-tuple(v_294) else caught-fail) in
        {901}let ck_52: key = (if v_295 then 2-proj-3-tuple(v_294) else caught-fail) in
        {902}let cs_42: cipherstate = (if v_295 then 1-proj-3-tuple(v_294) else caught-fail) in
        {903}let v_296: bitstring = (if v_295 then catch-fail(cipherstateunpack(cs_42)) else caught-fail) in
        {904}let v_297: bool = (not-caught-fail(v_296) && success?(1-proj-2-tuple(v_296))) in
        {905}let n_14: nonce = (if v_297 then 2-proj-2-tuple(v_296) else caught-fail) in
        {906}let k_16: key = (if v_297 then 1-proj-2-tuple(v_296) else caught-fail) in
        {907}let d_3: aead = (if v_297 then catch-fail(decrypt(k_16,n_14,h_42,ciphertext_15)) else caught-fail) in
        {908}let v_298: bool = not-caught-fail(d_3) in
        {909}let v_299: bitstring = (if v_298 then catch-fail(aeadunpack(d_3)) else caught-fail) in
        {910}let v_300: bool = (not-caught-fail(v_299) && success?(1-proj-3-tuple(v_299))) in
        {911}let plaintext_9: bitstring = (if v_300 then 3-proj-3-tuple(v_299) else caught-fail) in
        {912}let adi_3: bitstring = (if v_300 then 2-proj-3-tuple(v_299) else caught-fail) in
        {913}let valid_9: bool = (if v_300 then 1-proj-3-tuple(v_299) else caught-fail) in
        {915}let v_301: bitstring = (if v_300 then catch-fail(cipherstateunpack(cs_42)) else caught-fail) in
        {916}let v_302: bool = (not-caught-fail(v_301) && success?(1-proj-2-tuple(v_301))) in
        {917}let o_7: nonce = (if v_302 then 2-proj-2-tuple(v_301) else caught-fail) in
        {918}let k_17: key = (if v_302 then 1-proj-2-tuple(v_301) else caught-fail) in
        {914}let n_15: nonce = (if v_300 then increment_nonce(n_14) else caught-fail) in
        {919}let csi_14: cipherstate = (if v_300 then catch-fail((if v_302 then cipherstatepack(k_17,n_15) else fail-any)) else caught-fail) in
        {920}let v_303: bool = not-caught-fail(csi_14) in
        {921}let v_304: bitstring = (if v_295 then catch-fail((if v_297 then (if v_298 then (if v_300 then (if v_303 then (csi_14,plaintext_9,valid_9) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {922}let v_305: bool = (not-caught-fail(v_304) && success?(1-proj-3-tuple(v_304))) in
        {923}let valid_10: bool = (if v_305 then 3-proj-3-tuple(v_304) else caught-fail) in
        {924}let plaintext_10: bitstring = (if v_305 then 2-proj-3-tuple(v_304) else caught-fail) in
        {925}let csi_15: cipherstate = (if v_305 then 1-proj-3-tuple(v_304) else caught-fail) in
        {926}let ss_48: symmetricstate = (if v_305 then symmetricstatepack(csi_15,ck_52,h_42) else caught-fail) in
        {927}let v_306: bitstring = (if v_305 then catch-fail(symmetricstateunpack(ss_48)) else caught-fail) in
        {928}let v_307: bool = (not-caught-fail(v_306) && success?(1-proj-3-tuple(v_306))) in
        {929}let h_43: bitstring = (if v_307 then 3-proj-3-tuple(v_306) else caught-fail) in
        {930}let ck_53: key = (if v_307 then 2-proj-3-tuple(v_306) else caught-fail) in
        {931}let cs_43: cipherstate = (if v_307 then 1-proj-3-tuple(v_306) else caught-fail) in
        {932}let ssi_9: symmetricstate = (if v_305 then catch-fail((if v_307 then symmetricstatepack(cs_43,ck_53,hash(h_43,ciphertext_15)) else fail-any)) else caught-fail) in
        {933}let v_308: bool = not-caught-fail(ssi_9) in
        {934}let v_309: bitstring = (if v_293 then catch-fail((if v_295 then (if v_305 then (if v_308 then (ssi_9,plaintext_10,valid_10) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {935}let v_310: bool = (not-caught-fail(v_309) && success?(1-proj-3-tuple(v_309))) in
        {936}let valid2_3: bool = (if v_310 then 3-proj-3-tuple(v_309) else caught-fail) in
        {937}let plaintext_11: bitstring = (if v_310 then 2-proj-3-tuple(v_309) else caught-fail) in
        {938}let ss_49: symmetricstate = (if v_310 then 1-proj-3-tuple(v_309) else caught-fail) in
        {897}let valid1_3: bool = (if v_293 then true else caught-fail) in
        {939}let v_311: bool = (if v_310 then catch-fail((valid1_3 && valid2_3)) else caught-fail) in
        {940}let hs_28: handshakestate = (if v_311 then handshakestatepack(ss_49,s_9,m_9,e_15,rs_9,rm_9,re_11,psk_9,initiator_8) else caught-fail) in
        {941}let (hs_29: handshakestate,plaintext_d_1: bitstring,valid_11: bool) = (if v_291 then (if v_293 then (if v_310 then (if undo-catch-fail(v_311) then (hs_28,plaintext_11,true) else fail-any) else fail-any) else fail-any) else fail-any) in
        {942}event RecvMsg(me_1,them_1,stagepack_d(sid_2),plaintext_d_1);
        {943}event RecvEnd(valid_11)
    ) | (
        {945}event LeakS(phase0,me_1);
        {946}event LeakM(phase0,me_1);
        {947}out(pub, (key_s(me_1),key_m(me_1)))
    ) | (
        {948}phase 1;
        {949}event LeakS(phase1,me_1);
        {950}event LeakM(phase1,me_1);
        {951}out(pub, (key_s(me_1),key_m(me_1)))
    )
) | (
    {952}let me_2: principal = bob in
    {955}let basis_10: key = key_s(me_2) in
    {956}let public_key_10: key = catch-fail(dhexp(basis_10,validkey(g))) in
    {957}let v_312: bool = not-caught-fail(public_key_10) in
    {958}let s_10: keypair = (if v_312 then keypairpack(validkey(public_key_10),basis_10) else fail-any) in
    {959}let basis_11: key = key_m(me_2) in
    {960}let public_key_11: key = catch-fail(dhexp(basis_11,validkey(g))) in
    {961}let v_313: bool = not-caught-fail(public_key_11) in
    {962}let m_10: keypair = (if v_313 then keypairpack(validkey(public_key_11),basis_11) else fail-any) in
    {963}out(pub, (getpublickey(s_10),getpublickey(m_10)));
    {954}let sid_3: sessionid = sid in
    {953}let them_2: principal = alice in
    (
        {965}let basis_12: key = key_s(them_2) in
        {966}let public_key_12: key = catch-fail(dhexp(basis_12,validkey(g))) in
        {967}let v_314: bool = not-caught-fail(public_key_12) in
        {968}let rs_10: key = getpublickey((if v_314 then keypairpack(validkey(public_key_12),basis_12) else fail-any)) in
        {969}let basis_13: key = key_m(them_2) in
        {970}let public_key_13: key = catch-fail(dhexp(basis_13,validkey(g))) in
        {971}let v_315: bool = not-caught-fail(public_key_13) in
        {972}let rm_10: key = getpublickey((if v_315 then keypairpack(validkey(public_key_13),basis_13) else fail-any)) in
        {979}let k_18: key = empty in
        {980}let cs_44: cipherstate = cipherstatepack(k_18,minnonce) in
        {976}let protocol_name_2: bitstring = somename in
        {977}let h_44: bitstring = hash(protocol_name_2,empty) in
        {978}let ck_54: key = h_44 in
        {981}let ss_50: symmetricstate = symmetricstatepack(cs_44,ck_54,h_44) in
        {982}let v_316: bitstring = catch-fail(symmetricstateunpack(ss_50)) in
        {983}let v_317: bool = (not-caught-fail(v_316) && success?(1-proj-3-tuple(v_316))) in
        {984}let h_45: bitstring = (if v_317 then 3-proj-3-tuple(v_316) else caught-fail) in
        {985}let ck_55: key = (if v_317 then 2-proj-3-tuple(v_316) else caught-fail) in
        {986}let cs_45: cipherstate = (if v_317 then 1-proj-3-tuple(v_316) else caught-fail) in
        {974}let prologue_2: bitstring = empty in
        {987}let ss_51: symmetricstate = catch-fail((if v_317 then symmetricstatepack(cs_45,ck_55,hash(h_45,prologue_2)) else fail-any)) in
        {988}let v_318: bool = not-caught-fail(ss_51) in
        {989}let v_319: bitstring = (if v_318 then catch-fail(symmetricstateunpack(ss_51)) else caught-fail) in
        {990}let v_320: bool = (not-caught-fail(v_319) && success?(1-proj-3-tuple(v_319))) in
        {991}let h_46: bitstring = (if v_320 then 3-proj-3-tuple(v_319) else caught-fail) in
        {992}let ck_56: key = (if v_320 then 2-proj-3-tuple(v_319) else caught-fail) in
        {993}let cs_46: cipherstate = (if v_320 then 1-proj-3-tuple(v_319) else caught-fail) in
        {994}let ss_52: symmetricstate = (if v_318 then catch-fail((if v_320 then symmetricstatepack(cs_46,ck_56,hash(h_46,rs_10)) else fail-any)) else caught-fail) in
        {995}let v_321: bool = not-caught-fail(ss_52) in
        {996}let v_322: bitstring = (if v_321 then catch-fail(symmetricstateunpack(ss_52)) else caught-fail) in
        {997}let v_323: bool = (not-caught-fail(v_322) && success?(1-proj-3-tuple(v_322))) in
        {998}let h_47: bitstring = (if v_323 then 3-proj-3-tuple(v_322) else caught-fail) in
        {999}let ck_57: key = (if v_323 then 2-proj-3-tuple(v_322) else caught-fail) in
        {1000}let cs_47: cipherstate = (if v_323 then 1-proj-3-tuple(v_322) else caught-fail) in
        {1001}let ss_53: symmetricstate = (if v_321 then catch-fail((if v_323 then symmetricstatepack(cs_47,ck_57,hash(h_47,rm_10)) else fail-any)) else caught-fail) in
        {1002}let v_324: bool = not-caught-fail(ss_53) in
        {1003}let data_4: bitstring = (if v_324 then catch-fail(getpublickey(s_10)) else caught-fail) in
        {1004}let v_325: bool = not-caught-fail(data_4) in
        {1005}let v_326: bitstring = (if v_325 then catch-fail(symmetricstateunpack(ss_53)) else caught-fail) in
        {1006}let v_327: bool = (not-caught-fail(v_326) && success?(1-proj-3-tuple(v_326))) in
        {1007}let h_48: bitstring = (if v_327 then 3-proj-3-tuple(v_326) else caught-fail) in
        {1008}let ck_58: key = (if v_327 then 2-proj-3-tuple(v_326) else caught-fail) in
        {1009}let cs_48: cipherstate = (if v_327 then 1-proj-3-tuple(v_326) else caught-fail) in
        {1010}let ss_54: symmetricstate = (if v_324 then catch-fail((if v_325 then (if v_327 then symmetricstatepack(cs_48,ck_58,hash(h_48,data_4)) else fail-any) else fail-any)) else caught-fail) in
        {1011}let v_328: bool = not-caught-fail(ss_54) in
        {1012}let data_5: bitstring = (if v_328 then catch-fail(getpublickey(m_10)) else caught-fail) in
        {1013}let v_329: bool = not-caught-fail(data_5) in
        {1014}let v_330: bitstring = (if v_329 then catch-fail(symmetricstateunpack(ss_54)) else caught-fail) in
        {1015}let v_331: bool = (not-caught-fail(v_330) && success?(1-proj-3-tuple(v_330))) in
        {1016}let h_49: bitstring = (if v_331 then 3-proj-3-tuple(v_330) else caught-fail) in
        {1017}let ck_59: key = (if v_331 then 2-proj-3-tuple(v_330) else caught-fail) in
        {1018}let cs_49: cipherstate = (if v_331 then 1-proj-3-tuple(v_330) else caught-fail) in
        {1019}let ss_55: symmetricstate = (if v_328 then catch-fail((if v_329 then (if v_331 then symmetricstatepack(cs_49,ck_59,hash(h_49,data_5)) else fail-any) else fail-any)) else caught-fail) in
        {1020}let v_332: bool = not-caught-fail(ss_55) in
        {975}let psk_10: key = empty in
        {973}let re_12: key = empty in
        {964}let e_16: keypair = keypairpack(empty,empty) in
        {1021}let hs_30: handshakestate = (if v_318 then (if v_321 then (if v_324 then (if v_328 then (if v_332 then handshakestatepack(ss_55,s_10,m_10,e_16,rs_10,rm_10,re_12,psk_10,false) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1022}insert statestore(me_2,them_2,sid_3,statepack_a(hs_30))
    ) | (
        {1137}get statestore(=me_2,=them_2,=sid_3,statepack_a(hs_31: handshakestate)) in
        {1023}in(pub, message_a_2: bitstring);
        {1024}let v_333: bitstring = catch-fail(handshakestateunpack(hs_31)) in
        {1025}let v_334: bool = (not-caught-fail(v_333) && success?(1-proj-9-tuple(v_333))) in
        {1026}let initiator_9: bool = (if v_334 then 9-proj-9-tuple(v_333) else caught-fail) in
        {1027}let psk_11: key = (if v_334 then 8-proj-9-tuple(v_333) else caught-fail) in
        {1028}let re_13: key = (if v_334 then 7-proj-9-tuple(v_333) else caught-fail) in
        {1029}let rm_11: key = (if v_334 then 6-proj-9-tuple(v_333) else caught-fail) in
        {1030}let rs_11: key = (if v_334 then 5-proj-9-tuple(v_333) else caught-fail) in
        {1031}let e_17: keypair = (if v_334 then 4-proj-9-tuple(v_333) else caught-fail) in
        {1032}let m_11: keypair = (if v_334 then 3-proj-9-tuple(v_333) else caught-fail) in
        {1033}let s_11: keypair = (if v_334 then 2-proj-9-tuple(v_333) else caught-fail) in
        {1034}let ss_56: symmetricstate = (if v_334 then 1-proj-9-tuple(v_333) else caught-fail) in
        {1035}let v_335: bitstring = (if v_334 then catch-fail(deconcat3(message_a_2)) else caught-fail) in
        {1036}let v_336: bool = (not-caught-fail(v_335) && success?(1-proj-3-tuple(v_335))) in
        {1037}let ciphertext_16: bitstring = (if v_336 then 3-proj-3-tuple(v_335) else caught-fail) in
        {1038}let ns_8: bitstring = (if v_336 then 2-proj-3-tuple(v_335) else caught-fail) in
        {1039}let ne_10: bitstring = (if v_336 then 1-proj-3-tuple(v_335) else caught-fail) in
        {1042}let v_337: bitstring = (if v_336 then catch-fail(symmetricstateunpack(ss_56)) else caught-fail) in
        {1043}let v_338: bool = (not-caught-fail(v_337) && success?(1-proj-3-tuple(v_337))) in
        {1044}let h_50: bitstring = (if v_338 then 3-proj-3-tuple(v_337) else caught-fail) in
        {1045}let ck_60: key = (if v_338 then 2-proj-3-tuple(v_337) else caught-fail) in
        {1046}let cs_50: cipherstate = (if v_338 then 1-proj-3-tuple(v_337) else caught-fail) in
        {1041}let re_14: key = (if v_336 then ne_10 else caught-fail) in
        {1047}let ss_57: symmetricstate = (if v_336 then catch-fail((if v_338 then symmetricstatepack(cs_50,ck_60,hash(h_50,re_14)) else fail-any)) else caught-fail) in
        {1048}let v_339: bool = not-caught-fail(ss_57) in
        {1049}let v_340: bitstring = (if v_339 then catch-fail(keypairunpack(m_11)) else caught-fail) in
        {1050}let v_341: bool = (not-caught-fail(v_340) && success?(1-proj-2-tuple(v_340))) in
        {1051}let my_private_key_10: key = (if v_341 then 2-proj-2-tuple(v_340) else caught-fail) in
        {1052}let my_public_key_10: key = (if v_341 then 1-proj-2-tuple(v_340) else caught-fail) in
        {1053}let input_key_material_12: key = (if v_339 then catch-fail((if v_341 then dhexp(my_private_key_10,re_14) else fail-any)) else caught-fail) in
        {1054}let v_342: bool = not-caught-fail(input_key_material_12) in
        {1055}let v_343: bitstring = (if v_342 then catch-fail(symmetricstateunpack(ss_57)) else caught-fail) in
        {1056}let v_344: bool = (not-caught-fail(v_343) && success?(1-proj-3-tuple(v_343))) in
        {1057}let h_51: bitstring = (if v_344 then 3-proj-3-tuple(v_343) else caught-fail) in
        {1058}let ck_61: key = (if v_344 then 2-proj-3-tuple(v_343) else caught-fail) in
        {1059}let cs_51: cipherstate = (if v_344 then 1-proj-3-tuple(v_343) else caught-fail) in
        {1062}let output3_12: key = (if v_344 then hmac_hash3(ck_61,input_key_material_12) else caught-fail) in
        {1061}let output2_12: key = (if v_344 then hmac_hash2(ck_61,input_key_material_12) else caught-fail) in
        {1060}let output1_12: key = (if v_344 then hmac_hash1(ck_61,input_key_material_12) else caught-fail) in
        {1063}let v_345: bitstring = (if v_344 then catch-fail((output1_12,output2_12,output3_12)) else caught-fail) in
        {1064}let v_346: bool = (not-caught-fail(v_345) && success?(1-proj-3-tuple(v_345))) in
        {1065}let output_10: key = (if v_346 then 3-proj-3-tuple(v_345) else caught-fail) in
        {1066}let temp_k_10: key = (if v_346 then 2-proj-3-tuple(v_345) else caught-fail) in
        {1067}let ck_62: key = (if v_346 then 1-proj-3-tuple(v_345) else caught-fail) in
        {1068}let ss_58: symmetricstate = (if v_339 then catch-fail((if v_342 then (if v_344 then (if v_346 then symmetricstatepack(cipherstatepack(temp_k_10,minnonce),ck_62,h_51) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1069}let v_347: bool = not-caught-fail(ss_58) in
        {1070}let v_348: bitstring = (if v_347 then catch-fail(keypairunpack(s_11)) else caught-fail) in
        {1071}let v_349: bool = (not-caught-fail(v_348) && success?(1-proj-2-tuple(v_348))) in
        {1072}let my_private_key_11: key = (if v_349 then 2-proj-2-tuple(v_348) else caught-fail) in
        {1073}let my_public_key_11: key = (if v_349 then 1-proj-2-tuple(v_348) else caught-fail) in
        {1074}let input_key_material_13: key = (if v_347 then catch-fail((if v_349 then dhexp(my_private_key_11,rm_11) else fail-any)) else caught-fail) in
        {1075}let v_350: bool = not-caught-fail(input_key_material_13) in
        {1076}let v_351: bitstring = (if v_350 then catch-fail(symmetricstateunpack(ss_58)) else caught-fail) in
        {1077}let v_352: bool = (not-caught-fail(v_351) && success?(1-proj-3-tuple(v_351))) in
        {1078}let h_52: bitstring = (if v_352 then 3-proj-3-tuple(v_351) else caught-fail) in
        {1079}let ck_63: key = (if v_352 then 2-proj-3-tuple(v_351) else caught-fail) in
        {1080}let cs_52: cipherstate = (if v_352 then 1-proj-3-tuple(v_351) else caught-fail) in
        {1083}let output3_13: key = (if v_352 then hmac_hash3(ck_63,input_key_material_13) else caught-fail) in
        {1082}let output2_13: key = (if v_352 then hmac_hash2(ck_63,input_key_material_13) else caught-fail) in
        {1081}let output1_13: key = (if v_352 then hmac_hash1(ck_63,input_key_material_13) else caught-fail) in
        {1084}let v_353: bitstring = (if v_352 then catch-fail((output1_13,output2_13,output3_13)) else caught-fail) in
        {1085}let v_354: bool = (not-caught-fail(v_353) && success?(1-proj-3-tuple(v_353))) in
        {1086}let output_11: key = (if v_354 then 3-proj-3-tuple(v_353) else caught-fail) in
        {1087}let temp_k_11: key = (if v_354 then 2-proj-3-tuple(v_353) else caught-fail) in
        {1088}let ck_64: key = (if v_354 then 1-proj-3-tuple(v_353) else caught-fail) in
        {1089}let ss_59: symmetricstate = (if v_347 then catch-fail((if v_350 then (if v_352 then (if v_354 then symmetricstatepack(cipherstatepack(temp_k_11,minnonce),ck_64,h_52) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1090}let v_355: bool = not-caught-fail(ss_59) in
        {1091}let v_356: bitstring = (if v_355 then catch-fail(symmetricstateunpack(ss_59)) else caught-fail) in
        {1092}let v_357: bool = (not-caught-fail(v_356) && success?(1-proj-3-tuple(v_356))) in
        {1093}let h_53: bitstring = (if v_357 then 3-proj-3-tuple(v_356) else caught-fail) in
        {1094}let ck_65: key = (if v_357 then 2-proj-3-tuple(v_356) else caught-fail) in
        {1095}let cs_53: cipherstate = (if v_357 then 1-proj-3-tuple(v_356) else caught-fail) in
        {1096}let v_358: bitstring = (if v_357 then catch-fail(cipherstateunpack(cs_53)) else caught-fail) in
        {1097}let v_359: bool = (not-caught-fail(v_358) && success?(1-proj-2-tuple(v_358))) in
        {1098}let n_16: nonce = (if v_359 then 2-proj-2-tuple(v_358) else caught-fail) in
        {1099}let k_19: key = (if v_359 then 1-proj-2-tuple(v_358) else caught-fail) in
        {1100}let d_4: aead = (if v_359 then catch-fail(decrypt(k_19,n_16,h_53,ciphertext_16)) else caught-fail) in
        {1101}let v_360: bool = not-caught-fail(d_4) in
        {1102}let v_361: bitstring = (if v_360 then catch-fail(aeadunpack(d_4)) else caught-fail) in
        {1103}let v_362: bool = (not-caught-fail(v_361) && success?(1-proj-3-tuple(v_361))) in
        {1104}let plaintext_12: bitstring = (if v_362 then 3-proj-3-tuple(v_361) else caught-fail) in
        {1105}let adi_4: bitstring = (if v_362 then 2-proj-3-tuple(v_361) else caught-fail) in
        {1106}let valid_12: bool = (if v_362 then 1-proj-3-tuple(v_361) else caught-fail) in
        {1108}let v_363: bitstring = (if v_362 then catch-fail(cipherstateunpack(cs_53)) else caught-fail) in
        {1109}let v_364: bool = (not-caught-fail(v_363) && success?(1-proj-2-tuple(v_363))) in
        {1110}let o_8: nonce = (if v_364 then 2-proj-2-tuple(v_363) else caught-fail) in
        {1111}let k_20: key = (if v_364 then 1-proj-2-tuple(v_363) else caught-fail) in
        {1107}let n_17: nonce = (if v_362 then increment_nonce(n_16) else caught-fail) in
        {1112}let csi_16: cipherstate = (if v_362 then catch-fail((if v_364 then cipherstatepack(k_20,n_17) else fail-any)) else caught-fail) in
        {1113}let v_365: bool = not-caught-fail(csi_16) in
        {1114}let v_366: bitstring = (if v_357 then catch-fail((if v_359 then (if v_360 then (if v_362 then (if v_365 then (csi_16,plaintext_12,valid_12) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1115}let v_367: bool = (not-caught-fail(v_366) && success?(1-proj-3-tuple(v_366))) in
        {1116}let valid_13: bool = (if v_367 then 3-proj-3-tuple(v_366) else caught-fail) in
        {1117}let plaintext_13: bitstring = (if v_367 then 2-proj-3-tuple(v_366) else caught-fail) in
        {1118}let csi_17: cipherstate = (if v_367 then 1-proj-3-tuple(v_366) else caught-fail) in
        {1119}let ss_60: symmetricstate = (if v_367 then symmetricstatepack(csi_17,ck_65,h_53) else caught-fail) in
        {1120}let v_368: bitstring = (if v_367 then catch-fail(symmetricstateunpack(ss_60)) else caught-fail) in
        {1121}let v_369: bool = (not-caught-fail(v_368) && success?(1-proj-3-tuple(v_368))) in
        {1122}let h_54: bitstring = (if v_369 then 3-proj-3-tuple(v_368) else caught-fail) in
        {1123}let ck_66: key = (if v_369 then 2-proj-3-tuple(v_368) else caught-fail) in
        {1124}let cs_54: cipherstate = (if v_369 then 1-proj-3-tuple(v_368) else caught-fail) in
        {1125}let ssi_10: symmetricstate = (if v_367 then catch-fail((if v_369 then symmetricstatepack(cs_54,ck_66,hash(h_54,ciphertext_16)) else fail-any)) else caught-fail) in
        {1126}let v_370: bool = not-caught-fail(ssi_10) in
        {1127}let v_371: bitstring = (if v_355 then catch-fail((if v_357 then (if v_367 then (if v_370 then (ssi_10,plaintext_13,valid_13) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1128}let v_372: bool = (not-caught-fail(v_371) && success?(1-proj-3-tuple(v_371))) in
        {1129}let valid2_4: bool = (if v_372 then 3-proj-3-tuple(v_371) else caught-fail) in
        {1130}let plaintext_14: bitstring = (if v_372 then 2-proj-3-tuple(v_371) else caught-fail) in
        {1131}let ss_61: symmetricstate = (if v_372 then 1-proj-3-tuple(v_371) else caught-fail) in
        {1040}let valid1_4: bool = (if v_336 then true else caught-fail) in
        {1132}let v_373: bool = (if v_372 then catch-fail((valid1_4 && valid2_4)) else caught-fail) in
        {1133}let hs_32: handshakestate = (if v_373 then handshakestatepack(ss_61,s_11,m_11,e_17,rs_11,rm_11,re_14,psk_11,initiator_9) else caught-fail) in
        {1134}let (hs_33: handshakestate,plaintext_a: bitstring,valid_14: bool) = (if v_334 then (if v_336 then (if v_339 then (if v_347 then (if v_355 then (if v_372 then (if undo-catch-fail(v_373) then (hs_32,plaintext_14,true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1135}event RecvMsg(me_2,them_2,stagepack_a(sid_3),plaintext_a);
        {1136}insert statestore(me_2,them_2,sid_3,statepack_b(hs_33))
    ) | (
        {1292}get statestore(=me_2,=them_2,=sid_3,statepack_b(hs_34: handshakestate)) in
        {1139}let v_374: bitstring = catch-fail(handshakestateunpack(hs_34)) in
        {1140}let v_375: bool = (not-caught-fail(v_374) && success?(1-proj-9-tuple(v_374))) in
        {1141}let initiator_10: bool = (if v_375 then 9-proj-9-tuple(v_374) else caught-fail) in
        {1142}let psk_12: key = (if v_375 then 8-proj-9-tuple(v_374) else caught-fail) in
        {1143}let re_15: key = (if v_375 then 7-proj-9-tuple(v_374) else caught-fail) in
        {1144}let rm_12: key = (if v_375 then 6-proj-9-tuple(v_374) else caught-fail) in
        {1145}let rs_12: key = (if v_375 then 5-proj-9-tuple(v_374) else caught-fail) in
        {1146}let e_18: keypair = (if v_375 then 4-proj-9-tuple(v_374) else caught-fail) in
        {1147}let m_12: keypair = (if v_375 then 3-proj-9-tuple(v_374) else caught-fail) in
        {1148}let s_12: keypair = (if v_375 then 2-proj-9-tuple(v_374) else caught-fail) in
        {1149}let ss_62: symmetricstate = (if v_375 then 1-proj-9-tuple(v_374) else caught-fail) in
        {1150}let v_376: bitstring = (if v_375 then catch-fail((empty,empty,empty)) else caught-fail) in
        {1151}let v_377: bool = (not-caught-fail(v_376) && success?(1-proj-3-tuple(v_376))) in
        {1152}let ciphertext_17: bitstring = (if v_377 then 3-proj-3-tuple(v_376) else caught-fail) in
        {1153}let ns_9: bitstring = (if v_377 then 2-proj-3-tuple(v_376) else caught-fail) in
        {1154}let ne_11: bitstring = (if v_377 then 1-proj-3-tuple(v_376) else caught-fail) in
        {1155}let basis_14: key = (if v_377 then key_e(me_2,them_2,sid_3) else caught-fail) in
        {1156}let public_key_14: key = (if v_377 then catch-fail(dhexp(basis_14,validkey(g))) else caught-fail) in
        {1157}let v_378: bool = not-caught-fail(public_key_14) in
        {1158}let e_19: keypair = (if v_377 then catch-fail((if v_378 then keypairpack(validkey(public_key_14),basis_14) else fail-any)) else caught-fail) in
        {1159}let v_379: bool = not-caught-fail(e_19) in
        {1160}let ne_12: bitstring = (if v_379 then catch-fail(getpublickey(e_19)) else caught-fail) in
        {1161}let v_380: bool = not-caught-fail(ne_12) in
        {1162}let v_381: bitstring = (if v_380 then catch-fail(symmetricstateunpack(ss_62)) else caught-fail) in
        {1163}let v_382: bool = (not-caught-fail(v_381) && success?(1-proj-3-tuple(v_381))) in
        {1164}let h_55: bitstring = (if v_382 then 3-proj-3-tuple(v_381) else caught-fail) in
        {1165}let ck_67: key = (if v_382 then 2-proj-3-tuple(v_381) else caught-fail) in
        {1166}let cs_55: cipherstate = (if v_382 then 1-proj-3-tuple(v_381) else caught-fail) in
        {1167}let ss_63: symmetricstate = (if v_380 then catch-fail((if v_382 then symmetricstatepack(cs_55,ck_67,hash(h_55,ne_12)) else fail-any)) else caught-fail) in
        {1168}let v_383: bool = not-caught-fail(ss_63) in
        {1169}let v_384: bitstring = (if v_383 then catch-fail(keypairunpack(e_19)) else caught-fail) in
        {1170}let v_385: bool = (not-caught-fail(v_384) && success?(1-proj-2-tuple(v_384))) in
        {1171}let my_private_key_12: key = (if v_385 then 2-proj-2-tuple(v_384) else caught-fail) in
        {1172}let my_public_key_12: key = (if v_385 then 1-proj-2-tuple(v_384) else caught-fail) in
        {1173}let input_key_material_14: key = (if v_383 then catch-fail((if v_385 then dhexp(my_private_key_12,re_15) else fail-any)) else caught-fail) in
        {1174}let v_386: bool = not-caught-fail(input_key_material_14) in
        {1175}let v_387: bitstring = (if v_386 then catch-fail(symmetricstateunpack(ss_63)) else caught-fail) in
        {1176}let v_388: bool = (not-caught-fail(v_387) && success?(1-proj-3-tuple(v_387))) in
        {1177}let h_56: bitstring = (if v_388 then 3-proj-3-tuple(v_387) else caught-fail) in
        {1178}let ck_68: key = (if v_388 then 2-proj-3-tuple(v_387) else caught-fail) in
        {1179}let cs_56: cipherstate = (if v_388 then 1-proj-3-tuple(v_387) else caught-fail) in
        {1182}let output3_14: key = (if v_388 then hmac_hash3(ck_68,input_key_material_14) else caught-fail) in
        {1181}let output2_14: key = (if v_388 then hmac_hash2(ck_68,input_key_material_14) else caught-fail) in
        {1180}let output1_14: key = (if v_388 then hmac_hash1(ck_68,input_key_material_14) else caught-fail) in
        {1183}let v_389: bitstring = (if v_388 then catch-fail((output1_14,output2_14,output3_14)) else caught-fail) in
        {1184}let v_390: bool = (not-caught-fail(v_389) && success?(1-proj-3-tuple(v_389))) in
        {1185}let output_12: key = (if v_390 then 3-proj-3-tuple(v_389) else caught-fail) in
        {1186}let temp_k_12: key = (if v_390 then 2-proj-3-tuple(v_389) else caught-fail) in
        {1187}let ck_69: key = (if v_390 then 1-proj-3-tuple(v_389) else caught-fail) in
        {1188}let ss_64: symmetricstate = (if v_383 then catch-fail((if v_386 then (if v_388 then (if v_390 then symmetricstatepack(cipherstatepack(temp_k_12,minnonce),ck_69,h_56) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1189}let v_391: bool = not-caught-fail(ss_64) in
        {1190}let v_392: bitstring = (if v_391 then catch-fail(keypairunpack(e_19)) else caught-fail) in
        {1191}let v_393: bool = (not-caught-fail(v_392) && success?(1-proj-2-tuple(v_392))) in
        {1192}let my_private_key_13: key = (if v_393 then 2-proj-2-tuple(v_392) else caught-fail) in
        {1193}let my_public_key_13: key = (if v_393 then 1-proj-2-tuple(v_392) else caught-fail) in
        {1194}let input_key_material_15: key = (if v_391 then catch-fail((if v_393 then dhexp(my_private_key_13,rs_12) else fail-any)) else caught-fail) in
        {1195}let v_394: bool = not-caught-fail(input_key_material_15) in
        {1196}let v_395: bitstring = (if v_394 then catch-fail(symmetricstateunpack(ss_64)) else caught-fail) in
        {1197}let v_396: bool = (not-caught-fail(v_395) && success?(1-proj-3-tuple(v_395))) in
        {1198}let h_57: bitstring = (if v_396 then 3-proj-3-tuple(v_395) else caught-fail) in
        {1199}let ck_70: key = (if v_396 then 2-proj-3-tuple(v_395) else caught-fail) in
        {1200}let cs_57: cipherstate = (if v_396 then 1-proj-3-tuple(v_395) else caught-fail) in
        {1203}let output3_15: key = (if v_396 then hmac_hash3(ck_70,input_key_material_15) else caught-fail) in
        {1202}let output2_15: key = (if v_396 then hmac_hash2(ck_70,input_key_material_15) else caught-fail) in
        {1201}let output1_15: key = (if v_396 then hmac_hash1(ck_70,input_key_material_15) else caught-fail) in
        {1204}let v_397: bitstring = (if v_396 then catch-fail((output1_15,output2_15,output3_15)) else caught-fail) in
        {1205}let v_398: bool = (not-caught-fail(v_397) && success?(1-proj-3-tuple(v_397))) in
        {1206}let output_13: key = (if v_398 then 3-proj-3-tuple(v_397) else caught-fail) in
        {1207}let temp_k_13: key = (if v_398 then 2-proj-3-tuple(v_397) else caught-fail) in
        {1208}let ck_71: key = (if v_398 then 1-proj-3-tuple(v_397) else caught-fail) in
        {1209}let ss_65: symmetricstate = (if v_391 then catch-fail((if v_394 then (if v_396 then (if v_398 then symmetricstatepack(cipherstatepack(temp_k_13,minnonce),ck_71,h_57) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1210}let v_399: bool = not-caught-fail(ss_65) in
        {1211}let v_400: bitstring = (if v_399 then catch-fail(keypairunpack(e_19)) else caught-fail) in
        {1212}let v_401: bool = (not-caught-fail(v_400) && success?(1-proj-2-tuple(v_400))) in
        {1213}let my_private_key_14: key = (if v_401 then 2-proj-2-tuple(v_400) else caught-fail) in
        {1214}let my_public_key_14: key = (if v_401 then 1-proj-2-tuple(v_400) else caught-fail) in
        {1215}let input_key_material_16: key = (if v_399 then catch-fail((if v_401 then dhexp(my_private_key_14,rm_12) else fail-any)) else caught-fail) in
        {1216}let v_402: bool = not-caught-fail(input_key_material_16) in
        {1217}let v_403: bitstring = (if v_402 then catch-fail(symmetricstateunpack(ss_65)) else caught-fail) in
        {1218}let v_404: bool = (not-caught-fail(v_403) && success?(1-proj-3-tuple(v_403))) in
        {1219}let h_58: bitstring = (if v_404 then 3-proj-3-tuple(v_403) else caught-fail) in
        {1220}let ck_72: key = (if v_404 then 2-proj-3-tuple(v_403) else caught-fail) in
        {1221}let cs_58: cipherstate = (if v_404 then 1-proj-3-tuple(v_403) else caught-fail) in
        {1224}let output3_16: key = (if v_404 then hmac_hash3(ck_72,input_key_material_16) else caught-fail) in
        {1223}let output2_16: key = (if v_404 then hmac_hash2(ck_72,input_key_material_16) else caught-fail) in
        {1222}let output1_16: key = (if v_404 then hmac_hash1(ck_72,input_key_material_16) else caught-fail) in
        {1225}let v_405: bitstring = (if v_404 then catch-fail((output1_16,output2_16,output3_16)) else caught-fail) in
        {1226}let v_406: bool = (not-caught-fail(v_405) && success?(1-proj-3-tuple(v_405))) in
        {1227}let output_14: key = (if v_406 then 3-proj-3-tuple(v_405) else caught-fail) in
        {1228}let temp_k_14: key = (if v_406 then 2-proj-3-tuple(v_405) else caught-fail) in
        {1229}let ck_73: key = (if v_406 then 1-proj-3-tuple(v_405) else caught-fail) in
        {1230}let ss_66: symmetricstate = (if v_399 then catch-fail((if v_402 then (if v_404 then (if v_406 then symmetricstatepack(cipherstatepack(temp_k_14,minnonce),ck_73,h_58) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1231}let v_407: bool = not-caught-fail(ss_66) in
        {1232}let v_408: bitstring = (if v_407 then catch-fail(symmetricstateunpack(ss_66)) else caught-fail) in
        {1233}let v_409: bool = (not-caught-fail(v_408) && success?(1-proj-3-tuple(v_408))) in
        {1234}let h_59: bitstring = (if v_409 then 3-proj-3-tuple(v_408) else caught-fail) in
        {1235}let ck_74: key = (if v_409 then 2-proj-3-tuple(v_408) else caught-fail) in
        {1236}let cs_59: cipherstate = (if v_409 then 1-proj-3-tuple(v_408) else caught-fail) in
        {1237}let v_410: bitstring = (if v_409 then catch-fail(cipherstateunpack(cs_59)) else caught-fail) in
        {1238}let v_411: bool = (not-caught-fail(v_410) && success?(1-proj-2-tuple(v_410))) in
        {1239}let n_18: nonce = (if v_411 then 2-proj-2-tuple(v_410) else caught-fail) in
        {1240}let k_21: key = (if v_411 then 1-proj-2-tuple(v_410) else caught-fail) in
        {1243}let v_412: bitstring = (if v_411 then catch-fail(cipherstateunpack(cs_59)) else caught-fail) in
        {1244}let v_413: bool = (not-caught-fail(v_412) && success?(1-proj-2-tuple(v_412))) in
        {1245}let o_9: nonce = (if v_413 then 2-proj-2-tuple(v_412) else caught-fail) in
        {1246}let k_22: key = (if v_413 then 1-proj-2-tuple(v_412) else caught-fail) in
        {1242}let n_19: nonce = (if v_411 then increment_nonce(n_18) else caught-fail) in
        {1247}let csi_18: cipherstate = (if v_411 then catch-fail((if v_413 then cipherstatepack(k_22,n_19) else fail-any)) else caught-fail) in
        {1248}let v_414: bool = not-caught-fail(csi_18) in
        {1138}let payload_4: bitstring = msg_b(me_2,them_2,sid_3) in
        {1241}let e_20: bitstring = (if v_411 then encrypt(k_21,n_18,h_59,payload_4) else caught-fail) in
        {1249}let v_415: bitstring = (if v_409 then catch-fail((if v_411 then (if v_414 then (csi_18,e_20) else fail-any) else fail-any)) else caught-fail) in
        {1250}let v_416: bool = (not-caught-fail(v_415) && success?(1-proj-2-tuple(v_415))) in
        {1251}let ciphertext_18: bitstring = (if v_416 then 2-proj-2-tuple(v_415) else caught-fail) in
        {1252}let csi_19: cipherstate = (if v_416 then 1-proj-2-tuple(v_415) else caught-fail) in
        {1253}let ss_67: symmetricstate = (if v_416 then symmetricstatepack(csi_19,ck_74,h_59) else caught-fail) in
        {1254}let v_417: bitstring = (if v_416 then catch-fail(symmetricstateunpack(ss_67)) else caught-fail) in
        {1255}let v_418: bool = (not-caught-fail(v_417) && success?(1-proj-3-tuple(v_417))) in
        {1256}let h_60: bitstring = (if v_418 then 3-proj-3-tuple(v_417) else caught-fail) in
        {1257}let ck_75: key = (if v_418 then 2-proj-3-tuple(v_417) else caught-fail) in
        {1258}let cs_60: cipherstate = (if v_418 then 1-proj-3-tuple(v_417) else caught-fail) in
        {1259}let ssi_11: symmetricstate = (if v_416 then catch-fail((if v_418 then symmetricstatepack(cs_60,ck_75,hash(h_60,ciphertext_18)) else fail-any)) else caught-fail) in
        {1260}let v_419: bool = not-caught-fail(ssi_11) in
        {1261}let v_420: bitstring = (if v_407 then catch-fail((if v_409 then (if v_416 then (if v_419 then (ssi_11,ciphertext_18) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1262}let v_421: bool = (not-caught-fail(v_420) && success?(1-proj-2-tuple(v_420))) in
        {1263}let ciphertext_19: bitstring = (if v_421 then 2-proj-2-tuple(v_420) else caught-fail) in
        {1264}let ss_68: symmetricstate = (if v_421 then 1-proj-2-tuple(v_420) else caught-fail) in
        {1267}let v_422: bitstring = (if v_421 then catch-fail(symmetricstateunpack(ss_68)) else caught-fail) in
        {1268}let v_423: bool = (not-caught-fail(v_422) && success?(1-proj-3-tuple(v_422))) in
        {1269}let h_61: bitstring = (if v_423 then 3-proj-3-tuple(v_422) else caught-fail) in
        {1270}let ck_76: key = (if v_423 then 2-proj-3-tuple(v_422) else caught-fail) in
        {1271}let cs_61: cipherstate = (if v_423 then 1-proj-3-tuple(v_422) else caught-fail) in
        {1272}let input_key_material_17: key = (if v_423 then zero else caught-fail) in
        {1275}let output3_17: key = (if v_423 then hmac_hash3(ck_76,input_key_material_17) else caught-fail) in
        {1274}let output2_17: key = (if v_423 then hmac_hash2(ck_76,input_key_material_17) else caught-fail) in
        {1273}let output1_17: key = (if v_423 then hmac_hash1(ck_76,input_key_material_17) else caught-fail) in
        {1276}let v_424: bitstring = (if v_423 then catch-fail((output1_17,output2_17,output3_17)) else caught-fail) in
        {1277}let v_425: bool = (not-caught-fail(v_424) && success?(1-proj-3-tuple(v_424))) in
        {1278}let temp_k3_2: key = (if v_425 then 3-proj-3-tuple(v_424) else caught-fail) in
        {1279}let temp_k2_2: key = (if v_425 then 2-proj-3-tuple(v_424) else caught-fail) in
        {1280}let temp_k1_2: key = (if v_425 then 1-proj-3-tuple(v_424) else caught-fail) in
        {1282}let cs2_10: cipherstate = (if v_425 then cipherstatepack(temp_k2_2,minnonce) else caught-fail) in
        {1281}let cs1_10: cipherstate = (if v_425 then cipherstatepack(temp_k1_2,minnonce) else caught-fail) in
        {1283}let v_426: bitstring = (if v_421 then catch-fail((if v_423 then (if v_425 then (ss_68,cs1_10,cs2_10) else fail-any) else fail-any)) else caught-fail) in
        {1284}let v_427: bool = (not-caught-fail(v_426) && success?(1-proj-3-tuple(v_426))) in
        {1285}let cs2_11: cipherstate = (if v_427 then 3-proj-3-tuple(v_426) else caught-fail) in
        {1286}let cs1_11: cipherstate = (if v_427 then 2-proj-3-tuple(v_426) else caught-fail) in
        {1287}let ssi_12: symmetricstate = (if v_427 then 1-proj-3-tuple(v_426) else caught-fail) in
        {1266}let message_buffer_4: bitstring = (if v_421 then concat3(ne_12,ns_9,ciphertext_19) else caught-fail) in
        {1265}let hs_35: handshakestate = (if v_421 then handshakestatepack(ss_68,s_12,m_12,e_19,rs_12,rm_12,re_15,psk_12,initiator_10) else caught-fail) in
        {1288}let (hs_36: handshakestate,message_b_2: bitstring,cs1_12: cipherstate,cs2_12: cipherstate) = (if v_375 then (if v_377 then (if v_379 then (if v_380 then (if v_383 then (if v_391 then (if v_399 then (if v_407 then (if v_421 then (if v_427 then (hs_35,message_buffer_4,cs1_11,cs2_11) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1289}event SendMsg(me_2,them_2,stagepack_b(sid_3),msg_b(me_2,them_2,sid_3));
        {1290}insert statestore(me_2,them_2,sid_3,statepack_c(hs_36,cs1_12,cs2_12));
        {1291}out(pub, message_b_2)
    ) | (
        {1293}!
        {1359}get statestore(=me_2,=them_2,=sid_3,statepack_c(hs_37: handshakestate,cs1_13: cipherstate,cs2_13: cipherstate)) in
        {1294}let hs_38: handshakestate = handshakestatesetcs(hs_37,cs1_13) in
        {1295}in(pub, message_c_2: bitstring);
        {1296}let v_428: bitstring = catch-fail(handshakestateunpack(hs_38)) in
        {1297}let v_429: bool = (not-caught-fail(v_428) && success?(1-proj-9-tuple(v_428))) in
        {1298}let initiator_11: bool = (if v_429 then 9-proj-9-tuple(v_428) else caught-fail) in
        {1299}let psk_13: key = (if v_429 then 8-proj-9-tuple(v_428) else caught-fail) in
        {1300}let re_16: key = (if v_429 then 7-proj-9-tuple(v_428) else caught-fail) in
        {1301}let rm_13: key = (if v_429 then 6-proj-9-tuple(v_428) else caught-fail) in
        {1302}let rs_13: key = (if v_429 then 5-proj-9-tuple(v_428) else caught-fail) in
        {1303}let e_21: keypair = (if v_429 then 4-proj-9-tuple(v_428) else caught-fail) in
        {1304}let m_13: keypair = (if v_429 then 3-proj-9-tuple(v_428) else caught-fail) in
        {1305}let s_13: keypair = (if v_429 then 2-proj-9-tuple(v_428) else caught-fail) in
        {1306}let ss_69: symmetricstate = (if v_429 then 1-proj-9-tuple(v_428) else caught-fail) in
        {1307}let v_430: bitstring = (if v_429 then catch-fail(deconcat3(message_c_2)) else caught-fail) in
        {1308}let v_431: bool = (not-caught-fail(v_430) && success?(1-proj-3-tuple(v_430))) in
        {1309}let ciphertext_20: bitstring = (if v_431 then 3-proj-3-tuple(v_430) else caught-fail) in
        {1310}let ns_10: bitstring = (if v_431 then 2-proj-3-tuple(v_430) else caught-fail) in
        {1311}let ne_13: bitstring = (if v_431 then 1-proj-3-tuple(v_430) else caught-fail) in
        {1313}let v_432: bitstring = (if v_431 then catch-fail(symmetricstateunpack(ss_69)) else caught-fail) in
        {1314}let v_433: bool = (not-caught-fail(v_432) && success?(1-proj-3-tuple(v_432))) in
        {1315}let h_62: bitstring = (if v_433 then 3-proj-3-tuple(v_432) else caught-fail) in
        {1316}let ck_77: key = (if v_433 then 2-proj-3-tuple(v_432) else caught-fail) in
        {1317}let cs_62: cipherstate = (if v_433 then 1-proj-3-tuple(v_432) else caught-fail) in
        {1318}let v_434: bitstring = (if v_433 then catch-fail(cipherstateunpack(cs_62)) else caught-fail) in
        {1319}let v_435: bool = (not-caught-fail(v_434) && success?(1-proj-2-tuple(v_434))) in
        {1320}let n_20: nonce = (if v_435 then 2-proj-2-tuple(v_434) else caught-fail) in
        {1321}let k_23: key = (if v_435 then 1-proj-2-tuple(v_434) else caught-fail) in
        {1322}let d_5: aead = (if v_435 then catch-fail(decrypt(k_23,n_20,h_62,ciphertext_20)) else caught-fail) in
        {1323}let v_436: bool = not-caught-fail(d_5) in
        {1324}let v_437: bitstring = (if v_436 then catch-fail(aeadunpack(d_5)) else caught-fail) in
        {1325}let v_438: bool = (not-caught-fail(v_437) && success?(1-proj-3-tuple(v_437))) in
        {1326}let plaintext_15: bitstring = (if v_438 then 3-proj-3-tuple(v_437) else caught-fail) in
        {1327}let adi_5: bitstring = (if v_438 then 2-proj-3-tuple(v_437) else caught-fail) in
        {1328}let valid_15: bool = (if v_438 then 1-proj-3-tuple(v_437) else caught-fail) in
        {1330}let v_439: bitstring = (if v_438 then catch-fail(cipherstateunpack(cs_62)) else caught-fail) in
        {1331}let v_440: bool = (not-caught-fail(v_439) && success?(1-proj-2-tuple(v_439))) in
        {1332}let o_10: nonce = (if v_440 then 2-proj-2-tuple(v_439) else caught-fail) in
        {1333}let k_24: key = (if v_440 then 1-proj-2-tuple(v_439) else caught-fail) in
        {1329}let n_21: nonce = (if v_438 then increment_nonce(n_20) else caught-fail) in
        {1334}let csi_20: cipherstate = (if v_438 then catch-fail((if v_440 then cipherstatepack(k_24,n_21) else fail-any)) else caught-fail) in
        {1335}let v_441: bool = not-caught-fail(csi_20) in
        {1336}let v_442: bitstring = (if v_433 then catch-fail((if v_435 then (if v_436 then (if v_438 then (if v_441 then (csi_20,plaintext_15,valid_15) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1337}let v_443: bool = (not-caught-fail(v_442) && success?(1-proj-3-tuple(v_442))) in
        {1338}let valid_16: bool = (if v_443 then 3-proj-3-tuple(v_442) else caught-fail) in
        {1339}let plaintext_16: bitstring = (if v_443 then 2-proj-3-tuple(v_442) else caught-fail) in
        {1340}let csi_21: cipherstate = (if v_443 then 1-proj-3-tuple(v_442) else caught-fail) in
        {1341}let ss_70: symmetricstate = (if v_443 then symmetricstatepack(csi_21,ck_77,h_62) else caught-fail) in
        {1342}let v_444: bitstring = (if v_443 then catch-fail(symmetricstateunpack(ss_70)) else caught-fail) in
        {1343}let v_445: bool = (not-caught-fail(v_444) && success?(1-proj-3-tuple(v_444))) in
        {1344}let h_63: bitstring = (if v_445 then 3-proj-3-tuple(v_444) else caught-fail) in
        {1345}let ck_78: key = (if v_445 then 2-proj-3-tuple(v_444) else caught-fail) in
        {1346}let cs_63: cipherstate = (if v_445 then 1-proj-3-tuple(v_444) else caught-fail) in
        {1347}let ssi_13: symmetricstate = (if v_443 then catch-fail((if v_445 then symmetricstatepack(cs_63,ck_78,hash(h_63,ciphertext_20)) else fail-any)) else caught-fail) in
        {1348}let v_446: bool = not-caught-fail(ssi_13) in
        {1349}let v_447: bitstring = (if v_431 then catch-fail((if v_433 then (if v_443 then (if v_446 then (ssi_13,plaintext_16,valid_16) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1350}let v_448: bool = (not-caught-fail(v_447) && success?(1-proj-3-tuple(v_447))) in
        {1351}let valid2_5: bool = (if v_448 then 3-proj-3-tuple(v_447) else caught-fail) in
        {1352}let plaintext_17: bitstring = (if v_448 then 2-proj-3-tuple(v_447) else caught-fail) in
        {1353}let ss_71: symmetricstate = (if v_448 then 1-proj-3-tuple(v_447) else caught-fail) in
        {1312}let valid1_5: bool = (if v_431 then true else caught-fail) in
        {1354}let v_449: bool = (if v_448 then catch-fail((valid1_5 && valid2_5)) else caught-fail) in
        {1355}let hs_39: handshakestate = (if v_449 then handshakestatepack(ss_71,s_13,m_13,e_21,rs_13,rm_13,re_16,psk_13,initiator_11) else caught-fail) in
        {1356}let (hs_40: handshakestate,plaintext_c: bitstring,valid_17: bool) = (if v_429 then (if v_431 then (if v_448 then (if undo-catch-fail(v_449) then (hs_39,plaintext_17,true) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1357}event RecvMsg(me_2,them_2,stagepack_c(sid_3),plaintext_c);
        {1358}insert statestore(me_2,them_2,sid_3,statepack_d(hs_40,handshakestategetcs(hs_40),cs2_13))
    ) | (
        {1360}!
        {1417}get statestore(=me_2,=them_2,=sid_3,statepack_d(hs_41: handshakestate,cs1_14: cipherstate,cs2_14: cipherstate)) in
        {1361}let hs_42: handshakestate = handshakestatesetcs(hs_41,cs2_14) in
        {1363}let v_450: bitstring = catch-fail(handshakestateunpack(hs_42)) in
        {1364}let v_451: bool = (not-caught-fail(v_450) && success?(1-proj-9-tuple(v_450))) in
        {1365}let initiator_12: bool = (if v_451 then 9-proj-9-tuple(v_450) else caught-fail) in
        {1366}let psk_14: key = (if v_451 then 8-proj-9-tuple(v_450) else caught-fail) in
        {1367}let re_17: key = (if v_451 then 7-proj-9-tuple(v_450) else caught-fail) in
        {1368}let rm_14: key = (if v_451 then 6-proj-9-tuple(v_450) else caught-fail) in
        {1369}let rs_14: key = (if v_451 then 5-proj-9-tuple(v_450) else caught-fail) in
        {1370}let e_22: keypair = (if v_451 then 4-proj-9-tuple(v_450) else caught-fail) in
        {1371}let m_14: keypair = (if v_451 then 3-proj-9-tuple(v_450) else caught-fail) in
        {1372}let s_14: keypair = (if v_451 then 2-proj-9-tuple(v_450) else caught-fail) in
        {1373}let ss_72: symmetricstate = (if v_451 then 1-proj-9-tuple(v_450) else caught-fail) in
        {1374}let v_452: bitstring = (if v_451 then catch-fail((empty,empty,empty)) else caught-fail) in
        {1375}let v_453: bool = (not-caught-fail(v_452) && success?(1-proj-3-tuple(v_452))) in
        {1376}let ciphertext_21: bitstring = (if v_453 then 3-proj-3-tuple(v_452) else caught-fail) in
        {1377}let ns_11: bitstring = (if v_453 then 2-proj-3-tuple(v_452) else caught-fail) in
        {1378}let ne_14: bitstring = (if v_453 then 1-proj-3-tuple(v_452) else caught-fail) in
        {1379}let v_454: bitstring = (if v_453 then catch-fail(symmetricstateunpack(ss_72)) else caught-fail) in
        {1380}let v_455: bool = (not-caught-fail(v_454) && success?(1-proj-3-tuple(v_454))) in
        {1381}let h_64: bitstring = (if v_455 then 3-proj-3-tuple(v_454) else caught-fail) in
        {1382}let ck_79: key = (if v_455 then 2-proj-3-tuple(v_454) else caught-fail) in
        {1383}let cs_64: cipherstate = (if v_455 then 1-proj-3-tuple(v_454) else caught-fail) in
        {1384}let v_456: bitstring = (if v_455 then catch-fail(cipherstateunpack(cs_64)) else caught-fail) in
        {1385}let v_457: bool = (not-caught-fail(v_456) && success?(1-proj-2-tuple(v_456))) in
        {1386}let n_22: nonce = (if v_457 then 2-proj-2-tuple(v_456) else caught-fail) in
        {1387}let k_25: key = (if v_457 then 1-proj-2-tuple(v_456) else caught-fail) in
        {1390}let v_458: bitstring = (if v_457 then catch-fail(cipherstateunpack(cs_64)) else caught-fail) in
        {1391}let v_459: bool = (not-caught-fail(v_458) && success?(1-proj-2-tuple(v_458))) in
        {1392}let o_11: nonce = (if v_459 then 2-proj-2-tuple(v_458) else caught-fail) in
        {1393}let k_26: key = (if v_459 then 1-proj-2-tuple(v_458) else caught-fail) in
        {1389}let n_23: nonce = (if v_457 then increment_nonce(n_22) else caught-fail) in
        {1394}let csi_22: cipherstate = (if v_457 then catch-fail((if v_459 then cipherstatepack(k_26,n_23) else fail-any)) else caught-fail) in
        {1395}let v_460: bool = not-caught-fail(csi_22) in
        {1362}let payload_5: bitstring = msg_d(me_2,them_2,sid_3) in
        {1388}let e_23: bitstring = (if v_457 then encrypt(k_25,n_22,h_64,payload_5) else caught-fail) in
        {1396}let v_461: bitstring = (if v_455 then catch-fail((if v_457 then (if v_460 then (csi_22,e_23) else fail-any) else fail-any)) else caught-fail) in
        {1397}let v_462: bool = (not-caught-fail(v_461) && success?(1-proj-2-tuple(v_461))) in
        {1398}let ciphertext_22: bitstring = (if v_462 then 2-proj-2-tuple(v_461) else caught-fail) in
        {1399}let csi_23: cipherstate = (if v_462 then 1-proj-2-tuple(v_461) else caught-fail) in
        {1400}let ss_73: symmetricstate = (if v_462 then symmetricstatepack(csi_23,ck_79,h_64) else caught-fail) in
        {1401}let v_463: bitstring = (if v_462 then catch-fail(symmetricstateunpack(ss_73)) else caught-fail) in
        {1402}let v_464: bool = (not-caught-fail(v_463) && success?(1-proj-3-tuple(v_463))) in
        {1403}let h_65: bitstring = (if v_464 then 3-proj-3-tuple(v_463) else caught-fail) in
        {1404}let ck_80: key = (if v_464 then 2-proj-3-tuple(v_463) else caught-fail) in
        {1405}let cs_65: cipherstate = (if v_464 then 1-proj-3-tuple(v_463) else caught-fail) in
        {1406}let ssi_14: symmetricstate = (if v_462 then catch-fail((if v_464 then symmetricstatepack(cs_65,ck_80,hash(h_65,ciphertext_22)) else fail-any)) else caught-fail) in
        {1407}let v_465: bool = not-caught-fail(ssi_14) in
        {1408}let v_466: bitstring = (if v_453 then catch-fail((if v_455 then (if v_462 then (if v_465 then (ssi_14,ciphertext_22) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1409}let v_467: bool = (not-caught-fail(v_466) && success?(1-proj-2-tuple(v_466))) in
        {1410}let ciphertext_23: bitstring = (if v_467 then 2-proj-2-tuple(v_466) else caught-fail) in
        {1411}let ss_74: symmetricstate = (if v_467 then 1-proj-2-tuple(v_466) else caught-fail) in
        {1413}let message_buffer_5: bitstring = (if v_467 then concat3(ne_14,ns_11,ciphertext_23) else caught-fail) in
        {1412}let hs_43: handshakestate = (if v_467 then handshakestatepack(ss_74,s_14,m_14,e_22,rs_14,rm_14,re_17,psk_14,initiator_12) else caught-fail) in
        {1414}let (hs_44: handshakestate,message_d_2: bitstring) = (if v_451 then (if v_453 then (if v_467 then (hs_43,message_buffer_5) else fail-any) else fail-any) else fail-any) in
        {1415}event SendMsg(me_2,them_2,stagepack_d(sid_3),msg_d(me_2,them_2,sid_3));
        {1416}out(pub, message_d_2)
    ) | (
        {1418}event LeakS(phase0,me_2);
        {1419}event LeakM(phase0,me_2);
        {1420}out(pub, (key_s(me_2),key_m(me_2)))
    ) | (
        {1421}phase 1;
        {1422}event LeakS(phase1,me_2);
        {1423}event LeakM(phase1,me_2);
        {1424}out(pub, (key_s(me_2),key_m(me_2)))
    )
) | (
    {1425}let me_3: principal = bob in
    {1428}let basis_15: key = key_s(me_3) in
    {1429}let public_key_15: key = catch-fail(dhexp(basis_15,validkey(g))) in
    {1430}let v_468: bool = not-caught-fail(public_key_15) in
    {1431}let s_15: keypair = (if v_468 then keypairpack(validkey(public_key_15),basis_15) else fail-any) in
    {1432}let basis_16: key = key_m(me_3) in
    {1433}let public_key_16: key = catch-fail(dhexp(basis_16,validkey(g))) in
    {1434}let v_469: bool = not-caught-fail(public_key_16) in
    {1435}let m_15: keypair = (if v_469 then keypairpack(validkey(public_key_16),basis_16) else fail-any) in
    {1436}out(pub, (getpublickey(s_15),getpublickey(m_15)));
    {1427}let sid_4: sessionid = sid in
    {1426}let them_3: principal = charlie in
    (
        {1438}let basis_17: key = key_s(them_3) in
        {1439}let public_key_17: key = catch-fail(dhexp(basis_17,validkey(g))) in
        {1440}let v_470: bool = not-caught-fail(public_key_17) in
        {1441}let rs_15: key = getpublickey((if v_470 then keypairpack(validkey(public_key_17),basis_17) else fail-any)) in
        {1442}let basis_18: key = key_m(them_3) in
        {1443}let public_key_18: key = catch-fail(dhexp(basis_18,validkey(g))) in
        {1444}let v_471: bool = not-caught-fail(public_key_18) in
        {1445}let rm_15: key = getpublickey((if v_471 then keypairpack(validkey(public_key_18),basis_18) else fail-any)) in
        {1452}let k_27: key = empty in
        {1453}let cs_66: cipherstate = cipherstatepack(k_27,minnonce) in
        {1449}let protocol_name_3: bitstring = somename in
        {1450}let h_66: bitstring = hash(protocol_name_3,empty) in
        {1451}let ck_81: key = h_66 in
        {1454}let ss_75: symmetricstate = symmetricstatepack(cs_66,ck_81,h_66) in
        {1455}let v_472: bitstring = catch-fail(symmetricstateunpack(ss_75)) in
        {1456}let v_473: bool = (not-caught-fail(v_472) && success?(1-proj-3-tuple(v_472))) in
        {1457}let h_67: bitstring = (if v_473 then 3-proj-3-tuple(v_472) else caught-fail) in
        {1458}let ck_82: key = (if v_473 then 2-proj-3-tuple(v_472) else caught-fail) in
        {1459}let cs_67: cipherstate = (if v_473 then 1-proj-3-tuple(v_472) else caught-fail) in
        {1447}let prologue_3: bitstring = empty in
        {1460}let ss_76: symmetricstate = catch-fail((if v_473 then symmetricstatepack(cs_67,ck_82,hash(h_67,prologue_3)) else fail-any)) in
        {1461}let v_474: bool = not-caught-fail(ss_76) in
        {1462}let v_475: bitstring = (if v_474 then catch-fail(symmetricstateunpack(ss_76)) else caught-fail) in
        {1463}let v_476: bool = (not-caught-fail(v_475) && success?(1-proj-3-tuple(v_475))) in
        {1464}let h_68: bitstring = (if v_476 then 3-proj-3-tuple(v_475) else caught-fail) in
        {1465}let ck_83: key = (if v_476 then 2-proj-3-tuple(v_475) else caught-fail) in
        {1466}let cs_68: cipherstate = (if v_476 then 1-proj-3-tuple(v_475) else caught-fail) in
        {1467}let ss_77: symmetricstate = (if v_474 then catch-fail((if v_476 then symmetricstatepack(cs_68,ck_83,hash(h_68,rs_15)) else fail-any)) else caught-fail) in
        {1468}let v_477: bool = not-caught-fail(ss_77) in
        {1469}let v_478: bitstring = (if v_477 then catch-fail(symmetricstateunpack(ss_77)) else caught-fail) in
        {1470}let v_479: bool = (not-caught-fail(v_478) && success?(1-proj-3-tuple(v_478))) in
        {1471}let h_69: bitstring = (if v_479 then 3-proj-3-tuple(v_478) else caught-fail) in
        {1472}let ck_84: key = (if v_479 then 2-proj-3-tuple(v_478) else caught-fail) in
        {1473}let cs_69: cipherstate = (if v_479 then 1-proj-3-tuple(v_478) else caught-fail) in
        {1474}let ss_78: symmetricstate = (if v_477 then catch-fail((if v_479 then symmetricstatepack(cs_69,ck_84,hash(h_69,rm_15)) else fail-any)) else caught-fail) in
        {1475}let v_480: bool = not-caught-fail(ss_78) in
        {1476}let data_6: bitstring = (if v_480 then catch-fail(getpublickey(s_15)) else caught-fail) in
        {1477}let v_481: bool = not-caught-fail(data_6) in
        {1478}let v_482: bitstring = (if v_481 then catch-fail(symmetricstateunpack(ss_78)) else caught-fail) in
        {1479}let v_483: bool = (not-caught-fail(v_482) && success?(1-proj-3-tuple(v_482))) in
        {1480}let h_70: bitstring = (if v_483 then 3-proj-3-tuple(v_482) else caught-fail) in
        {1481}let ck_85: key = (if v_483 then 2-proj-3-tuple(v_482) else caught-fail) in
        {1482}let cs_70: cipherstate = (if v_483 then 1-proj-3-tuple(v_482) else caught-fail) in
        {1483}let ss_79: symmetricstate = (if v_480 then catch-fail((if v_481 then (if v_483 then symmetricstatepack(cs_70,ck_85,hash(h_70,data_6)) else fail-any) else fail-any)) else caught-fail) in
        {1484}let v_484: bool = not-caught-fail(ss_79) in
        {1485}let data_7: bitstring = (if v_484 then catch-fail(getpublickey(m_15)) else caught-fail) in
        {1486}let v_485: bool = not-caught-fail(data_7) in
        {1487}let v_486: bitstring = (if v_485 then catch-fail(symmetricstateunpack(ss_79)) else caught-fail) in
        {1488}let v_487: bool = (not-caught-fail(v_486) && success?(1-proj-3-tuple(v_486))) in
        {1489}let h_71: bitstring = (if v_487 then 3-proj-3-tuple(v_486) else caught-fail) in
        {1490}let ck_86: key = (if v_487 then 2-proj-3-tuple(v_486) else caught-fail) in
        {1491}let cs_71: cipherstate = (if v_487 then 1-proj-3-tuple(v_486) else caught-fail) in
        {1492}let ss_80: symmetricstate = (if v_484 then catch-fail((if v_485 then (if v_487 then symmetricstatepack(cs_71,ck_86,hash(h_71,data_7)) else fail-any) else fail-any)) else caught-fail) in
        {1493}let v_488: bool = not-caught-fail(ss_80) in
        {1448}let psk_15: key = empty in
        {1446}let re_18: key = empty in
        {1437}let e_24: keypair = keypairpack(empty,empty) in
        {1494}let hs_45: handshakestate = (if v_474 then (if v_477 then (if v_480 then (if v_484 then (if v_488 then handshakestatepack(ss_80,s_15,m_15,e_24,rs_15,rm_15,re_18,psk_15,false) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1495}insert statestore(me_3,them_3,sid_4,statepack_a(hs_45))
    ) | (
        {1610}get statestore(=me_3,=them_3,=sid_4,statepack_a(hs_46: handshakestate)) in
        {1496}in(pub, message_a_3: bitstring);
        {1497}let v_489: bitstring = catch-fail(handshakestateunpack(hs_46)) in
        {1498}let v_490: bool = (not-caught-fail(v_489) && success?(1-proj-9-tuple(v_489))) in
        {1499}let initiator_13: bool = (if v_490 then 9-proj-9-tuple(v_489) else caught-fail) in
        {1500}let psk_16: key = (if v_490 then 8-proj-9-tuple(v_489) else caught-fail) in
        {1501}let re_19: key = (if v_490 then 7-proj-9-tuple(v_489) else caught-fail) in
        {1502}let rm_16: key = (if v_490 then 6-proj-9-tuple(v_489) else caught-fail) in
        {1503}let rs_16: key = (if v_490 then 5-proj-9-tuple(v_489) else caught-fail) in
        {1504}let e_25: keypair = (if v_490 then 4-proj-9-tuple(v_489) else caught-fail) in
        {1505}let m_16: keypair = (if v_490 then 3-proj-9-tuple(v_489) else caught-fail) in
        {1506}let s_16: keypair = (if v_490 then 2-proj-9-tuple(v_489) else caught-fail) in
        {1507}let ss_81: symmetricstate = (if v_490 then 1-proj-9-tuple(v_489) else caught-fail) in
        {1508}let v_491: bitstring = (if v_490 then catch-fail(deconcat3(message_a_3)) else caught-fail) in
        {1509}let v_492: bool = (not-caught-fail(v_491) && success?(1-proj-3-tuple(v_491))) in
        {1510}let ciphertext_24: bitstring = (if v_492 then 3-proj-3-tuple(v_491) else caught-fail) in
        {1511}let ns_12: bitstring = (if v_492 then 2-proj-3-tuple(v_491) else caught-fail) in
        {1512}let ne_15: bitstring = (if v_492 then 1-proj-3-tuple(v_491) else caught-fail) in
        {1515}let v_493: bitstring = (if v_492 then catch-fail(symmetricstateunpack(ss_81)) else caught-fail) in
        {1516}let v_494: bool = (not-caught-fail(v_493) && success?(1-proj-3-tuple(v_493))) in
        {1517}let h_72: bitstring = (if v_494 then 3-proj-3-tuple(v_493) else caught-fail) in
        {1518}let ck_87: key = (if v_494 then 2-proj-3-tuple(v_493) else caught-fail) in
        {1519}let cs_72: cipherstate = (if v_494 then 1-proj-3-tuple(v_493) else caught-fail) in
        {1514}let re_20: key = (if v_492 then ne_15 else caught-fail) in
        {1520}let ss_82: symmetricstate = (if v_492 then catch-fail((if v_494 then symmetricstatepack(cs_72,ck_87,hash(h_72,re_20)) else fail-any)) else caught-fail) in
        {1521}let v_495: bool = not-caught-fail(ss_82) in
        {1522}let v_496: bitstring = (if v_495 then catch-fail(keypairunpack(m_16)) else caught-fail) in
        {1523}let v_497: bool = (not-caught-fail(v_496) && success?(1-proj-2-tuple(v_496))) in
        {1524}let my_private_key_15: key = (if v_497 then 2-proj-2-tuple(v_496) else caught-fail) in
        {1525}let my_public_key_15: key = (if v_497 then 1-proj-2-tuple(v_496) else caught-fail) in
        {1526}let input_key_material_18: key = (if v_495 then catch-fail((if v_497 then dhexp(my_private_key_15,re_20) else fail-any)) else caught-fail) in
        {1527}let v_498: bool = not-caught-fail(input_key_material_18) in
        {1528}let v_499: bitstring = (if v_498 then catch-fail(symmetricstateunpack(ss_82)) else caught-fail) in
        {1529}let v_500: bool = (not-caught-fail(v_499) && success?(1-proj-3-tuple(v_499))) in
        {1530}let h_73: bitstring = (if v_500 then 3-proj-3-tuple(v_499) else caught-fail) in
        {1531}let ck_88: key = (if v_500 then 2-proj-3-tuple(v_499) else caught-fail) in
        {1532}let cs_73: cipherstate = (if v_500 then 1-proj-3-tuple(v_499) else caught-fail) in
        {1535}let output3_18: key = (if v_500 then hmac_hash3(ck_88,input_key_material_18) else caught-fail) in
        {1534}let output2_18: key = (if v_500 then hmac_hash2(ck_88,input_key_material_18) else caught-fail) in
        {1533}let output1_18: key = (if v_500 then hmac_hash1(ck_88,input_key_material_18) else caught-fail) in
        {1536}let v_501: bitstring = (if v_500 then catch-fail((output1_18,output2_18,output3_18)) else caught-fail) in
        {1537}let v_502: bool = (not-caught-fail(v_501) && success?(1-proj-3-tuple(v_501))) in
        {1538}let output_15: key = (if v_502 then 3-proj-3-tuple(v_501) else caught-fail) in
        {1539}let temp_k_15: key = (if v_502 then 2-proj-3-tuple(v_501) else caught-fail) in
        {1540}let ck_89: key = (if v_502 then 1-proj-3-tuple(v_501) else caught-fail) in
        {1541}let ss_83: symmetricstate = (if v_495 then catch-fail((if v_498 then (if v_500 then (if v_502 then symmetricstatepack(cipherstatepack(temp_k_15,minnonce),ck_89,h_73) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1542}let v_503: bool = not-caught-fail(ss_83) in
        {1543}let v_504: bitstring = (if v_503 then catch-fail(keypairunpack(s_16)) else caught-fail) in
        {1544}let v_505: bool = (not-caught-fail(v_504) && success?(1-proj-2-tuple(v_504))) in
        {1545}let my_private_key_16: key = (if v_505 then 2-proj-2-tuple(v_504) else caught-fail) in
        {1546}let my_public_key_16: key = (if v_505 then 1-proj-2-tuple(v_504) else caught-fail) in
        {1547}let input_key_material_19: key = (if v_503 then catch-fail((if v_505 then dhexp(my_private_key_16,rm_16) else fail-any)) else caught-fail) in
        {1548}let v_506: bool = not-caught-fail(input_key_material_19) in
        {1549}let v_507: bitstring = (if v_506 then catch-fail(symmetricstateunpack(ss_83)) else caught-fail) in
        {1550}let v_508: bool = (not-caught-fail(v_507) && success?(1-proj-3-tuple(v_507))) in
        {1551}let h_74: bitstring = (if v_508 then 3-proj-3-tuple(v_507) else caught-fail) in
        {1552}let ck_90: key = (if v_508 then 2-proj-3-tuple(v_507) else caught-fail) in
        {1553}let cs_74: cipherstate = (if v_508 then 1-proj-3-tuple(v_507) else caught-fail) in
        {1556}let output3_19: key = (if v_508 then hmac_hash3(ck_90,input_key_material_19) else caught-fail) in
        {1555}let output2_19: key = (if v_508 then hmac_hash2(ck_90,input_key_material_19) else caught-fail) in
        {1554}let output1_19: key = (if v_508 then hmac_hash1(ck_90,input_key_material_19) else caught-fail) in
        {1557}let v_509: bitstring = (if v_508 then catch-fail((output1_19,output2_19,output3_19)) else caught-fail) in
        {1558}let v_510: bool = (not-caught-fail(v_509) && success?(1-proj-3-tuple(v_509))) in
        {1559}let output_16: key = (if v_510 then 3-proj-3-tuple(v_509) else caught-fail) in
        {1560}let temp_k_16: key = (if v_510 then 2-proj-3-tuple(v_509) else caught-fail) in
        {1561}let ck_91: key = (if v_510 then 1-proj-3-tuple(v_509) else caught-fail) in
        {1562}let ss_84: symmetricstate = (if v_503 then catch-fail((if v_506 then (if v_508 then (if v_510 then symmetricstatepack(cipherstatepack(temp_k_16,minnonce),ck_91,h_74) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1563}let v_511: bool = not-caught-fail(ss_84) in
        {1564}let v_512: bitstring = (if v_511 then catch-fail(symmetricstateunpack(ss_84)) else caught-fail) in
        {1565}let v_513: bool = (not-caught-fail(v_512) && success?(1-proj-3-tuple(v_512))) in
        {1566}let h_75: bitstring = (if v_513 then 3-proj-3-tuple(v_512) else caught-fail) in
        {1567}let ck_92: key = (if v_513 then 2-proj-3-tuple(v_512) else caught-fail) in
        {1568}let cs_75: cipherstate = (if v_513 then 1-proj-3-tuple(v_512) else caught-fail) in
        {1569}let v_514: bitstring = (if v_513 then catch-fail(cipherstateunpack(cs_75)) else caught-fail) in
        {1570}let v_515: bool = (not-caught-fail(v_514) && success?(1-proj-2-tuple(v_514))) in
        {1571}let n_24: nonce = (if v_515 then 2-proj-2-tuple(v_514) else caught-fail) in
        {1572}let k_28: key = (if v_515 then 1-proj-2-tuple(v_514) else caught-fail) in
        {1573}let d_6: aead = (if v_515 then catch-fail(decrypt(k_28,n_24,h_75,ciphertext_24)) else caught-fail) in
        {1574}let v_516: bool = not-caught-fail(d_6) in
        {1575}let v_517: bitstring = (if v_516 then catch-fail(aeadunpack(d_6)) else caught-fail) in
        {1576}let v_518: bool = (not-caught-fail(v_517) && success?(1-proj-3-tuple(v_517))) in
        {1577}let plaintext_18: bitstring = (if v_518 then 3-proj-3-tuple(v_517) else caught-fail) in
        {1578}let adi_6: bitstring = (if v_518 then 2-proj-3-tuple(v_517) else caught-fail) in
        {1579}let valid_18: bool = (if v_518 then 1-proj-3-tuple(v_517) else caught-fail) in
        {1581}let v_519: bitstring = (if v_518 then catch-fail(cipherstateunpack(cs_75)) else caught-fail) in
        {1582}let v_520: bool = (not-caught-fail(v_519) && success?(1-proj-2-tuple(v_519))) in
        {1583}let o_12: nonce = (if v_520 then 2-proj-2-tuple(v_519) else caught-fail) in
        {1584}let k_29: key = (if v_520 then 1-proj-2-tuple(v_519) else caught-fail) in
        {1580}let n_25: nonce = (if v_518 then increment_nonce(n_24) else caught-fail) in
        {1585}let csi_24: cipherstate = (if v_518 then catch-fail((if v_520 then cipherstatepack(k_29,n_25) else fail-any)) else caught-fail) in
        {1586}let v_521: bool = not-caught-fail(csi_24) in
        {1587}let v_522: bitstring = (if v_513 then catch-fail((if v_515 then (if v_516 then (if v_518 then (if v_521 then (csi_24,plaintext_18,valid_18) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1588}let v_523: bool = (not-caught-fail(v_522) && success?(1-proj-3-tuple(v_522))) in
        {1589}let valid_19: bool = (if v_523 then 3-proj-3-tuple(v_522) else caught-fail) in
        {1590}let plaintext_19: bitstring = (if v_523 then 2-proj-3-tuple(v_522) else caught-fail) in
        {1591}let csi_25: cipherstate = (if v_523 then 1-proj-3-tuple(v_522) else caught-fail) in
        {1592}let ss_85: symmetricstate = (if v_523 then symmetricstatepack(csi_25,ck_92,h_75) else caught-fail) in
        {1593}let v_524: bitstring = (if v_523 then catch-fail(symmetricstateunpack(ss_85)) else caught-fail) in
        {1594}let v_525: bool = (not-caught-fail(v_524) && success?(1-proj-3-tuple(v_524))) in
        {1595}let h_76: bitstring = (if v_525 then 3-proj-3-tuple(v_524) else caught-fail) in
        {1596}let ck_93: key = (if v_525 then 2-proj-3-tuple(v_524) else caught-fail) in
        {1597}let cs_76: cipherstate = (if v_525 then 1-proj-3-tuple(v_524) else caught-fail) in
        {1598}let ssi_15: symmetricstate = (if v_523 then catch-fail((if v_525 then symmetricstatepack(cs_76,ck_93,hash(h_76,ciphertext_24)) else fail-any)) else caught-fail) in
        {1599}let v_526: bool = not-caught-fail(ssi_15) in
        {1600}let v_527: bitstring = (if v_511 then catch-fail((if v_513 then (if v_523 then (if v_526 then (ssi_15,plaintext_19,valid_19) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1601}let v_528: bool = (not-caught-fail(v_527) && success?(1-proj-3-tuple(v_527))) in
        {1602}let valid2_6: bool = (if v_528 then 3-proj-3-tuple(v_527) else caught-fail) in
        {1603}let plaintext_20: bitstring = (if v_528 then 2-proj-3-tuple(v_527) else caught-fail) in
        {1604}let ss_86: symmetricstate = (if v_528 then 1-proj-3-tuple(v_527) else caught-fail) in
        {1513}let valid1_6: bool = (if v_492 then true else caught-fail) in
        {1605}let v_529: bool = (if v_528 then catch-fail((valid1_6 && valid2_6)) else caught-fail) in
        {1606}let hs_47: handshakestate = (if v_529 then handshakestatepack(ss_86,s_16,m_16,e_25,rs_16,rm_16,re_20,psk_16,initiator_13) else caught-fail) in
        {1607}let (hs_48: handshakestate,plaintext_a_1: bitstring,valid_20: bool) = (if v_490 then (if v_492 then (if v_495 then (if v_503 then (if v_511 then (if v_528 then (if undo-catch-fail(v_529) then (hs_47,plaintext_20,true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1608}event RecvMsg(me_3,them_3,stagepack_a(sid_4),plaintext_a_1);
        {1609}insert statestore(me_3,them_3,sid_4,statepack_b(hs_48))
    ) | (
        {1765}get statestore(=me_3,=them_3,=sid_4,statepack_b(hs_49: handshakestate)) in
        {1612}let v_530: bitstring = catch-fail(handshakestateunpack(hs_49)) in
        {1613}let v_531: bool = (not-caught-fail(v_530) && success?(1-proj-9-tuple(v_530))) in
        {1614}let initiator_14: bool = (if v_531 then 9-proj-9-tuple(v_530) else caught-fail) in
        {1615}let psk_17: key = (if v_531 then 8-proj-9-tuple(v_530) else caught-fail) in
        {1616}let re_21: key = (if v_531 then 7-proj-9-tuple(v_530) else caught-fail) in
        {1617}let rm_17: key = (if v_531 then 6-proj-9-tuple(v_530) else caught-fail) in
        {1618}let rs_17: key = (if v_531 then 5-proj-9-tuple(v_530) else caught-fail) in
        {1619}let e_26: keypair = (if v_531 then 4-proj-9-tuple(v_530) else caught-fail) in
        {1620}let m_17: keypair = (if v_531 then 3-proj-9-tuple(v_530) else caught-fail) in
        {1621}let s_17: keypair = (if v_531 then 2-proj-9-tuple(v_530) else caught-fail) in
        {1622}let ss_87: symmetricstate = (if v_531 then 1-proj-9-tuple(v_530) else caught-fail) in
        {1623}let v_532: bitstring = (if v_531 then catch-fail((empty,empty,empty)) else caught-fail) in
        {1624}let v_533: bool = (not-caught-fail(v_532) && success?(1-proj-3-tuple(v_532))) in
        {1625}let ciphertext_25: bitstring = (if v_533 then 3-proj-3-tuple(v_532) else caught-fail) in
        {1626}let ns_13: bitstring = (if v_533 then 2-proj-3-tuple(v_532) else caught-fail) in
        {1627}let ne_16: bitstring = (if v_533 then 1-proj-3-tuple(v_532) else caught-fail) in
        {1628}let basis_19: key = (if v_533 then key_e(me_3,them_3,sid_4) else caught-fail) in
        {1629}let public_key_19: key = (if v_533 then catch-fail(dhexp(basis_19,validkey(g))) else caught-fail) in
        {1630}let v_534: bool = not-caught-fail(public_key_19) in
        {1631}let e_27: keypair = (if v_533 then catch-fail((if v_534 then keypairpack(validkey(public_key_19),basis_19) else fail-any)) else caught-fail) in
        {1632}let v_535: bool = not-caught-fail(e_27) in
        {1633}let ne_17: bitstring = (if v_535 then catch-fail(getpublickey(e_27)) else caught-fail) in
        {1634}let v_536: bool = not-caught-fail(ne_17) in
        {1635}let v_537: bitstring = (if v_536 then catch-fail(symmetricstateunpack(ss_87)) else caught-fail) in
        {1636}let v_538: bool = (not-caught-fail(v_537) && success?(1-proj-3-tuple(v_537))) in
        {1637}let h_77: bitstring = (if v_538 then 3-proj-3-tuple(v_537) else caught-fail) in
        {1638}let ck_94: key = (if v_538 then 2-proj-3-tuple(v_537) else caught-fail) in
        {1639}let cs_77: cipherstate = (if v_538 then 1-proj-3-tuple(v_537) else caught-fail) in
        {1640}let ss_88: symmetricstate = (if v_536 then catch-fail((if v_538 then symmetricstatepack(cs_77,ck_94,hash(h_77,ne_17)) else fail-any)) else caught-fail) in
        {1641}let v_539: bool = not-caught-fail(ss_88) in
        {1642}let v_540: bitstring = (if v_539 then catch-fail(keypairunpack(e_27)) else caught-fail) in
        {1643}let v_541: bool = (not-caught-fail(v_540) && success?(1-proj-2-tuple(v_540))) in
        {1644}let my_private_key_17: key = (if v_541 then 2-proj-2-tuple(v_540) else caught-fail) in
        {1645}let my_public_key_17: key = (if v_541 then 1-proj-2-tuple(v_540) else caught-fail) in
        {1646}let input_key_material_20: key = (if v_539 then catch-fail((if v_541 then dhexp(my_private_key_17,re_21) else fail-any)) else caught-fail) in
        {1647}let v_542: bool = not-caught-fail(input_key_material_20) in
        {1648}let v_543: bitstring = (if v_542 then catch-fail(symmetricstateunpack(ss_88)) else caught-fail) in
        {1649}let v_544: bool = (not-caught-fail(v_543) && success?(1-proj-3-tuple(v_543))) in
        {1650}let h_78: bitstring = (if v_544 then 3-proj-3-tuple(v_543) else caught-fail) in
        {1651}let ck_95: key = (if v_544 then 2-proj-3-tuple(v_543) else caught-fail) in
        {1652}let cs_78: cipherstate = (if v_544 then 1-proj-3-tuple(v_543) else caught-fail) in
        {1655}let output3_20: key = (if v_544 then hmac_hash3(ck_95,input_key_material_20) else caught-fail) in
        {1654}let output2_20: key = (if v_544 then hmac_hash2(ck_95,input_key_material_20) else caught-fail) in
        {1653}let output1_20: key = (if v_544 then hmac_hash1(ck_95,input_key_material_20) else caught-fail) in
        {1656}let v_545: bitstring = (if v_544 then catch-fail((output1_20,output2_20,output3_20)) else caught-fail) in
        {1657}let v_546: bool = (not-caught-fail(v_545) && success?(1-proj-3-tuple(v_545))) in
        {1658}let output_17: key = (if v_546 then 3-proj-3-tuple(v_545) else caught-fail) in
        {1659}let temp_k_17: key = (if v_546 then 2-proj-3-tuple(v_545) else caught-fail) in
        {1660}let ck_96: key = (if v_546 then 1-proj-3-tuple(v_545) else caught-fail) in
        {1661}let ss_89: symmetricstate = (if v_539 then catch-fail((if v_542 then (if v_544 then (if v_546 then symmetricstatepack(cipherstatepack(temp_k_17,minnonce),ck_96,h_78) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1662}let v_547: bool = not-caught-fail(ss_89) in
        {1663}let v_548: bitstring = (if v_547 then catch-fail(keypairunpack(e_27)) else caught-fail) in
        {1664}let v_549: bool = (not-caught-fail(v_548) && success?(1-proj-2-tuple(v_548))) in
        {1665}let my_private_key_18: key = (if v_549 then 2-proj-2-tuple(v_548) else caught-fail) in
        {1666}let my_public_key_18: key = (if v_549 then 1-proj-2-tuple(v_548) else caught-fail) in
        {1667}let input_key_material_21: key = (if v_547 then catch-fail((if v_549 then dhexp(my_private_key_18,rs_17) else fail-any)) else caught-fail) in
        {1668}let v_550: bool = not-caught-fail(input_key_material_21) in
        {1669}let v_551: bitstring = (if v_550 then catch-fail(symmetricstateunpack(ss_89)) else caught-fail) in
        {1670}let v_552: bool = (not-caught-fail(v_551) && success?(1-proj-3-tuple(v_551))) in
        {1671}let h_79: bitstring = (if v_552 then 3-proj-3-tuple(v_551) else caught-fail) in
        {1672}let ck_97: key = (if v_552 then 2-proj-3-tuple(v_551) else caught-fail) in
        {1673}let cs_79: cipherstate = (if v_552 then 1-proj-3-tuple(v_551) else caught-fail) in
        {1676}let output3_21: key = (if v_552 then hmac_hash3(ck_97,input_key_material_21) else caught-fail) in
        {1675}let output2_21: key = (if v_552 then hmac_hash2(ck_97,input_key_material_21) else caught-fail) in
        {1674}let output1_21: key = (if v_552 then hmac_hash1(ck_97,input_key_material_21) else caught-fail) in
        {1677}let v_553: bitstring = (if v_552 then catch-fail((output1_21,output2_21,output3_21)) else caught-fail) in
        {1678}let v_554: bool = (not-caught-fail(v_553) && success?(1-proj-3-tuple(v_553))) in
        {1679}let output_18: key = (if v_554 then 3-proj-3-tuple(v_553) else caught-fail) in
        {1680}let temp_k_18: key = (if v_554 then 2-proj-3-tuple(v_553) else caught-fail) in
        {1681}let ck_98: key = (if v_554 then 1-proj-3-tuple(v_553) else caught-fail) in
        {1682}let ss_90: symmetricstate = (if v_547 then catch-fail((if v_550 then (if v_552 then (if v_554 then symmetricstatepack(cipherstatepack(temp_k_18,minnonce),ck_98,h_79) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1683}let v_555: bool = not-caught-fail(ss_90) in
        {1684}let v_556: bitstring = (if v_555 then catch-fail(keypairunpack(e_27)) else caught-fail) in
        {1685}let v_557: bool = (not-caught-fail(v_556) && success?(1-proj-2-tuple(v_556))) in
        {1686}let my_private_key_19: key = (if v_557 then 2-proj-2-tuple(v_556) else caught-fail) in
        {1687}let my_public_key_19: key = (if v_557 then 1-proj-2-tuple(v_556) else caught-fail) in
        {1688}let input_key_material_22: key = (if v_555 then catch-fail((if v_557 then dhexp(my_private_key_19,rm_17) else fail-any)) else caught-fail) in
        {1689}let v_558: bool = not-caught-fail(input_key_material_22) in
        {1690}let v_559: bitstring = (if v_558 then catch-fail(symmetricstateunpack(ss_90)) else caught-fail) in
        {1691}let v_560: bool = (not-caught-fail(v_559) && success?(1-proj-3-tuple(v_559))) in
        {1692}let h_80: bitstring = (if v_560 then 3-proj-3-tuple(v_559) else caught-fail) in
        {1693}let ck_99: key = (if v_560 then 2-proj-3-tuple(v_559) else caught-fail) in
        {1694}let cs_80: cipherstate = (if v_560 then 1-proj-3-tuple(v_559) else caught-fail) in
        {1697}let output3_22: key = (if v_560 then hmac_hash3(ck_99,input_key_material_22) else caught-fail) in
        {1696}let output2_22: key = (if v_560 then hmac_hash2(ck_99,input_key_material_22) else caught-fail) in
        {1695}let output1_22: key = (if v_560 then hmac_hash1(ck_99,input_key_material_22) else caught-fail) in
        {1698}let v_561: bitstring = (if v_560 then catch-fail((output1_22,output2_22,output3_22)) else caught-fail) in
        {1699}let v_562: bool = (not-caught-fail(v_561) && success?(1-proj-3-tuple(v_561))) in
        {1700}let output_19: key = (if v_562 then 3-proj-3-tuple(v_561) else caught-fail) in
        {1701}let temp_k_19: key = (if v_562 then 2-proj-3-tuple(v_561) else caught-fail) in
        {1702}let ck_100: key = (if v_562 then 1-proj-3-tuple(v_561) else caught-fail) in
        {1703}let ss_91: symmetricstate = (if v_555 then catch-fail((if v_558 then (if v_560 then (if v_562 then symmetricstatepack(cipherstatepack(temp_k_19,minnonce),ck_100,h_80) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1704}let v_563: bool = not-caught-fail(ss_91) in
        {1705}let v_564: bitstring = (if v_563 then catch-fail(symmetricstateunpack(ss_91)) else caught-fail) in
        {1706}let v_565: bool = (not-caught-fail(v_564) && success?(1-proj-3-tuple(v_564))) in
        {1707}let h_81: bitstring = (if v_565 then 3-proj-3-tuple(v_564) else caught-fail) in
        {1708}let ck_101: key = (if v_565 then 2-proj-3-tuple(v_564) else caught-fail) in
        {1709}let cs_81: cipherstate = (if v_565 then 1-proj-3-tuple(v_564) else caught-fail) in
        {1710}let v_566: bitstring = (if v_565 then catch-fail(cipherstateunpack(cs_81)) else caught-fail) in
        {1711}let v_567: bool = (not-caught-fail(v_566) && success?(1-proj-2-tuple(v_566))) in
        {1712}let n_26: nonce = (if v_567 then 2-proj-2-tuple(v_566) else caught-fail) in
        {1713}let k_30: key = (if v_567 then 1-proj-2-tuple(v_566) else caught-fail) in
        {1716}let v_568: bitstring = (if v_567 then catch-fail(cipherstateunpack(cs_81)) else caught-fail) in
        {1717}let v_569: bool = (not-caught-fail(v_568) && success?(1-proj-2-tuple(v_568))) in
        {1718}let o_13: nonce = (if v_569 then 2-proj-2-tuple(v_568) else caught-fail) in
        {1719}let k_31: key = (if v_569 then 1-proj-2-tuple(v_568) else caught-fail) in
        {1715}let n_27: nonce = (if v_567 then increment_nonce(n_26) else caught-fail) in
        {1720}let csi_26: cipherstate = (if v_567 then catch-fail((if v_569 then cipherstatepack(k_31,n_27) else fail-any)) else caught-fail) in
        {1721}let v_570: bool = not-caught-fail(csi_26) in
        {1611}let payload_6: bitstring = msg_b(me_3,them_3,sid_4) in
        {1714}let e_28: bitstring = (if v_567 then encrypt(k_30,n_26,h_81,payload_6) else caught-fail) in
        {1722}let v_571: bitstring = (if v_565 then catch-fail((if v_567 then (if v_570 then (csi_26,e_28) else fail-any) else fail-any)) else caught-fail) in
        {1723}let v_572: bool = (not-caught-fail(v_571) && success?(1-proj-2-tuple(v_571))) in
        {1724}let ciphertext_26: bitstring = (if v_572 then 2-proj-2-tuple(v_571) else caught-fail) in
        {1725}let csi_27: cipherstate = (if v_572 then 1-proj-2-tuple(v_571) else caught-fail) in
        {1726}let ss_92: symmetricstate = (if v_572 then symmetricstatepack(csi_27,ck_101,h_81) else caught-fail) in
        {1727}let v_573: bitstring = (if v_572 then catch-fail(symmetricstateunpack(ss_92)) else caught-fail) in
        {1728}let v_574: bool = (not-caught-fail(v_573) && success?(1-proj-3-tuple(v_573))) in
        {1729}let h_82: bitstring = (if v_574 then 3-proj-3-tuple(v_573) else caught-fail) in
        {1730}let ck_102: key = (if v_574 then 2-proj-3-tuple(v_573) else caught-fail) in
        {1731}let cs_82: cipherstate = (if v_574 then 1-proj-3-tuple(v_573) else caught-fail) in
        {1732}let ssi_16: symmetricstate = (if v_572 then catch-fail((if v_574 then symmetricstatepack(cs_82,ck_102,hash(h_82,ciphertext_26)) else fail-any)) else caught-fail) in
        {1733}let v_575: bool = not-caught-fail(ssi_16) in
        {1734}let v_576: bitstring = (if v_563 then catch-fail((if v_565 then (if v_572 then (if v_575 then (ssi_16,ciphertext_26) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1735}let v_577: bool = (not-caught-fail(v_576) && success?(1-proj-2-tuple(v_576))) in
        {1736}let ciphertext_27: bitstring = (if v_577 then 2-proj-2-tuple(v_576) else caught-fail) in
        {1737}let ss_93: symmetricstate = (if v_577 then 1-proj-2-tuple(v_576) else caught-fail) in
        {1740}let v_578: bitstring = (if v_577 then catch-fail(symmetricstateunpack(ss_93)) else caught-fail) in
        {1741}let v_579: bool = (not-caught-fail(v_578) && success?(1-proj-3-tuple(v_578))) in
        {1742}let h_83: bitstring = (if v_579 then 3-proj-3-tuple(v_578) else caught-fail) in
        {1743}let ck_103: key = (if v_579 then 2-proj-3-tuple(v_578) else caught-fail) in
        {1744}let cs_83: cipherstate = (if v_579 then 1-proj-3-tuple(v_578) else caught-fail) in
        {1745}let input_key_material_23: key = (if v_579 then zero else caught-fail) in
        {1748}let output3_23: key = (if v_579 then hmac_hash3(ck_103,input_key_material_23) else caught-fail) in
        {1747}let output2_23: key = (if v_579 then hmac_hash2(ck_103,input_key_material_23) else caught-fail) in
        {1746}let output1_23: key = (if v_579 then hmac_hash1(ck_103,input_key_material_23) else caught-fail) in
        {1749}let v_580: bitstring = (if v_579 then catch-fail((output1_23,output2_23,output3_23)) else caught-fail) in
        {1750}let v_581: bool = (not-caught-fail(v_580) && success?(1-proj-3-tuple(v_580))) in
        {1751}let temp_k3_3: key = (if v_581 then 3-proj-3-tuple(v_580) else caught-fail) in
        {1752}let temp_k2_3: key = (if v_581 then 2-proj-3-tuple(v_580) else caught-fail) in
        {1753}let temp_k1_3: key = (if v_581 then 1-proj-3-tuple(v_580) else caught-fail) in
        {1755}let cs2_15: cipherstate = (if v_581 then cipherstatepack(temp_k2_3,minnonce) else caught-fail) in
        {1754}let cs1_15: cipherstate = (if v_581 then cipherstatepack(temp_k1_3,minnonce) else caught-fail) in
        {1756}let v_582: bitstring = (if v_577 then catch-fail((if v_579 then (if v_581 then (ss_93,cs1_15,cs2_15) else fail-any) else fail-any)) else caught-fail) in
        {1757}let v_583: bool = (not-caught-fail(v_582) && success?(1-proj-3-tuple(v_582))) in
        {1758}let cs2_16: cipherstate = (if v_583 then 3-proj-3-tuple(v_582) else caught-fail) in
        {1759}let cs1_16: cipherstate = (if v_583 then 2-proj-3-tuple(v_582) else caught-fail) in
        {1760}let ssi_17: symmetricstate = (if v_583 then 1-proj-3-tuple(v_582) else caught-fail) in
        {1739}let message_buffer_6: bitstring = (if v_577 then concat3(ne_17,ns_13,ciphertext_27) else caught-fail) in
        {1738}let hs_50: handshakestate = (if v_577 then handshakestatepack(ss_93,s_17,m_17,e_27,rs_17,rm_17,re_21,psk_17,initiator_14) else caught-fail) in
        {1761}let (hs_51: handshakestate,message_b_3: bitstring,cs1_17: cipherstate,cs2_17: cipherstate) = (if v_531 then (if v_533 then (if v_535 then (if v_536 then (if v_539 then (if v_547 then (if v_555 then (if v_563 then (if v_577 then (if v_583 then (hs_50,message_buffer_6,cs1_16,cs2_16) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1762}event SendMsg(me_3,them_3,stagepack_b(sid_4),msg_b(me_3,them_3,sid_4));
        {1763}insert statestore(me_3,them_3,sid_4,statepack_c(hs_51,cs1_17,cs2_17));
        {1764}out(pub, message_b_3)
    ) | (
        {1766}!
        {1832}get statestore(=me_3,=them_3,=sid_4,statepack_c(hs_52: handshakestate,cs1_18: cipherstate,cs2_18: cipherstate)) in
        {1767}let hs_53: handshakestate = handshakestatesetcs(hs_52,cs1_18) in
        {1768}in(pub, message_c_3: bitstring);
        {1769}let v_584: bitstring = catch-fail(handshakestateunpack(hs_53)) in
        {1770}let v_585: bool = (not-caught-fail(v_584) && success?(1-proj-9-tuple(v_584))) in
        {1771}let initiator_15: bool = (if v_585 then 9-proj-9-tuple(v_584) else caught-fail) in
        {1772}let psk_18: key = (if v_585 then 8-proj-9-tuple(v_584) else caught-fail) in
        {1773}let re_22: key = (if v_585 then 7-proj-9-tuple(v_584) else caught-fail) in
        {1774}let rm_18: key = (if v_585 then 6-proj-9-tuple(v_584) else caught-fail) in
        {1775}let rs_18: key = (if v_585 then 5-proj-9-tuple(v_584) else caught-fail) in
        {1776}let e_29: keypair = (if v_585 then 4-proj-9-tuple(v_584) else caught-fail) in
        {1777}let m_18: keypair = (if v_585 then 3-proj-9-tuple(v_584) else caught-fail) in
        {1778}let s_18: keypair = (if v_585 then 2-proj-9-tuple(v_584) else caught-fail) in
        {1779}let ss_94: symmetricstate = (if v_585 then 1-proj-9-tuple(v_584) else caught-fail) in
        {1780}let v_586: bitstring = (if v_585 then catch-fail(deconcat3(message_c_3)) else caught-fail) in
        {1781}let v_587: bool = (not-caught-fail(v_586) && success?(1-proj-3-tuple(v_586))) in
        {1782}let ciphertext_28: bitstring = (if v_587 then 3-proj-3-tuple(v_586) else caught-fail) in
        {1783}let ns_14: bitstring = (if v_587 then 2-proj-3-tuple(v_586) else caught-fail) in
        {1784}let ne_18: bitstring = (if v_587 then 1-proj-3-tuple(v_586) else caught-fail) in
        {1786}let v_588: bitstring = (if v_587 then catch-fail(symmetricstateunpack(ss_94)) else caught-fail) in
        {1787}let v_589: bool = (not-caught-fail(v_588) && success?(1-proj-3-tuple(v_588))) in
        {1788}let h_84: bitstring = (if v_589 then 3-proj-3-tuple(v_588) else caught-fail) in
        {1789}let ck_104: key = (if v_589 then 2-proj-3-tuple(v_588) else caught-fail) in
        {1790}let cs_84: cipherstate = (if v_589 then 1-proj-3-tuple(v_588) else caught-fail) in
        {1791}let v_590: bitstring = (if v_589 then catch-fail(cipherstateunpack(cs_84)) else caught-fail) in
        {1792}let v_591: bool = (not-caught-fail(v_590) && success?(1-proj-2-tuple(v_590))) in
        {1793}let n_28: nonce = (if v_591 then 2-proj-2-tuple(v_590) else caught-fail) in
        {1794}let k_32: key = (if v_591 then 1-proj-2-tuple(v_590) else caught-fail) in
        {1795}let d_7: aead = (if v_591 then catch-fail(decrypt(k_32,n_28,h_84,ciphertext_28)) else caught-fail) in
        {1796}let v_592: bool = not-caught-fail(d_7) in
        {1797}let v_593: bitstring = (if v_592 then catch-fail(aeadunpack(d_7)) else caught-fail) in
        {1798}let v_594: bool = (not-caught-fail(v_593) && success?(1-proj-3-tuple(v_593))) in
        {1799}let plaintext_21: bitstring = (if v_594 then 3-proj-3-tuple(v_593) else caught-fail) in
        {1800}let adi_7: bitstring = (if v_594 then 2-proj-3-tuple(v_593) else caught-fail) in
        {1801}let valid_21: bool = (if v_594 then 1-proj-3-tuple(v_593) else caught-fail) in
        {1803}let v_595: bitstring = (if v_594 then catch-fail(cipherstateunpack(cs_84)) else caught-fail) in
        {1804}let v_596: bool = (not-caught-fail(v_595) && success?(1-proj-2-tuple(v_595))) in
        {1805}let o_14: nonce = (if v_596 then 2-proj-2-tuple(v_595) else caught-fail) in
        {1806}let k_33: key = (if v_596 then 1-proj-2-tuple(v_595) else caught-fail) in
        {1802}let n_29: nonce = (if v_594 then increment_nonce(n_28) else caught-fail) in
        {1807}let csi_28: cipherstate = (if v_594 then catch-fail((if v_596 then cipherstatepack(k_33,n_29) else fail-any)) else caught-fail) in
        {1808}let v_597: bool = not-caught-fail(csi_28) in
        {1809}let v_598: bitstring = (if v_589 then catch-fail((if v_591 then (if v_592 then (if v_594 then (if v_597 then (csi_28,plaintext_21,valid_21) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1810}let v_599: bool = (not-caught-fail(v_598) && success?(1-proj-3-tuple(v_598))) in
        {1811}let valid_22: bool = (if v_599 then 3-proj-3-tuple(v_598) else caught-fail) in
        {1812}let plaintext_22: bitstring = (if v_599 then 2-proj-3-tuple(v_598) else caught-fail) in
        {1813}let csi_29: cipherstate = (if v_599 then 1-proj-3-tuple(v_598) else caught-fail) in
        {1814}let ss_95: symmetricstate = (if v_599 then symmetricstatepack(csi_29,ck_104,h_84) else caught-fail) in
        {1815}let v_600: bitstring = (if v_599 then catch-fail(symmetricstateunpack(ss_95)) else caught-fail) in
        {1816}let v_601: bool = (not-caught-fail(v_600) && success?(1-proj-3-tuple(v_600))) in
        {1817}let h_85: bitstring = (if v_601 then 3-proj-3-tuple(v_600) else caught-fail) in
        {1818}let ck_105: key = (if v_601 then 2-proj-3-tuple(v_600) else caught-fail) in
        {1819}let cs_85: cipherstate = (if v_601 then 1-proj-3-tuple(v_600) else caught-fail) in
        {1820}let ssi_18: symmetricstate = (if v_599 then catch-fail((if v_601 then symmetricstatepack(cs_85,ck_105,hash(h_85,ciphertext_28)) else fail-any)) else caught-fail) in
        {1821}let v_602: bool = not-caught-fail(ssi_18) in
        {1822}let v_603: bitstring = (if v_587 then catch-fail((if v_589 then (if v_599 then (if v_602 then (ssi_18,plaintext_22,valid_22) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1823}let v_604: bool = (not-caught-fail(v_603) && success?(1-proj-3-tuple(v_603))) in
        {1824}let valid2_7: bool = (if v_604 then 3-proj-3-tuple(v_603) else caught-fail) in
        {1825}let plaintext_23: bitstring = (if v_604 then 2-proj-3-tuple(v_603) else caught-fail) in
        {1826}let ss_96: symmetricstate = (if v_604 then 1-proj-3-tuple(v_603) else caught-fail) in
        {1785}let valid1_7: bool = (if v_587 then true else caught-fail) in
        {1827}let v_605: bool = (if v_604 then catch-fail((valid1_7 && valid2_7)) else caught-fail) in
        {1828}let hs_54: handshakestate = (if v_605 then handshakestatepack(ss_96,s_18,m_18,e_29,rs_18,rm_18,re_22,psk_18,initiator_15) else caught-fail) in
        {1829}let (hs_55: handshakestate,plaintext_c_1: bitstring,valid_23: bool) = (if v_585 then (if v_587 then (if v_604 then (if undo-catch-fail(v_605) then (hs_54,plaintext_23,true) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1830}event RecvMsg(me_3,them_3,stagepack_c(sid_4),plaintext_c_1);
        {1831}insert statestore(me_3,them_3,sid_4,statepack_d(hs_55,handshakestategetcs(hs_55),cs2_18))
    ) | (
        {1833}!
        {1890}get statestore(=me_3,=them_3,=sid_4,statepack_d(hs_56: handshakestate,cs1_19: cipherstate,cs2_19: cipherstate)) in
        {1834}let hs_57: handshakestate = handshakestatesetcs(hs_56,cs2_19) in
        {1836}let v_606: bitstring = catch-fail(handshakestateunpack(hs_57)) in
        {1837}let v_607: bool = (not-caught-fail(v_606) && success?(1-proj-9-tuple(v_606))) in
        {1838}let initiator_16: bool = (if v_607 then 9-proj-9-tuple(v_606) else caught-fail) in
        {1839}let psk_19: key = (if v_607 then 8-proj-9-tuple(v_606) else caught-fail) in
        {1840}let re_23: key = (if v_607 then 7-proj-9-tuple(v_606) else caught-fail) in
        {1841}let rm_19: key = (if v_607 then 6-proj-9-tuple(v_606) else caught-fail) in
        {1842}let rs_19: key = (if v_607 then 5-proj-9-tuple(v_606) else caught-fail) in
        {1843}let e_30: keypair = (if v_607 then 4-proj-9-tuple(v_606) else caught-fail) in
        {1844}let m_19: keypair = (if v_607 then 3-proj-9-tuple(v_606) else caught-fail) in
        {1845}let s_19: keypair = (if v_607 then 2-proj-9-tuple(v_606) else caught-fail) in
        {1846}let ss_97: symmetricstate = (if v_607 then 1-proj-9-tuple(v_606) else caught-fail) in
        {1847}let v_608: bitstring = (if v_607 then catch-fail((empty,empty,empty)) else caught-fail) in
        {1848}let v_609: bool = (not-caught-fail(v_608) && success?(1-proj-3-tuple(v_608))) in
        {1849}let ciphertext_29: bitstring = (if v_609 then 3-proj-3-tuple(v_608) else caught-fail) in
        {1850}let ns_15: bitstring = (if v_609 then 2-proj-3-tuple(v_608) else caught-fail) in
        {1851}let ne_19: bitstring = (if v_609 then 1-proj-3-tuple(v_608) else caught-fail) in
        {1852}let v_610: bitstring = (if v_609 then catch-fail(symmetricstateunpack(ss_97)) else caught-fail) in
        {1853}let v_611: bool = (not-caught-fail(v_610) && success?(1-proj-3-tuple(v_610))) in
        {1854}let h_86: bitstring = (if v_611 then 3-proj-3-tuple(v_610) else caught-fail) in
        {1855}let ck_106: key = (if v_611 then 2-proj-3-tuple(v_610) else caught-fail) in
        {1856}let cs_86: cipherstate = (if v_611 then 1-proj-3-tuple(v_610) else caught-fail) in
        {1857}let v_612: bitstring = (if v_611 then catch-fail(cipherstateunpack(cs_86)) else caught-fail) in
        {1858}let v_613: bool = (not-caught-fail(v_612) && success?(1-proj-2-tuple(v_612))) in
        {1859}let n_30: nonce = (if v_613 then 2-proj-2-tuple(v_612) else caught-fail) in
        {1860}let k_34: key = (if v_613 then 1-proj-2-tuple(v_612) else caught-fail) in
        {1863}let v_614: bitstring = (if v_613 then catch-fail(cipherstateunpack(cs_86)) else caught-fail) in
        {1864}let v_615: bool = (not-caught-fail(v_614) && success?(1-proj-2-tuple(v_614))) in
        {1865}let o_15: nonce = (if v_615 then 2-proj-2-tuple(v_614) else caught-fail) in
        {1866}let k_35: key = (if v_615 then 1-proj-2-tuple(v_614) else caught-fail) in
        {1862}let n_31: nonce = (if v_613 then increment_nonce(n_30) else caught-fail) in
        {1867}let csi_30: cipherstate = (if v_613 then catch-fail((if v_615 then cipherstatepack(k_35,n_31) else fail-any)) else caught-fail) in
        {1868}let v_616: bool = not-caught-fail(csi_30) in
        {1835}let payload_7: bitstring = msg_d(me_3,them_3,sid_4) in
        {1861}let e_31: bitstring = (if v_613 then encrypt(k_34,n_30,h_86,payload_7) else caught-fail) in
        {1869}let v_617: bitstring = (if v_611 then catch-fail((if v_613 then (if v_616 then (csi_30,e_31) else fail-any) else fail-any)) else caught-fail) in
        {1870}let v_618: bool = (not-caught-fail(v_617) && success?(1-proj-2-tuple(v_617))) in
        {1871}let ciphertext_30: bitstring = (if v_618 then 2-proj-2-tuple(v_617) else caught-fail) in
        {1872}let csi_31: cipherstate = (if v_618 then 1-proj-2-tuple(v_617) else caught-fail) in
        {1873}let ss_98: symmetricstate = (if v_618 then symmetricstatepack(csi_31,ck_106,h_86) else caught-fail) in
        {1874}let v_619: bitstring = (if v_618 then catch-fail(symmetricstateunpack(ss_98)) else caught-fail) in
        {1875}let v_620: bool = (not-caught-fail(v_619) && success?(1-proj-3-tuple(v_619))) in
        {1876}let h_87: bitstring = (if v_620 then 3-proj-3-tuple(v_619) else caught-fail) in
        {1877}let ck_107: key = (if v_620 then 2-proj-3-tuple(v_619) else caught-fail) in
        {1878}let cs_87: cipherstate = (if v_620 then 1-proj-3-tuple(v_619) else caught-fail) in
        {1879}let ssi_19: symmetricstate = (if v_618 then catch-fail((if v_620 then symmetricstatepack(cs_87,ck_107,hash(h_87,ciphertext_30)) else fail-any)) else caught-fail) in
        {1880}let v_621: bool = not-caught-fail(ssi_19) in
        {1881}let v_622: bitstring = (if v_609 then catch-fail((if v_611 then (if v_618 then (if v_621 then (ssi_19,ciphertext_30) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1882}let v_623: bool = (not-caught-fail(v_622) && success?(1-proj-2-tuple(v_622))) in
        {1883}let ciphertext_31: bitstring = (if v_623 then 2-proj-2-tuple(v_622) else caught-fail) in
        {1884}let ss_99: symmetricstate = (if v_623 then 1-proj-2-tuple(v_622) else caught-fail) in
        {1886}let message_buffer_7: bitstring = (if v_623 then concat3(ne_19,ns_15,ciphertext_31) else caught-fail) in
        {1885}let hs_58: handshakestate = (if v_623 then handshakestatepack(ss_99,s_19,m_19,e_30,rs_19,rm_19,re_23,psk_19,initiator_16) else caught-fail) in
        {1887}let (hs_59: handshakestate,message_d_3: bitstring) = (if v_607 then (if v_609 then (if v_623 then (hs_58,message_buffer_7) else fail-any) else fail-any) else fail-any) in
        {1888}event SendMsg(me_3,them_3,stagepack_d(sid_4),msg_d(me_3,them_3,sid_4));
        {1889}out(pub, message_d_3)
    ) | (
        {1891}event LeakS(phase0,me_3);
        {1892}event LeakM(phase0,me_3);
        {1893}out(pub, (key_s(me_3),key_m(me_3)))
    ) | (
        {1894}phase 1;
        {1895}event LeakS(phase1,me_3);
        {1896}event LeakM(phase1,me_3);
        {1897}out(pub, (key_s(me_3),key_m(me_3)))
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),msg)); event(RecvMsg(bob,alice,stagepack_a(sid_b),msg)) ==> event(SendMsg(alice,c,stagepack_a(sid_a),msg)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))); event(RecvMsg(bob,alice,stagepack_a(sid_b),msg)) ==> event(SendMsg(alice,c,stagepack_a(sid_a),msg)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))); event(RecvMsg(bob,alice,stagepack_a(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),msg)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))); event(RecvMsg(bob,alice,stagepack_a(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),msg)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakM(px,bob)); attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(px,bob)) && event(LeakM(px,bob)) && event(LeakS(pz,alice)) && event(LeakM(pz,alice))); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),msg)); event(RecvMsg(alice,bob,stagepack_b(sid_a),msg)) ==> event(SendMsg(bob,c,stagepack_b(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))); event(RecvMsg(alice,bob,stagepack_b(sid_a),msg)) ==> event(SendMsg(bob,c,stagepack_b(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))); event(RecvMsg(alice,bob,stagepack_b(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))); event(RecvMsg(alice,bob,stagepack_b(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))); not attacker_p1(msg_b(bob,alice,sid_b)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(px,alice)) && event(LeakM(px,alice)); attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(px,alice)) && event(LeakM(px,alice)) && event(LeakS(pz,bob)) && event(LeakM(pz,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) && event(LeakM(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),msg)); event(RecvMsg(bob,alice,stagepack_c(sid_b),msg)) ==> event(SendMsg(alice,c,stagepack_c(sid_a),msg)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))); event(RecvMsg(bob,alice,stagepack_c(sid_b),msg)) ==> event(SendMsg(alice,c,stagepack_c(sid_a),msg)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))); event(RecvMsg(bob,alice,stagepack_c(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),msg)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))); event(RecvMsg(bob,alice,stagepack_c(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),msg)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))); not attacker_p1(msg_c(alice,bob,sid_a)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakM(px,bob)); attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(px,bob)) && event(LeakM(px,bob)) && event(LeakS(pz,alice)) && event(LeakM(pz,alice))); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),msg)); event(RecvMsg(alice,bob,stagepack_d(sid_a),msg)) ==> event(SendMsg(bob,c,stagepack_d(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))); event(RecvMsg(alice,bob,stagepack_d(sid_a),msg)) ==> event(SendMsg(bob,c,stagepack_d(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))); event(RecvMsg(alice,bob,stagepack_d(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))); event(RecvMsg(alice,bob,stagepack_d(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))); not attacker_p1(msg_d(bob,alice,sid_b)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(px,alice)) && event(LeakM(px,alice)); attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(px,alice)) && event(LeakM(px,alice)) && event(LeakS(pz,bob)) && event(LeakM(pz,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) && event(LeakM(phase0,alice)); not event(RecvEnd(true)) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 200 rules (88 with conclusion selected). Queue: 296 rules.
400 rules inserted. Base: 392 rules (108 with conclusion selected). Queue: 180 rules.
600 rules inserted. Base: 590 rules (148 with conclusion selected). Queue: 146 rules.
800 rules inserted. Base: 789 rules (169 with conclusion selected). Queue: 196 rules.
1000 rules inserted. Base: 973 rules (169 with conclusion selected). Queue: 204 rules.
1200 rules inserted. Base: 1131 rules (169 with conclusion selected). Queue: 208 rules.
1400 rules inserted. Base: 1245 rules (169 with conclusion selected). Queue: 220 rules.
1600 rules inserted. Base: 1445 rules (169 with conclusion selected). Queue: 232 rules.
1800 rules inserted. Base: 1645 rules (169 with conclusion selected). Queue: 249 rules.
2000 rules inserted. Base: 1845 rules (169 with conclusion selected). Queue: 272 rules.
2200 rules inserted. Base: 2045 rules (169 with conclusion selected). Queue: 264 rules.
2400 rules inserted. Base: 2236 rules (169 with conclusion selected). Queue: 239 rules.
2600 rules inserted. Base: 2415 rules (169 with conclusion selected). Queue: 286 rules.
2800 rules inserted. Base: 2552 rules (169 with conclusion selected). Queue: 278 rules.
3000 rules inserted. Base: 2700 rules (169 with conclusion selected). Queue: 229 rules.
3200 rules inserted. Base: 2800 rules (169 with conclusion selected). Queue: 219 rules.
3400 rules inserted. Base: 2882 rules (169 with conclusion selected). Queue: 203 rules.
3600 rules inserted. Base: 2977 rules (179 with conclusion selected). Queue: 296 rules.
3800 rules inserted. Base: 3074 rules (214 with conclusion selected). Queue: 417 rules.
4000 rules inserted. Base: 3185 rules (237 with conclusion selected). Queue: 361 rules.
4200 rules inserted. Base: 3294 rules (239 with conclusion selected). Queue: 727 rules.
4400 rules inserted. Base: 3410 rules (248 with conclusion selected). Queue: 1139 rules.
4600 rules inserted. Base: 3519 rules (255 with conclusion selected). Queue: 1373 rules.
4800 rules inserted. Base: 3668 rules (255 with conclusion selected). Queue: 1490 rules.
5000 rules inserted. Base: 3492 rules (255 with conclusion selected). Queue: 1649 rules.
5200 rules inserted. Base: 3656 rules (255 with conclusion selected). Queue: 1803 rules.
5400 rules inserted. Base: 3808 rules (303 with conclusion selected). Queue: 2142 rules.
5600 rules inserted. Base: 4008 rules (503 with conclusion selected). Queue: 3128 rules.
5800 rules inserted. Base: 4135 rules (506 with conclusion selected). Queue: 3095 rules.
6000 rules inserted. Base: 4221 rules (506 with conclusion selected). Queue: 3073 rules.
6200 rules inserted. Base: 4291 rules (506 with conclusion selected). Queue: 2959 rules.
6400 rules inserted. Base: 4436 rules (506 with conclusion selected). Queue: 3000 rules.
6600 rules inserted. Base: 4582 rules (506 with conclusion selected). Queue: 2982 rules.
6800 rules inserted. Base: 4774 rules (550 with conclusion selected). Queue: 3061 rules.
7000 rules inserted. Base: 4974 rules (669 with conclusion selected). Queue: 3435 rules.
7200 rules inserted. Base: 5174 rules (801 with conclusion selected). Queue: 3878 rules.
7400 rules inserted. Base: 5374 rules (853 with conclusion selected). Queue: 3925 rules.
7600 rules inserted. Base: 5574 rules (903 with conclusion selected). Queue: 3969 rules.
7800 rules inserted. Base: 5774 rules (957 with conclusion selected). Queue: 4029 rules.
8000 rules inserted. Base: 5974 rules (1009 with conclusion selected). Queue: 4088 rules.
8200 rules inserted. Base: 6174 rules (1073 with conclusion selected). Queue: 4321 rules.
8400 rules inserted. Base: 6219 rules (1074 with conclusion selected). Queue: 4258 rules.
8600 rules inserted. Base: 6257 rules (1074 with conclusion selected). Queue: 4111 rules.
8800 rules inserted. Base: 6307 rules (1074 with conclusion selected). Queue: 4017 rules.
9000 rules inserted. Base: 6347 rules (1074 with conclusion selected). Queue: 3845 rules.
9200 rules inserted. Base: 6489 rules (1078 with conclusion selected). Queue: 3885 rules.
9400 rules inserted. Base: 6689 rules (1092 with conclusion selected). Queue: 3829 rules.
9600 rules inserted. Base: 6889 rules (1110 with conclusion selected). Queue: 3738 rules.
9800 rules inserted. Base: 7089 rules (1129 with conclusion selected). Queue: 3637 rules.
10000 rules inserted. Base: 7289 rules (1145 with conclusion selected). Queue: 3561 rules.
10200 rules inserted. Base: 7489 rules (1164 with conclusion selected). Queue: 3456 rules.
10400 rules inserted. Base: 7689 rules (1183 with conclusion selected). Queue: 3355 rules.
10600 rules inserted. Base: 7889 rules (1203 with conclusion selected). Queue: 3251 rules.
10800 rules inserted. Base: 8089 rules (1219 with conclusion selected). Queue: 3179 rules.
11000 rules inserted. Base: 8289 rules (1230 with conclusion selected). Queue: 3133 rules.
11200 rules inserted. Base: 8489 rules (1242 with conclusion selected). Queue: 3086 rules.
11400 rules inserted. Base: 8689 rules (1258 with conclusion selected). Queue: 3014 rules.
11600 rules inserted. Base: 8889 rules (1270 with conclusion selected). Queue: 2970 rules.
11800 rules inserted. Base: 9089 rules (1285 with conclusion selected). Queue: 2897 rules.
12000 rules inserted. Base: 9266 rules (1292 with conclusion selected). Queue: 2856 rules.
12200 rules inserted. Base: 9276 rules (1294 with conclusion selected). Queue: 2871 rules.
12400 rules inserted. Base: 9276 rules (1294 with conclusion selected). Queue: 2855 rules.
12600 rules inserted. Base: 9277 rules (1294 with conclusion selected). Queue: 2843 rules.
12800 rules inserted. Base: 9277 rules (1294 with conclusion selected). Queue: 2833 rules.
13000 rules inserted. Base: 9451 rules (1328 with conclusion selected). Queue: 2997 rules.
13200 rules inserted. Base: 9619 rules (1328 with conclusion selected). Queue: 3032 rules.
13400 rules inserted. Base: 9819 rules (1328 with conclusion selected). Queue: 3072 rules.
13600 rules inserted. Base: 10003 rules (1328 with conclusion selected). Queue: 3111 rules.
13800 rules inserted. Base: 10203 rules (1328 with conclusion selected). Queue: 3151 rules.
14000 rules inserted. Base: 10371 rules (1328 with conclusion selected). Queue: 3187 rules.
14200 rules inserted. Base: 10525 rules (1328 with conclusion selected). Queue: 3223 rules.
14400 rules inserted. Base: 10699 rules (1328 with conclusion selected). Queue: 3260 rules.
14600 rules inserted. Base: 10871 rules (1328 with conclusion selected). Queue: 3297 rules.
14800 rules inserted. Base: 11001 rules (1328 with conclusion selected). Queue: 3290 rules.
15000 rules inserted. Base: 11124 rules (1403 with conclusion selected). Queue: 3988 rules.
15200 rules inserted. Base: 11127 rules (1403 with conclusion selected). Queue: 3980 rules.
15400 rules inserted. Base: 10831 rules (1403 with conclusion selected). Queue: 3967 rules.
15600 rules inserted. Base: 10831 rules (1403 with conclusion selected). Queue: 3955 rules.
15800 rules inserted. Base: 11014 rules (1410 with conclusion selected). Queue: 3907 rules.
16000 rules inserted. Base: 11210 rules (1419 with conclusion selected). Queue: 3866 rules.
16200 rules inserted. Base: 11381 rules (1419 with conclusion selected). Queue: 3880 rules.
16400 rules inserted. Base: 11514 rules (1419 with conclusion selected). Queue: 3914 rules.
16600 rules inserted. Base: 11666 rules (1419 with conclusion selected). Queue: 3938 rules.
16800 rules inserted. Base: 11800 rules (1419 with conclusion selected). Queue: 3971 rules.
17000 rules inserted. Base: 11952 rules (1419 with conclusion selected). Queue: 3995 rules.
17200 rules inserted. Base: 12110 rules (1419 with conclusion selected). Queue: 4015 rules.
17400 rules inserted. Base: 12293 rules (1419 with conclusion selected). Queue: 4024 rules.
17600 rules inserted. Base: 12446 rules (1419 with conclusion selected). Queue: 4047 rules.
17800 rules inserted. Base: 12616 rules (1419 with conclusion selected). Queue: 4063 rules.
18000 rules inserted. Base: 12782 rules (1419 with conclusion selected). Queue: 4079 rules.
18200 rules inserted. Base: 12900 rules (1504 with conclusion selected). Queue: 4400 rules.
18400 rules inserted. Base: 13100 rules (1690 with conclusion selected). Queue: 5101 rules.
18600 rules inserted. Base: 13300 rules (1849 with conclusion selected). Queue: 5664 rules.
18800 rules inserted. Base: 13500 rules (1976 with conclusion selected). Queue: 6076 rules.
19000 rules inserted. Base: 13601 rules (2043 with conclusion selected). Queue: 6261 rules.
19200 rules inserted. Base: 13601 rules (2043 with conclusion selected). Queue: 6261 rules.
19400 rules inserted. Base: 13648 rules (2048 with conclusion selected). Queue: 6262 rules.
19600 rules inserted. Base: 13735 rules (2048 with conclusion selected). Queue: 6264 rules.
19800 rules inserted. Base: 13928 rules (2048 with conclusion selected). Queue: 6312 rules.
20000 rules inserted. Base: 14128 rules (2048 with conclusion selected). Queue: 6352 rules.
20200 rules inserted. Base: 14328 rules (2048 with conclusion selected). Queue: 6377 rules.
20400 rules inserted. Base: 14528 rules (2048 with conclusion selected). Queue: 6376 rules.
20600 rules inserted. Base: 14728 rules (2048 with conclusion selected). Queue: 6400 rules.
20800 rules inserted. Base: 14928 rules (2048 with conclusion selected). Queue: 6400 rules.
21000 rules inserted. Base: 15128 rules (2048 with conclusion selected). Queue: 6424 rules.
21200 rules inserted. Base: 15328 rules (2048 with conclusion selected). Queue: 6452 rules.
21400 rules inserted. Base: 15528 rules (2048 with conclusion selected). Queue: 6514 rules.
21600 rules inserted. Base: 15728 rules (2048 with conclusion selected). Queue: 6545 rules.
21800 rules inserted. Base: 15928 rules (2048 with conclusion selected). Queue: 6592 rules.
22000 rules inserted. Base: 16128 rules (2048 with conclusion selected). Queue: 6616 rules.
22200 rules inserted. Base: 16202 rules (2051 with conclusion selected). Queue: 6666 rules.
22400 rules inserted. Base: 16402 rules (2070 with conclusion selected). Queue: 6565 rules.
22600 rules inserted. Base: 16602 rules (2090 with conclusion selected). Queue: 6461 rules.
22800 rules inserted. Base: 16802 rules (2109 with conclusion selected). Queue: 6356 rules.
23000 rules inserted. Base: 17002 rules (2129 with conclusion selected). Queue: 6256 rules.
23200 rules inserted. Base: 17202 rules (2148 with conclusion selected). Queue: 6153 rules.
23400 rules inserted. Base: 17402 rules (2168 with conclusion selected). Queue: 6051 rules.
23600 rules inserted. Base: 17602 rules (2187 with conclusion selected). Queue: 5951 rules.
23800 rules inserted. Base: 17802 rules (2207 with conclusion selected). Queue: 5846 rules.
24000 rules inserted. Base: 18002 rules (2226 with conclusion selected). Queue: 5743 rules.
24200 rules inserted. Base: 18202 rules (2245 with conclusion selected). Queue: 5641 rules.
24400 rules inserted. Base: 18402 rules (2261 with conclusion selected). Queue: 5564 rules.
24600 rules inserted. Base: 18602 rules (2281 with conclusion selected). Queue: 5464 rules.
24800 rules inserted. Base: 18802 rules (2300 with conclusion selected). Queue: 5361 rules.
25000 rules inserted. Base: 19002 rules (2316 with conclusion selected). Queue: 5287 rules.
25200 rules inserted. Base: 19181 rules (2334 with conclusion selected). Queue: 5226 rules.
25400 rules inserted. Base: 19263 rules (2334 with conclusion selected). Queue: 5288 rules.
25600 rules inserted. Base: 19345 rules (2346 with conclusion selected). Queue: 5282 rules.
25800 rules inserted. Base: 19473 rules (2346 with conclusion selected). Queue: 5275 rules.
26000 rules inserted. Base: 19639 rules (2348 with conclusion selected). Queue: 5355 rules.
26200 rules inserted. Base: 19839 rules (2348 with conclusion selected). Queue: 5414 rules.
26400 rules inserted. Base: 20039 rules (2348 with conclusion selected). Queue: 5487 rules.
26600 rules inserted. Base: 20239 rules (2348 with conclusion selected). Queue: 5573 rules.
26800 rules inserted. Base: 20439 rules (2348 with conclusion selected). Queue: 5649 rules.
27000 rules inserted. Base: 20639 rules (2348 with conclusion selected). Queue: 5734 rules.
27200 rules inserted. Base: 20839 rules (2348 with conclusion selected). Queue: 5820 rules.
27400 rules inserted. Base: 21039 rules (2348 with conclusion selected). Queue: 5895 rules.
27600 rules inserted. Base: 21239 rules (2348 with conclusion selected). Queue: 5964 rules.
27800 rules inserted. Base: 21439 rules (2348 with conclusion selected). Queue: 6030 rules.
28000 rules inserted. Base: 21639 rules (2348 with conclusion selected). Queue: 6105 rules.
28200 rules inserted. Base: 21839 rules (2348 with conclusion selected). Queue: 6172 rules.
28400 rules inserted. Base: 22039 rules (2348 with conclusion selected). Queue: 6252 rules.
28600 rules inserted. Base: 22229 rules (2348 with conclusion selected). Queue: 6310 rules.
28800 rules inserted. Base: 22342 rules (2384 with conclusion selected). Queue: 6483 rules.
29000 rules inserted. Base: 22542 rules (2384 with conclusion selected). Queue: 6523 rules.
29200 rules inserted. Base: 22742 rules (2384 with conclusion selected). Queue: 6563 rules.
29400 rules inserted. Base: 22942 rules (2384 with conclusion selected). Queue: 6603 rules.
29600 rules inserted. Base: 23142 rules (2384 with conclusion selected). Queue: 6643 rules.
29800 rules inserted. Base: 23331 rules (2384 with conclusion selected). Queue: 6682 rules.
30000 rules inserted. Base: 23526 rules (2384 with conclusion selected). Queue: 6722 rules.
30200 rules inserted. Base: 23710 rules (2384 with conclusion selected). Queue: 6760 rules.
30400 rules inserted. Base: 23907 rules (2384 with conclusion selected). Queue: 6696 rules.
30600 rules inserted. Base: 24106 rules (2384 with conclusion selected). Queue: 6556 rules.
30800 rules inserted. Base: 24306 rules (2388 with conclusion selected). Queue: 6473 rules.
31000 rules inserted. Base: 24505 rules (2388 with conclusion selected). Queue: 6512 rules.
31200 rules inserted. Base: 24697 rules (2422 with conclusion selected). Queue: 6682 rules.
31400 rules inserted. Base: 24897 rules (2422 with conclusion selected). Queue: 6700 rules.
31600 rules inserted. Base: 25097 rules (2422 with conclusion selected). Queue: 6742 rules.
31800 rules inserted. Base: 25297 rules (2422 with conclusion selected). Queue: 6791 rules.
32000 rules inserted. Base: 25497 rules (2422 with conclusion selected). Queue: 6851 rules.
32200 rules inserted. Base: 25697 rules (2422 with conclusion selected). Queue: 6911 rules.
32400 rules inserted. Base: 25897 rules (2422 with conclusion selected). Queue: 6966 rules.
32600 rules inserted. Base: 26097 rules (2422 with conclusion selected). Queue: 7023 rules.
32800 rules inserted. Base: 26297 rules (2422 with conclusion selected). Queue: 7083 rules.
33000 rules inserted. Base: 26497 rules (2422 with conclusion selected). Queue: 7143 rules.
33200 rules inserted. Base: 26697 rules (2422 with conclusion selected). Queue: 7188 rules.
33400 rules inserted. Base: 26897 rules (2422 with conclusion selected). Queue: 7234 rules.
33600 rules inserted. Base: 27097 rules (2422 with conclusion selected). Queue: 7285 rules.
33800 rules inserted. Base: 27297 rules (2422 with conclusion selected). Queue: 7326 rules.
34000 rules inserted. Base: 27497 rules (2422 with conclusion selected). Queue: 7375 rules.
34200 rules inserted. Base: 27697 rules (2422 with conclusion selected). Queue: 7428 rules.
34400 rules inserted. Base: 27897 rules (2422 with conclusion selected). Queue: 7462 rules.
34600 rules inserted. Base: 28097 rules (2422 with conclusion selected). Queue: 7517 rules.
34800 rules inserted. Base: 28297 rules (2422 with conclusion selected). Queue: 7563 rules.
35000 rules inserted. Base: 28451 rules (2458 with conclusion selected). Queue: 7725 rules.
35200 rules inserted. Base: 28619 rules (2472 with conclusion selected). Queue: 7649 rules.
35400 rules inserted. Base: 28763 rules (2472 with conclusion selected). Queue: 7680 rules.
35600 rules inserted. Base: 28896 rules (2472 with conclusion selected). Queue: 7713 rules.
35800 rules inserted. Base: 29029 rules (2472 with conclusion selected). Queue: 7747 rules.
36000 rules inserted. Base: 29163 rules (2472 with conclusion selected). Queue: 7780 rules.
36200 rules inserted. Base: 29296 rules (2472 with conclusion selected). Queue: 7813 rules.
36400 rules inserted. Base: 29429 rules (2472 with conclusion selected). Queue: 7847 rules.
36600 rules inserted. Base: 29581 rules (2472 with conclusion selected). Queue: 7871 rules.
36800 rules inserted. Base: 29715 rules (2472 with conclusion selected). Queue: 7904 rules.
37000 rules inserted. Base: 29867 rules (2472 with conclusion selected). Queue: 7928 rules.
37200 rules inserted. Base: 29923 rules (2504 with conclusion selected). Queue: 7995 rules.
37400 rules inserted. Base: 30101 rules (2504 with conclusion selected). Queue: 7884 rules.
37600 rules inserted. Base: 30291 rules (2504 with conclusion selected). Queue: 7861 rules.
37800 rules inserted. Base: 30486 rules (2515 with conclusion selected). Queue: 7791 rules.
38000 rules inserted. Base: 30686 rules (2520 with conclusion selected). Queue: 7823 rules.
38200 rules inserted. Base: 30886 rules (2520 with conclusion selected). Queue: 7867 rules.
38400 rules inserted. Base: 31086 rules (2520 with conclusion selected). Queue: 7888 rules.
38600 rules inserted. Base: 31286 rules (2520 with conclusion selected). Queue: 7937 rules.
38800 rules inserted. Base: 31486 rules (2520 with conclusion selected). Queue: 7983 rules.
39000 rules inserted. Base: 31686 rules (2520 with conclusion selected). Queue: 8019 rules.
39200 rules inserted. Base: 31886 rules (2520 with conclusion selected). Queue: 8060 rules.
39400 rules inserted. Base: 32086 rules (2520 with conclusion selected). Queue: 8108 rules.
39600 rules inserted. Base: 32286 rules (2520 with conclusion selected). Queue: 8155 rules.
39800 rules inserted. Base: 32486 rules (2520 with conclusion selected). Queue: 8190 rules.
40000 rules inserted. Base: 32686 rules (2520 with conclusion selected). Queue: 8231 rules.
40200 rules inserted. Base: 32886 rules (2520 with conclusion selected). Queue: 8269 rules.
40400 rules inserted. Base: 33086 rules (2520 with conclusion selected). Queue: 8295 rules.
40600 rules inserted. Base: 33286 rules (2520 with conclusion selected). Queue: 8318 rules.
40800 rules inserted. Base: 33486 rules (2520 with conclusion selected). Queue: 8361 rules.
41000 rules inserted. Base: 33686 rules (2520 with conclusion selected). Queue: 8409 rules.
41200 rules inserted. Base: 33886 rules (2520 with conclusion selected). Queue: 8411 rules.
41400 rules inserted. Base: 34086 rules (2520 with conclusion selected). Queue: 8457 rules.
41600 rules inserted. Base: 34286 rules (2520 with conclusion selected). Queue: 8506 rules.
41800 rules inserted. Base: 34486 rules (2520 with conclusion selected). Queue: 8524 rules.
42000 rules inserted. Base: 34686 rules (2520 with conclusion selected). Queue: 8554 rules.
42200 rules inserted. Base: 34886 rules (2520 with conclusion selected). Queue: 8594 rules.
42400 rules inserted. Base: 35086 rules (2520 with conclusion selected). Queue: 8620 rules.
42600 rules inserted. Base: 35261 rules (2526 with conclusion selected). Queue: 8585 rules.
42800 rules inserted. Base: 35449 rules (2536 with conclusion selected). Queue: 8537 rules.
43000 rules inserted. Base: 35631 rules (2536 with conclusion selected). Queue: 8543 rules.
43200 rules inserted. Base: 35831 rules (2536 with conclusion selected). Queue: 8542 rules.
43400 rules inserted. Base: 36031 rules (2536 with conclusion selected). Queue: 8542 rules.
43600 rules inserted. Base: 36231 rules (2536 with conclusion selected). Queue: 8542 rules.
43800 rules inserted. Base: 36431 rules (2536 with conclusion selected). Queue: 8542 rules.
44000 rules inserted. Base: 36631 rules (2536 with conclusion selected). Queue: 8543 rules.
44200 rules inserted. Base: 36831 rules (2536 with conclusion selected). Queue: 8542 rules.
44400 rules inserted. Base: 37031 rules (2536 with conclusion selected). Queue: 8567 rules.
44600 rules inserted. Base: 37231 rules (2536 with conclusion selected). Queue: 8566 rules.
44800 rules inserted. Base: 37431 rules (2536 with conclusion selected). Queue: 8590 rules.
45000 rules inserted. Base: 37631 rules (2561 with conclusion selected). Queue: 8624 rules.
45200 rules inserted. Base: 37804 rules (2728 with conclusion selected). Queue: 8846 rules.
45400 rules inserted. Base: 37589 rules (2728 with conclusion selected). Queue: 8846 rules.
45600 rules inserted. Base: 37779 rules (2730 with conclusion selected). Queue: 8891 rules.
45800 rules inserted. Base: 37978 rules (2730 with conclusion selected). Queue: 8942 rules.
46000 rules inserted. Base: 38164 rules (2730 with conclusion selected). Queue: 8942 rules.
46200 rules inserted. Base: 38363 rules (2730 with conclusion selected). Queue: 8939 rules.
46400 rules inserted. Base: 38563 rules (2730 with conclusion selected). Queue: 8962 rules.
46600 rules inserted. Base: 38763 rules (2730 with conclusion selected). Queue: 9004 rules.
46800 rules inserted. Base: 38963 rules (2730 with conclusion selected). Queue: 9046 rules.
47000 rules inserted. Base: 39163 rules (2730 with conclusion selected). Queue: 9066 rules.
47200 rules inserted. Base: 39363 rules (2730 with conclusion selected). Queue: 9094 rules.
47400 rules inserted. Base: 39563 rules (2730 with conclusion selected). Queue: 9142 rules.
47600 rules inserted. Base: 39763 rules (2730 with conclusion selected). Queue: 9186 rules.
47800 rules inserted. Base: 39963 rules (2730 with conclusion selected). Queue: 9228 rules.
48000 rules inserted. Base: 40163 rules (2730 with conclusion selected). Queue: 9243 rules.
48200 rules inserted. Base: 40363 rules (2730 with conclusion selected). Queue: 9276 rules.
48400 rules inserted. Base: 40563 rules (2730 with conclusion selected). Queue: 9311 rules.
48600 rules inserted. Base: 40763 rules (2730 with conclusion selected). Queue: 9305 rules.
48800 rules inserted. Base: 40963 rules (2730 with conclusion selected). Queue: 9324 rules.
49000 rules inserted. Base: 41163 rules (2730 with conclusion selected). Queue: 9327 rules.
49200 rules inserted. Base: 41363 rules (2730 with conclusion selected). Queue: 9366 rules.
49400 rules inserted. Base: 41563 rules (2730 with conclusion selected). Queue: 9402 rules.
49600 rules inserted. Base: 41763 rules (2730 with conclusion selected). Queue: 9362 rules.
49800 rules inserted. Base: 41963 rules (2730 with conclusion selected). Queue: 9402 rules.
50000 rules inserted. Base: 42163 rules (2730 with conclusion selected). Queue: 9446 rules.
50200 rules inserted. Base: 42363 rules (2730 with conclusion selected). Queue: 9483 rules.
50400 rules inserted. Base: 42563 rules (2730 with conclusion selected). Queue: 9440 rules.
50600 rules inserted. Base: 42763 rules (2730 with conclusion selected). Queue: 9482 rules.
50800 rules inserted. Base: 42963 rules (2730 with conclusion selected). Queue: 9506 rules.
51000 rules inserted. Base: 43163 rules (2730 with conclusion selected). Queue: 9509 rules.
51200 rules inserted. Base: 43363 rules (2732 with conclusion selected). Queue: 9539 rules.
51400 rules inserted. Base: 43531 rules (2732 with conclusion selected). Queue: 9547 rules.
51600 rules inserted. Base: 43731 rules (2732 with conclusion selected). Queue: 9628 rules.
51800 rules inserted. Base: 43931 rules (2732 with conclusion selected). Queue: 9713 rules.
52000 rules inserted. Base: 44131 rules (2732 with conclusion selected). Queue: 9799 rules.
52200 rules inserted. Base: 44331 rules (2732 with conclusion selected). Queue: 9884 rules.
52400 rules inserted. Base: 44531 rules (2732 with conclusion selected). Queue: 9970 rules.
52600 rules inserted. Base: 44731 rules (2732 with conclusion selected). Queue: 10056 rules.
52800 rules inserted. Base: 44931 rules (2732 with conclusion selected). Queue: 10141 rules.
53000 rules inserted. Base: 45131 rules (2732 with conclusion selected). Queue: 10217 rules.
53200 rules inserted. Base: 45331 rules (2732 with conclusion selected). Queue: 10303 rules.
53400 rules inserted. Base: 45531 rules (2732 with conclusion selected). Queue: 10378 rules.
53600 rules inserted. Base: 45727 rules (2759 with conclusion selected). Queue: 10459 rules.
53800 rules inserted. Base: 45927 rules (2899 with conclusion selected). Queue: 10542 rules.
54000 rules inserted. Base: 46127 rules (3043 with conclusion selected). Queue: 10629 rules.
54200 rules inserted. Base: 46322 rules (3180 with conclusion selected). Queue: 10897 rules.
54400 rules inserted. Base: 46503 rules (3201 with conclusion selected). Queue: 10999 rules.
54600 rules inserted. Base: 46671 rules (3214 with conclusion selected). Queue: 11105 rules.
54800 rules inserted. Base: 46862 rules (3214 with conclusion selected). Queue: 11143 rules.
55000 rules inserted. Base: 47047 rules (3214 with conclusion selected). Queue: 11159 rules.
55200 rules inserted. Base: 47247 rules (3214 with conclusion selected). Queue: 11155 rules.
55400 rules inserted. Base: 47447 rules (3214 with conclusion selected). Queue: 11203 rules.
55600 rules inserted. Base: 47647 rules (3214 with conclusion selected). Queue: 11238 rules.
55800 rules inserted. Base: 47847 rules (3214 with conclusion selected). Queue: 11284 rules.
56000 rules inserted. Base: 48047 rules (3214 with conclusion selected). Queue: 11286 rules.
56200 rules inserted. Base: 48247 rules (3214 with conclusion selected). Queue: 11274 rules.
56400 rules inserted. Base: 48447 rules (3214 with conclusion selected). Queue: 11314 rules.
56600 rules inserted. Base: 48647 rules (3214 with conclusion selected). Queue: 11351 rules.
56800 rules inserted. Base: 48847 rules (3214 with conclusion selected). Queue: 11388 rules.
57000 rules inserted. Base: 49047 rules (3214 with conclusion selected). Queue: 11437 rules.
57200 rules inserted. Base: 49247 rules (3214 with conclusion selected). Queue: 11421 rules.
57400 rules inserted. Base: 49447 rules (3214 with conclusion selected). Queue: 11424 rules.
57600 rules inserted. Base: 49647 rules (3214 with conclusion selected). Queue: 11464 rules.
57800 rules inserted. Base: 49847 rules (3214 with conclusion selected). Queue: 11449 rules.
58000 rules inserted. Base: 50047 rules (3214 with conclusion selected). Queue: 11490 rules.
58200 rules inserted. Base: 50247 rules (3214 with conclusion selected). Queue: 11480 rules.
58400 rules inserted. Base: 50447 rules (3214 with conclusion selected). Queue: 11521 rules.
58600 rules inserted. Base: 50647 rules (3214 with conclusion selected). Queue: 11557 rules.
58800 rules inserted. Base: 50847 rules (3214 with conclusion selected). Queue: 11605 rules.
59000 rules inserted. Base: 51047 rules (3214 with conclusion selected). Queue: 11636 rules.
59200 rules inserted. Base: 51247 rules (3214 with conclusion selected). Queue: 11676 rules.
59400 rules inserted. Base: 51447 rules (3214 with conclusion selected). Queue: 11712 rules.
59600 rules inserted. Base: 51647 rules (3214 with conclusion selected). Queue: 11756 rules.
59800 rules inserted. Base: 51847 rules (3214 with conclusion selected). Queue: 11794 rules.
60000 rules inserted. Base: 52047 rules (3214 with conclusion selected). Queue: 11828 rules.
60200 rules inserted. Base: 52247 rules (3214 with conclusion selected). Queue: 11866 rules.
60400 rules inserted. Base: 52447 rules (3214 with conclusion selected). Queue: 11849 rules.
60600 rules inserted. Base: 52647 rules (3214 with conclusion selected). Queue: 11897 rules.
60800 rules inserted. Base: 52813 rules (3248 with conclusion selected). Queue: 12066 rules.
61000 rules inserted. Base: 53013 rules (3248 with conclusion selected). Queue: 12087 rules.
61200 rules inserted. Base: 53213 rules (3248 with conclusion selected). Queue: 12147 rules.
61400 rules inserted. Base: 53413 rules (3248 with conclusion selected). Queue: 12207 rules.
61600 rules inserted. Base: 53613 rules (3248 with conclusion selected). Queue: 12267 rules.
61800 rules inserted. Base: 53813 rules (3248 with conclusion selected). Queue: 12327 rules.
62000 rules inserted. Base: 54013 rules (3248 with conclusion selected). Queue: 12387 rules.
62200 rules inserted. Base: 54213 rules (3248 with conclusion selected). Queue: 12447 rules.
62400 rules inserted. Base: 54413 rules (3248 with conclusion selected). Queue: 12507 rules.
62600 rules inserted. Base: 54613 rules (3248 with conclusion selected). Queue: 12567 rules.
62800 rules inserted. Base: 54813 rules (3248 with conclusion selected). Queue: 12627 rules.
63000 rules inserted. Base: 55013 rules (3248 with conclusion selected). Queue: 12686 rules.
63200 rules inserted. Base: 55213 rules (3248 with conclusion selected). Queue: 12740 rules.
63400 rules inserted. Base: 55413 rules (3248 with conclusion selected). Queue: 12800 rules.
63600 rules inserted. Base: 55613 rules (3248 with conclusion selected). Queue: 12860 rules.
63800 rules inserted. Base: 55813 rules (3248 with conclusion selected). Queue: 12913 rules.
64000 rules inserted. Base: 55998 rules (3248 with conclusion selected). Queue: 12969 rules.
64200 rules inserted. Base: 56193 rules (3277 with conclusion selected). Queue: 12980 rules.
64400 rules inserted. Base: 56393 rules (3307 with conclusion selected). Queue: 12990 rules.
64600 rules inserted. Base: 56593 rules (3337 with conclusion selected). Queue: 13000 rules.
64800 rules inserted. Base: 56789 rules (3473 with conclusion selected). Queue: 13092 rules.
65000 rules inserted. Base: 56989 rules (3673 with conclusion selected). Queue: 13227 rules.
65200 rules inserted. Base: 57115 rules (3728 with conclusion selected). Queue: 13300 rules.
65400 rules inserted. Base: 57253 rules (3738 with conclusion selected). Queue: 13269 rules.
65600 rules inserted. Base: 57453 rules (3744 with conclusion selected). Queue: 13236 rules.
65800 rules inserted. Base: 57653 rules (3744 with conclusion selected). Queue: 13282 rules.
66000 rules inserted. Base: 57783 rules (3744 with conclusion selected). Queue: 13332 rules.
66200 rules inserted. Base: 57917 rules (3744 with conclusion selected). Queue: 13370 rules.
66400 rules inserted. Base: 58109 rules (3744 with conclusion selected). Queue: 13369 rules.
66600 rules inserted. Base: 58304 rules (3744 with conclusion selected). Queue: 13403 rules.
66800 rules inserted. Base: 58493 rules (3744 with conclusion selected). Queue: 13438 rules.
67000 rules inserted. Base: 58693 rules (3744 with conclusion selected). Queue: 13471 rules.
67200 rules inserted. Base: 58893 rules (3744 with conclusion selected). Queue: 13510 rules.
67400 rules inserted. Base: 59093 rules (3744 with conclusion selected). Queue: 13546 rules.
67600 rules inserted. Base: 59293 rules (3744 with conclusion selected). Queue: 13578 rules.
67800 rules inserted. Base: 59493 rules (3744 with conclusion selected). Queue: 13610 rules.
68000 rules inserted. Base: 59680 rules (3744 with conclusion selected). Queue: 13646 rules.
68200 rules inserted. Base: 59877 rules (3744 with conclusion selected). Queue: 13680 rules.
68400 rules inserted. Base: 60077 rules (3744 with conclusion selected). Queue: 13714 rules.
68600 rules inserted. Base: 60277 rules (3744 with conclusion selected). Queue: 13755 rules.
68800 rules inserted. Base: 60477 rules (3744 with conclusion selected). Queue: 13786 rules.
69000 rules inserted. Base: 60677 rules (3744 with conclusion selected). Queue: 13819 rules.
69200 rules inserted. Base: 60877 rules (3744 with conclusion selected). Queue: 13852 rules.
69400 rules inserted. Base: 61069 rules (3744 with conclusion selected). Queue: 13852 rules.
69600 rules inserted. Base: 61269 rules (3744 with conclusion selected). Queue: 13885 rules.
69800 rules inserted. Base: 61461 rules (3744 with conclusion selected). Queue: 13885 rules.
70000 rules inserted. Base: 61658 rules (3744 with conclusion selected). Queue: 13918 rules.
70200 rules inserted. Base: 61845 rules (3744 with conclusion selected). Queue: 13954 rules.
70400 rules inserted. Base: 62043 rules (3744 with conclusion selected). Queue: 13987 rules.
70600 rules inserted. Base: 62230 rules (3744 with conclusion selected). Queue: 13988 rules.
70800 rules inserted. Base: 62429 rules (3744 with conclusion selected). Queue: 14018 rules.
71000 rules inserted. Base: 62629 rules (3744 with conclusion selected). Queue: 14050 rules.
71200 rules inserted. Base: 62814 rules (3744 with conclusion selected). Queue: 14085 rules.
71400 rules inserted. Base: 63013 rules (3744 with conclusion selected). Queue: 14120 rules.
71600 rules inserted. Base: 63201 rules (3744 with conclusion selected). Queue: 14139 rules.
71800 rules inserted. Base: 63397 rules (3744 with conclusion selected). Queue: 14150 rules.
72000 rules inserted. Base: 63597 rules (3744 with conclusion selected). Queue: 14183 rules.
72200 rules inserted. Base: 63793 rules (3744 with conclusion selected). Queue: 14211 rules.
72400 rules inserted. Base: 63989 rules (3744 with conclusion selected). Queue: 14216 rules.
72600 rules inserted. Base: 64187 rules (3748 with conclusion selected). Queue: 14223 rules.
72800 rules inserted. Base: 64387 rules (3760 with conclusion selected). Queue: 14162 rules.
73000 rules inserted. Base: 64587 rules (3760 with conclusion selected). Queue: 14220 rules.
73200 rules inserted. Base: 64787 rules (3760 with conclusion selected). Queue: 14266 rules.
73400 rules inserted. Base: 64987 rules (3760 with conclusion selected). Queue: 14311 rules.
73600 rules inserted. Base: 65187 rules (3760 with conclusion selected). Queue: 14359 rules.
73800 rules inserted. Base: 65387 rules (3760 with conclusion selected). Queue: 14404 rules.
74000 rules inserted. Base: 65587 rules (3760 with conclusion selected). Queue: 14450 rules.
74200 rules inserted. Base: 65787 rules (3760 with conclusion selected). Queue: 14497 rules.
74400 rules inserted. Base: 65987 rules (3760 with conclusion selected). Queue: 14542 rules.
74600 rules inserted. Base: 66187 rules (3760 with conclusion selected). Queue: 14590 rules.
74800 rules inserted. Base: 66387 rules (3760 with conclusion selected). Queue: 14635 rules.
75000 rules inserted. Base: 66587 rules (3760 with conclusion selected). Queue: 14681 rules.
75200 rules inserted. Base: 66787 rules (3760 with conclusion selected). Queue: 14728 rules.
75400 rules inserted. Base: 66987 rules (3760 with conclusion selected). Queue: 14773 rules.
75600 rules inserted. Base: 67187 rules (3760 with conclusion selected). Queue: 14820 rules.
75800 rules inserted. Base: 67387 rules (3760 with conclusion selected). Queue: 14868 rules.
76000 rules inserted. Base: 67587 rules (3760 with conclusion selected). Queue: 14914 rules.
76200 rules inserted. Base: 67787 rules (3760 with conclusion selected). Queue: 14961 rules.
76400 rules inserted. Base: 67987 rules (3760 with conclusion selected). Queue: 15006 rules.
76600 rules inserted. Base: 68187 rules (3760 with conclusion selected). Queue: 15054 rules.
76800 rules inserted. Base: 68387 rules (3760 with conclusion selected). Queue: 15101 rules.
77000 rules inserted. Base: 68577 rules (3760 with conclusion selected). Queue: 15142 rules.
77200 rules inserted. Base: 68759 rules (3760 with conclusion selected). Queue: 15171 rules.
77400 rules inserted. Base: 68941 rules (3760 with conclusion selected). Queue: 15199 rules.
77600 rules inserted. Base: 69121 rules (3760 with conclusion selected). Queue: 15228 rules.
77800 rules inserted. Base: 69295 rules (3784 with conclusion selected). Queue: 15239 rules.
78000 rules inserted. Base: 69495 rules (3824 with conclusion selected). Queue: 15239 rules.
78200 rules inserted. Base: 69695 rules (3864 with conclusion selected). Queue: 15239 rules.
78400 rules inserted. Base: 69865 rules (3888 with conclusion selected). Queue: 15269 rules.
78600 rules inserted. Base: 69985 rules (3888 with conclusion selected). Queue: 15292 rules.
78800 rules inserted. Base: 70179 rules (3888 with conclusion selected). Queue: 15345 rules.
79000 rules inserted. Base: 70379 rules (3888 with conclusion selected). Queue: 15390 rules.
79200 rules inserted. Base: 70563 rules (3888 with conclusion selected). Queue: 15434 rules.
79400 rules inserted. Base: 70687 rules (3888 with conclusion selected). Queue: 15475 rules.
79600 rules inserted. Base: 70852 rules (3888 with conclusion selected). Queue: 15487 rules.
79800 rules inserted. Base: 71036 rules (3888 with conclusion selected). Queue: 15510 rules.
80000 rules inserted. Base: 71218 rules (3888 with conclusion selected). Queue: 15540 rules.
80200 rules inserted. Base: 71402 rules (3888 with conclusion selected). Queue: 15558 rules.
80400 rules inserted. Base: 71588 rules (3888 with conclusion selected). Queue: 15594 rules.
80600 rules inserted. Base: 71773 rules (3888 with conclusion selected). Queue: 15629 rules.
80800 rules inserted. Base: 71967 rules (3888 with conclusion selected). Queue: 15649 rules.
81000 rules inserted. Base: 72154 rules (3888 with conclusion selected). Queue: 15649 rules.
81200 rules inserted. Base: 72340 rules (3888 with conclusion selected). Queue: 15685 rules.
81400 rules inserted. Base: 72526 rules (3888 with conclusion selected). Queue: 15721 rules.
81600 rules inserted. Base: 72708 rules (3888 with conclusion selected). Queue: 15742 rules.
81800 rules inserted. Base: 72892 rules (3888 with conclusion selected). Queue: 15769 rules.
82000 rules inserted. Base: 73078 rules (3888 with conclusion selected). Queue: 15805 rules.
82200 rules inserted. Base: 73267 rules (3888 with conclusion selected). Queue: 15834 rules.
82400 rules inserted. Base: 73457 rules (3888 with conclusion selected). Queue: 15857 rules.
82600 rules inserted. Base: 73644 rules (3888 with conclusion selected). Queue: 15860 rules.
82800 rules inserted. Base: 73830 rules (3888 with conclusion selected). Queue: 15896 rules.
83000 rules inserted. Base: 74015 rules (3888 with conclusion selected). Queue: 15932 rules.
83200 rules inserted. Base: 74198 rules (3888 with conclusion selected). Queue: 15946 rules.
83400 rules inserted. Base: 74384 rules (3888 with conclusion selected). Queue: 15982 rules.
83600 rules inserted. Base: 74566 rules (3888 with conclusion selected). Queue: 16002 rules.
83800 rules inserted. Base: 74752 rules (3888 with conclusion selected). Queue: 16032 rules.
84000 rules inserted. Base: 74933 rules (3888 with conclusion selected). Queue: 16056 rules.
84200 rules inserted. Base: 75118 rules (3888 with conclusion selected). Queue: 16080 rules.
84400 rules inserted. Base: 75301 rules (3888 with conclusion selected). Queue: 16111 rules.
84600 rules inserted. Base: 75482 rules (3888 with conclusion selected). Queue: 16119 rules.
84800 rules inserted. Base: 75668 rules (3888 with conclusion selected). Queue: 16155 rules.
85000 rules inserted. Base: 75854 rules (3888 with conclusion selected). Queue: 16191 rules.
85200 rules inserted. Base: 76036 rules (3888 with conclusion selected). Queue: 16214 rules.
85400 rules inserted. Base: 76220 rules (3888 with conclusion selected). Queue: 16239 rules.
85600 rules inserted. Base: 76405 rules (3888 with conclusion selected). Queue: 16266 rules.
85800 rules inserted. Base: 76586 rules (3888 with conclusion selected). Queue: 16278 rules.
86000 rules inserted. Base: 76772 rules (3888 with conclusion selected). Queue: 16314 rules.
86200 rules inserted. Base: 76957 rules (3888 with conclusion selected). Queue: 16349 rules.
86400 rules inserted. Base: 77141 rules (3888 with conclusion selected). Queue: 16372 rules.
86600 rules inserted. Base: 77325 rules (3888 with conclusion selected). Queue: 16399 rules.
86800 rules inserted. Base: 77511 rules (3890 with conclusion selected). Queue: 16448 rules.
87000 rules inserted. Base: 77711 rules (3890 with conclusion selected). Queue: 16510 rules.
87200 rules inserted. Base: 77908 rules (3890 with conclusion selected). Queue: 16559 rules.
87400 rules inserted. Base: 78103 rules (3890 with conclusion selected). Queue: 16591 rules.
87600 rules inserted. Base: 78303 rules (3890 with conclusion selected). Queue: 16641 rules.
87800 rules inserted. Base: 78503 rules (3890 with conclusion selected). Queue: 16690 rules.
88000 rules inserted. Base: 78703 rules (3890 with conclusion selected). Queue: 16729 rules.
88200 rules inserted. Base: 78903 rules (3890 with conclusion selected). Queue: 16779 rules.
88400 rules inserted. Base: 79103 rules (3890 with conclusion selected). Queue: 16829 rules.
88600 rules inserted. Base: 79303 rules (3890 with conclusion selected). Queue: 16879 rules.
88800 rules inserted. Base: 79503 rules (3890 with conclusion selected). Queue: 16929 rules.
89000 rules inserted. Base: 79703 rules (3890 with conclusion selected). Queue: 16979 rules.
89200 rules inserted. Base: 79903 rules (3890 with conclusion selected). Queue: 17025 rules.
89400 rules inserted. Base: 80103 rules (3890 with conclusion selected). Queue: 17067 rules.
89600 rules inserted. Base: 80303 rules (3890 with conclusion selected). Queue: 17117 rules.
89800 rules inserted. Base: 80503 rules (3890 with conclusion selected). Queue: 17167 rules.
90000 rules inserted. Base: 80703 rules (3890 with conclusion selected). Queue: 17217 rules.
90200 rules inserted. Base: 80903 rules (3890 with conclusion selected). Queue: 17267 rules.
90400 rules inserted. Base: 81103 rules (3890 with conclusion selected). Queue: 17309 rules.
90600 rules inserted. Base: 81303 rules (3890 with conclusion selected). Queue: 17354 rules.
90800 rules inserted. Base: 81503 rules (3890 with conclusion selected). Queue: 17401 rules.
91000 rules inserted. Base: 81703 rules (3890 with conclusion selected). Queue: 17451 rules.
91200 rules inserted. Base: 81903 rules (3890 with conclusion selected). Queue: 17501 rules.
91400 rules inserted. Base: 82103 rules (3890 with conclusion selected). Queue: 17543 rules.
91600 rules inserted. Base: 82303 rules (3890 with conclusion selected). Queue: 17590 rules.
91800 rules inserted. Base: 82503 rules (3890 with conclusion selected). Queue: 17635 rules.
92000 rules inserted. Base: 82703 rules (3890 with conclusion selected). Queue: 17685 rules.
92200 rules inserted. Base: 82863 rules (3890 with conclusion selected). Queue: 17721 rules.
92400 rules inserted. Base: 83013 rules (3890 with conclusion selected). Queue: 17730 rules.
92600 rules inserted. Base: 83163 rules (3890 with conclusion selected). Queue: 17739 rules.
92800 rules inserted. Base: 83313 rules (3890 with conclusion selected). Queue: 17746 rules.
93000 rules inserted. Base: 83487 rules (3890 with conclusion selected). Queue: 17773 rules.
93200 rules inserted. Base: 83687 rules (3890 with conclusion selected). Queue: 17813 rules.
93400 rules inserted. Base: 83887 rules (3890 with conclusion selected). Queue: 17853 rules.
93600 rules inserted. Base: 84075 rules (3890 with conclusion selected). Queue: 17903 rules.
93800 rules inserted. Base: 84249 rules (3890 with conclusion selected). Queue: 17908 rules.
94000 rules inserted. Base: 84411 rules (3890 with conclusion selected). Queue: 17896 rules.
94200 rules inserted. Base: 84611 rules (3890 with conclusion selected). Queue: 17946 rules.
94400 rules inserted. Base: 84811 rules (3890 with conclusion selected). Queue: 17978 rules.
94600 rules inserted. Base: 85002 rules (3890 with conclusion selected). Queue: 18017 rules.
94800 rules inserted. Base: 85175 rules (3890 with conclusion selected). Queue: 18022 rules.
95000 rules inserted. Base: 85355 rules (3890 with conclusion selected). Queue: 17997 rules.
95200 rules inserted. Base: 85477 rules (3890 with conclusion selected). Queue: 17993 rules.
95400 rules inserted. Base: 85659 rules (3890 with conclusion selected). Queue: 18011 rules.
95600 rules inserted. Base: 85725 rules (3890 with conclusion selected). Queue: 17946 rules.
95800 rules inserted. Base: 85840 rules (3890 with conclusion selected). Queue: 17924 rules.
96000 rules inserted. Base: 86022 rules (3890 with conclusion selected). Queue: 17943 rules.
96200 rules inserted. Base: 86203 rules (3890 with conclusion selected). Queue: 17961 rules.
96400 rules inserted. Base: 86397 rules (3890 with conclusion selected). Queue: 17959 rules.
96600 rules inserted. Base: 86577 rules (3890 with conclusion selected). Queue: 17968 rules.
96800 rules inserted. Base: 86758 rules (3890 with conclusion selected). Queue: 17986 rules.
97000 rules inserted. Base: 86940 rules (3890 with conclusion selected). Queue: 18005 rules.
97200 rules inserted. Base: 87075 rules (3890 with conclusion selected). Queue: 17988 rules.
97400 rules inserted. Base: 87128 rules (3890 with conclusion selected). Queue: 17919 rules.
97600 rules inserted. Base: 87305 rules (3890 with conclusion selected). Queue: 17937 rules.
97800 rules inserted. Base: 87487 rules (3890 with conclusion selected). Queue: 17955 rules.
98000 rules inserted. Base: 87675 rules (3890 with conclusion selected). Queue: 17960 rules.
98200 rules inserted. Base: 87860 rules (3890 with conclusion selected). Queue: 17968 rules.
98400 rules inserted. Base: 88042 rules (3890 with conclusion selected). Queue: 17979 rules.
98600 rules inserted. Base: 88224 rules (3890 with conclusion selected). Queue: 17997 rules.
98800 rules inserted. Base: 88406 rules (3890 with conclusion selected). Queue: 18016 rules.
99000 rules inserted. Base: 88569 rules (3890 with conclusion selected). Queue: 18025 rules.
99200 rules inserted. Base: 88707 rules (3890 with conclusion selected). Queue: 18027 rules.
99400 rules inserted. Base: 88889 rules (3890 with conclusion selected). Queue: 18043 rules.
99600 rules inserted. Base: 89011 rules (3890 with conclusion selected). Queue: 18034 rules.
99800 rules inserted. Base: 89192 rules (3890 with conclusion selected). Queue: 18053 rules.
100000 rules inserted. Base: 89288 rules (3890 with conclusion selected). Queue: 18011 rules.
100200 rules inserted. Base: 89373 rules (3890 with conclusion selected). Queue: 17968 rules.
100400 rules inserted. Base: 89555 rules (3890 with conclusion selected). Queue: 17987 rules.
100600 rules inserted. Base: 89651 rules (3890 with conclusion selected). Queue: 17968 rules.
100800 rules inserted. Base: 89791 rules (3890 with conclusion selected). Queue: 17971 rules.
101000 rules inserted. Base: 89973 rules (3890 with conclusion selected). Queue: 17989 rules.
101200 rules inserted. Base: 90155 rules (3890 with conclusion selected). Queue: 18007 rules.
101400 rules inserted. Base: 90219 rules (3890 with conclusion selected). Queue: 17941 rules.
101600 rules inserted. Base: 90335 rules (3890 with conclusion selected). Queue: 17921 rules.
101800 rules inserted. Base: 90499 rules (3890 with conclusion selected). Queue: 17927 rules.
102000 rules inserted. Base: 90583 rules (3890 with conclusion selected). Queue: 17909 rules.
102200 rules inserted. Base: 90753 rules (3890 with conclusion selected). Queue: 17925 rules.
102400 rules inserted. Base: 90935 rules (3890 with conclusion selected). Queue: 17943 rules.
102600 rules inserted. Base: 91117 rules (3890 with conclusion selected). Queue: 17959 rules.
102800 rules inserted. Base: 91238 rules (3890 with conclusion selected). Queue: 17952 rules.
103000 rules inserted. Base: 91419 rules (3890 with conclusion selected). Queue: 17970 rules.
103200 rules inserted. Base: 91603 rules (3924 with conclusion selected). Queue: 18141 rules.
103400 rules inserted. Base: 91771 rules (3924 with conclusion selected). Queue: 18185 rules.
103600 rules inserted. Base: 91971 rules (3924 with conclusion selected). Queue: 18234 rules.
103800 rules inserted. Base: 92159 rules (3924 with conclusion selected). Queue: 18272 rules.
104000 rules inserted. Base: 92359 rules (3924 with conclusion selected). Queue: 18312 rules.
104200 rules inserted. Base: 92559 rules (3924 with conclusion selected). Queue: 18352 rules.
104400 rules inserted. Base: 92759 rules (3924 with conclusion selected). Queue: 18392 rules.
104600 rules inserted. Base: 92959 rules (3924 with conclusion selected). Queue: 18439 rules.
104800 rules inserted. Base: 93159 rules (3924 with conclusion selected). Queue: 18478 rules.
105000 rules inserted. Base: 93359 rules (3924 with conclusion selected). Queue: 18518 rules.
105200 rules inserted. Base: 93559 rules (3924 with conclusion selected). Queue: 18558 rules.
105400 rules inserted. Base: 93759 rules (3924 with conclusion selected). Queue: 18598 rules.
105600 rules inserted. Base: 93959 rules (3924 with conclusion selected). Queue: 18638 rules.
105800 rules inserted. Base: 94159 rules (3924 with conclusion selected). Queue: 18678 rules.
106000 rules inserted. Base: 94359 rules (3924 with conclusion selected). Queue: 18718 rules.
106200 rules inserted. Base: 94559 rules (3924 with conclusion selected). Queue: 18764 rules.
106400 rules inserted. Base: 94759 rules (3924 with conclusion selected). Queue: 18804 rules.
106600 rules inserted. Base: 94959 rules (3924 with conclusion selected). Queue: 18844 rules.
106800 rules inserted. Base: 95159 rules (3924 with conclusion selected). Queue: 18884 rules.
107000 rules inserted. Base: 95359 rules (3924 with conclusion selected). Queue: 18924 rules.
107200 rules inserted. Base: 95559 rules (3924 with conclusion selected). Queue: 18964 rules.
107400 rules inserted. Base: 95759 rules (3924 with conclusion selected). Queue: 19004 rules.
107600 rules inserted. Base: 95959 rules (3924 with conclusion selected). Queue: 19054 rules.
107800 rules inserted. Base: 96159 rules (3924 with conclusion selected). Queue: 19092 rules.
108000 rules inserted. Base: 96359 rules (3924 with conclusion selected). Queue: 19128 rules.
108200 rules inserted. Base: 96559 rules (3924 with conclusion selected). Queue: 19168 rules.
108400 rules inserted. Base: 96759 rules (3924 with conclusion selected). Queue: 19208 rules.
108600 rules inserted. Base: 96959 rules (3924 with conclusion selected). Queue: 19248 rules.
108800 rules inserted. Base: 97159 rules (3924 with conclusion selected). Queue: 19290 rules.
109000 rules inserted. Base: 97359 rules (3924 with conclusion selected). Queue: 19336 rules.
109200 rules inserted. Base: 97559 rules (3924 with conclusion selected). Queue: 19372 rules.
109400 rules inserted. Base: 97759 rules (3924 with conclusion selected). Queue: 19411 rules.
109600 rules inserted. Base: 97959 rules (3924 with conclusion selected). Queue: 19451 rules.
109800 rules inserted. Base: 98146 rules (3924 with conclusion selected). Queue: 19491 rules.
110000 rules inserted. Base: 98339 rules (3924 with conclusion selected). Queue: 19523 rules.
110200 rules inserted. Base: 98530 rules (3924 with conclusion selected). Queue: 19555 rules.
110400 rules inserted. Base: 98723 rules (3924 with conclusion selected). Queue: 19587 rules.
110600 rules inserted. Base: 98909 rules (3924 with conclusion selected). Queue: 19624 rules.
110800 rules inserted. Base: 99040 rules (3924 with conclusion selected). Queue: 19632 rules.
111000 rules inserted. Base: 99173 rules (3924 with conclusion selected). Queue: 19633 rules.
111200 rules inserted. Base: 99307 rules (3924 with conclusion selected). Queue: 19632 rules.
111400 rules inserted. Base: 99437 rules (3924 with conclusion selected). Queue: 19636 rules.
111600 rules inserted. Base: 99585 rules (3924 with conclusion selected). Queue: 19610 rules.
111800 rules inserted. Base: 99767 rules (3924 with conclusion selected). Queue: 19565 rules.
112000 rules inserted. Base: 99967 rules (3924 with conclusion selected). Queue: 19606 rules.
112200 rules inserted. Base: 100156 rules (3924 with conclusion selected). Queue: 19642 rules.
112400 rules inserted. Base: 100342 rules (3924 with conclusion selected). Queue: 19676 rules.
112600 rules inserted. Base: 100508 rules (3924 with conclusion selected). Queue: 19674 rules.
112800 rules inserted. Base: 100669 rules (3924 with conclusion selected). Queue: 19608 rules.
113000 rules inserted. Base: 100749 rules (3924 with conclusion selected). Queue: 19577 rules.
113200 rules inserted. Base: 100826 rules (3924 with conclusion selected). Queue: 19562 rules.
113400 rules inserted. Base: 100925 rules (3924 with conclusion selected). Queue: 19523 rules.
113600 rules inserted. Base: 101033 rules (3924 with conclusion selected). Queue: 19454 rules.
113800 rules inserted. Base: 101081 rules (3924 with conclusion selected). Queue: 19403 rules.
114000 rules inserted. Base: 101162 rules (3924 with conclusion selected). Queue: 19395 rules.
114200 rules inserted. Base: 101307 rules (3924 with conclusion selected). Queue: 19283 rules.
114400 rules inserted. Base: 101389 rules (3924 with conclusion selected). Queue: 19264 rules.
114600 rules inserted. Base: 101467 rules (3924 with conclusion selected). Queue: 19247 rules.
114800 rules inserted. Base: 101551 rules (3924 with conclusion selected). Queue: 19241 rules.
115000 rules inserted. Base: 101625 rules (3924 with conclusion selected). Queue: 19225 rules.
115200 rules inserted. Base: 101749 rules (3924 with conclusion selected). Queue: 19154 rules.
115400 rules inserted. Base: 101811 rules (3924 with conclusion selected). Queue: 19099 rules.
115600 rules inserted. Base: 101883 rules (3924 with conclusion selected). Queue: 19069 rules.
115800 rules inserted. Base: 101957 rules (3924 with conclusion selected). Queue: 19053 rules.
116000 rules inserted. Base: 102109 rules (3924 with conclusion selected). Queue: 18943 rules.
116200 rules inserted. Base: 102186 rules (3924 with conclusion selected). Queue: 18922 rules.
116400 rules inserted. Base: 102269 rules (3924 with conclusion selected). Queue: 18911 rules.
116600 rules inserted. Base: 102341 rules (3924 with conclusion selected). Queue: 18900 rules.
116800 rules inserted. Base: 102425 rules (3924 with conclusion selected). Queue: 18888 rules.
117000 rules inserted. Base: 102505 rules (3924 with conclusion selected). Queue: 18855 rules.
117200 rules inserted. Base: 102586 rules (3924 with conclusion selected). Queue: 18847 rules.
117400 rules inserted. Base: 102667 rules (3924 with conclusion selected). Queue: 18825 rules.
117600 rules inserted. Base: 102745 rules (3924 with conclusion selected). Queue: 18800 rules.
117800 rules inserted. Base: 102829 rules (3924 with conclusion selected). Queue: 18791 rules.
118000 rules inserted. Base: 102949 rules (3924 with conclusion selected). Queue: 18715 rules.
118200 rules inserted. Base: 103035 rules (3924 with conclusion selected). Queue: 18699 rules.
118400 rules inserted. Base: 103117 rules (3924 with conclusion selected). Queue: 18646 rules.
118600 rules inserted. Base: 103201 rules (3924 with conclusion selected). Queue: 18612 rules.
118800 rules inserted. Base: 103285 rules (3924 with conclusion selected). Queue: 18603 rules.
119000 rules inserted. Base: 103357 rules (3924 with conclusion selected). Queue: 18589 rules.
119200 rules inserted. Base: 103461 rules (3924 with conclusion selected). Queue: 18544 rules.
119400 rules inserted. Base: 103566 rules (3924 with conclusion selected). Queue: 18498 rules.
119600 rules inserted. Base: 103641 rules (3924 with conclusion selected). Queue: 18483 rules.
119800 rules inserted. Base: 103737 rules (3924 with conclusion selected). Queue: 18418 rules.
120000 rules inserted. Base: 103813 rules (3924 with conclusion selected). Queue: 18401 rules.
120200 rules inserted. Base: 103897 rules (3924 with conclusion selected). Queue: 18395 rules.
120400 rules inserted. Base: 103971 rules (3924 with conclusion selected). Queue: 18379 rules.
120600 rules inserted. Base: 104051 rules (3924 with conclusion selected). Queue: 18356 rules.
120800 rules inserted. Base: 104137 rules (3924 with conclusion selected). Queue: 18335 rules.
121000 rules inserted. Base: 104217 rules (3924 with conclusion selected). Queue: 18350 rules.
121200 rules inserted. Base: 104385 rules (3936 with conclusion selected). Queue: 18275 rules.
121400 rules inserted. Base: 104585 rules (3940 with conclusion selected). Queue: 18268 rules.
121600 rules inserted. Base: 104785 rules (3940 with conclusion selected). Queue: 18312 rules.
121800 rules inserted. Base: 104985 rules (3940 with conclusion selected). Queue: 18362 rules.
122000 rules inserted. Base: 105117 rules (3940 with conclusion selected). Queue: 18408 rules.
122200 rules inserted. Base: 105317 rules (3940 with conclusion selected). Queue: 18442 rules.
122400 rules inserted. Base: 105517 rules (3940 with conclusion selected). Queue: 18476 rules.
122600 rules inserted. Base: 105717 rules (3940 with conclusion selected). Queue: 18508 rules.
122800 rules inserted. Base: 105917 rules (3940 with conclusion selected). Queue: 18542 rules.
123000 rules inserted. Base: 106117 rules (3940 with conclusion selected). Queue: 18584 rules.
123200 rules inserted. Base: 106317 rules (3940 with conclusion selected). Queue: 18618 rules.
123400 rules inserted. Base: 106517 rules (3940 with conclusion selected). Queue: 18652 rules.
123600 rules inserted. Base: 106717 rules (3940 with conclusion selected). Queue: 18684 rules.
123800 rules inserted. Base: 106917 rules (3940 with conclusion selected). Queue: 18718 rules.
124000 rules inserted. Base: 107117 rules (3940 with conclusion selected). Queue: 18752 rules.
124200 rules inserted. Base: 107317 rules (3940 with conclusion selected). Queue: 18784 rules.
124400 rules inserted. Base: 107517 rules (3940 with conclusion selected). Queue: 18818 rules.
124600 rules inserted. Base: 107717 rules (3940 with conclusion selected). Queue: 18852 rules.
124800 rules inserted. Base: 107917 rules (3940 with conclusion selected). Queue: 18884 rules.
125000 rules inserted. Base: 108117 rules (3940 with conclusion selected). Queue: 18926 rules.
125200 rules inserted. Base: 108317 rules (3940 with conclusion selected). Queue: 18960 rules.
125400 rules inserted. Base: 108517 rules (3940 with conclusion selected). Queue: 18994 rules.
125600 rules inserted. Base: 108717 rules (3940 with conclusion selected). Queue: 19028 rules.
125800 rules inserted. Base: 108917 rules (3940 with conclusion selected). Queue: 19060 rules.
126000 rules inserted. Base: 109117 rules (3940 with conclusion selected). Queue: 19094 rules.
126200 rules inserted. Base: 109317 rules (3940 with conclusion selected). Queue: 19128 rules.
126400 rules inserted. Base: 109517 rules (3940 with conclusion selected). Queue: 19160 rules.
126600 rules inserted. Base: 109717 rules (3940 with conclusion selected). Queue: 19194 rules.
126800 rules inserted. Base: 109912 rules (3940 with conclusion selected). Queue: 19228 rules.
127000 rules inserted. Base: 110101 rules (3940 with conclusion selected). Queue: 19264 rules.
127200 rules inserted. Base: 110301 rules (3940 with conclusion selected). Queue: 19296 rules.
127400 rules inserted. Base: 110501 rules (3940 with conclusion selected). Queue: 19330 rules.
127600 rules inserted. Base: 110701 rules (3940 with conclusion selected). Queue: 19364 rules.
127800 rules inserted. Base: 110901 rules (3940 with conclusion selected). Queue: 19396 rules.
128000 rules inserted. Base: 111101 rules (3940 with conclusion selected). Queue: 19430 rules.
128200 rules inserted. Base: 111301 rules (3940 with conclusion selected). Queue: 19464 rules.
128400 rules inserted. Base: 111494 rules (3940 with conclusion selected). Queue: 19498 rules.
128600 rules inserted. Base: 111685 rules (3940 with conclusion selected). Queue: 19532 rules.
128800 rules inserted. Base: 111885 rules (3940 with conclusion selected). Queue: 19566 rules.
129000 rules inserted. Base: 112085 rules (3940 with conclusion selected). Queue: 19600 rules.
129200 rules inserted. Base: 112256 rules (3940 with conclusion selected). Queue: 19626 rules.
129400 rules inserted. Base: 112398 rules (3940 with conclusion selected). Queue: 19659 rules.
129600 rules inserted. Base: 112531 rules (3940 with conclusion selected). Queue: 19695 rules.
129800 rules inserted. Base: 112673 rules (3940 with conclusion selected). Queue: 19729 rules.
130000 rules inserted. Base: 112810 rules (3940 with conclusion selected). Queue: 19763 rules.
130200 rules inserted. Base: 112965 rules (3940 with conclusion selected). Queue: 19801 rules.
130400 rules inserted. Base: 113165 rules (3940 with conclusion selected). Queue: 19834 rules.
130600 rules inserted. Base: 113365 rules (3940 with conclusion selected). Queue: 19868 rules.
130800 rules inserted. Base: 113565 rules (3940 with conclusion selected). Queue: 19901 rules.
131000 rules inserted. Base: 113717 rules (3940 with conclusion selected). Queue: 19923 rules.
131200 rules inserted. Base: 113849 rules (3940 with conclusion selected). Queue: 19898 rules.
131400 rules inserted. Base: 114049 rules (3940 with conclusion selected). Queue: 19962 rules.
131600 rules inserted. Base: 114245 rules (3940 with conclusion selected). Queue: 20004 rules.
131800 rules inserted. Base: 114428 rules (3940 with conclusion selected). Queue: 20021 rules.
132000 rules inserted. Base: 114610 rules (3940 with conclusion selected). Queue: 20040 rules.
132200 rules inserted. Base: 114768 rules (3940 with conclusion selected). Queue: 19990 rules.
132400 rules inserted. Base: 114875 rules (3940 with conclusion selected). Queue: 19885 rules.
132600 rules inserted. Base: 115011 rules (3940 with conclusion selected). Queue: 19789 rules.
132800 rules inserted. Base: 115129 rules (3940 with conclusion selected). Queue: 19678 rules.
133000 rules inserted. Base: 115281 rules (3940 with conclusion selected). Queue: 19593 rules.
133200 rules inserted. Base: 115403 rules (3940 with conclusion selected). Queue: 19477 rules.
133400 rules inserted. Base: 115511 rules (3940 with conclusion selected). Queue: 19368 rules.
133600 rules inserted. Base: 115603 rules (3940 with conclusion selected). Queue: 19304 rules.
133800 rules inserted. Base: 115707 rules (3940 with conclusion selected). Queue: 19190 rules.
134000 rules inserted. Base: 115813 rules (3940 with conclusion selected). Queue: 19072 rules.
134200 rules inserted. Base: 115934 rules (3940 with conclusion selected). Queue: 18966 rules.
134400 rules inserted. Base: 116083 rules (3940 with conclusion selected). Queue: 18875 rules.
134600 rules inserted. Base: 116205 rules (3940 with conclusion selected). Queue: 18760 rules.
134800 rules inserted. Base: 116313 rules (3940 with conclusion selected). Queue: 18650 rules.
135000 rules inserted. Base: 116403 rules (3940 with conclusion selected). Queue: 18589 rules.
135200 rules inserted. Base: 116507 rules (3940 with conclusion selected). Queue: 18471 rules.
135400 rules inserted. Base: 116611 rules (3940 with conclusion selected). Queue: 18355 rules.
135600 rules inserted. Base: 116715 rules (3940 with conclusion selected). Queue: 18242 rules.
135800 rules inserted. Base: 116849 rules (3940 with conclusion selected). Queue: 18156 rules.
136000 rules inserted. Base: 116957 rules (3940 with conclusion selected). Queue: 18038 rules.
136200 rules inserted. Base: 117072 rules (3940 with conclusion selected). Queue: 17950 rules.
136400 rules inserted. Base: 117187 rules (3940 with conclusion selected). Queue: 17841 rules.
136600 rules inserted. Base: 117327 rules (3940 with conclusion selected). Queue: 17749 rules.
136800 rules inserted. Base: 117441 rules (3940 with conclusion selected). Queue: 17638 rules.
137000 rules inserted. Base: 117580 rules (3940 with conclusion selected). Queue: 17528 rules.
137200 rules inserted. Base: 117699 rules (3940 with conclusion selected). Queue: 17423 rules.
137400 rules inserted. Base: 117807 rules (3940 with conclusion selected). Queue: 17305 rules.
137600 rules inserted. Base: 117915 rules (3940 with conclusion selected). Queue: 17189 rules.
137800 rules inserted. Base: 118051 rules (3940 with conclusion selected). Queue: 17105 rules.
138000 rules inserted. Base: 118169 rules (3940 with conclusion selected). Queue: 16985 rules.
138200 rules inserted. Base: 118315 rules (3940 with conclusion selected). Queue: 16887 rules.
138400 rules inserted. Base: 118419 rules (3940 with conclusion selected). Queue: 16771 rules.
138600 rules inserted. Base: 118525 rules (3940 with conclusion selected). Queue: 16654 rules.
138800 rules inserted. Base: 118627 rules (3940 with conclusion selected). Queue: 16550 rules.
139000 rules inserted. Base: 118765 rules (3940 with conclusion selected). Queue: 16454 rules.
139200 rules inserted. Base: 118872 rules (3940 with conclusion selected). Queue: 16375 rules.
139400 rules inserted. Base: 119029 rules (3940 with conclusion selected). Queue: 16449 rules.
139600 rules inserted. Base: 119229 rules (3940 with conclusion selected). Queue: 16517 rules.
139800 rules inserted. Base: 119429 rules (3940 with conclusion selected). Queue: 16563 rules.
140000 rules inserted. Base: 119629 rules (3940 with conclusion selected). Queue: 16603 rules.
140200 rules inserted. Base: 119793 rules (3940 with conclusion selected). Queue: 16671 rules.
140400 rules inserted. Base: 119960 rules (3940 with conclusion selected). Queue: 16721 rules.
140600 rules inserted. Base: 120146 rules (3940 with conclusion selected). Queue: 16758 rules.
140800 rules inserted. Base: 120332 rules (3940 with conclusion selected). Queue: 16794 rules.
141000 rules inserted. Base: 120518 rules (3940 with conclusion selected). Queue: 16829 rules.
141200 rules inserted. Base: 120704 rules (3940 with conclusion selected). Queue: 16864 rules.
141400 rules inserted. Base: 120891 rules (3940 with conclusion selected). Queue: 16899 rules.
141600 rules inserted. Base: 121084 rules (3940 with conclusion selected). Queue: 16924 rules.
141800 rules inserted. Base: 121268 rules (3940 with conclusion selected). Queue: 16959 rules.
142000 rules inserted. Base: 121454 rules (3940 with conclusion selected). Queue: 16996 rules.
142200 rules inserted. Base: 121640 rules (3940 with conclusion selected). Queue: 17032 rules.
142400 rules inserted. Base: 121826 rules (3940 with conclusion selected). Queue: 17067 rules.
142600 rules inserted. Base: 122012 rules (3940 with conclusion selected). Queue: 17102 rules.
142800 rules inserted. Base: 122198 rules (3940 with conclusion selected). Queue: 17138 rules.
143000 rules inserted. Base: 122384 rules (3940 with conclusion selected). Queue: 17174 rules.
143200 rules inserted. Base: 122568 rules (3940 with conclusion selected). Queue: 17209 rules.
143400 rules inserted. Base: 122754 rules (3940 with conclusion selected). Queue: 17246 rules.
143600 rules inserted. Base: 122940 rules (3940 with conclusion selected). Queue: 17282 rules.
143800 rules inserted. Base: 123131 rules (3940 with conclusion selected). Queue: 17310 rules.
144000 rules inserted. Base: 123320 rules (3940 with conclusion selected). Queue: 17340 rules.
144200 rules inserted. Base: 123506 rules (3940 with conclusion selected). Queue: 17376 rules.
144400 rules inserted. Base: 123692 rules (3940 with conclusion selected). Queue: 17412 rules.
144600 rules inserted. Base: 123876 rules (3940 with conclusion selected). Queue: 17447 rules.
144800 rules inserted. Base: 124062 rules (3940 with conclusion selected). Queue: 17484 rules.
145000 rules inserted. Base: 124248 rules (3940 with conclusion selected). Queue: 17520 rules.
145200 rules inserted. Base: 124434 rules (3940 with conclusion selected). Queue: 17555 rules.
145400 rules inserted. Base: 124620 rules (3940 with conclusion selected). Queue: 17590 rules.
145600 rules inserted. Base: 124806 rules (3940 with conclusion selected). Queue: 17626 rules.
145800 rules inserted. Base: 124992 rules (3940 with conclusion selected). Queue: 17662 rules.
146000 rules inserted. Base: 125173 rules (3940 with conclusion selected). Queue: 17686 rules.
146200 rules inserted. Base: 125358 rules (3940 with conclusion selected). Queue: 17710 rules.
146400 rules inserted. Base: 125544 rules (3940 with conclusion selected). Queue: 17746 rules.
146600 rules inserted. Base: 125728 rules (3940 with conclusion selected). Queue: 17781 rules.
146800 rules inserted. Base: 125914 rules (3940 with conclusion selected). Queue: 17818 rules.
147000 rules inserted. Base: 126100 rules (3940 with conclusion selected). Queue: 17854 rules.
147200 rules inserted. Base: 126286 rules (3940 with conclusion selected). Queue: 17889 rules.
147400 rules inserted. Base: 126472 rules (3940 with conclusion selected). Queue: 17924 rules.
147600 rules inserted. Base: 126658 rules (3940 with conclusion selected). Queue: 17960 rules.
147800 rules inserted. Base: 126839 rules (3940 with conclusion selected). Queue: 17987 rules.
148000 rules inserted. Base: 127024 rules (3940 with conclusion selected). Queue: 18008 rules.
148200 rules inserted. Base: 127210 rules (3940 with conclusion selected). Queue: 18044 rules.
148400 rules inserted. Base: 127396 rules (3940 with conclusion selected). Queue: 18080 rules.
148600 rules inserted. Base: 127580 rules (3940 with conclusion selected). Queue: 18115 rules.
148800 rules inserted. Base: 127693 rules (3940 with conclusion selected). Queue: 18155 rules.
149000 rules inserted. Base: 127773 rules (3940 with conclusion selected). Queue: 18219 rules.
149200 rules inserted. Base: 127859 rules (3940 with conclusion selected). Queue: 18285 rules.
149400 rules inserted. Base: 127935 rules (3940 with conclusion selected). Queue: 18348 rules.
149600 rules inserted. Base: 128021 rules (3940 with conclusion selected). Queue: 18413 rules.
149800 rules inserted. Base: 128112 rules (3940 with conclusion selected). Queue: 18474 rules.
150000 rules inserted. Base: 128277 rules (3940 with conclusion selected). Queue: 18499 rules.
150200 rules inserted. Base: 128448 rules (3940 with conclusion selected). Queue: 18527 rules.
150400 rules inserted. Base: 128620 rules (3940 with conclusion selected). Queue: 18556 rules.
150600 rules inserted. Base: 128791 rules (3940 with conclusion selected). Queue: 18585 rules.
150800 rules inserted. Base: 128920 rules (3940 with conclusion selected). Queue: 18607 rules.
151000 rules inserted. Base: 128974 rules (3940 with conclusion selected). Queue: 18604 rules.
151200 rules inserted. Base: 129174 rules (3940 with conclusion selected). Queue: 18659 rules.
151400 rules inserted. Base: 129374 rules (3940 with conclusion selected). Queue: 18698 rules.
151600 rules inserted. Base: 129509 rules (3940 with conclusion selected). Queue: 18708 rules.
151800 rules inserted. Base: 129594 rules (3940 with conclusion selected). Queue: 18697 rules.
152000 rules inserted. Base: 129680 rules (3940 with conclusion selected). Queue: 18690 rules.
152200 rules inserted. Base: 129787 rules (3940 with conclusion selected). Queue: 18643 rules.
152400 rules inserted. Base: 129967 rules (3940 with conclusion selected). Queue: 18548 rules.
152600 rules inserted. Base: 130148 rules (3940 with conclusion selected). Queue: 18466 rules.
152800 rules inserted. Base: 130320 rules (3940 with conclusion selected). Queue: 18334 rules.
153000 rules inserted. Base: 130491 rules (3940 with conclusion selected). Queue: 18187 rules.
153200 rules inserted. Base: 130672 rules (3940 with conclusion selected). Queue: 18102 rules.
153400 rules inserted. Base: 130842 rules (3940 with conclusion selected). Queue: 17950 rules.
153600 rules inserted. Base: 131013 rules (3940 with conclusion selected). Queue: 17833 rules.
153800 rules inserted. Base: 131181 rules (3940 with conclusion selected). Queue: 17674 rules.
154000 rules inserted. Base: 131361 rules (3940 with conclusion selected). Queue: 17576 rules.
154200 rules inserted. Base: 131539 rules (3940 with conclusion selected). Queue: 17483 rules.
154400 rules inserted. Base: 131721 rules (3940 with conclusion selected). Queue: 17389 rules.
154600 rules inserted. Base: 131901 rules (3940 with conclusion selected). Queue: 17301 rules.
154800 rules inserted. Base: 132083 rules (3940 with conclusion selected). Queue: 17207 rules.
155000 rules inserted. Base: 132263 rules (3940 with conclusion selected). Queue: 17119 rules.
155200 rules inserted. Base: 132435 rules (3940 with conclusion selected). Queue: 16947 rules.
155400 rules inserted. Base: 132612 rules (3940 with conclusion selected). Queue: 16858 rules.
155600 rules inserted. Base: 132775 rules (3940 with conclusion selected). Queue: 16888 rules.
155800 rules inserted. Base: 132930 rules (3940 with conclusion selected). Queue: 16982 rules.
156000 rules inserted. Base: 133130 rules (3940 with conclusion selected). Queue: 17035 rules.
156200 rules inserted. Base: 133330 rules (3940 with conclusion selected). Queue: 17073 rules.
156400 rules inserted. Base: 133530 rules (3940 with conclusion selected). Queue: 17109 rules.
156600 rules inserted. Base: 133730 rules (3940 with conclusion selected). Queue: 17143 rules.
156800 rules inserted. Base: 133905 rules (3940 with conclusion selected). Queue: 17223 rules.
157000 rules inserted. Base: 134081 rules (3940 with conclusion selected). Queue: 17291 rules.
157200 rules inserted. Base: 134263 rules (3940 with conclusion selected). Queue: 17309 rules.
157400 rules inserted. Base: 134445 rules (3940 with conclusion selected). Queue: 17327 rules.
157600 rules inserted. Base: 134627 rules (3940 with conclusion selected). Queue: 17345 rules.
157800 rules inserted. Base: 134809 rules (3940 with conclusion selected). Queue: 17363 rules.
158000 rules inserted. Base: 134991 rules (3940 with conclusion selected). Queue: 17381 rules.
158200 rules inserted. Base: 135173 rules (3940 with conclusion selected). Queue: 17398 rules.
158400 rules inserted. Base: 135364 rules (3940 with conclusion selected). Queue: 17399 rules.
158600 rules inserted. Base: 135546 rules (3940 with conclusion selected). Queue: 17417 rules.
158800 rules inserted. Base: 135728 rules (3940 with conclusion selected). Queue: 17436 rules.
159000 rules inserted. Base: 135910 rules (3940 with conclusion selected). Queue: 17454 rules.
159200 rules inserted. Base: 136092 rules (3940 with conclusion selected). Queue: 17472 rules.
159400 rules inserted. Base: 136274 rules (3940 with conclusion selected). Queue: 17490 rules.
159600 rules inserted. Base: 136456 rules (3940 with conclusion selected). Queue: 17508 rules.
159800 rules inserted. Base: 136638 rules (3940 with conclusion selected). Queue: 17526 rules.
160000 rules inserted. Base: 136820 rules (3940 with conclusion selected). Queue: 17544 rules.
160200 rules inserted. Base: 137002 rules (3940 with conclusion selected). Queue: 17561 rules.
160400 rules inserted. Base: 137184 rules (3940 with conclusion selected). Queue: 17579 rules.
160600 rules inserted. Base: 137366 rules (3940 with conclusion selected). Queue: 17598 rules.
160800 rules inserted. Base: 137547 rules (3940 with conclusion selected). Queue: 17616 rules.
161000 rules inserted. Base: 137733 rules (3940 with conclusion selected). Queue: 17626 rules.
161200 rules inserted. Base: 137921 rules (3940 with conclusion selected). Queue: 17635 rules.
161400 rules inserted. Base: 138103 rules (3940 with conclusion selected). Queue: 17653 rules.
161600 rules inserted. Base: 138285 rules (3940 with conclusion selected). Queue: 17671 rules.
161800 rules inserted. Base: 138467 rules (3940 with conclusion selected). Queue: 17689 rules.
162000 rules inserted. Base: 138649 rules (3940 with conclusion selected). Queue: 17707 rules.
162200 rules inserted. Base: 138831 rules (3940 with conclusion selected). Queue: 17725 rules.
162400 rules inserted. Base: 139013 rules (3940 with conclusion selected). Queue: 17742 rules.
162600 rules inserted. Base: 139195 rules (3940 with conclusion selected). Queue: 17760 rules.
162800 rules inserted. Base: 139376 rules (3940 with conclusion selected). Queue: 17779 rules.
163000 rules inserted. Base: 139558 rules (3940 with conclusion selected). Queue: 17798 rules.
163200 rules inserted. Base: 139739 rules (3940 with conclusion selected). Queue: 17816 rules.
163400 rules inserted. Base: 139921 rules (3940 with conclusion selected). Queue: 17834 rules.
163600 rules inserted. Base: 140013 rules (3940 with conclusion selected). Queue: 17790 rules.
163800 rules inserted. Base: 140103 rules (3940 with conclusion selected). Queue: 17749 rules.
164000 rules inserted. Base: 140285 rules (3940 with conclusion selected). Queue: 17767 rules.
164200 rules inserted. Base: 140467 rules (3940 with conclusion selected). Queue: 17785 rules.
164400 rules inserted. Base: 140649 rules (3940 with conclusion selected). Queue: 17803 rules.
164600 rules inserted. Base: 140831 rules (3940 with conclusion selected). Queue: 17821 rules.
164800 rules inserted. Base: 141013 rules (3940 with conclusion selected). Queue: 17838 rules.
165000 rules inserted. Base: 141195 rules (3940 with conclusion selected). Queue: 17856 rules.
165200 rules inserted. Base: 141376 rules (3940 with conclusion selected). Queue: 17875 rules.
165400 rules inserted. Base: 141557 rules (3940 with conclusion selected). Queue: 17893 rules.
165600 rules inserted. Base: 141739 rules (3940 with conclusion selected). Queue: 17908 rules.
165800 rules inserted. Base: 141796 rules (3940 with conclusion selected). Queue: 17841 rules.
166000 rules inserted. Base: 141921 rules (3940 with conclusion selected). Queue: 17827 rules.
166200 rules inserted. Base: 142103 rules (3940 with conclusion selected). Queue: 17845 rules.
166400 rules inserted. Base: 142285 rules (3940 with conclusion selected). Queue: 17863 rules.
166600 rules inserted. Base: 142467 rules (3940 with conclusion selected). Queue: 17881 rules.
166800 rules inserted. Base: 142620 rules (3940 with conclusion selected). Queue: 17899 rules.
167000 rules inserted. Base: 142772 rules (3940 with conclusion selected). Queue: 17974 rules.
167200 rules inserted. Base: 142921 rules (3940 with conclusion selected). Queue: 18037 rules.
167400 rules inserted. Base: 143072 rules (3940 with conclusion selected). Queue: 18099 rules.
167600 rules inserted. Base: 143224 rules (3940 with conclusion selected). Queue: 18169 rules.
167800 rules inserted. Base: 143376 rules (3940 with conclusion selected). Queue: 18239 rules.
168000 rules inserted. Base: 143525 rules (3940 with conclusion selected). Queue: 18302 rules.
168200 rules inserted. Base: 143674 rules (3940 with conclusion selected). Queue: 18354 rules.
168400 rules inserted. Base: 143735 rules (3940 with conclusion selected). Queue: 18398 rules.
168600 rules inserted. Base: 143785 rules (3940 with conclusion selected). Queue: 18448 rules.
168800 rules inserted. Base: 143835 rules (3940 with conclusion selected). Queue: 18498 rules.
169000 rules inserted. Base: 143885 rules (3940 with conclusion selected). Queue: 18548 rules.
169200 rules inserted. Base: 143935 rules (3940 with conclusion selected). Queue: 18598 rules.
169400 rules inserted. Base: 143927 rules (3940 with conclusion selected). Queue: 18575 rules.
169600 rules inserted. Base: 144004 rules (3940 with conclusion selected). Queue: 18574 rules.
169800 rules inserted. Base: 144204 rules (3940 with conclusion selected). Queue: 18615 rules.
170000 rules inserted. Base: 144404 rules (3940 with conclusion selected). Queue: 18647 rules.
170200 rules inserted. Base: 144566 rules (3940 with conclusion selected). Queue: 18619 rules.
170400 rules inserted. Base: 144676 rules (3940 with conclusion selected). Queue: 18503 rules.
170600 rules inserted. Base: 144780 rules (3940 with conclusion selected). Queue: 18392 rules.
170800 rules inserted. Base: 144884 rules (3940 with conclusion selected). Queue: 18340 rules.
171000 rules inserted. Base: 145072 rules (3940 with conclusion selected). Queue: 18337 rules.
171200 rules inserted. Base: 145268 rules (3940 with conclusion selected). Queue: 18355 rules.
171400 rules inserted. Base: 145453 rules (3940 with conclusion selected). Queue: 18343 rules.
171600 rules inserted. Base: 145642 rules (3940 with conclusion selected). Queue: 18344 rules.
171800 rules inserted. Base: 145838 rules (3940 with conclusion selected). Queue: 18333 rules.
172000 rules inserted. Base: 146032 rules (3940 with conclusion selected). Queue: 18348 rules.
172200 rules inserted. Base: 146199 rules (3940 with conclusion selected). Queue: 18337 rules.
172400 rules inserted. Base: 146341 rules (3940 with conclusion selected). Queue: 18367 rules.
172600 rules inserted. Base: 146511 rules (3940 with conclusion selected). Queue: 18368 rules.
172800 rules inserted. Base: 146711 rules (3940 with conclusion selected). Queue: 18409 rules.
173000 rules inserted. Base: 146911 rules (3940 with conclusion selected). Queue: 18443 rules.
173200 rules inserted. Base: 147111 rules (3940 with conclusion selected). Queue: 18475 rules.
173400 rules inserted. Base: 147298 rules (3940 with conclusion selected). Queue: 18511 rules.
173600 rules inserted. Base: 147484 rules (3940 with conclusion selected). Queue: 18547 rules.
173800 rules inserted. Base: 147649 rules (3940 with conclusion selected). Queue: 18561 rules.
174000 rules inserted. Base: 147799 rules (3940 with conclusion selected). Queue: 18560 rules.
174200 rules inserted. Base: 147873 rules (3940 with conclusion selected). Queue: 18546 rules.
174400 rules inserted. Base: 147945 rules (3940 with conclusion selected). Queue: 18499 rules.
174600 rules inserted. Base: 147997 rules (3940 with conclusion selected). Queue: 18444 rules.
174800 rules inserted. Base: 148074 rules (3940 with conclusion selected). Queue: 18434 rules.
175000 rules inserted. Base: 148139 rules (3940 with conclusion selected). Queue: 18391 rules.
175200 rules inserted. Base: 148196 rules (3940 with conclusion selected). Queue: 18355 rules.
175400 rules inserted. Base: 148279 rules (3940 with conclusion selected). Queue: 18345 rules.
175600 rules inserted. Base: 148420 rules (3940 with conclusion selected). Queue: 18235 rules.
175800 rules inserted. Base: 148503 rules (3940 with conclusion selected). Queue: 18225 rules.
176000 rules inserted. Base: 148577 rules (3940 with conclusion selected). Queue: 18212 rules.
176200 rules inserted. Base: 148659 rules (3940 with conclusion selected). Queue: 18204 rules.
176400 rules inserted. Base: 148733 rules (3940 with conclusion selected). Queue: 18190 rules.
176600 rules inserted. Base: 148817 rules (3940 with conclusion selected). Queue: 18183 rules.
176800 rules inserted. Base: 148889 rules (3940 with conclusion selected). Queue: 18168 rules.
177000 rules inserted. Base: 148966 rules (3940 with conclusion selected). Queue: 18158 rules.
177200 rules inserted. Base: 149047 rules (3940 with conclusion selected). Queue: 18146 rules.
177400 rules inserted. Base: 149104 rules (3940 with conclusion selected). Queue: 18095 rules.
177600 rules inserted. Base: 149171 rules (3940 with conclusion selected). Queue: 18045 rules.
177800 rules inserted. Base: 149245 rules (3940 with conclusion selected). Queue: 18032 rules.
178000 rules inserted. Base: 149311 rules (3940 with conclusion selected). Queue: 17991 rules.
178200 rules inserted. Base: 149369 rules (3940 with conclusion selected). Queue: 17954 rules.
178400 rules inserted. Base: 149453 rules (3940 with conclusion selected). Queue: 17947 rules.
178600 rules inserted. Base: 149593 rules (3940 with conclusion selected). Queue: 17834 rules.
178800 rules inserted. Base: 149677 rules (3940 with conclusion selected). Queue: 17827 rules.
179000 rules inserted. Base: 149749 rules (3940 with conclusion selected). Queue: 17812 rules.
179200 rules inserted. Base: 149826 rules (3940 with conclusion selected). Queue: 17802 rules.
179400 rules inserted. Base: 149907 rules (3940 with conclusion selected). Queue: 17790 rules.
179600 rules inserted. Base: 149980 rules (3940 with conclusion selected). Queue: 17779 rules.
179800 rules inserted. Base: 150063 rules (3940 with conclusion selected). Queue: 17769 rules.
180000 rules inserted. Base: 150137 rules (3940 with conclusion selected). Queue: 17756 rules.
180200 rules inserted. Base: 150219 rules (3940 with conclusion selected). Queue: 17748 rules.
180400 rules inserted. Base: 150293 rules (3940 with conclusion selected). Queue: 17734 rules.
180600 rules inserted. Base: 150377 rules (3940 with conclusion selected). Queue: 17727 rules.
180800 rules inserted. Base: 150449 rules (3940 with conclusion selected). Queue: 17712 rules.
181000 rules inserted. Base: 150526 rules (3940 with conclusion selected). Queue: 17702 rules.
181200 rules inserted. Base: 150625 rules (3940 with conclusion selected). Queue: 17663 rules.
181400 rules inserted. Base: 150739 rules (3940 with conclusion selected). Queue: 17612 rules.
181600 rules inserted. Base: 150813 rules (3940 with conclusion selected). Queue: 17598 rules.
181800 rules inserted. Base: 150897 rules (3940 with conclusion selected). Queue: 17591 rules.
182000 rules inserted. Base: 150969 rules (3940 with conclusion selected). Queue: 17576 rules.
182200 rules inserted. Base: 151046 rules (3940 with conclusion selected). Queue: 17566 rules.
182400 rules inserted. Base: 151127 rules (3940 with conclusion selected). Queue: 17554 rules.
182600 rules inserted. Base: 151200 rules (3940 with conclusion selected). Queue: 17543 rules.
182800 rules inserted. Base: 151283 rules (3940 with conclusion selected). Queue: 17533 rules.
183000 rules inserted. Base: 151357 rules (3940 with conclusion selected). Queue: 17520 rules.
183200 rules inserted. Base: 151439 rules (3940 with conclusion selected). Queue: 17512 rules.
183400 rules inserted. Base: 151533 rules (3940 with conclusion selected). Queue: 17474 rules.
183600 rules inserted. Base: 151647 rules (3940 with conclusion selected). Queue: 17418 rules.
183800 rules inserted. Base: 151720 rules (3940 with conclusion selected). Queue: 17407 rules.
184000 rules inserted. Base: 151803 rules (3940 with conclusion selected). Queue: 17397 rules.
184200 rules inserted. Base: 151877 rules (3940 with conclusion selected). Queue: 17384 rules.
184400 rules inserted. Base: 151957 rules (3940 with conclusion selected). Queue: 17377 rules.
184600 rules inserted. Base: 152083 rules (3940 with conclusion selected). Queue: 17385 rules.
184800 rules inserted. Base: 152216 rules (3940 with conclusion selected). Queue: 17390 rules.
185000 rules inserted. Base: 152345 rules (3940 with conclusion selected). Queue: 17397 rules.
185200 rules inserted. Base: 152474 rules (3940 with conclusion selected). Queue: 17403 rules.
185400 rules inserted. Base: 152605 rules (3940 with conclusion selected). Queue: 17412 rules.
185600 rules inserted. Base: 152735 rules (3940 with conclusion selected). Queue: 17417 rules.
185800 rules inserted. Base: 152864 rules (3940 with conclusion selected). Queue: 17423 rules.
186000 rules inserted. Base: 152992 rules (3940 with conclusion selected). Queue: 17431 rules.
186200 rules inserted. Base: 153125 rules (3940 with conclusion selected). Queue: 17437 rules.
186400 rules inserted. Base: 153247 rules (3940 with conclusion selected). Queue: 17431 rules.
186600 rules inserted. Base: 153407 rules (3940 with conclusion selected). Queue: 17531 rules.
186800 rules inserted. Base: 153567 rules (3940 with conclusion selected). Queue: 17631 rules.
187000 rules inserted. Base: 153727 rules (3940 with conclusion selected). Queue: 17731 rules.
187200 rules inserted. Base: 153887 rules (3940 with conclusion selected). Queue: 17831 rules.
187400 rules inserted. Base: 154047 rules (3940 with conclusion selected). Queue: 17931 rules.
187600 rules inserted. Base: 154207 rules (3940 with conclusion selected). Queue: 18031 rules.
187800 rules inserted. Base: 154263 rules (3940 with conclusion selected). Queue: 18031 rules.
188000 rules inserted. Base: 154324 rules (3940 with conclusion selected). Queue: 18016 rules.
188200 rules inserted. Base: 154523 rules (3940 with conclusion selected). Queue: 18064 rules.
188400 rules inserted. Base: 154709 rules (3940 with conclusion selected). Queue: 18099 rules.
188600 rules inserted. Base: 154895 rules (3940 with conclusion selected). Queue: 18134 rules.
188800 rules inserted. Base: 155060 rules (3940 with conclusion selected). Queue: 18021 rules.
189000 rules inserted. Base: 155215 rules (3940 with conclusion selected). Queue: 17943 rules.
189200 rules inserted. Base: 155403 rules (3940 with conclusion selected). Queue: 17943 rules.
189400 rules inserted. Base: 155594 rules (3940 with conclusion selected). Queue: 17946 rules.
189600 rules inserted. Base: 155789 rules (3940 with conclusion selected). Queue: 17958 rules.
189800 rules inserted. Base: 155977 rules (3940 with conclusion selected). Queue: 17964 rules.
190000 rules inserted. Base: 156157 rules (3940 with conclusion selected). Queue: 17955 rules.
190200 rules inserted. Base: 156343 rules (3940 with conclusion selected). Queue: 17935 rules.
190400 rules inserted. Base: 156474 rules (3940 with conclusion selected). Queue: 17931 rules.
190600 rules inserted. Base: 156578 rules (3940 with conclusion selected). Queue: 17900 rules.
190800 rules inserted. Base: 156758 rules (3940 with conclusion selected). Queue: 17938 rules.
191000 rules inserted. Base: 156958 rules (3940 with conclusion selected). Queue: 17989 rules.
191200 rules inserted. Base: 157149 rules (3940 with conclusion selected). Queue: 18028 rules.
191400 rules inserted. Base: 157335 rules (3940 with conclusion selected). Queue: 18063 rules.
191600 rules inserted. Base: 157519 rules (3940 with conclusion selected). Queue: 18092 rules.
191800 rules inserted. Base: 157700 rules (3940 with conclusion selected). Queue: 18110 rules.
192000 rules inserted. Base: 157882 rules (3940 with conclusion selected). Queue: 18129 rules.
192200 rules inserted. Base: 158041 rules (3940 with conclusion selected). Queue: 18072 rules.
192400 rules inserted. Base: 158164 rules (3940 with conclusion selected). Queue: 17953 rules.
192600 rules inserted. Base: 158276 rules (3940 with conclusion selected). Queue: 17840 rules.
192800 rules inserted. Base: 158404 rules (3940 with conclusion selected). Queue: 17751 rules.
193000 rules inserted. Base: 158508 rules (3940 with conclusion selected). Queue: 17633 rules.
193200 rules inserted. Base: 158644 rules (3940 with conclusion selected). Queue: 17521 rules.
193400 rules inserted. Base: 158758 rules (3940 with conclusion selected). Queue: 17406 rules.
193600 rules inserted. Base: 158868 rules (3940 with conclusion selected). Queue: 17291 rules.
193800 rules inserted. Base: 158972 rules (3940 with conclusion selected). Queue: 17175 rules.
194000 rules inserted. Base: 159076 rules (3940 with conclusion selected). Queue: 17059 rules.
194200 rules inserted. Base: 159184 rules (3940 with conclusion selected). Queue: 16941 rules.
194400 rules inserted. Base: 159290 rules (3940 with conclusion selected). Queue: 16823 rules.
194600 rules inserted. Base: 159396 rules (3940 with conclusion selected). Queue: 16705 rules.
194800 rules inserted. Base: 159504 rules (3940 with conclusion selected). Queue: 16587 rules.
195000 rules inserted. Base: 159610 rules (3940 with conclusion selected). Queue: 16469 rules.
195200 rules inserted. Base: 159720 rules (3940 with conclusion selected). Queue: 16360 rules.
195400 rules inserted. Base: 159848 rules (3940 with conclusion selected). Queue: 16267 rules.
195600 rules inserted. Base: 159954 rules (3940 with conclusion selected). Queue: 16149 rules.
195800 rules inserted. Base: 160090 rules (3940 with conclusion selected). Queue: 16038 rules.
196000 rules inserted. Base: 160200 rules (3940 with conclusion selected). Queue: 15922 rules.
196200 rules inserted. Base: 160312 rules (3940 with conclusion selected). Queue: 15808 rules.
196400 rules inserted. Base: 160420 rules (3940 with conclusion selected). Queue: 15690 rules.
196600 rules inserted. Base: 160524 rules (3940 with conclusion selected). Queue: 15571 rules.
196800 rules inserted. Base: 160628 rules (3940 with conclusion selected). Queue: 15455 rules.
197000 rules inserted. Base: 160732 rules (3940 with conclusion selected). Queue: 15339 rules.
197200 rules inserted. Base: 160840 rules (3940 with conclusion selected). Queue: 15221 rules.
197400 rules inserted. Base: 160946 rules (3940 with conclusion selected). Queue: 15103 rules.
197600 rules inserted. Base: 161052 rules (3940 with conclusion selected). Queue: 14985 rules.
197800 rules inserted. Base: 161160 rules (3940 with conclusion selected). Queue: 14867 rules.
198000 rules inserted. Base: 161266 rules (3940 with conclusion selected). Queue: 14749 rules.
198200 rules inserted. Base: 161372 rules (3940 with conclusion selected). Queue: 14631 rules.
198400 rules inserted. Base: 161476 rules (3940 with conclusion selected). Queue: 14513 rules.
198600 rules inserted. Base: 161594 rules (3940 with conclusion selected). Queue: 14403 rules.
198800 rules inserted. Base: 161724 rules (3940 with conclusion selected). Queue: 14313 rules.
199000 rules inserted. Base: 161832 rules (3940 with conclusion selected). Queue: 14195 rules.
199200 rules inserted. Base: 161938 rules (3940 with conclusion selected). Queue: 14077 rules.
199400 rules inserted. Base: 162044 rules (3940 with conclusion selected). Queue: 13959 rules.
199600 rules inserted. Base: 162148 rules (3940 with conclusion selected). Queue: 13841 rules.
199800 rules inserted. Base: 162252 rules (3940 with conclusion selected). Queue: 13725 rules.
200000 rules inserted. Base: 162358 rules (3940 with conclusion selected). Queue: 13608 rules.
200200 rules inserted. Base: 162464 rules (3940 with conclusion selected). Queue: 13490 rules.
200400 rules inserted. Base: 162572 rules (3940 with conclusion selected). Queue: 13372 rules.
200600 rules inserted. Base: 162684 rules (3940 with conclusion selected). Queue: 13256 rules.
200800 rules inserted. Base: 162820 rules (3940 with conclusion selected). Queue: 13169 rules.
201000 rules inserted. Base: 162924 rules (3940 with conclusion selected). Queue: 13053 rules.
201200 rules inserted. Base: 163030 rules (3940 with conclusion selected). Queue: 12936 rules.
201400 rules inserted. Base: 163136 rules (3940 with conclusion selected). Queue: 12818 rules.
201600 rules inserted. Base: 163254 rules (3940 with conclusion selected). Queue: 12761 rules.
201800 rules inserted. Base: 163373 rules (3940 with conclusion selected). Queue: 12789 rules.
202000 rules inserted. Base: 163492 rules (3940 with conclusion selected). Queue: 12818 rules.
202200 rules inserted. Base: 163614 rules (3940 with conclusion selected). Queue: 12845 rules.
202400 rules inserted. Base: 163733 rules (3940 with conclusion selected). Queue: 12876 rules.
202600 rules inserted. Base: 163851 rules (3940 with conclusion selected). Queue: 12905 rules.
202800 rules inserted. Base: 163971 rules (3940 with conclusion selected). Queue: 12932 rules.
203000 rules inserted. Base: 164090 rules (3940 with conclusion selected). Queue: 12961 rules.
203200 rules inserted. Base: 164211 rules (3940 with conclusion selected). Queue: 12993 rules.
203400 rules inserted. Base: 164327 rules (3940 with conclusion selected). Queue: 13021 rules.
203600 rules inserted. Base: 164447 rules (3940 with conclusion selected). Queue: 13046 rules.
203800 rules inserted. Base: 164578 rules (3940 with conclusion selected). Queue: 13047 rules.
204000 rules inserted. Base: 164713 rules (3940 with conclusion selected). Queue: 13048 rules.
204200 rules inserted. Base: 164844 rules (3940 with conclusion selected). Queue: 13047 rules.
204400 rules inserted. Base: 164978 rules (3940 with conclusion selected). Queue: 13047 rules.
204600 rules inserted. Base: 165113 rules (3940 with conclusion selected). Queue: 13048 rules.
204800 rules inserted. Base: 165244 rules (3940 with conclusion selected). Queue: 13047 rules.
205000 rules inserted. Base: 165378 rules (3940 with conclusion selected). Queue: 13047 rules.
205200 rules inserted. Base: 165513 rules (3940 with conclusion selected). Queue: 13048 rules.
205400 rules inserted. Base: 165644 rules (3940 with conclusion selected). Queue: 13047 rules.
205600 rules inserted. Base: 165730 rules (3940 with conclusion selected). Queue: 13019 rules.
205800 rules inserted. Base: 165775 rules (3940 with conclusion selected). Queue: 12986 rules.
206000 rules inserted. Base: 165975 rules (3940 with conclusion selected). Queue: 13026 rules.
206200 rules inserted. Base: 166163 rules (3940 with conclusion selected). Queue: 13051 rules.
206400 rules inserted. Base: 166345 rules (3940 with conclusion selected). Queue: 13069 rules.
206600 rules inserted. Base: 166527 rules (3940 with conclusion selected). Queue: 13087 rules.
206800 rules inserted. Base: 166669 rules (3940 with conclusion selected). Queue: 13058 rules.
207000 rules inserted. Base: 166839 rules (3940 with conclusion selected). Queue: 13073 rules.
207200 rules inserted. Base: 167004 rules (3940 with conclusion selected). Queue: 13105 rules.
207400 rules inserted. Base: 167165 rules (3940 with conclusion selected). Queue: 13104 rules.
207600 rules inserted. Base: 167318 rules (3940 with conclusion selected). Queue: 13101 rules.
207800 rules inserted. Base: 167476 rules (3940 with conclusion selected). Queue: 13115 rules.
208000 rules inserted. Base: 167612 rules (3940 with conclusion selected). Queue: 13090 rules.
208200 rules inserted. Base: 167653 rules (3940 with conclusion selected). Queue: 13079 rules.
208400 rules inserted. Base: 167751 rules (3940 with conclusion selected). Queue: 13082 rules.
208600 rules inserted. Base: 167951 rules (3940 with conclusion selected). Queue: 13130 rules.
208800 rules inserted. Base: 168151 rules (3940 with conclusion selected). Queue: 13170 rules.
209000 rules inserted. Base: 168333 rules (3940 with conclusion selected). Queue: 13189 rules.
209200 rules inserted. Base: 168515 rules (3940 with conclusion selected). Queue: 13206 rules.
209400 rules inserted. Base: 168677 rules (3940 with conclusion selected). Queue: 13216 rules.
209600 rules inserted. Base: 168754 rules (3940 with conclusion selected). Queue: 13204 rules.
209800 rules inserted. Base: 168835 rules (3940 with conclusion selected). Queue: 13193 rules.
210000 rules inserted. Base: 168926 rules (3940 with conclusion selected). Queue: 13179 rules.
210200 rules inserted. Base: 169089 rules (3940 with conclusion selected). Queue: 13073 rules.
210400 rules inserted. Base: 169259 rules (3940 with conclusion selected). Queue: 12947 rules.
210600 rules inserted. Base: 169429 rules (3940 with conclusion selected). Queue: 12793 rules.
210800 rules inserted. Base: 169601 rules (3940 with conclusion selected). Queue: 12621 rules.
211000 rules inserted. Base: 169773 rules (3940 with conclusion selected). Queue: 12449 rules.
211200 rules inserted. Base: 169945 rules (3940 with conclusion selected). Queue: 12277 rules.
211400 rules inserted. Base: 170115 rules (3940 with conclusion selected). Queue: 12171 rules.
211600 rules inserted. Base: 170285 rules (3940 with conclusion selected). Queue: 12017 rules.
211800 rules inserted. Base: 170457 rules (3940 with conclusion selected). Queue: 11849 rules.
212000 rules inserted. Base: 170629 rules (3940 with conclusion selected). Queue: 11677 rules.
212200 rules inserted. Base: 170801 rules (3940 with conclusion selected). Queue: 11505 rules.
212400 rules inserted. Base: 170971 rules (3940 with conclusion selected). Queue: 11335 rules.
212600 rules inserted. Base: 171143 rules (3940 with conclusion selected). Queue: 11163 rules.
212800 rules inserted. Base: 171325 rules (3940 with conclusion selected). Queue: 11069 rules.
213000 rules inserted. Base: 171497 rules (3940 with conclusion selected). Queue: 10897 rules.
213200 rules inserted. Base: 171669 rules (3940 with conclusion selected). Queue: 10725 rules.
213400 rules inserted. Base: 171841 rules (3940 with conclusion selected). Queue: 10553 rules.
213600 rules inserted. Base: 172013 rules (3940 with conclusion selected). Queue: 10404 rules.
213800 rules inserted. Base: 172195 rules (3940 with conclusion selected). Queue: 10287 rules.
214000 rules inserted. Base: 172365 rules (3940 with conclusion selected). Queue: 10117 rules.
214200 rules inserted. Base: 172476 rules (3940 with conclusion selected). Queue: 10142 rules.
214400 rules inserted. Base: 172586 rules (3940 with conclusion selected). Queue: 10180 rules.
214600 rules inserted. Base: 172689 rules (3940 with conclusion selected). Queue: 10211 rules.
214800 rules inserted. Base: 172793 rules (3940 with conclusion selected). Queue: 10244 rules.
215000 rules inserted. Base: 172896 rules (3940 with conclusion selected). Queue: 10280 rules.
215200 rules inserted. Base: 173000 rules (3940 with conclusion selected). Queue: 10309 rules.
215400 rules inserted. Base: 173108 rules (3940 with conclusion selected). Queue: 10348 rules.
215600 rules inserted. Base: 173209 rules (3940 with conclusion selected). Queue: 10382 rules.
215800 rules inserted. Base: 173315 rules (3940 with conclusion selected). Queue: 10415 rules.
216000 rules inserted. Base: 173418 rules (3940 with conclusion selected). Queue: 10447 rules.
216200 rules inserted. Base: 173521 rules (3940 with conclusion selected). Queue: 10480 rules.
216400 rules inserted. Base: 173633 rules (3940 with conclusion selected). Queue: 10509 rules.
216600 rules inserted. Base: 173751 rules (3940 with conclusion selected). Queue: 10535 rules.
216800 rules inserted. Base: 173871 rules (3940 with conclusion selected). Queue: 10558 rules.
217000 rules inserted. Base: 173993 rules (3940 with conclusion selected). Queue: 10580 rules.
217200 rules inserted. Base: 174111 rules (3940 with conclusion selected). Queue: 10605 rules.
217400 rules inserted. Base: 174231 rules (3940 with conclusion selected). Queue: 10627 rules.
217600 rules inserted. Base: 174353 rules (3940 with conclusion selected). Queue: 10650 rules.
217800 rules inserted. Base: 174471 rules (3940 with conclusion selected). Queue: 10675 rules.
218000 rules inserted. Base: 174591 rules (3940 with conclusion selected). Queue: 10698 rules.
218200 rules inserted. Base: 174713 rules (3940 with conclusion selected). Queue: 10720 rules.
218400 rules inserted. Base: 173738 rules (3940 with conclusion selected). Queue: 10678 rules.
218600 rules inserted. Base: 173828 rules (3940 with conclusion selected). Queue: 10609 rules.
218800 rules inserted. Base: 174028 rules (3940 with conclusion selected). Queue: 10643 rules.
219000 rules inserted. Base: 174162 rules (3940 with conclusion selected). Queue: 10651 rules.
219200 rules inserted. Base: 174248 rules (3940 with conclusion selected). Queue: 10640 rules.
219400 rules inserted. Base: 174331 rules (3940 with conclusion selected). Queue: 10633 rules.
219600 rules inserted. Base: 174423 rules (3940 with conclusion selected). Queue: 10603 rules.
219800 rules inserted. Base: 174550 rules (3940 with conclusion selected). Queue: 10578 rules.
220000 rules inserted. Base: 174696 rules (3940 with conclusion selected). Queue: 10532 rules.
220200 rules inserted. Base: 174841 rules (3940 with conclusion selected). Queue: 10504 rules.
220400 rules inserted. Base: 174962 rules (3940 with conclusion selected). Queue: 10444 rules.
220600 rules inserted. Base: 175084 rules (3940 with conclusion selected). Queue: 10380 rules.
220800 rules inserted. Base: 175207 rules (3940 with conclusion selected). Queue: 10326 rules.
221000 rules inserted. Base: 175210 rules (3940 with conclusion selected). Queue: 10278 rules.
221200 rules inserted. Base: 175250 rules (3940 with conclusion selected). Queue: 10208 rules.
221400 rules inserted. Base: 175450 rules (3940 with conclusion selected). Queue: 10249 rules.
221600 rules inserted. Base: 175650 rules (3940 with conclusion selected). Queue: 10281 rules.
221800 rules inserted. Base: 175822 rules (3940 with conclusion selected). Queue: 10304 rules.
222000 rules inserted. Base: 175898 rules (3940 with conclusion selected). Queue: 10291 rules.
222200 rules inserted. Base: 175984 rules (3940 with conclusion selected). Queue: 10280 rules.
222400 rules inserted. Base: 176066 rules (3940 with conclusion selected). Queue: 10235 rules.
222600 rules inserted. Base: 176170 rules (3940 with conclusion selected). Queue: 10119 rules.
222800 rules inserted. Base: 176276 rules (3940 with conclusion selected). Queue: 10002 rules.
223000 rules inserted. Base: 176323 rules (3940 with conclusion selected). Queue: 9903 rules.
223200 rules inserted. Base: 176519 rules (3940 with conclusion selected). Queue: 9869 rules.
223400 rules inserted. Base: 176715 rules (3940 with conclusion selected). Queue: 9835 rules.
223600 rules inserted. Base: 176915 rules (3940 with conclusion selected). Queue: 9807 rules.
223800 rules inserted. Base: 177115 rules (3940 with conclusion selected). Queue: 9787 rules.
224000 rules inserted. Base: 177266 rules (3940 with conclusion selected). Queue: 9762 rules.
224200 rules inserted. Base: 177355 rules (3940 with conclusion selected). Queue: 9789 rules.
224400 rules inserted. Base: 177439 rules (3940 with conclusion selected). Queue: 9812 rules.
224600 rules inserted. Base: 177526 rules (3940 with conclusion selected). Queue: 9840 rules.
224800 rules inserted. Base: 177622 rules (3940 with conclusion selected). Queue: 9868 rules.
225000 rules inserted. Base: 177706 rules (3940 with conclusion selected). Queue: 9891 rules.
225200 rules inserted. Base: 177797 rules (3940 with conclusion selected). Queue: 9922 rules.
225400 rules inserted. Base: 177885 rules (3940 with conclusion selected). Queue: 9946 rules.
225600 rules inserted. Base: 177971 rules (3940 with conclusion selected). Queue: 9971 rules.
225800 rules inserted. Base: 178058 rules (3940 with conclusion selected). Queue: 9999 rules.
226000 rules inserted. Base: 178152 rules (3940 with conclusion selected). Queue: 10023 rules.
226200 rules inserted. Base: 178240 rules (3940 with conclusion selected). Queue: 10053 rules.
226400 rules inserted. Base: 178332 rules (3940 with conclusion selected). Queue: 10079 rules.
226600 rules inserted. Base: 178422 rules (3940 with conclusion selected). Queue: 10106 rules.
226800 rules inserted. Base: 178543 rules (3940 with conclusion selected). Queue: 10136 rules.
227000 rules inserted. Base: 178659 rules (3940 with conclusion selected). Queue: 10178 rules.
227200 rules inserted. Base: 178775 rules (3940 with conclusion selected). Queue: 10220 rules.
227400 rules inserted. Base: 178894 rules (3940 with conclusion selected). Queue: 10262 rules.
227600 rules inserted. Base: 179010 rules (3940 with conclusion selected). Queue: 10305 rules.
227800 rules inserted. Base: 179126 rules (3940 with conclusion selected). Queue: 10348 rules.
228000 rules inserted. Base: 179242 rules (3940 with conclusion selected). Queue: 10389 rules.
228200 rules inserted. Base: 179358 rules (3940 with conclusion selected). Queue: 10431 rules.
228400 rules inserted. Base: 179474 rules (3940 with conclusion selected). Queue: 10473 rules.
228600 rules inserted. Base: 179590 rules (3940 with conclusion selected). Queue: 10515 rules.
228800 rules inserted. Base: 179706 rules (3940 with conclusion selected). Queue: 10555 rules.
229000 rules inserted. Base: 179820 rules (3941 with conclusion selected). Queue: 10452 rules.
229200 rules inserted. Base: 180006 rules (3941 with conclusion selected). Queue: 10488 rules.
229400 rules inserted. Base: 180171 rules (3941 with conclusion selected). Queue: 10487 rules.
229600 rules inserted. Base: 180281 rules (3941 with conclusion selected). Queue: 10372 rules.
229800 rules inserted. Base: 180387 rules (3941 with conclusion selected). Queue: 10260 rules.
230000 rules inserted. Base: 180489 rules (3941 with conclusion selected). Queue: 10201 rules.
230200 rules inserted. Base: 180616 rules (3941 with conclusion selected). Queue: 10137 rules.
230400 rules inserted. Base: 180732 rules (3941 with conclusion selected). Queue: 10079 rules.
230600 rules inserted. Base: 180850 rules (3941 with conclusion selected). Queue: 10039 rules.
230800 rules inserted. Base: 180977 rules (3941 with conclusion selected). Queue: 10008 rules.
231000 rules inserted. Base: 181048 rules (3941 with conclusion selected). Queue: 9985 rules.
231200 rules inserted. Base: 181108 rules (3941 with conclusion selected). Queue: 9900 rules.
231400 rules inserted. Base: 181308 rules (3941 with conclusion selected). Queue: 9946 rules.
231600 rules inserted. Base: 181497 rules (3941 with conclusion selected). Queue: 9984 rules.
231800 rules inserted. Base: 181683 rules (3941 with conclusion selected). Queue: 10020 rules.
232000 rules inserted. Base: 181828 rules (3941 with conclusion selected). Queue: 9975 rules.
232200 rules inserted. Base: 181932 rules (3941 with conclusion selected). Queue: 9859 rules.
232400 rules inserted. Base: 182042 rules (3941 with conclusion selected). Queue: 9747 rules.
232600 rules inserted. Base: 182200 rules (3941 with conclusion selected). Queue: 9587 rules.
232800 rules inserted. Base: 182368 rules (3941 with conclusion selected). Queue: 9530 rules.
233000 rules inserted. Base: 182568 rules (3941 with conclusion selected). Queue: 9581 rules.
233200 rules inserted. Base: 182768 rules (3941 with conclusion selected). Queue: 9652 rules.
233400 rules inserted. Base: 182968 rules (3941 with conclusion selected). Queue: 9714 rules.
233600 rules inserted. Base: 183133 rules (3941 with conclusion selected). Queue: 9713 rules.
233800 rules inserted. Base: 183260 rules (3941 with conclusion selected). Queue: 9741 rules.
234000 rules inserted. Base: 183395 rules (3941 with conclusion selected). Queue: 9772 rules.
234200 rules inserted. Base: 183527 rules (3941 with conclusion selected). Queue: 9796 rules.
234400 rules inserted. Base: 183653 rules (3941 with conclusion selected). Queue: 9818 rules.
234600 rules inserted. Base: 183782 rules (3941 with conclusion selected). Queue: 9845 rules.
234800 rules inserted. Base: 183913 rules (3941 with conclusion selected). Queue: 9870 rules.
235000 rules inserted. Base: 184038 rules (3941 with conclusion selected). Queue: 9892 rules.
235200 rules inserted. Base: 184170 rules (3941 with conclusion selected). Queue: 9918 rules.
235400 rules inserted. Base: 184305 rules (3941 with conclusion selected). Queue: 9948 rules.
235600 rules inserted. Base: 184433 rules (3941 with conclusion selected). Queue: 9976 rules.
235800 rules inserted. Base: 184566 rules (3941 with conclusion selected). Queue: 10000 rules.
236000 rules inserted. Base: 184689 rules (3941 with conclusion selected). Queue: 10023 rules.
236200 rules inserted. Base: 184821 rules (3941 with conclusion selected). Queue: 10049 rules.
236400 rules inserted. Base: 184948 rules (3941 with conclusion selected). Queue: 10073 rules.
236600 rules inserted. Base: 185084 rules (3941 with conclusion selected). Queue: 10085 rules.
236800 rules inserted. Base: 185156 rules (3941 with conclusion selected). Queue: 10106 rules.
237000 rules inserted. Base: 185229 rules (3941 with conclusion selected). Queue: 10129 rules.
237200 rules inserted. Base: 185300 rules (3941 with conclusion selected). Queue: 10151 rules.
237400 rules inserted. Base: 185374 rules (3941 with conclusion selected). Queue: 10173 rules.
237600 rules inserted. Base: 185446 rules (3941 with conclusion selected). Queue: 10196 rules.
237800 rules inserted. Base: 185517 rules (3941 with conclusion selected). Queue: 10219 rules.
238000 rules inserted. Base: 185587 rules (3941 with conclusion selected). Queue: 10242 rules.
238200 rules inserted. Base: 185658 rules (3941 with conclusion selected). Queue: 10261 rules.
238400 rules inserted. Base: 185729 rules (3941 with conclusion selected). Queue: 10283 rules.
238600 rules inserted. Base: 185801 rules (3941 with conclusion selected). Queue: 10306 rules.
238800 rules inserted. Base: 185871 rules (3941 with conclusion selected). Queue: 10329 rules.
239000 rules inserted. Base: 185944 rules (3941 with conclusion selected). Queue: 10351 rules.
239200 rules inserted. Base: 170422 rules (3941 with conclusion selected). Queue: 10356 rules.
239400 rules inserted. Base: 170574 rules (3941 with conclusion selected). Queue: 10367 rules.
239600 rules inserted. Base: 170756 rules (3941 with conclusion selected). Queue: 10386 rules.
239800 rules inserted. Base: 170933 rules (3941 with conclusion selected). Queue: 10371 rules.
240000 rules inserted. Base: 171095 rules (3941 with conclusion selected). Queue: 10209 rules.
240200 rules inserted. Base: 171183 rules (3941 with conclusion selected). Queue: 10227 rules.
240400 rules inserted. Base: 171273 rules (3941 with conclusion selected). Queue: 10195 rules.
240600 rules inserted. Base: 171348 rules (3941 with conclusion selected). Queue: 10222 rules.
240800 rules inserted. Base: 171436 rules (3941 with conclusion selected). Queue: 10205 rules.
241000 rules inserted. Base: 171507 rules (3941 with conclusion selected). Queue: 10202 rules.
241200 rules inserted. Base: 171693 rules (3941 with conclusion selected). Queue: 10227 rules.
241400 rules inserted. Base: 171887 rules (3941 with conclusion selected). Queue: 10261 rules.
241600 rules inserted. Base: 172069 rules (3941 with conclusion selected). Queue: 10280 rules.
241800 rules inserted. Base: 172251 rules (3941 with conclusion selected). Queue: 10298 rules.
242000 rules inserted. Base: 172421 rules (3941 with conclusion selected). Queue: 10207 rules.
242200 rules inserted. Base: 172592 rules (3941 with conclusion selected). Queue: 10113 rules.
242400 rules inserted. Base: 172792 rules (3941 with conclusion selected). Queue: 10184 rules.
242600 rules inserted. Base: 172992 rules (3941 with conclusion selected). Queue: 10264 rules.
242800 rules inserted. Base: 173188 rules (3941 with conclusion selected). Queue: 10338 rules.
243000 rules inserted. Base: 173384 rules (3941 with conclusion selected). Queue: 10392 rules.
243200 rules inserted. Base: 173567 rules (3941 with conclusion selected). Queue: 10437 rules.
243400 rules inserted. Base: 173692 rules (3941 with conclusion selected). Queue: 10412 rules.
243600 rules inserted. Base: 173808 rules (3941 with conclusion selected). Queue: 10395 rules.
243800 rules inserted. Base: 173931 rules (3941 with conclusion selected). Queue: 10369 rules.
244000 rules inserted. Base: 174054 rules (3941 with conclusion selected). Queue: 10346 rules.
244200 rules inserted. Base: 174183 rules (3941 with conclusion selected). Queue: 10324 rules.
244400 rules inserted. Base: 174307 rules (3941 with conclusion selected). Queue: 10300 rules.
244600 rules inserted. Base: 174431 rules (3941 with conclusion selected). Queue: 10279 rules.
244800 rules inserted. Base: 174567 rules (3941 with conclusion selected). Queue: 10255 rules.
245000 rules inserted. Base: 174687 rules (3941 with conclusion selected). Queue: 10232 rules.
245200 rules inserted. Base: 174813 rules (3941 with conclusion selected). Queue: 10207 rules.
245400 rules inserted. Base: 174928 rules (3941 with conclusion selected). Queue: 10190 rules.
245600 rules inserted. Base: 175052 rules (3941 with conclusion selected). Queue: 10165 rules.
245800 rules inserted. Base: 175174 rules (3941 with conclusion selected). Queue: 10143 rules.
246000 rules inserted. Base: 175304 rules (3941 with conclusion selected). Queue: 10120 rules.
246200 rules inserted. Base: 175427 rules (3941 with conclusion selected). Queue: 10096 rules.
246400 rules inserted. Base: 175554 rules (3941 with conclusion selected). Queue: 10074 rules.
246600 rules inserted. Base: 175696 rules (3941 with conclusion selected). Queue: 10058 rules.
246800 rules inserted. Base: 175842 rules (3941 with conclusion selected). Queue: 10091 rules.
247000 rules inserted. Base: 175983 rules (3941 with conclusion selected). Queue: 10126 rules.
247200 rules inserted. Base: 176122 rules (3941 with conclusion selected). Queue: 10162 rules.
247400 rules inserted. Base: 176261 rules (3941 with conclusion selected). Queue: 10199 rules.
247600 rules inserted. Base: 176400 rules (3941 with conclusion selected). Queue: 10235 rules.
247800 rules inserted. Base: 176540 rules (3941 with conclusion selected). Queue: 10270 rules.
248000 rules inserted. Base: 176680 rules (3941 with conclusion selected). Queue: 10306 rules.
248200 rules inserted. Base: 176820 rules (3941 with conclusion selected). Queue: 10342 rules.
248400 rules inserted. Base: 176962 rules (3941 with conclusion selected). Queue: 10376 rules.
248600 rules inserted. Base: 177103 rules (3941 with conclusion selected). Queue: 10410 rules.
248800 rules inserted. Base: 177243 rules (3941 with conclusion selected). Queue: 10446 rules.
249000 rules inserted. Base: 177382 rules (3941 with conclusion selected). Queue: 10482 rules.
249200 rules inserted. Base: 177521 rules (3941 with conclusion selected). Queue: 10519 rules.
249400 rules inserted. Base: 177661 rules (3941 with conclusion selected). Queue: 10555 rules.
249600 rules inserted. Base: 177789 rules (3941 with conclusion selected). Queue: 10546 rules.
249800 rules inserted. Base: 177863 rules (3941 with conclusion selected). Queue: 10533 rules.
250000 rules inserted. Base: 177945 rules (3941 with conclusion selected). Queue: 10525 rules.
250200 rules inserted. Base: 178047 rules (3941 with conclusion selected). Queue: 10492 rules.
250400 rules inserted. Base: 178131 rules (3941 with conclusion selected). Queue: 10488 rules.
250600 rules inserted. Base: 178237 rules (3941 with conclusion selected). Queue: 10546 rules.
250800 rules inserted. Base: 178302 rules (3941 with conclusion selected). Queue: 10582 rules.
251000 rules inserted. Base: 178386 rules (3941 with conclusion selected). Queue: 10634 rules.
251200 rules inserted. Base: 178420 rules (3941 with conclusion selected). Queue: 10628 rules.
251400 rules inserted. Base: 178620 rules (3941 with conclusion selected). Queue: 10660 rules.
251600 rules inserted. Base: 178816 rules (3941 with conclusion selected). Queue: 10688 rules.
251800 rules inserted. Base: 178893 rules (3941 with conclusion selected). Queue: 10678 rules.
252000 rules inserted. Base: 178974 rules (3941 with conclusion selected). Queue: 10666 rules.
252200 rules inserted. Base: 179068 rules (3941 with conclusion selected). Queue: 10641 rules.
252400 rules inserted. Base: 179263 rules (3941 with conclusion selected). Queue: 10639 rules.
252600 rules inserted. Base: 179459 rules (3941 with conclusion selected). Queue: 10691 rules.
252800 rules inserted. Base: 179654 rules (3941 with conclusion selected). Queue: 10701 rules.
253000 rules inserted. Base: 179840 rules (3941 with conclusion selected). Queue: 10758 rules.
253200 rules inserted. Base: 180010 rules (3941 with conclusion selected). Queue: 10717 rules.
253400 rules inserted. Base: 180194 rules (3941 with conclusion selected). Queue: 10725 rules.
253600 rules inserted. Base: 180382 rules (3941 with conclusion selected). Queue: 10721 rules.
253800 rules inserted. Base: 180516 rules (3941 with conclusion selected). Queue: 10636 rules.
254000 rules inserted. Base: 180654 rules (3941 with conclusion selected). Queue: 10549 rules.
254200 rules inserted. Base: 180787 rules (3941 with conclusion selected). Queue: 10465 rules.
254400 rules inserted. Base: 180924 rules (3941 with conclusion selected). Queue: 10378 rules.
254600 rules inserted. Base: 181054 rules (3941 with conclusion selected). Queue: 10294 rules.
254800 rules inserted. Base: 181189 rules (3941 with conclusion selected). Queue: 10206 rules.
255000 rules inserted. Base: 181317 rules (3941 with conclusion selected). Queue: 10120 rules.
255200 rules inserted. Base: 181453 rules (3941 with conclusion selected). Queue: 10032 rules.
255400 rules inserted. Base: 181590 rules (3941 with conclusion selected). Queue: 9948 rules.
255600 rules inserted. Base: 181727 rules (3941 with conclusion selected). Queue: 9860 rules.
255800 rules inserted. Base: 181860 rules (3941 with conclusion selected). Queue: 9776 rules.
256000 rules inserted. Base: 181996 rules (3941 with conclusion selected). Queue: 9689 rules.
256200 rules inserted. Base: 182127 rules (3941 with conclusion selected). Queue: 9604 rules.
256400 rules inserted. Base: 182258 rules (3941 with conclusion selected). Queue: 9515 rules.
256600 rules inserted. Base: 182397 rules (3941 with conclusion selected). Queue: 9443 rules.
256800 rules inserted. Base: 182529 rules (3941 with conclusion selected). Queue: 9446 rules.
257000 rules inserted. Base: 182642 rules (3941 with conclusion selected). Queue: 9431 rules.
257200 rules inserted. Base: 182755 rules (3941 with conclusion selected). Queue: 9422 rules.
257400 rules inserted. Base: 182874 rules (3941 with conclusion selected). Queue: 9410 rules.
257600 rules inserted. Base: 182985 rules (3941 with conclusion selected). Queue: 9399 rules.
257800 rules inserted. Base: 183098 rules (3941 with conclusion selected). Queue: 9385 rules.
258000 rules inserted. Base: 183211 rules (3941 with conclusion selected). Queue: 9374 rules.
258200 rules inserted. Base: 183332 rules (3941 with conclusion selected). Queue: 9366 rules.
258400 rules inserted. Base: 183451 rules (3941 with conclusion selected). Queue: 9354 rules.
258600 rules inserted. Base: 183561 rules (3941 with conclusion selected). Queue: 9343 rules.
258800 rules inserted. Base: 183677 rules (3941 with conclusion selected). Queue: 9329 rules.
259000 rules inserted. Base: 183790 rules (3941 with conclusion selected). Queue: 9320 rules.
259200 rules inserted. Base: 183910 rules (3941 with conclusion selected). Queue: 9307 rules.
259400 rules inserted. Base: 184020 rules (3941 with conclusion selected). Queue: 9296 rules.
259600 rules inserted. Base: 184134 rules (3941 with conclusion selected). Queue: 9283 rules.
259800 rules inserted. Base: 184253 rules (3941 with conclusion selected). Queue: 9274 rules.
260000 rules inserted. Base: 184372 rules (3941 with conclusion selected). Queue: 9264 rules.
260200 rules inserted. Base: 183161 rules (3942 with conclusion selected). Queue: 9174 rules.
260400 rules inserted. Base: 183267 rules (3942 with conclusion selected). Queue: 9056 rules.
260600 rules inserted. Base: 183377 rules (3942 with conclusion selected). Queue: 8941 rules.
260800 rules inserted. Base: 183366 rules (3942 with conclusion selected). Queue: 8942 rules.
261000 rules inserted. Base: 183429 rules (3942 with conclusion selected). Queue: 9029 rules.
261200 rules inserted. Base: 183497 rules (3942 with conclusion selected). Queue: 9079 rules.
261400 rules inserted. Base: 183529 rules (3942 with conclusion selected). Queue: 9111 rules.
261600 rules inserted. Base: 183569 rules (3942 with conclusion selected). Queue: 9147 rules.
261800 rules inserted. Base: 183577 rules (3942 with conclusion selected). Queue: 9155 rules.
262000 rules inserted. Base: 183763 rules (3942 with conclusion selected). Queue: 9190 rules.
262200 rules inserted. Base: 183949 rules (3942 with conclusion selected). Queue: 9224 rules.
262400 rules inserted. Base: 184074 rules (3942 with conclusion selected). Queue: 9145 rules.
262600 rules inserted. Base: 184180 rules (3942 with conclusion selected). Queue: 9027 rules.
262800 rules inserted. Base: 184290 rules (3942 with conclusion selected). Queue: 8912 rules.
263000 rules inserted. Base: 184474 rules (3942 with conclusion selected). Queue: 8880 rules.
263200 rules inserted. Base: 184661 rules (3942 with conclusion selected). Queue: 8874 rules.
263400 rules inserted. Base: 184853 rules (3942 with conclusion selected). Queue: 8827 rules.
263600 rules inserted. Base: 185046 rules (3942 with conclusion selected). Queue: 8832 rules.
263800 rules inserted. Base: 185205 rules (3942 with conclusion selected). Queue: 8806 rules.
264000 rules inserted. Base: 185389 rules (3942 with conclusion selected). Queue: 8800 rules.
264200 rules inserted. Base: 185568 rules (3942 with conclusion selected). Queue: 8785 rules.
264400 rules inserted. Base: 185726 rules (3942 with conclusion selected). Queue: 8685 rules.
264600 rules inserted. Base: 185872 rules (3942 with conclusion selected). Queue: 8551 rules.
264800 rules inserted. Base: 186020 rules (3942 with conclusion selected). Queue: 8415 rules.
265000 rules inserted. Base: 186168 rules (3942 with conclusion selected). Queue: 8281 rules.
265200 rules inserted. Base: 186316 rules (3942 with conclusion selected). Queue: 8145 rules.
265400 rules inserted. Base: 186462 rules (3942 with conclusion selected). Queue: 8013 rules.
265600 rules inserted. Base: 186610 rules (3942 with conclusion selected). Queue: 7878 rules.
265800 rules inserted. Base: 186758 rules (3942 with conclusion selected). Queue: 7743 rules.
266000 rules inserted. Base: 186913 rules (3942 with conclusion selected). Queue: 7635 rules.
266200 rules inserted. Base: 187068 rules (3942 with conclusion selected). Queue: 7589 rules.
266400 rules inserted. Base: 187208 rules (3942 with conclusion selected). Queue: 7509 rules.
266600 rules inserted. Base: 187344 rules (3942 with conclusion selected). Queue: 7429 rules.
266800 rules inserted. Base: 187480 rules (3942 with conclusion selected). Queue: 7349 rules.
267000 rules inserted. Base: 187616 rules (3942 with conclusion selected). Queue: 7269 rules.
267200 rules inserted. Base: 187752 rules (3942 with conclusion selected). Queue: 7189 rules.
267400 rules inserted. Base: 187888 rules (3942 with conclusion selected). Queue: 7109 rules.
267600 rules inserted. Base: 188020 rules (3942 with conclusion selected). Queue: 7029 rules.
267800 rules inserted. Base: 188156 rules (3942 with conclusion selected). Queue: 6949 rules.
268000 rules inserted. Base: 188296 rules (3942 with conclusion selected). Queue: 6869 rules.
268200 rules inserted. Base: 188432 rules (3942 with conclusion selected). Queue: 6789 rules.
268400 rules inserted. Base: 188568 rules (3942 with conclusion selected). Queue: 6709 rules.
268600 rules inserted. Base: 188704 rules (3942 with conclusion selected). Queue: 6629 rules.
268800 rules inserted. Base: 188840 rules (3942 with conclusion selected). Queue: 6549 rules.
269000 rules inserted. Base: 188976 rules (3942 with conclusion selected). Queue: 6469 rules.
269200 rules inserted. Base: 189108 rules (3942 with conclusion selected). Queue: 6389 rules.
269400 rules inserted. Base: 189271 rules (3947 with conclusion selected). Queue: 6250 rules.
269600 rules inserted. Base: 189388 rules (3951 with conclusion selected). Queue: 6214 rules.
269800 rules inserted. Base: 189390 rules (3951 with conclusion selected). Queue: 6169 rules.
270000 rules inserted. Base: 189399 rules (3951 with conclusion selected). Queue: 6110 rules.
270200 rules inserted. Base: 189383 rules (3951 with conclusion selected). Queue: 6134 rules.
270400 rules inserted. Base: 189367 rules (3951 with conclusion selected). Queue: 6070 rules.
270600 rules inserted. Base: 185466 rules (3951 with conclusion selected). Queue: 6042 rules.
270800 rules inserted. Base: 185518 rules (3951 with conclusion selected). Queue: 6028 rules.
271000 rules inserted. Base: 185700 rules (3951 with conclusion selected). Queue: 6052 rules.
271200 rules inserted. Base: 185882 rules (3951 with conclusion selected). Queue: 6076 rules.
271400 rules inserted. Base: 186057 rules (3951 with conclusion selected). Queue: 5940 rules.
271600 rules inserted. Base: 186237 rules (3951 with conclusion selected). Queue: 5880 rules.
271800 rules inserted. Base: 186396 rules (3951 with conclusion selected). Queue: 5875 rules.
272000 rules inserted. Base: 186592 rules (3951 with conclusion selected). Queue: 5841 rules.
272200 rules inserted. Base: 186762 rules (3951 with conclusion selected). Queue: 5836 rules.
272400 rules inserted. Base: 186851 rules (3951 with conclusion selected). Queue: 5821 rules.
272600 rules inserted. Base: 187011 rules (3951 with conclusion selected). Queue: 5818 rules.
272800 rules inserted. Base: 187159 rules (3951 with conclusion selected). Queue: 5780 rules.
273000 rules inserted. Base: 187318 rules (3951 with conclusion selected). Queue: 5618 rules.
273200 rules inserted. Base: 187479 rules (3951 with conclusion selected). Queue: 5452 rules.
273400 rules inserted. Base: 187638 rules (3951 with conclusion selected). Queue: 5375 rules.
273600 rules inserted. Base: 187790 rules (3951 with conclusion selected). Queue: 5270 rules.
273800 rules inserted. Base: 187937 rules (3951 with conclusion selected). Queue: 5136 rules.
274000 rules inserted. Base: 188083 rules (3951 with conclusion selected). Queue: 5002 rules.
274200 rules inserted. Base: 188230 rules (3951 with conclusion selected). Queue: 4870 rules.
274400 rules inserted. Base: 188377 rules (3951 with conclusion selected). Queue: 4736 rules.
274600 rules inserted. Base: 188523 rules (3951 with conclusion selected). Queue: 4602 rules.
274800 rules inserted. Base: 188670 rules (3951 with conclusion selected). Queue: 4470 rules.
275000 rules inserted. Base: 188817 rules (3951 with conclusion selected). Queue: 4336 rules.
275200 rules inserted. Base: 188963 rules (3951 with conclusion selected). Queue: 4202 rules.
275400 rules inserted. Base: 189125 rules (3959 with conclusion selected). Queue: 4089 rules.
275600 rules inserted. Base: 189198 rules (3967 with conclusion selected). Queue: 4097 rules.
275800 rules inserted. Base: 189194 rules (3967 with conclusion selected). Queue: 4093 rules.
276000 rules inserted. Base: 189190 rules (3967 with conclusion selected). Queue: 4089 rules.
276200 rules inserted. Base: 189190 rules (3967 with conclusion selected). Queue: 4089 rules.
276400 rules inserted. Base: 189190 rules (3967 with conclusion selected). Queue: 4089 rules.
276600 rules inserted. Base: 188953 rules (3968 with conclusion selected). Queue: 3900 rules.
276800 rules inserted. Base: 189039 rules (3968 with conclusion selected). Queue: 3890 rules.
277000 rules inserted. Base: 189118 rules (3968 with conclusion selected). Queue: 3880 rules.
277200 rules inserted. Base: 189201 rules (3968 with conclusion selected). Queue: 3864 rules.
277400 rules inserted. Base: 189369 rules (3968 with conclusion selected). Queue: 3871 rules.
277600 rules inserted. Base: 189502 rules (3968 with conclusion selected). Queue: 3937 rules.
277800 rules inserted. Base: 189630 rules (3968 with conclusion selected). Queue: 3934 rules.
278000 rules inserted. Base: 189757 rules (3968 with conclusion selected). Queue: 4026 rules.
278200 rules inserted. Base: 189888 rules (3968 with conclusion selected). Queue: 4100 rules.
278400 rules inserted. Base: 190034 rules (3968 with conclusion selected). Queue: 4089 rules.
278600 rules inserted. Base: 190174 rules (3968 with conclusion selected). Queue: 4026 rules.
278800 rules inserted. Base: 190334 rules (3968 with conclusion selected). Queue: 3867 rules.
279000 rules inserted. Base: 190494 rules (3968 with conclusion selected). Queue: 3707 rules.
279200 rules inserted. Base: 190654 rules (3968 with conclusion selected). Queue: 3547 rules.
279400 rules inserted. Base: 190735 rules (3968 with conclusion selected). Queue: 3522 rules.
279600 rules inserted. Base: 190731 rules (3968 with conclusion selected). Queue: 3522 rules.
279800 rules inserted. Base: 190727 rules (3968 with conclusion selected). Queue: 3522 rules.
280000 rules inserted. Base: 190727 rules (3968 with conclusion selected). Queue: 3522 rules.
280200 rules inserted. Base: 190727 rules (3968 with conclusion selected). Queue: 3522 rules.
280400 rules inserted. Base: 126397 rules (3968 with conclusion selected). Queue: 2895 rules.
280600 rules inserted. Base: 126519 rules (3968 with conclusion selected). Queue: 2891 rules.
280800 rules inserted. Base: 126571 rules (3968 with conclusion selected). Queue: 2903 rules.
281000 rules inserted. Base: 126633 rules (3968 with conclusion selected). Queue: 2873 rules.
281200 rules inserted. Base: 126697 rules (3968 with conclusion selected). Queue: 2825 rules.
281400 rules inserted. Base: 126745 rules (3968 with conclusion selected). Queue: 2807 rules.
281600 rules inserted. Base: 126809 rules (3968 with conclusion selected). Queue: 2779 rules.
281800 rules inserted. Base: 126862 rules (3968 with conclusion selected). Queue: 2721 rules.
282000 rules inserted. Base: 126982 rules (3968 with conclusion selected). Queue: 2656 rules.
282200 rules inserted. Base: 127122 rules (3968 with conclusion selected). Queue: 2564 rules.
282400 rules inserted. Base: 127138 rules (3968 with conclusion selected). Queue: 2552 rules.
282600 rules inserted. Base: 127122 rules (3968 with conclusion selected). Queue: 2552 rules.
282800 rules inserted. Base: 127126 rules (3968 with conclusion selected). Queue: 2536 rules.
283000 rules inserted. Base: 127158 rules (3968 with conclusion selected). Queue: 2496 rules.
283200 rules inserted. Base: 127190 rules (3968 with conclusion selected). Queue: 2460 rules.
283400 rules inserted. Base: 127264 rules (3968 with conclusion selected). Queue: 2481 rules.
283600 rules inserted. Base: 127273 rules (3968 with conclusion selected). Queue: 2334 rules.
283800 rules inserted. Base: 127277 rules (3968 with conclusion selected). Queue: 2236 rules.
284000 rules inserted. Base: 127281 rules (3968 with conclusion selected). Queue: 2132 rules.
284200 rules inserted. Base: 125951 rules (3968 with conclusion selected). Queue: 2038 rules.
284400 rules inserted. Base: 126031 rules (3968 with conclusion selected). Queue: 2047 rules.
284600 rules inserted. Base: 126023 rules (3968 with conclusion selected). Queue: 1960 rules.
284800 rules inserted. Base: 126093 rules (3968 with conclusion selected). Queue: 1902 rules.
285000 rules inserted. Base: 125973 rules (3968 with conclusion selected). Queue: 1814 rules.
285200 rules inserted. Base: 126057 rules (3968 with conclusion selected). Queue: 1748 rules.
285400 rules inserted. Base: 121275 rules (3968 with conclusion selected). Queue: 1718 rules.
285600 rules inserted. Base: 121301 rules (3968 with conclusion selected). Queue: 1680 rules.
285800 rules inserted. Base: 121403 rules (3968 with conclusion selected). Queue: 1649 rules.
286000 rules inserted. Base: 121522 rules (3968 with conclusion selected). Queue: 1612 rules.
286200 rules inserted. Base: 121552 rules (3969 with conclusion selected). Queue: 1562 rules.
286400 rules inserted. Base: 121522 rules (3973 with conclusion selected). Queue: 1595 rules.
286600 rules inserted. Base: 121674 rules (3973 with conclusion selected). Queue: 1557 rules.
286800 rules inserted. Base: 121466 rules (3981 with conclusion selected). Queue: 1589 rules.
287000 rules inserted. Base: 121417 rules (3989 with conclusion selected). Queue: 1619 rules.
287200 rules inserted. Base: 121529 rules (3994 with conclusion selected). Queue: 1599 rules.
287400 rules inserted. Base: 121689 rules (3994 with conclusion selected). Queue: 1570 rules.
287600 rules inserted. Base: 121825 rules (3994 with conclusion selected). Queue: 1553 rules.
287800 rules inserted. Base: 106699 rules (3994 with conclusion selected). Queue: 1477 rules.
288000 rules inserted. Base: 106676 rules (4010 with conclusion selected). Queue: 1436 rules.
288200 rules inserted. Base: 106758 rules (4026 with conclusion selected). Queue: 1298 rules.
288400 rules inserted. Base: 106828 rules (4042 with conclusion selected). Queue: 1168 rules.
288600 rules inserted. Base: 106889 rules (4064 with conclusion selected). Queue: 1093 rules.
288800 rules inserted. Base: 106913 rules (4074 with conclusion selected). Queue: 1081 rules.
289000 rules inserted. Base: 106948 rules (4074 with conclusion selected). Queue: 1053 rules.
289200 rules inserted. Base: 103952 rules (4075 with conclusion selected). Queue: 1027 rules.
289400 rules inserted. Base: 104018 rules (4117 with conclusion selected). Queue: 1041 rules.
289600 rules inserted. Base: 104114 rules (4187 with conclusion selected). Queue: 1086 rules.
289800 rules inserted. Base: 104160 rules (4187 with conclusion selected). Queue: 1084 rules.
290000 rules inserted. Base: 104172 rules (4187 with conclusion selected). Queue: 1060 rules.
290200 rules inserted. Base: 90603 rules (4189 with conclusion selected). Queue: 1029 rules.
290400 rules inserted. Base: 90533 rules (4237 with conclusion selected). Queue: 1018 rules.
290600 rules inserted. Base: 90246 rules (4293 with conclusion selected). Queue: 1036 rules.
290800 rules inserted. Base: 90196 rules (4293 with conclusion selected). Queue: 1034 rules.
291000 rules inserted. Base: 90223 rules (4293 with conclusion selected). Queue: 1007 rules.
291200 rules inserted. Base: 87141 rules (4293 with conclusion selected). Queue: 998 rules.
291400 rules inserted. Base: 87262 rules (4310 with conclusion selected). Queue: 1051 rules.
291600 rules inserted. Base: 87443 rules (4341 with conclusion selected). Queue: 1116 rules.
291800 rules inserted. Base: 87560 rules (4349 with conclusion selected). Queue: 1124 rules.
292000 rules inserted. Base: 87576 rules (4349 with conclusion selected). Queue: 973 rules.
292200 rules inserted. Base: 87575 rules (4351 with conclusion selected). Queue: 882 rules.
292400 rules inserted. Base: 87686 rules (4382 with conclusion selected). Queue: 911 rules.
292600 rules inserted. Base: 87879 rules (4399 with conclusion selected). Queue: 950 rules.
292800 rules inserted. Base: 88034 rules (4431 with conclusion selected). Queue: 984 rules.
293000 rules inserted. Base: 88036 rules (4431 with conclusion selected). Queue: 1270 rules.
293200 rules inserted. Base: 88124 rules (4431 with conclusion selected). Queue: 1268 rules.
293400 rules inserted. Base: 88294 rules (4431 with conclusion selected). Queue: 1307 rules.
293600 rules inserted. Base: 88440 rules (4431 with conclusion selected). Queue: 1345 rules.
293800 rules inserted. Base: 88540 rules (4431 with conclusion selected). Queue: 1359 rules.
294000 rules inserted. Base: 88599 rules (4431 with conclusion selected). Queue: 1291 rules.
294200 rules inserted. Base: 88489 rules (4431 with conclusion selected). Queue: 1195 rules.
294400 rules inserted. Base: 88425 rules (4431 with conclusion selected). Queue: 1108 rules.
294600 rules inserted. Base: 88546 rules (4431 with conclusion selected). Queue: 1140 rules.
294800 rules inserted. Base: 88662 rules (4431 with conclusion selected). Queue: 1178 rules.
295000 rules inserted. Base: 88764 rules (4431 with conclusion selected). Queue: 1224 rules.
295200 rules inserted. Base: 88843 rules (4431 with conclusion selected). Queue: 1227 rules.
295400 rules inserted. Base: 88094 rules (4447 with conclusion selected). Queue: 1244 rules.
295600 rules inserted. Base: 88197 rules (4447 with conclusion selected). Queue: 1255 rules.
295800 rules inserted. Base: 88298 rules (4447 with conclusion selected). Queue: 1284 rules.
296000 rules inserted. Base: 88421 rules (4447 with conclusion selected). Queue: 1319 rules.
296200 rules inserted. Base: 88482 rules (4447 with conclusion selected). Queue: 1355 rules.
296400 rules inserted. Base: 88566 rules (4447 with conclusion selected). Queue: 1378 rules.
296600 rules inserted. Base: 85345 rules (4479 with conclusion selected). Queue: 1362 rules.
296800 rules inserted. Base: 85429 rules (4495 with conclusion selected). Queue: 1360 rules.
297000 rules inserted. Base: 85570 rules (4495 with conclusion selected). Queue: 1404 rules.
297200 rules inserted. Base: 85682 rules (4495 with conclusion selected). Queue: 1449 rules.
297400 rules inserted. Base: 85820 rules (4495 with conclusion selected). Queue: 1494 rules.
297600 rules inserted. Base: 85912 rules (4495 with conclusion selected). Queue: 1540 rules.
297800 rules inserted. Base: 86030 rules (4500 with conclusion selected). Queue: 1561 rules.
298000 rules inserted. Base: 86228 rules (4639 with conclusion selected). Queue: 1691 rules.
298200 rules inserted. Base: 86379 rules (4639 with conclusion selected). Queue: 1711 rules.
298400 rules inserted. Base: 86462 rules (4639 with conclusion selected). Queue: 1764 rules.
298600 rules inserted. Base: 86594 rules (4639 with conclusion selected). Queue: 1817 rules.
298800 rules inserted. Base: 86688 rules (4639 with conclusion selected). Queue: 1874 rules.
299000 rules inserted. Base: 86804 rules (4639 with conclusion selected). Queue: 1930 rules.
299200 rules inserted. Base: 86860 rules (4639 with conclusion selected). Queue: 1991 rules.
299400 rules inserted. Base: 87010 rules (4676 with conclusion selected). Queue: 2009 rules.
299600 rules inserted. Base: 87210 rules (4836 with conclusion selected). Queue: 2025 rules.
299800 rules inserted. Base: 87391 rules (4863 with conclusion selected). Queue: 2064 rules.
300000 rules inserted. Base: 87510 rules (4863 with conclusion selected). Queue: 2119 rules.
300200 rules inserted. Base: 87644 rules (4863 with conclusion selected). Queue: 2162 rules.
300400 rules inserted. Base: 87762 rules (4863 with conclusion selected). Queue: 2227 rules.
300600 rules inserted. Base: 87881 rules (4863 with conclusion selected). Queue: 2284 rules.
300800 rules inserted. Base: 88009 rules (4863 with conclusion selected). Queue: 2331 rules.
301000 rules inserted. Base: 88089 rules (4863 with conclusion selected). Queue: 2390 rules.
301200 rules inserted. Base: 88183 rules (4863 with conclusion selected). Queue: 2443 rules.
301400 rules inserted. Base: 88318 rules (4863 with conclusion selected). Queue: 2501 rules.
301600 rules inserted. Base: 88518 rules (4863 with conclusion selected). Queue: 2581 rules.
301800 rules inserted. Base: 88705 rules (4863 with conclusion selected). Queue: 2638 rules.
302000 rules inserted. Base: 88808 rules (4863 with conclusion selected). Queue: 2662 rules.
302200 rules inserted. Base: 88936 rules (4863 with conclusion selected). Queue: 2735 rules.
302400 rules inserted. Base: 89054 rules (4863 with conclusion selected). Queue: 2801 rules.
302600 rules inserted. Base: 89158 rules (4863 with conclusion selected). Queue: 2824 rules.
302800 rules inserted. Base: 89268 rules (4863 with conclusion selected). Queue: 2862 rules.
303000 rules inserted. Base: 89384 rules (4863 with conclusion selected). Queue: 2919 rules.
303200 rules inserted. Base: 89486 rules (4863 with conclusion selected). Queue: 2952 rules.
303400 rules inserted. Base: 89531 rules (4863 with conclusion selected). Queue: 2984 rules.
303600 rules inserted. Base: 89626 rules (4863 with conclusion selected). Queue: 2967 rules.
303800 rules inserted. Base: 89822 rules (4863 with conclusion selected). Queue: 3007 rules.
304000 rules inserted. Base: 90014 rules (4863 with conclusion selected). Queue: 3071 rules.
304200 rules inserted. Base: 90185 rules (4863 with conclusion selected). Queue: 3132 rules.
304400 rules inserted. Base: 90296 rules (4863 with conclusion selected). Queue: 3128 rules.
304600 rules inserted. Base: 90422 rules (4863 with conclusion selected). Queue: 3152 rules.
304800 rules inserted. Base: 90527 rules (4863 with conclusion selected). Queue: 3191 rules.
305000 rules inserted. Base: 90633 rules (4863 with conclusion selected). Queue: 3241 rules.
305200 rules inserted. Base: 90741 rules (4863 with conclusion selected). Queue: 3232 rules.
305400 rules inserted. Base: 90844 rules (4863 with conclusion selected). Queue: 3223 rules.
305600 rules inserted. Base: 90959 rules (4863 with conclusion selected). Queue: 3247 rules.
305800 rules inserted. Base: 91067 rules (4863 with conclusion selected). Queue: 3276 rules.
306000 rules inserted. Base: 91112 rules (4863 with conclusion selected). Queue: 3260 rules.
306200 rules inserted. Base: 91227 rules (4863 with conclusion selected). Queue: 3257 rules.
306400 rules inserted. Base: 91394 rules (4863 with conclusion selected). Queue: 3241 rules.
306600 rules inserted. Base: 91586 rules (4863 with conclusion selected). Queue: 3249 rules.
306800 rules inserted. Base: 91746 rules (4863 with conclusion selected). Queue: 3257 rules.
307000 rules inserted. Base: 91877 rules (4863 with conclusion selected). Queue: 3289 rules.
307200 rules inserted. Base: 92006 rules (4863 with conclusion selected). Queue: 3290 rules.
307400 rules inserted. Base: 92136 rules (4863 with conclusion selected). Queue: 3335 rules.
307600 rules inserted. Base: 92232 rules (4863 with conclusion selected). Queue: 3339 rules.
307800 rules inserted. Base: 92327 rules (4863 with conclusion selected). Queue: 3326 rules.
308000 rules inserted. Base: 92443 rules (4863 with conclusion selected). Queue: 3317 rules.
308200 rules inserted. Base: 92561 rules (4863 with conclusion selected). Queue: 3351 rules.
308400 rules inserted. Base: 92693 rules (4863 with conclusion selected). Queue: 3368 rules.
308600 rules inserted. Base: 92785 rules (4863 with conclusion selected). Queue: 3344 rules.
308800 rules inserted. Base: 92890 rules (4863 with conclusion selected). Queue: 3328 rules.
309000 rules inserted. Base: 92953 rules (4863 with conclusion selected). Queue: 3316 rules.
309200 rules inserted. Base: 93080 rules (4863 with conclusion selected). Queue: 3342 rules.
309400 rules inserted. Base: 93178 rules (4863 with conclusion selected). Queue: 3389 rules.
309600 rules inserted. Base: 93328 rules (4863 with conclusion selected). Queue: 3439 rules.
309800 rules inserted. Base: 93470 rules (4863 with conclusion selected). Queue: 3482 rules.
310000 rules inserted. Base: 93636 rules (4863 with conclusion selected). Queue: 3496 rules.
310200 rules inserted. Base: 93795 rules (4863 with conclusion selected). Queue: 3510 rules.
310400 rules inserted. Base: 93937 rules (4863 with conclusion selected). Queue: 3541 rules.
310600 rules inserted. Base: 94049 rules (4863 with conclusion selected). Queue: 3568 rules.
310800 rules inserted. Base: 94161 rules (4863 with conclusion selected). Queue: 3552 rules.
311000 rules inserted. Base: 94299 rules (4863 with conclusion selected). Queue: 3546 rules.
311200 rules inserted. Base: 94436 rules (4863 with conclusion selected). Queue: 3578 rules.
311400 rules inserted. Base: 94598 rules (4863 with conclusion selected). Queue: 3596 rules.
311600 rules inserted. Base: 94722 rules (4863 with conclusion selected). Queue: 3625 rules.
311800 rules inserted. Base: 94856 rules (4863 with conclusion selected). Queue: 3633 rules.
312000 rules inserted. Base: 94910 rules (4863 with conclusion selected). Queue: 3645 rules.
312200 rules inserted. Base: 95059 rules (4863 with conclusion selected). Queue: 3675 rules.
312400 rules inserted. Base: 95193 rules (4863 with conclusion selected). Queue: 3705 rules.
312600 rules inserted. Base: 95224 rules (4863 with conclusion selected). Queue: 3745 rules.
312800 rules inserted. Base: 95224 rules (4863 with conclusion selected). Queue: 3785 rules.
313000 rules inserted. Base: 95266 rules (4863 with conclusion selected). Queue: 3829 rules.
313200 rules inserted. Base: 95377 rules (4863 with conclusion selected). Queue: 3861 rules.
313400 rules inserted. Base: 95526 rules (4863 with conclusion selected). Queue: 3885 rules.
313600 rules inserted. Base: 95693 rules (4863 with conclusion selected). Queue: 3900 rules.
313800 rules inserted. Base: 95779 rules (4863 with conclusion selected). Queue: 3843 rules.
314000 rules inserted. Base: 95940 rules (4863 with conclusion selected). Queue: 3845 rules.
314200 rules inserted. Base: 96088 rules (4863 with conclusion selected). Queue: 3855 rules.
314400 rules inserted. Base: 96256 rules (4863 with conclusion selected). Queue: 3869 rules.
314600 rules inserted. Base: 96380 rules (4863 with conclusion selected). Queue: 3846 rules.
314800 rules inserted. Base: 96537 rules (4863 with conclusion selected). Queue: 3852 rules.
315000 rules inserted. Base: 96668 rules (4863 with conclusion selected). Queue: 3831 rules.
315200 rules inserted. Base: 96838 rules (4863 with conclusion selected). Queue: 3845 rules.
315400 rules inserted. Base: 96904 rules (4863 with conclusion selected). Queue: 3863 rules.
315600 rules inserted. Base: 97032 rules (4863 with conclusion selected). Queue: 3843 rules.
315800 rules inserted. Base: 97196 rules (4863 with conclusion selected). Queue: 3871 rules.
316000 rules inserted. Base: 97330 rules (4863 with conclusion selected). Queue: 3908 rules.
316200 rules inserted. Base: 97466 rules (4863 with conclusion selected). Queue: 3945 rules.
316400 rules inserted. Base: 97598 rules (4863 with conclusion selected). Queue: 3980 rules.
316600 rules inserted. Base: 97732 rules (4863 with conclusion selected). Queue: 4016 rules.
316800 rules inserted. Base: 97877 rules (4863 with conclusion selected). Queue: 4054 rules.
317000 rules inserted. Base: 98026 rules (4863 with conclusion selected). Queue: 4084 rules.
317200 rules inserted. Base: 98180 rules (4863 with conclusion selected). Queue: 4084 rules.
317400 rules inserted. Base: 98305 rules (4863 with conclusion selected). Queue: 4084 rules.
317600 rules inserted. Base: 98487 rules (4863 with conclusion selected). Queue: 4135 rules.
317800 rules inserted. Base: 98659 rules (4863 with conclusion selected). Queue: 4159 rules.
318000 rules inserted. Base: 98816 rules (4863 with conclusion selected). Queue: 4161 rules.
318200 rules inserted. Base: 98954 rules (4863 with conclusion selected). Queue: 4164 rules.
318400 rules inserted. Base: 99108 rules (4863 with conclusion selected). Queue: 4164 rules.
318600 rules inserted. Base: 99262 rules (4863 with conclusion selected). Queue: 4189 rules.
318800 rules inserted. Base: 99444 rules (4863 with conclusion selected). Queue: 4234 rules.
319000 rules inserted. Base: 99508 rules (4863 with conclusion selected). Queue: 4225 rules.
319200 rules inserted. Base: 99633 rules (4863 with conclusion selected). Queue: 4220 rules.
319400 rules inserted. Base: 99803 rules (4863 with conclusion selected). Queue: 4266 rules.
319600 rules inserted. Base: 99944 rules (4863 with conclusion selected). Queue: 4320 rules.
319800 rules inserted. Base: 100084 rules (4863 with conclusion selected). Queue: 4372 rules.
320000 rules inserted. Base: 100226 rules (4863 with conclusion selected). Queue: 4430 rules.
320200 rules inserted. Base: 100359 rules (4863 with conclusion selected). Queue: 4496 rules.
320400 rules inserted. Base: 100496 rules (4863 with conclusion selected). Queue: 4559 rules.
320600 rules inserted. Base: 100605 rules (4863 with conclusion selected). Queue: 4631 rules.
320800 rules inserted. Base: 100700 rules (4863 with conclusion selected). Queue: 4648 rules.
321000 rules inserted. Base: 100850 rules (4863 with conclusion selected). Queue: 4632 rules.
321200 rules inserted. Base: 101022 rules (4863 with conclusion selected). Queue: 4642 rules.
321400 rules inserted. Base: 101178 rules (4863 with conclusion selected). Queue: 4654 rules.
321600 rules inserted. Base: 101310 rules (4863 with conclusion selected). Queue: 4652 rules.
321800 rules inserted. Base: 101485 rules (4863 with conclusion selected). Queue: 4686 rules.
322000 rules inserted. Base: 101649 rules (4863 with conclusion selected). Queue: 4673 rules.
322200 rules inserted. Base: 101813 rules (4863 with conclusion selected). Queue: 4686 rules.
322400 rules inserted. Base: 101977 rules (4863 with conclusion selected). Queue: 4673 rules.
322600 rules inserted. Base: 102130 rules (4863 with conclusion selected). Queue: 4684 rules.
322800 rules inserted. Base: 102264 rules (4863 with conclusion selected). Queue: 4685 rules.
323000 rules inserted. Base: 102397 rules (4863 with conclusion selected). Queue: 4692 rules.
323200 rules inserted. Base: 102476 rules (4863 with conclusion selected). Queue: 4673 rules.
323400 rules inserted. Base: 102641 rules (4863 with conclusion selected). Queue: 4694 rules.
323600 rules inserted. Base: 102790 rules (4863 with conclusion selected). Queue: 4764 rules.
323800 rules inserted. Base: 102921 rules (4863 with conclusion selected). Queue: 4813 rules.
324000 rules inserted. Base: 103044 rules (4863 with conclusion selected). Queue: 4877 rules.
324200 rules inserted. Base: 103178 rules (4863 with conclusion selected). Queue: 4922 rules.
324400 rules inserted. Base: 103312 rules (4863 with conclusion selected). Queue: 4966 rules.
324600 rules inserted. Base: 103430 rules (4863 with conclusion selected). Queue: 5008 rules.
324800 rules inserted. Base: 103561 rules (4863 with conclusion selected). Queue: 5053 rules.
325000 rules inserted. Base: 103685 rules (4863 with conclusion selected). Queue: 5101 rules.
325200 rules inserted. Base: 103838 rules (4863 with conclusion selected). Queue: 5080 rules.
325400 rules inserted. Base: 104013 rules (4863 with conclusion selected). Queue: 5046 rules.
325600 rules inserted. Base: 104201 rules (4863 with conclusion selected). Queue: 5038 rules.
325800 rules inserted. Base: 104380 rules (4863 with conclusion selected). Queue: 5078 rules.
326000 rules inserted. Base: 104559 rules (4863 with conclusion selected). Queue: 5134 rules.
326200 rules inserted. Base: 104730 rules (4863 with conclusion selected). Queue: 5183 rules.
326400 rules inserted. Base: 104884 rules (4863 with conclusion selected). Queue: 5177 rules.
326600 rules inserted. Base: 105070 rules (4863 with conclusion selected). Queue: 5168 rules.
326800 rules inserted. Base: 105244 rules (4863 with conclusion selected). Queue: 5177 rules.
327000 rules inserted. Base: 105430 rules (4863 with conclusion selected). Queue: 5168 rules.
327200 rules inserted. Base: 105607 rules (4863 with conclusion selected). Queue: 5210 rules.
327400 rules inserted. Base: 105787 rules (4863 with conclusion selected). Queue: 5270 rules.
327600 rules inserted. Base: 105927 rules (4863 with conclusion selected). Queue: 5273 rules.
327800 rules inserted. Base: 106027 rules (4863 with conclusion selected). Queue: 5256 rules.
328000 rules inserted. Base: 106198 rules (4863 with conclusion selected). Queue: 5278 rules.
328200 rules inserted. Base: 106343 rules (4863 with conclusion selected). Queue: 5314 rules.
328400 rules inserted. Base: 106452 rules (4863 with conclusion selected). Queue: 5385 rules.
328600 rules inserted. Base: 106561 rules (4863 with conclusion selected). Queue: 5475 rules.
328800 rules inserted. Base: 106669 rules (4863 with conclusion selected). Queue: 5536 rules.
329000 rules inserted. Base: 106778 rules (4863 with conclusion selected). Queue: 5626 rules.
329200 rules inserted. Base: 106888 rules (4863 with conclusion selected). Queue: 5718 rules.
329400 rules inserted. Base: 106993 rules (4863 with conclusion selected). Queue: 5788 rules.
329600 rules inserted. Base: 107092 rules (4863 with conclusion selected). Queue: 5817 rules.
329800 rules inserted. Base: 107194 rules (4863 with conclusion selected). Queue: 5871 rules.
330000 rules inserted. Base: 107312 rules (4863 with conclusion selected). Queue: 5854 rules.
330200 rules inserted. Base: 107464 rules (4863 with conclusion selected). Queue: 5808 rules.
330400 rules inserted. Base: 107642 rules (4863 with conclusion selected). Queue: 5788 rules.
330600 rules inserted. Base: 107795 rules (4863 with conclusion selected). Queue: 5795 rules.
330800 rules inserted. Base: 107958 rules (4863 with conclusion selected). Queue: 5813 rules.
331000 rules inserted. Base: 108135 rules (4863 with conclusion selected). Queue: 5843 rules.
331200 rules inserted. Base: 108313 rules (4863 with conclusion selected). Queue: 5888 rules.
331400 rules inserted. Base: 108497 rules (4863 with conclusion selected). Queue: 5903 rules.
331600 rules inserted. Base: 108667 rules (4863 with conclusion selected). Queue: 5899 rules.
331800 rules inserted. Base: 108849 rules (4863 with conclusion selected). Queue: 5901 rules.
332000 rules inserted. Base: 109019 rules (4863 with conclusion selected). Queue: 5898 rules.
332200 rules inserted. Base: 109195 rules (4863 with conclusion selected). Queue: 5924 rules.
332400 rules inserted. Base: 109371 rules (4863 with conclusion selected). Queue: 5955 rules.
332600 rules inserted. Base: 109537 rules (4863 with conclusion selected). Queue: 5979 rules.
332800 rules inserted. Base: 109616 rules (4863 with conclusion selected). Queue: 5971 rules.
333000 rules inserted. Base: 109787 rules (4863 with conclusion selected). Queue: 5978 rules.
333200 rules inserted. Base: 109951 rules (4863 with conclusion selected). Queue: 5989 rules.
333400 rules inserted. Base: 110066 rules (4863 with conclusion selected). Queue: 5966 rules.
333600 rules inserted. Base: 110171 rules (4863 with conclusion selected). Queue: 6006 rules.
333800 rules inserted. Base: 110278 rules (4863 with conclusion selected). Queue: 6047 rules.
334000 rules inserted. Base: 110372 rules (4863 with conclusion selected). Queue: 6033 rules.
334200 rules inserted. Base: 110481 rules (4863 with conclusion selected). Queue: 6072 rules.
334400 rules inserted. Base: 110586 rules (4863 with conclusion selected). Queue: 6111 rules.
334600 rules inserted. Base: 110692 rules (4863 with conclusion selected). Queue: 6153 rules.
334800 rules inserted. Base: 110801 rules (4863 with conclusion selected). Queue: 6193 rules.
335000 rules inserted. Base: 110915 rules (4863 with conclusion selected). Queue: 6210 rules.
335200 rules inserted. Base: 111021 rules (4863 with conclusion selected). Queue: 6252 rules.
335400 rules inserted. Base: 111134 rules (4863 with conclusion selected). Queue: 6273 rules.
335600 rules inserted. Base: 111246 rules (4863 with conclusion selected). Queue: 6214 rules.
335800 rules inserted. Base: 111403 rules (4863 with conclusion selected). Queue: 6210 rules.
336000 rules inserted. Base: 111577 rules (4863 with conclusion selected). Queue: 6231 rules.
336200 rules inserted. Base: 111767 rules (4863 with conclusion selected). Queue: 6279 rules.
336400 rules inserted. Base: 111955 rules (4863 with conclusion selected). Queue: 6292 rules.
336600 rules inserted. Base: 112141 rules (4863 with conclusion selected). Queue: 6306 rules.
336800 rules inserted. Base: 112323 rules (4863 with conclusion selected). Queue: 6329 rules.
337000 rules inserted. Base: 112489 rules (4863 with conclusion selected). Queue: 6354 rules.
337200 rules inserted. Base: 112653 rules (4863 with conclusion selected). Queue: 6357 rules.
337400 rules inserted. Base: 112829 rules (4863 with conclusion selected). Queue: 6385 rules.
337600 rules inserted. Base: 112993 rules (4863 with conclusion selected). Queue: 6389 rules.
337800 rules inserted. Base: 113185 rules (4863 with conclusion selected). Queue: 6414 rules.
338000 rules inserted. Base: 113371 rules (4863 with conclusion selected). Queue: 6428 rules.
338200 rules inserted. Base: 113557 rules (4863 with conclusion selected). Queue: 6436 rules.
338400 rules inserted. Base: 113639 rules (4863 with conclusion selected). Queue: 6433 rules.
338600 rules inserted. Base: 113761 rules (4863 with conclusion selected). Queue: 6437 rules.
338800 rules inserted. Base: 113934 rules (4863 with conclusion selected). Queue: 6466 rules.
339000 rules inserted. Base: 114071 rules (4863 with conclusion selected). Queue: 6481 rules.
339200 rules inserted. Base: 114171 rules (4863 with conclusion selected). Queue: 6448 rules.
339400 rules inserted. Base: 114257 rules (4863 with conclusion selected). Queue: 6389 rules.
339600 rules inserted. Base: 114356 rules (4863 with conclusion selected). Queue: 6353 rules.
339800 rules inserted. Base: 114448 rules (4863 with conclusion selected). Queue: 6305 rules.
340000 rules inserted. Base: 114535 rules (4863 with conclusion selected). Queue: 6248 rules.
340200 rules inserted. Base: 114619 rules (4863 with conclusion selected). Queue: 6192 rules.
340400 rules inserted. Base: 114705 rules (4863 with conclusion selected). Queue: 6133 rules.
340600 rules inserted. Base: 114843 rules (4863 with conclusion selected). Queue: 6120 rules.
340800 rules inserted. Base: 114929 rules (4863 with conclusion selected). Queue: 6061 rules.
341000 rules inserted. Base: 115065 rules (4863 with conclusion selected). Queue: 6044 rules.
341200 rules inserted. Base: 115115 rules (4863 with conclusion selected). Queue: 6008 rules.
341400 rules inserted. Base: 115231 rules (4863 with conclusion selected). Queue: 5991 rules.
341600 rules inserted. Base: 115373 rules (4863 with conclusion selected). Queue: 6015 rules.
341800 rules inserted. Base: 115557 rules (4863 with conclusion selected). Queue: 6055 rules.
342000 rules inserted. Base: 115722 rules (4863 with conclusion selected). Queue: 6089 rules.
342200 rules inserted. Base: 115877 rules (4863 with conclusion selected). Queue: 6121 rules.
342400 rules inserted. Base: 116039 rules (4863 with conclusion selected). Queue: 6149 rules.
342600 rules inserted. Base: 116227 rules (4863 with conclusion selected). Queue: 6159 rules.
342800 rules inserted. Base: 116339 rules (4863 with conclusion selected). Queue: 6143 rules.
343000 rules inserted. Base: 116493 rules (4863 with conclusion selected). Queue: 6177 rules.
343200 rules inserted. Base: 116635 rules (4863 with conclusion selected). Queue: 6170 rules.
343400 rules inserted. Base: 116758 rules (4863 with conclusion selected). Queue: 6192 rules.
343600 rules inserted. Base: 116926 rules (4863 with conclusion selected). Queue: 6230 rules.
343800 rules inserted. Base: 117082 rules (4863 with conclusion selected). Queue: 6261 rules.
344000 rules inserted. Base: 117237 rules (4863 with conclusion selected). Queue: 6280 rules.
344200 rules inserted. Base: 117312 rules (4863 with conclusion selected). Queue: 6236 rules.
344400 rules inserted. Base: 117385 rules (4863 with conclusion selected). Queue: 6228 rules.
344600 rules inserted. Base: 117563 rules (4863 with conclusion selected). Queue: 6280 rules.
344800 rules inserted. Base: 117714 rules (4863 with conclusion selected). Queue: 6325 rules.
345000 rules inserted. Base: 117871 rules (4863 with conclusion selected). Queue: 6344 rules.
345200 rules inserted. Base: 117995 rules (4863 with conclusion selected). Queue: 6345 rules.
345400 rules inserted. Base: 118127 rules (4863 with conclusion selected). Queue: 6348 rules.
345600 rules inserted. Base: 118270 rules (4863 with conclusion selected). Queue: 6351 rules.
345800 rules inserted. Base: 118394 rules (4863 with conclusion selected). Queue: 6353 rules.
346000 rules inserted. Base: 118517 rules (4863 with conclusion selected). Queue: 6353 rules.
346200 rules inserted. Base: 118640 rules (4863 with conclusion selected). Queue: 6352 rules.
346400 rules inserted. Base: 118802 rules (4863 with conclusion selected). Queue: 6385 rules.
346600 rules inserted. Base: 118925 rules (4863 with conclusion selected). Queue: 6386 rules.
346800 rules inserted. Base: 119062 rules (4863 with conclusion selected). Queue: 6409 rules.
347000 rules inserted. Base: 119068 rules (4863 with conclusion selected). Queue: 6343 rules.
347200 rules inserted. Base: 119213 rules (4863 with conclusion selected). Queue: 6286 rules.
347400 rules inserted. Base: 119402 rules (4863 with conclusion selected). Queue: 6302 rules.
347600 rules inserted. Base: 119593 rules (4863 with conclusion selected). Queue: 6318 rules.
347800 rules inserted. Base: 119754 rules (4863 with conclusion selected). Queue: 6266 rules.
348000 rules inserted. Base: 119912 rules (4863 with conclusion selected). Queue: 6191 rules.
348200 rules inserted. Base: 120068 rules (4863 with conclusion selected). Queue: 6122 rules.
348400 rules inserted. Base: 120226 rules (4863 with conclusion selected). Queue: 6135 rules.
348600 rules inserted. Base: 120316 rules (4863 with conclusion selected). Queue: 6099 rules.
348800 rules inserted. Base: 120500 rules (4863 with conclusion selected). Queue: 6069 rules.
349000 rules inserted. Base: 120650 rules (4863 with conclusion selected). Queue: 6057 rules.
349200 rules inserted. Base: 120790 rules (4863 with conclusion selected). Queue: 5999 rules.
349400 rules inserted. Base: 120984 rules (4863 with conclusion selected). Queue: 6016 rules.
349600 rules inserted. Base: 121140 rules (4863 with conclusion selected). Queue: 5948 rules.
349800 rules inserted. Base: 121296 rules (4863 with conclusion selected). Queue: 5881 rules.
350000 rules inserted. Base: 121455 rules (4863 with conclusion selected). Queue: 5805 rules.
350200 rules inserted. Base: 121472 rules (4863 with conclusion selected). Queue: 5708 rules.
350400 rules inserted. Base: 121668 rules (4863 with conclusion selected). Queue: 5681 rules.
350600 rules inserted. Base: 121831 rules (4863 with conclusion selected). Queue: 5721 rules.
350800 rules inserted. Base: 121928 rules (4863 with conclusion selected). Queue: 5801 rules.
351000 rules inserted. Base: 122079 rules (4863 with conclusion selected). Queue: 5874 rules.
351200 rules inserted. Base: 122249 rules (4863 with conclusion selected). Queue: 5887 rules.
351400 rules inserted. Base: 122420 rules (4863 with conclusion selected). Queue: 5900 rules.
351600 rules inserted. Base: 122599 rules (4863 with conclusion selected). Queue: 5938 rules.
351800 rules inserted. Base: 122769 rules (4863 with conclusion selected). Queue: 5951 rules.
352000 rules inserted. Base: 122940 rules (4863 with conclusion selected). Queue: 5964 rules.
352200 rules inserted. Base: 123110 rules (4863 with conclusion selected). Queue: 5979 rules.
352400 rules inserted. Base: 123277 rules (4863 with conclusion selected). Queue: 5991 rules.
352600 rules inserted. Base: 123422 rules (4863 with conclusion selected). Queue: 5997 rules.
352800 rules inserted. Base: 123590 rules (4863 with conclusion selected). Queue: 6008 rules.
353000 rules inserted. Base: 123751 rules (4863 with conclusion selected). Queue: 6021 rules.
353200 rules inserted. Base: 123801 rules (4863 with conclusion selected). Queue: 5975 rules.
353400 rules inserted. Base: 123970 rules (4863 with conclusion selected). Queue: 5931 rules.
353600 rules inserted. Base: 124126 rules (4863 with conclusion selected). Queue: 5958 rules.
353800 rules inserted. Base: 124284 rules (4863 with conclusion selected). Queue: 5986 rules.
354000 rules inserted. Base: 124346 rules (4863 with conclusion selected). Queue: 5961 rules.
354200 rules inserted. Base: 124352 rules (4863 with conclusion selected). Queue: 5905 rules.
354400 rules inserted. Base: 124450 rules (4863 with conclusion selected). Queue: 5862 rules.
354600 rules inserted. Base: 124610 rules (4863 with conclusion selected). Queue: 5791 rules.
354800 rules inserted. Base: 124782 rules (4863 with conclusion selected). Queue: 5805 rules.
355000 rules inserted. Base: 124942 rules (4863 with conclusion selected). Queue: 5793 rules.
355200 rules inserted. Base: 125114 rules (4863 with conclusion selected). Queue: 5812 rules.
355400 rules inserted. Base: 125232 rules (4863 with conclusion selected). Queue: 5818 rules.
355600 rules inserted. Base: 125236 rules (4863 with conclusion selected). Queue: 5757 rules.
355800 rules inserted. Base: 125269 rules (4863 with conclusion selected). Queue: 5690 rules.
356000 rules inserted. Base: 125434 rules (4863 with conclusion selected). Queue: 5702 rules.
356200 rules inserted. Base: 125592 rules (4863 with conclusion selected). Queue: 5744 rules.
356400 rules inserted. Base: 125746 rules (4863 with conclusion selected). Queue: 5834 rules.
356600 rules inserted. Base: 125905 rules (4863 with conclusion selected). Queue: 5914 rules.
356800 rules inserted. Base: 126050 rules (4863 with conclusion selected). Queue: 5948 rules.
357000 rules inserted. Base: 126233 rules (4863 with conclusion selected). Queue: 5995 rules.
357200 rules inserted. Base: 126417 rules (4863 with conclusion selected). Queue: 6042 rules.
357400 rules inserted. Base: 126568 rules (4863 with conclusion selected). Queue: 6058 rules.
357600 rules inserted. Base: 126747 rules (4863 with conclusion selected). Queue: 6100 rules.
357800 rules inserted. Base: 126931 rules (4863 with conclusion selected). Queue: 6148 rules.
358000 rules inserted. Base: 127113 rules (4863 with conclusion selected). Queue: 6193 rules.
358200 rules inserted. Base: 127296 rules (4863 with conclusion selected). Queue: 6238 rules.
358400 rules inserted. Base: 127476 rules (4863 with conclusion selected). Queue: 6292 rules.
358600 rules inserted. Base: 127658 rules (4863 with conclusion selected). Queue: 6338 rules.
358800 rules inserted. Base: 127840 rules (4863 with conclusion selected). Queue: 6384 rules.
359000 rules inserted. Base: 127963 rules (4863 with conclusion selected). Queue: 6417 rules.
359200 rules inserted. Base: 125911 rules (4863 with conclusion selected). Queue: 6384 rules.
359400 rules inserted. Base: 126067 rules (4863 with conclusion selected). Queue: 6364 rules.
359600 rules inserted. Base: 126223 rules (4863 with conclusion selected). Queue: 6356 rules.
359800 rules inserted. Base: 126389 rules (4863 with conclusion selected). Queue: 6304 rules.
360000 rules inserted. Base: 126565 rules (4863 with conclusion selected). Queue: 6211 rules.
360200 rules inserted. Base: 126595 rules (4863 with conclusion selected). Queue: 6125 rules.
360400 rules inserted. Base: 126730 rules (4863 with conclusion selected). Queue: 6126 rules.
360600 rules inserted. Base: 126888 rules (4863 with conclusion selected). Queue: 6140 rules.
360800 rules inserted. Base: 127041 rules (4863 with conclusion selected). Queue: 6144 rules.
361000 rules inserted. Base: 127199 rules (4863 with conclusion selected). Queue: 6160 rules.
361200 rules inserted. Base: 127375 rules (4863 with conclusion selected). Queue: 6067 rules.
361400 rules inserted. Base: 127514 rules (4863 with conclusion selected). Queue: 6021 rules.
361600 rules inserted. Base: 127674 rules (4863 with conclusion selected). Queue: 6031 rules.
361800 rules inserted. Base: 127809 rules (4863 with conclusion selected). Queue: 6050 rules.
362000 rules inserted. Base: 127960 rules (4863 with conclusion selected). Queue: 6090 rules.
362200 rules inserted. Base: 128109 rules (4863 with conclusion selected). Queue: 6090 rules.
362400 rules inserted. Base: 128278 rules (4863 with conclusion selected). Queue: 6112 rules.
362600 rules inserted. Base: 128442 rules (4863 with conclusion selected). Queue: 6148 rules.
362800 rules inserted. Base: 128585 rules (4863 with conclusion selected). Queue: 6156 rules.
363000 rules inserted. Base: 128729 rules (4863 with conclusion selected). Queue: 6160 rules.
363200 rules inserted. Base: 128894 rules (4863 with conclusion selected). Queue: 6200 rules.
363400 rules inserted. Base: 129043 rules (4863 with conclusion selected). Queue: 6217 rules.
363600 rules inserted. Base: 129186 rules (4863 with conclusion selected). Queue: 6220 rules.
363800 rules inserted. Base: 129329 rules (4863 with conclusion selected). Queue: 6228 rules.
364000 rules inserted. Base: 129476 rules (4863 with conclusion selected). Queue: 6234 rules.
364200 rules inserted. Base: 129622 rules (4863 with conclusion selected). Queue: 6242 rules.
364400 rules inserted. Base: 129797 rules (4863 with conclusion selected). Queue: 6270 rules.
364600 rules inserted. Base: 129945 rules (4863 with conclusion selected). Queue: 6283 rules.
364800 rules inserted. Base: 130092 rules (4863 with conclusion selected). Queue: 6288 rules.
365000 rules inserted. Base: 130264 rules (4863 with conclusion selected). Queue: 6315 rules.
365200 rules inserted. Base: 130404 rules (4864 with conclusion selected). Queue: 6271 rules.
365400 rules inserted. Base: 130450 rules (4864 with conclusion selected). Queue: 6186 rules.
365600 rules inserted. Base: 130496 rules (4864 with conclusion selected). Queue: 6099 rules.
365800 rules inserted. Base: 130592 rules (4864 with conclusion selected). Queue: 6058 rules.
366000 rules inserted. Base: 130776 rules (4864 with conclusion selected). Queue: 5982 rules.
366200 rules inserted. Base: 130906 rules (4864 with conclusion selected). Queue: 5914 rules.
366400 rules inserted. Base: 130966 rules (4864 with conclusion selected). Queue: 5829 rules.
366600 rules inserted. Base: 131084 rules (4864 with conclusion selected). Queue: 5760 rules.
366800 rules inserted. Base: 131144 rules (4864 with conclusion selected). Queue: 5675 rules.
367000 rules inserted. Base: 131311 rules (4864 with conclusion selected). Queue: 5687 rules.
367200 rules inserted. Base: 131426 rules (4864 with conclusion selected). Queue: 5616 rules.
367400 rules inserted. Base: 131486 rules (4864 with conclusion selected). Queue: 5531 rules.
367600 rules inserted. Base: 131588 rules (4864 with conclusion selected). Queue: 5552 rules.
367800 rules inserted. Base: 131702 rules (4864 with conclusion selected). Queue: 5535 rules.
368000 rules inserted. Base: 131865 rules (4864 with conclusion selected). Queue: 5501 rules.
368200 rules inserted. Base: 132033 rules (4864 with conclusion selected). Queue: 5491 rules.
368400 rules inserted. Base: 132213 rules (4864 with conclusion selected). Queue: 5535 rules.
368600 rules inserted. Base: 132397 rules (4864 with conclusion selected). Queue: 5591 rules.
368800 rules inserted. Base: 132583 rules (4864 with conclusion selected). Queue: 5645 rules.
369000 rules inserted. Base: 132765 rules (4864 with conclusion selected). Queue: 5690 rules.
369200 rules inserted. Base: 132943 rules (4864 with conclusion selected). Queue: 5730 rules.
369400 rules inserted. Base: 133129 rules (4864 with conclusion selected). Queue: 5784 rules.
369600 rules inserted. Base: 133313 rules (4864 with conclusion selected). Queue: 5840 rules.
369800 rules inserted. Base: 133499 rules (4864 with conclusion selected). Queue: 5894 rules.
370000 rules inserted. Base: 133685 rules (4864 with conclusion selected). Queue: 5948 rules.
370200 rules inserted. Base: 133873 rules (4864 with conclusion selected). Queue: 6003 rules.
370400 rules inserted. Base: 134059 rules (4864 with conclusion selected). Queue: 6029 rules.
370600 rules inserted. Base: 134245 rules (4864 with conclusion selected). Queue: 6060 rules.
370800 rules inserted. Base: 134433 rules (4864 with conclusion selected). Queue: 6115 rules.
371000 rules inserted. Base: 134619 rules (4864 with conclusion selected). Queue: 6165 rules.
371200 rules inserted. Base: 134807 rules (4864 with conclusion selected). Queue: 6178 rules.
371400 rules inserted. Base: 103931 rules (4864 with conclusion selected). Queue: 4556 rules.
371600 rules inserted. Base: 103928 rules (4864 with conclusion selected). Queue: 4498 rules.
371800 rules inserted. Base: 103953 rules (4864 with conclusion selected). Queue: 4435 rules.
372000 rules inserted. Base: 104104 rules (4864 with conclusion selected). Queue: 4430 rules.
372200 rules inserted. Base: 104288 rules (4864 with conclusion selected). Queue: 4455 rules.
372400 rules inserted. Base: 104468 rules (4864 with conclusion selected). Queue: 4490 rules.
372600 rules inserted. Base: 104648 rules (4864 with conclusion selected). Queue: 4525 rules.
372800 rules inserted. Base: 104828 rules (4864 with conclusion selected). Queue: 4560 rules.
373000 rules inserted. Base: 105012 rules (4864 with conclusion selected). Queue: 4587 rules.
373200 rules inserted. Base: 105196 rules (4864 with conclusion selected). Queue: 4603 rules.
373400 rules inserted. Base: 105376 rules (4864 with conclusion selected). Queue: 4638 rules.
373600 rules inserted. Base: 105557 rules (4864 with conclusion selected). Queue: 4673 rules.
373800 rules inserted. Base: 105739 rules (4864 with conclusion selected). Queue: 4710 rules.
374000 rules inserted. Base: 105919 rules (4864 with conclusion selected). Queue: 4745 rules.
374200 rules inserted. Base: 106101 rules (4864 with conclusion selected). Queue: 4783 rules.
374400 rules inserted. Base: 106283 rules (4864 with conclusion selected). Queue: 4820 rules.
374600 rules inserted. Base: 106460 rules (4864 with conclusion selected). Queue: 4857 rules.
374800 rules inserted. Base: 106616 rules (4864 with conclusion selected). Queue: 4888 rules.
375000 rules inserted. Base: 106793 rules (4864 with conclusion selected). Queue: 4922 rules.
375200 rules inserted. Base: 106976 rules (4864 with conclusion selected). Queue: 4959 rules.
375400 rules inserted. Base: 107158 rules (4864 with conclusion selected). Queue: 4996 rules.
375600 rules inserted. Base: 107318 rules (4864 with conclusion selected). Queue: 5030 rules.
375800 rules inserted. Base: 107398 rules (4864 with conclusion selected). Queue: 5014 rules.
376000 rules inserted. Base: 107386 rules (4864 with conclusion selected). Queue: 4928 rules.
376200 rules inserted. Base: 107382 rules (4864 with conclusion selected). Queue: 4864 rules.
376400 rules inserted. Base: 107538 rules (4864 with conclusion selected). Queue: 4895 rules.
376600 rules inserted. Base: 107723 rules (4864 with conclusion selected). Queue: 4911 rules.
376800 rules inserted. Base: 107911 rules (4864 with conclusion selected). Queue: 4927 rules.
377000 rules inserted. Base: 108099 rules (4864 with conclusion selected). Queue: 4943 rules.
377200 rules inserted. Base: 108288 rules (4864 with conclusion selected). Queue: 4956 rules.
377400 rules inserted. Base: 108475 rules (4864 with conclusion selected). Queue: 4974 rules.
377600 rules inserted. Base: 108631 rules (4864 with conclusion selected). Queue: 5004 rules.
377800 rules inserted. Base: 108811 rules (4864 with conclusion selected). Queue: 5023 rules.
378000 rules inserted. Base: 108999 rules (4864 with conclusion selected). Queue: 5037 rules.
378200 rules inserted. Base: 109188 rules (4864 with conclusion selected). Queue: 5052 rules.
378400 rules inserted. Base: 109376 rules (4864 with conclusion selected). Queue: 5068 rules.
378600 rules inserted. Base: 109564 rules (4864 with conclusion selected). Queue: 5082 rules.
378800 rules inserted. Base: 109754 rules (4864 with conclusion selected). Queue: 5098 rules.
379000 rules inserted. Base: 109942 rules (4864 with conclusion selected). Queue: 5114 rules.
379200 rules inserted. Base: 110131 rules (4864 with conclusion selected). Queue: 5129 rules.
379400 rules inserted. Base: 110308 rules (4864 with conclusion selected). Queue: 5108 rules.
379600 rules inserted. Base: 110462 rules (4864 with conclusion selected). Queue: 5046 rules.
379800 rules inserted. Base: 110650 rules (4864 with conclusion selected). Queue: 5049 rules.
380000 rules inserted. Base: 110840 rules (4864 with conclusion selected). Queue: 5063 rules.
380200 rules inserted. Base: 111028 rules (4864 with conclusion selected). Queue: 5080 rules.
380400 rules inserted. Base: 111206 rules (4864 with conclusion selected). Queue: 5067 rules.
380600 rules inserted. Base: 111364 rules (4864 with conclusion selected). Queue: 4995 rules.
380800 rules inserted. Base: 111429 rules (4864 with conclusion selected). Queue: 4923 rules.
381000 rules inserted. Base: 111512 rules (4864 with conclusion selected). Queue: 4779 rules.
381200 rules inserted. Base: 111668 rules (4864 with conclusion selected). Queue: 4712 rules.
381400 rules inserted. Base: 111826 rules (4864 with conclusion selected). Queue: 4710 rules.
381600 rules inserted. Base: 111983 rules (4864 with conclusion selected). Queue: 4739 rules.
381800 rules inserted. Base: 112141 rules (4864 with conclusion selected). Queue: 4770 rules.
382000 rules inserted. Base: 112295 rules (4864 with conclusion selected). Queue: 4797 rules.
382200 rules inserted. Base: 112452 rules (4864 with conclusion selected). Queue: 4828 rules.
382400 rules inserted. Base: 112608 rules (4864 with conclusion selected). Queue: 4803 rules.
382600 rules inserted. Base: 112765 rules (4864 with conclusion selected). Queue: 4739 rules.
382800 rules inserted. Base: 112923 rules (4864 with conclusion selected). Queue: 4769 rules.
383000 rules inserted. Base: 113081 rules (4864 with conclusion selected). Queue: 4799 rules.
383200 rules inserted. Base: 113235 rules (4864 with conclusion selected). Queue: 4827 rules.
383400 rules inserted. Base: 113392 rules (4864 with conclusion selected). Queue: 4857 rules.
383600 rules inserted. Base: 113548 rules (4864 with conclusion selected). Queue: 4886 rules.
383800 rules inserted. Base: 113706 rules (4864 with conclusion selected). Queue: 4917 rules.
384000 rules inserted. Base: 113864 rules (4864 with conclusion selected). Queue: 4949 rules.
384200 rules inserted. Base: 114019 rules (4864 with conclusion selected). Queue: 4978 rules.
384400 rules inserted. Base: 114176 rules (4864 with conclusion selected). Queue: 5008 rules.
384600 rules inserted. Base: 114181 rules (4864 with conclusion selected). Queue: 4955 rules.
384800 rules inserted. Base: 114339 rules (4864 with conclusion selected). Queue: 4986 rules.
385000 rules inserted. Base: 114497 rules (4864 with conclusion selected). Queue: 5018 rules.
385200 rules inserted. Base: 114652 rules (4864 with conclusion selected). Queue: 5047 rules.
385400 rules inserted. Base: 114788 rules (4864 with conclusion selected). Queue: 5062 rules.
385600 rules inserted. Base: 114806 rules (4864 with conclusion selected). Queue: 5020 rules.
385800 rules inserted. Base: 114849 rules (4864 with conclusion selected). Queue: 4954 rules.
386000 rules inserted. Base: 114893 rules (4864 with conclusion selected). Queue: 4918 rules.
386200 rules inserted. Base: 115051 rules (4864 with conclusion selected). Queue: 4896 rules.
386400 rules inserted. Base: 115207 rules (4864 with conclusion selected). Queue: 4894 rules.
386600 rules inserted. Base: 115365 rules (4864 with conclusion selected). Queue: 4879 rules.
386800 rules inserted. Base: 115521 rules (4864 with conclusion selected). Queue: 4866 rules.
387000 rules inserted. Base: 115677 rules (4864 with conclusion selected). Queue: 4862 rules.
387200 rules inserted. Base: 115777 rules (4864 with conclusion selected). Queue: 4827 rules.
387400 rules inserted. Base: 115841 rules (4864 with conclusion selected). Queue: 4792 rules.
387600 rules inserted. Base: 115997 rules (4864 with conclusion selected). Queue: 4782 rules.
387800 rules inserted. Base: 116155 rules (4864 with conclusion selected). Queue: 4766 rules.
388000 rules inserted. Base: 116309 rules (4864 with conclusion selected). Queue: 4763 rules.
388200 rules inserted. Base: 116469 rules (4864 with conclusion selected). Queue: 4745 rules.
388400 rules inserted. Base: 116625 rules (4864 with conclusion selected). Queue: 4738 rules.
388600 rules inserted. Base: 116781 rules (4864 with conclusion selected). Queue: 4734 rules.
388800 rules inserted. Base: 116939 rules (4864 with conclusion selected). Queue: 4728 rules.
389000 rules inserted. Base: 117095 rules (4864 with conclusion selected). Queue: 4732 rules.
389200 rules inserted. Base: 117253 rules (4864 with conclusion selected). Queue: 4730 rules.
389400 rules inserted. Base: 117411 rules (4864 with conclusion selected). Queue: 4726 rules.
389600 rules inserted. Base: 117581 rules (4864 with conclusion selected). Queue: 4664 rules.
389800 rules inserted. Base: 117737 rules (4864 with conclusion selected). Queue: 4664 rules.
390000 rules inserted. Base: 117893 rules (4864 with conclusion selected). Queue: 4672 rules.
390200 rules inserted. Base: 118053 rules (4864 with conclusion selected). Queue: 4665 rules.
390400 rules inserted. Base: 118209 rules (4864 with conclusion selected). Queue: 4666 rules.
390600 rules inserted. Base: 118359 rules (4864 with conclusion selected). Queue: 4607 rules.
390800 rules inserted. Base: 118446 rules (4864 with conclusion selected). Queue: 4566 rules.
391000 rules inserted. Base: 118526 rules (4864 with conclusion selected). Queue: 4474 rules.
391200 rules inserted. Base: 118570 rules (4864 with conclusion selected). Queue: 4383 rules.
391400 rules inserted. Base: 118619 rules (4864 with conclusion selected). Queue: 4292 rules.
391600 rules inserted. Base: 118666 rules (4864 with conclusion selected). Queue: 4202 rules.
391800 rules inserted. Base: 118710 rules (4864 with conclusion selected). Queue: 4114 rules.
392000 rules inserted. Base: 118772 rules (4864 with conclusion selected). Queue: 4023 rules.
392200 rules inserted. Base: 118882 rules (4864 with conclusion selected). Queue: 3929 rules.
392400 rules inserted. Base: 118938 rules (4864 with conclusion selected). Queue: 3840 rules.
392600 rules inserted. Base: 118980 rules (4864 with conclusion selected). Queue: 3751 rules.
392800 rules inserted. Base: 119022 rules (4864 with conclusion selected). Queue: 3661 rules.
393000 rules inserted. Base: 119074 rules (4864 with conclusion selected). Queue: 3569 rules.
393200 rules inserted. Base: 119118 rules (4864 with conclusion selected). Queue: 3481 rules.
393400 rules inserted. Base: 119167 rules (4864 with conclusion selected). Queue: 3388 rules.
393600 rules inserted. Base: 119216 rules (4864 with conclusion selected). Queue: 3299 rules.
393800 rules inserted. Base: 119270 rules (4864 with conclusion selected). Queue: 3207 rules.
394000 rules inserted. Base: 119319 rules (4864 with conclusion selected). Queue: 3115 rules.
394200 rules inserted. Base: 119422 rules (4864 with conclusion selected). Queue: 3075 rules.
394400 rules inserted. Base: 119474 rules (4864 with conclusion selected). Queue: 2982 rules.
394600 rules inserted. Base: 119518 rules (4864 with conclusion selected). Queue: 2892 rules.
394800 rules inserted. Base: 119570 rules (4864 with conclusion selected). Queue: 2801 rules.
395000 rules inserted. Base: 119624 rules (4864 with conclusion selected). Queue: 2709 rules.
395200 rules inserted. Base: 117387 rules (4864 with conclusion selected). Queue: 2692 rules.
395400 rules inserted. Base: 117467 rules (4864 with conclusion selected). Queue: 2704 rules.
395600 rules inserted. Base: 117651 rules (4864 with conclusion selected). Queue: 2531 rules.
395800 rules inserted. Base: 117835 rules (4864 with conclusion selected). Queue: 2357 rules.
396000 rules inserted. Base: 118021 rules (4864 with conclusion selected). Queue: 2182 rules.
396200 rules inserted. Base: 118209 rules (4864 with conclusion selected). Queue: 2089 rules.
396400 rules inserted. Base: 118393 rules (4864 with conclusion selected). Queue: 1914 rules.
396600 rules inserted. Base: 118579 rules (4864 with conclusion selected). Queue: 1739 rules.
396800 rules inserted. Base: 118765 rules (4864 with conclusion selected). Queue: 1561 rules.
397000 rules inserted. Base: 118951 rules (4864 with conclusion selected). Queue: 1382 rules.
397200 rules inserted. Base: 119141 rules (4864 with conclusion selected). Queue: 1244 rules.
397400 rules inserted. Base: 119331 rules (4864 with conclusion selected). Queue: 1128 rules.
397600 rules inserted. Base: 119517 rules (4864 with conclusion selected). Queue: 949 rules.
397800 rules inserted. Base: 119709 rules (4864 with conclusion selected). Queue: 850 rules.
398000 rules inserted. Base: 119698 rules (4865 with conclusion selected). Queue: 780 rules.
398200 rules inserted. Base: 119818 rules (4865 with conclusion selected). Queue: 819 rules.
398400 rules inserted. Base: 119874 rules (4865 with conclusion selected). Queue: 864 rules.
398600 rules inserted. Base: 120010 rules (4865 with conclusion selected). Queue: 934 rules.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),msg))
goal reachable: begin(LeakM(phase0,alice)) && begin(LeakS(phase0,alice)) && attacker(msg) -> end(RecvMsg(bob,alice,stagepack_a(sid_5),msg))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),empty,empty,false))) may be inserted in a table at insert {1022}.
table(statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),empty,empty,false)))).

2. We assume as hypothesis that
attacker(msg).

3. Using the function zero the attacker may obtain zero.
attacker(zero).

4. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {963}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

5. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

6. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

7. The message (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))) may be sent to the attacker at output {15}.
attacker((validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)))).

8. By 7, the attacker may know (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(alice),g)).
attacker(validkey(dhexp_real(key_m(alice),g))).

9. By 7, the attacker may know (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(alice),g)).
attacker(validkey(dhexp_real(key_s(alice),g))).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 8, the attacker may know validkey(dhexp_real(key_m(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g)))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))).
By 6, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

17. By 16, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))).
By 5, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 3, the attacker may know zero.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
attacker(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero)).

19. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

20. The event LeakS(phase0,alice) may be executed at {471}.
The event LeakM(phase0,alice) may be executed at {472}.
So the message (key_s(alice),key_m(alice)) may be sent to the attacker at output {473}.
attacker((key_s(alice),key_m(alice))).

21. By 20, the attacker may know (key_s(alice),key_m(alice)).
Using the function 2-proj-2-tuple the attacker may obtain key_m(alice).
attacker(key_m(alice)).

22. By 21, the attacker may know key_m(alice).
By 6, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)).
attacker(dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).

23. By 12, the attacker may know hash(somename,empty).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),zero).
attacker(hmac_hash1(hash(somename,empty),zero)).

24. By 23, the attacker may know hmac_hash1(hash(somename,empty),zero).
By 22, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).
attacker(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)))).

25. By 24, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).
By 19, the attacker may know minnonce.
By 18, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 2, the attacker may know msg.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),msg).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),msg)).

26. The attacker has some term ns_16.
attacker(ns_16).

27. By 3, the attacker may know zero.
By 26, the attacker may know ns_16.
By 25, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),msg).
Using the function concat3 the attacker may obtain concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),msg)).
attacker(concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),msg))).

28. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),empty,empty,false))) that may be in a table by 1 may be read at get {1137}.
The message concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),msg)) that the attacker may have by 27 may be received at input {1023}.
So event RecvMsg(bob,alice,stagepack_a(sid_5),msg) may be executed at {1135}.
end(RecvMsg(bob,alice,stagepack_a(sid_5),msg)).

29. By 28, end(RecvMsg(bob,alice,stagepack_a(sid_5),msg)).
The goal is reached, represented in the following fact:
end(RecvMsg(bob,alice,stagepack_a(sid_5),msg)).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),msg)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),msg)) ==> event(SendMsg(alice,c,stagepack_a(sid_a),msg)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)))
goal reachable: begin(LeakM(phase0,alice)) && begin(LeakS(phase0,alice)) && attacker(msg) -> end(RecvMsg(bob,alice,stagepack_a(sid_5),msg))
Abbreviations:
sid_5 = sid[!1 = @sid]
goal reachable: begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && attacker(msg) -> end(RecvMsg(bob,alice,stagepack_a(sid_5),msg))
Abbreviations:
sid_5 = sid[!1 = @sid]
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),msg)) ==> event(SendMsg(alice,c,stagepack_a(sid_a),msg)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),msg)) ==> event(SendMsg(alice,c,stagepack_a(sid_a),msg)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice)))
goal reachable: begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && attacker(msg) -> end(RecvMsg(bob,alice,stagepack_a(sid_5),msg))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),empty,empty,false))) may be inserted in a table at insert {1022}.
table(statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),empty,empty,false)))).

2. We assume as hypothesis that
attacker(msg).

3. Using the function zero the attacker may obtain zero.
attacker(zero).

4. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {963}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

5. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

6. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

7. The message (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))) may be sent to the attacker at output {15}.
attacker((validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)))).

8. By 7, the attacker may know (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(alice),g)).
attacker(validkey(dhexp_real(key_m(alice),g))).

9. By 7, the attacker may know (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(alice),g)).
attacker(validkey(dhexp_real(key_s(alice),g))).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 8, the attacker may know validkey(dhexp_real(key_m(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g)))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))).
By 6, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

17. By 16, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))).
By 5, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 3, the attacker may know zero.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
attacker(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero)).

19. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

20. The event LeakS(phase0,bob) may be executed at {1418}.
The event LeakM(phase0,bob) may be executed at {1419}.
So the message (key_s(bob),key_m(bob)) may be sent to the attacker at output {1420}.
attacker((key_s(bob),key_m(bob))).

21. By 20, the attacker may know (key_s(bob),key_m(bob)).
Using the function 1-proj-2-tuple the attacker may obtain key_s(bob).
attacker(key_s(bob)).

22. By 21, the attacker may know key_s(bob).
By 8, the attacker may know validkey(dhexp_real(key_m(alice),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)).
attacker(dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).

23. By 12, the attacker may know hash(somename,empty).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),zero).
attacker(hmac_hash1(hash(somename,empty),zero)).

24. By 23, the attacker may know hmac_hash1(hash(somename,empty),zero).
By 22, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).
attacker(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)))).

25. By 24, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).
By 19, the attacker may know minnonce.
By 18, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 2, the attacker may know msg.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),msg).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),msg)).

26. The attacker has some term ns_16.
attacker(ns_16).

27. By 3, the attacker may know zero.
By 26, the attacker may know ns_16.
By 25, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),msg).
Using the function concat3 the attacker may obtain concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),msg)).
attacker(concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),msg))).

28. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),empty,empty,false))) that may be in a table by 1 may be read at get {1137}.
The message concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),msg)) that the attacker may have by 27 may be received at input {1023}.
So event RecvMsg(bob,alice,stagepack_a(sid_5),msg) may be executed at {1135}.
end(RecvMsg(bob,alice,stagepack_a(sid_5),msg)).

29. By 28, end(RecvMsg(bob,alice,stagepack_a(sid_5),msg)).
The goal is reached, represented in the following fact:
end(RecvMsg(bob,alice,stagepack_a(sid_5),msg)).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),msg)) ==> event(SendMsg(alice,c,stagepack_a(sid_a),msg)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),msg)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)))
goal reachable: begin(LeakM(phase0,alice)) && begin(LeakS(phase0,alice)) && attacker(msg) -> end(RecvMsg(bob,alice,stagepack_a(sid_5),msg))
Abbreviations:
sid_5 = sid[!1 = @sid]
goal reachable: begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && attacker(msg) -> end(RecvMsg(bob,alice,stagepack_a(sid_5),msg))
Abbreviations:
sid_5 = sid[!1 = @sid]
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),msg)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),msg)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice)))
goal reachable: begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && attacker(msg) -> end(RecvMsg(bob,alice,stagepack_a(sid_5),msg))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),empty,empty,false))) may be inserted in a table at insert {1022}.
table(statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),empty,empty,false)))).

2. We assume as hypothesis that
attacker(msg).

3. Using the function zero the attacker may obtain zero.
attacker(zero).

4. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {963}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

5. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

6. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

7. The message (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))) may be sent to the attacker at output {15}.
attacker((validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)))).

8. By 7, the attacker may know (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(alice),g)).
attacker(validkey(dhexp_real(key_m(alice),g))).

9. By 7, the attacker may know (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(alice),g)).
attacker(validkey(dhexp_real(key_s(alice),g))).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 8, the attacker may know validkey(dhexp_real(key_m(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g)))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))).
By 6, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

17. By 16, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))).
By 5, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 3, the attacker may know zero.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
attacker(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero)).

19. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

20. The event LeakS(phase0,bob) may be executed at {1418}.
The event LeakM(phase0,bob) may be executed at {1419}.
So the message (key_s(bob),key_m(bob)) may be sent to the attacker at output {1420}.
attacker((key_s(bob),key_m(bob))).

21. By 20, the attacker may know (key_s(bob),key_m(bob)).
Using the function 1-proj-2-tuple the attacker may obtain key_s(bob).
attacker(key_s(bob)).

22. By 21, the attacker may know key_s(bob).
By 8, the attacker may know validkey(dhexp_real(key_m(alice),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)).
attacker(dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).

23. By 12, the attacker may know hash(somename,empty).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),zero).
attacker(hmac_hash1(hash(somename,empty),zero)).

24. By 23, the attacker may know hmac_hash1(hash(somename,empty),zero).
By 22, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).
attacker(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)))).

25. By 24, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).
By 19, the attacker may know minnonce.
By 18, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 2, the attacker may know msg.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),msg).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),msg)).

26. The attacker has some term ns_16.
attacker(ns_16).

27. By 3, the attacker may know zero.
By 26, the attacker may know ns_16.
By 25, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),msg).
Using the function concat3 the attacker may obtain concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),msg)).
attacker(concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),msg))).

28. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),empty,empty,false))) that may be in a table by 1 may be read at get {1137}.
The message concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),msg)) that the attacker may have by 27 may be received at input {1023}.
So event RecvMsg(bob,alice,stagepack_a(sid_5),msg) may be executed at {1135}.
end(RecvMsg(bob,alice,stagepack_a(sid_5),msg)).

29. By 28, end(RecvMsg(bob,alice,stagepack_a(sid_5),msg)).
The goal is reached, represented in the following fact:
end(RecvMsg(bob,alice,stagepack_a(sid_5),msg)).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),msg)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(LeakM(phase1,bob)) && begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> attacker_p1(msg_a(alice,bob,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {74}.
table(statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

2. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {187}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {184}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) may be sent to the attacker at output {186}.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

3. By 2, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).

4. By 3, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).

5. By 2, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_5),g))).

6. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {963}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

7. By 6, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

8. The message (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))) may be sent to the attacker at output {15}.
attacker((validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)))).

9. By 8, the attacker may know (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(alice),g)).
attacker(validkey(dhexp_real(key_m(alice),g))).

10. By 8, the attacker may know (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(alice),g)).
attacker(validkey(dhexp_real(key_s(alice),g))).

11. Using the function empty the attacker may obtain empty.
attacker(empty).

12. Using the function somename the attacker may obtain somename.
attacker(somename).

13. By 12, the attacker may know somename.
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

14. By 13, the attacker may know hash(somename,empty).
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

15. By 14, the attacker may know hash(hash(somename,empty),empty).
By 10, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

16. By 15, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 9, the attacker may know validkey(dhexp_real(key_m(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g)))).

17. By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))).
By 7, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))).
By 7, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g)))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))).
By 5, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
attacker(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g)))).

20. By 19, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
So the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g)))).

21. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

22. By 9, the attacker may know validkey(dhexp_real(key_m(alice),g)).
So the attacker may know validkey(dhexp_real(key_m(alice),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_m(alice),g))).

23. The event LeakS(phase1,bob) may be executed at {1422}.
The event LeakM(phase1,bob) may be executed at {1423}.
So the message (key_s(bob),key_m(bob)) may be sent to the attacker in phase 1 at output {1424}.
attacker_p1((key_s(bob),key_m(bob))).

24. By 23, the attacker may know (key_s(bob),key_m(bob)) in phase 1.
Using the function 1-proj-2-tuple the attacker may obtain key_s(bob) in phase 1.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 22, the attacker may know validkey(dhexp_real(key_m(alice),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_m(alice),dhexp_real(key_s(bob),g)) in phase 1.
attacker_p1(dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))).

26. By 5, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_5),g))).

27. By 24, the attacker may know key_s(bob) in phase 1.
By 26, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g)) in phase 1.
attacker_p1(dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))).

28. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

29. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

30. By 29, the attacker may know somename in phase 1.
By 28, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

31. By 30, the attacker may know hash(somename,empty) in phase 1.
By 27, the attacker may know dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g)))).

32. By 31, the attacker may know hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))) in phase 1.
By 25, the attacker may know dhexp_real(key_m(alice),dhexp_real(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g)))).

33. By 32, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))) in phase 1.
By 21, the attacker may know minnonce in phase 1.
By 20, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))) in phase 1.
By 4, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).

34. By 33, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_5) in phase 1.
attacker_p1(msg_a(alice,bob,sid_5)).

35. By 34, attacker_p1(msg_a(alice,bob,sid_5)).
The goal is reached, represented in the following fact:
attacker_p1(msg_a(alice,bob,sid_5)).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakM(px,bob))
goal reachable: begin(LeakM(phase1,bob)) && begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> attacker_p1(msg_a(alice,bob,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]
goal reachable: begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> attacker_p1(msg_a(alice,bob,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]
RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakM(px,bob)) is true.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(px,bob)) && event(LeakM(px,bob)) && event(LeakS(pz,alice)) && event(LeakM(pz,alice)))
goal reachable: begin(LeakM(phase1,bob)) && begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> attacker_p1(msg_a(alice,bob,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {74}.
table(statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

2. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {187}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {184}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) may be sent to the attacker at output {186}.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

3. By 2, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).

4. By 3, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).

5. By 2, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_5),g))).

6. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {963}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

7. By 6, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

8. The message (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))) may be sent to the attacker at output {15}.
attacker((validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)))).

9. By 8, the attacker may know (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(alice),g)).
attacker(validkey(dhexp_real(key_m(alice),g))).

10. By 8, the attacker may know (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(alice),g)).
attacker(validkey(dhexp_real(key_s(alice),g))).

11. Using the function empty the attacker may obtain empty.
attacker(empty).

12. Using the function somename the attacker may obtain somename.
attacker(somename).

13. By 12, the attacker may know somename.
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

14. By 13, the attacker may know hash(somename,empty).
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

15. By 14, the attacker may know hash(hash(somename,empty),empty).
By 10, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

16. By 15, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 9, the attacker may know validkey(dhexp_real(key_m(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g)))).

17. By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))).
By 7, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))).
By 7, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g)))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))).
By 5, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
attacker(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g)))).

20. By 19, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
So the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g)))).

21. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

22. By 9, the attacker may know validkey(dhexp_real(key_m(alice),g)).
So the attacker may know validkey(dhexp_real(key_m(alice),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_m(alice),g))).

23. The event LeakS(phase1,bob) may be executed at {1422}.
The event LeakM(phase1,bob) may be executed at {1423}.
So the message (key_s(bob),key_m(bob)) may be sent to the attacker in phase 1 at output {1424}.
attacker_p1((key_s(bob),key_m(bob))).

24. By 23, the attacker may know (key_s(bob),key_m(bob)) in phase 1.
Using the function 1-proj-2-tuple the attacker may obtain key_s(bob) in phase 1.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 22, the attacker may know validkey(dhexp_real(key_m(alice),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_m(alice),dhexp_real(key_s(bob),g)) in phase 1.
attacker_p1(dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))).

26. By 5, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_5),g))).

27. By 24, the attacker may know key_s(bob) in phase 1.
By 26, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g)) in phase 1.
attacker_p1(dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))).

28. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

29. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

30. By 29, the attacker may know somename in phase 1.
By 28, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

31. By 30, the attacker may know hash(somename,empty) in phase 1.
By 27, the attacker may know dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g)))).

32. By 31, the attacker may know hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))) in phase 1.
By 25, the attacker may know dhexp_real(key_m(alice),dhexp_real(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g)))).

33. By 32, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))) in phase 1.
By 21, the attacker may know minnonce in phase 1.
By 20, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))) in phase 1.
By 4, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).

34. By 33, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_5) in phase 1.
attacker_p1(msg_a(alice,bob,sid_5)).

35. By 34, attacker_p1(msg_a(alice,bob,sid_5)).
The goal is reached, represented in the following fact:
attacker_p1(msg_a(alice,bob,sid_5)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(px,bob)) && event(LeakM(px,bob)) && event(LeakS(pz,alice)) && event(LeakM(pz,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))
goal reachable: begin(LeakM(phase1,bob)) && begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> attacker_p1(msg_a(alice,bob,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {74}.
table(statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

2. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {187}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {184}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) may be sent to the attacker at output {186}.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

3. By 2, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).

4. By 3, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).

5. By 2, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_5),g))).

6. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {963}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

7. By 6, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

8. The message (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))) may be sent to the attacker at output {15}.
attacker((validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)))).

9. By 8, the attacker may know (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(alice),g)).
attacker(validkey(dhexp_real(key_m(alice),g))).

10. By 8, the attacker may know (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(alice),g)).
attacker(validkey(dhexp_real(key_s(alice),g))).

11. Using the function empty the attacker may obtain empty.
attacker(empty).

12. Using the function somename the attacker may obtain somename.
attacker(somename).

13. By 12, the attacker may know somename.
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

14. By 13, the attacker may know hash(somename,empty).
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

15. By 14, the attacker may know hash(hash(somename,empty),empty).
By 10, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

16. By 15, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 9, the attacker may know validkey(dhexp_real(key_m(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g)))).

17. By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))).
By 7, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))).
By 7, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g)))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))).
By 5, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
attacker(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g)))).

20. By 19, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
So the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g)))).

21. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

22. By 9, the attacker may know validkey(dhexp_real(key_m(alice),g)).
So the attacker may know validkey(dhexp_real(key_m(alice),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_m(alice),g))).

23. The event LeakS(phase1,bob) may be executed at {1422}.
The event LeakM(phase1,bob) may be executed at {1423}.
So the message (key_s(bob),key_m(bob)) may be sent to the attacker in phase 1 at output {1424}.
attacker_p1((key_s(bob),key_m(bob))).

24. By 23, the attacker may know (key_s(bob),key_m(bob)) in phase 1.
Using the function 1-proj-2-tuple the attacker may obtain key_s(bob) in phase 1.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 22, the attacker may know validkey(dhexp_real(key_m(alice),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_m(alice),dhexp_real(key_s(bob),g)) in phase 1.
attacker_p1(dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))).

26. By 5, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_5),g))).

27. By 24, the attacker may know key_s(bob) in phase 1.
By 26, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g)) in phase 1.
attacker_p1(dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))).

28. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

29. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

30. By 29, the attacker may know somename in phase 1.
By 28, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

31. By 30, the attacker may know hash(somename,empty) in phase 1.
By 27, the attacker may know dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g)))).

32. By 31, the attacker may know hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))) in phase 1.
By 25, the attacker may know dhexp_real(key_m(alice),dhexp_real(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g)))).

33. By 32, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))) in phase 1.
By 21, the attacker may know minnonce in phase 1.
By 20, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))) in phase 1.
By 4, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).

34. By 33, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_5) in phase 1.
attacker_p1(msg_a(alice,bob,sid_5)).

35. By 34, attacker_p1(msg_a(alice,bob,sid_5)).
The goal is reached, represented in the following fact:
attacker_p1(msg_a(alice,bob,sid_5)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),msg))
goal reachable: begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && attacker(msg) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(alice,bob,stagepack_b(sid_5),msg))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {74}.
table(statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

2. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {187}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {184}.
So the entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {185}.
table(statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

3. We assume as hypothesis that
attacker(msg).

4. Using the function zero the attacker may obtain zero.
attacker(zero).

5. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {187}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {184}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) may be sent to the attacker at output {186}.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

6. By 5, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).

7. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {187}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {184}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) may be sent to the attacker at output {186}.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

8. By 7, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_5),g))).

9. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {963}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

10. By 9, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

11. The message (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))) may be sent to the attacker at output {15}.
attacker((validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)))).

12. By 11, the attacker may know (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(alice),g)).
attacker(validkey(dhexp_real(key_m(alice),g))).

13. By 11, the attacker may know (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(alice),g)).
attacker(validkey(dhexp_real(key_s(alice),g))).

14. Using the function empty the attacker may obtain empty.
attacker(empty).

15. Using the function somename the attacker may obtain somename.
attacker(somename).

16. By 15, the attacker may know somename.
By 14, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

17. By 16, the attacker may know hash(somename,empty).
By 14, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

18. By 17, the attacker may know hash(hash(somename,empty),empty).
By 13, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

19. By 18, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 12, the attacker may know validkey(dhexp_real(key_m(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g)))).

20. By 19, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))).
By 10, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

21. By 20, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))).
By 10, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g)))).

22. By 21, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))).
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
attacker(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g)))).

23. By 22, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

24. By 23, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
By 4, the attacker may know zero.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero)).

25. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

26. The event LeakS(phase0,bob) may be executed at {1418}.
The event LeakM(phase0,bob) may be executed at {1419}.
So the message (key_s(bob),key_m(bob)) may be sent to the attacker at output {1420}.
attacker((key_s(bob),key_m(bob))).

27. By 26, the attacker may know (key_s(bob),key_m(bob)).
Using the function 1-proj-2-tuple the attacker may obtain key_s(bob).
attacker(key_s(bob)).

28. By 27, the attacker may know key_s(bob).
By 12, the attacker may know validkey(dhexp_real(key_m(alice),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)).
attacker(dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).

29. By 27, the attacker may know key_s(bob).
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))).

30. By 16, the attacker may know hash(somename,empty).
By 29, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))).
attacker(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g)))).

31. By 30, the attacker may know hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))).
By 28, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).
attacker(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)))).

32. By 31, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).
By 4, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero)).

33. By 32, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero).
By 4, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero)).

34. By 33, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero).
By 4, the attacker may know zero.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero).
attacker(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero)).

35. By 34, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero).
By 25, the attacker may know minnonce.
By 24, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero).
By 3, the attacker may know msg.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),msg).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),msg)).

36. The attacker has some term ns_16.
attacker(ns_16).

37. By 4, the attacker may know zero.
By 36, the attacker may know ns_16.
By 35, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),msg).
Using the function concat3 the attacker may obtain concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),msg)).
attacker(concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),msg))).

38. The entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {344}.
The message concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),msg)) that the attacker may have by 37 may be received at input {188}.
So event RecvMsg(alice,bob,stagepack_b(sid_5),msg) may be executed at {342}.
end(RecvMsg(alice,bob,stagepack_b(sid_5),msg)).

39. By 38, end(RecvMsg(alice,bob,stagepack_b(sid_5),msg)).
The goal is reached, represented in the following fact:
end(RecvMsg(alice,bob,stagepack_b(sid_5),msg)).


RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),msg)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),msg)) ==> event(SendMsg(bob,c,stagepack_b(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice)))
goal reachable: begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && attacker(msg) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(alice,bob,stagepack_b(sid_5),msg))
Abbreviations:
sid_5 = sid[!1 = @sid]
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),msg)) ==> event(SendMsg(bob,c,stagepack_b(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),msg)) ==> event(SendMsg(bob,c,stagepack_b(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)))
goal reachable: begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && attacker(msg) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(alice,bob,stagepack_b(sid_5),msg))
Abbreviations:
sid_5 = sid[!1 = @sid]
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),msg)) ==> event(SendMsg(bob,c,stagepack_b(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice)))
goal reachable: begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && attacker(msg) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(alice,bob,stagepack_b(sid_5),msg))
Abbreviations:
sid_5 = sid[!1 = @sid]
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)))
goal reachable: begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && attacker(msg) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(alice,bob,stagepack_b(sid_5),msg))
Abbreviations:
sid_5 = sid[!1 = @sid]
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.
Starting query not attacker_p1(msg_b(bob,alice,sid_b))
goal reachable: begin(LeakM(phase1,alice)) && begin(LeakS(phase1,alice)) && begin(SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5))) && begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) -> attacker_p1(msg_b(bob,alice,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),empty,empty,false))) may be inserted in a table at insert {1022}.
table(statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),empty,empty,false)))).

2. The attacker has some term plaintext_a_2.
attacker(plaintext_a_2).

3. Using the function zero the attacker may obtain zero.
attacker(zero).

4. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {963}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

5. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

6. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

7. The message (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))) may be sent to the attacker at output {15}.
attacker((validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)))).

8. By 7, the attacker may know (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(alice),g)).
attacker(validkey(dhexp_real(key_m(alice),g))).

9. By 7, the attacker may know (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(alice),g)).
attacker(validkey(dhexp_real(key_s(alice),g))).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 8, the attacker may know validkey(dhexp_real(key_m(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g)))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))).
By 6, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

17. By 16, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))).
By 5, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 3, the attacker may know zero.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
attacker(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero)).

19. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

20. The event LeakS(phase0,bob) may be executed at {1418}.
The event LeakM(phase0,bob) may be executed at {1419}.
So the message (key_s(bob),key_m(bob)) may be sent to the attacker at output {1420}.
attacker((key_s(bob),key_m(bob))).

21. By 20, the attacker may know (key_s(bob),key_m(bob)).
Using the function 1-proj-2-tuple the attacker may obtain key_s(bob).
attacker(key_s(bob)).

22. By 21, the attacker may know key_s(bob).
By 8, the attacker may know validkey(dhexp_real(key_m(alice),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)).
attacker(dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).

23. By 12, the attacker may know hash(somename,empty).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),zero).
attacker(hmac_hash1(hash(somename,empty),zero)).

24. By 23, the attacker may know hmac_hash1(hash(somename,empty),zero).
By 22, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).
attacker(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)))).

25. By 24, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).
By 19, the attacker may know minnonce.
By 18, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 2, the attacker may know plaintext_a_2.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).

26. The attacker has some term ns_16.
attacker(ns_16).

27. By 3, the attacker may know zero.
By 26, the attacker may know ns_16.
By 25, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

28. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),empty,empty,false))) that may be in a table by 1 may be read at get {1137}.
The message concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)) that the attacker may have by 27 may be received at input {1023}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),zero,empty,false))) may be inserted in a table at insert {1136}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),zero,empty,false)))).

29. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),zero,empty,false))) that may be in a table by 28 may be read at get {1292}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1289}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))) may be sent to the attacker at output {1291}.
attacker(concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

30. By 29, the attacker may know concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).

31. By 30, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).

32. The attacker has some term plaintext_a_3.
attacker(plaintext_a_3).

33. By 24, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).
By 19, the attacker may know minnonce.
By 18, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 32, the attacker may know plaintext_a_3.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)).

34. The attacker has some term ns_17.
attacker(ns_17).

35. By 3, the attacker may know zero.
By 34, the attacker may know ns_17.
By 33, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3).
Using the function concat3 the attacker may obtain concat3(zero,ns_17,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)).
attacker(concat3(zero,ns_17,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))).

36. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),empty,empty,false))) that may be in a table by 1 may be read at get {1137}.
The message concat3(zero,ns_17,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)) that the attacker may have by 35 may be received at input {1023}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),zero,empty,false))) may be inserted in a table at insert {1136}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),zero,empty,false)))).

37. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),zero,empty,false))) that may be in a table by 36 may be read at get {1292}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1289}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_e(bob,alice,sid_5),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_5),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))) may be sent to the attacker at output {1291}.
attacker(concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_e(bob,alice,sid_5),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_5),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

38. By 37, the attacker may know concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_e(bob,alice,sid_5),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_5),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(bob,alice,sid_5),g)).
attacker(validkey(dhexp_real(key_e(bob,alice,sid_5),g))).

39. By 18, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 25, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

40. By 39, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
By 38, the attacker may know validkey(dhexp_real(key_e(bob,alice,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g)))).

41. By 40, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))).
So the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g)))).

42. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

43. By 38, the attacker may know validkey(dhexp_real(key_e(bob,alice,sid_5),g)).
So the attacker may know validkey(dhexp_real(key_e(bob,alice,sid_5),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(bob,alice,sid_5),g))).

44. The event LeakS(phase1,alice) may be executed at {475}.
The event LeakM(phase1,alice) may be executed at {476}.
So the message (key_s(alice),key_m(alice)) may be sent to the attacker in phase 1 at output {477}.
attacker_p1((key_s(alice),key_m(alice))).

45. By 44, the attacker may know (key_s(alice),key_m(alice)) in phase 1.
Using the function 2-proj-2-tuple the attacker may obtain key_m(alice) in phase 1.
attacker_p1(key_m(alice)).

46. By 45, the attacker may know key_m(alice) in phase 1.
By 43, the attacker may know validkey(dhexp_real(key_e(bob,alice,sid_5),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g)) in phase 1.
attacker_p1(dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))).

47. By 44, the attacker may know (key_s(alice),key_m(alice)) in phase 1.
Using the function 1-proj-2-tuple the attacker may obtain key_s(alice) in phase 1.
attacker_p1(key_s(alice)).

48. By 47, the attacker may know key_s(alice) in phase 1.
By 43, the attacker may know validkey(dhexp_real(key_e(bob,alice,sid_5),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g)) in phase 1.
attacker_p1(dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))).

49. Using the function zero the attacker may obtain zero in phase 1.
attacker_p1(zero).

50. By 6, the attacker may know validkey(dhexp_real(key_s(bob),g)).
So the attacker may know validkey(dhexp_real(key_s(bob),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(bob),g))).

51. By 45, the attacker may know key_m(alice) in phase 1.
By 50, the attacker may know validkey(dhexp_real(key_s(bob),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).

52. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

53. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

54. By 53, the attacker may know somename in phase 1.
By 52, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

55. By 54, the attacker may know hash(somename,empty) in phase 1.
By 49, the attacker may know zero in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),zero) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),zero)).

56. By 55, the attacker may know hmac_hash1(hash(somename,empty),zero) in phase 1.
By 51, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)))).

57. By 56, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))) in phase 1.
By 49, the attacker may know zero in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero)).

58. By 57, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero) in phase 1.
By 48, the attacker may know dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g)))).

59. By 58, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))) in phase 1.
By 46, the attacker may know dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g)))).

60. By 59, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))) in phase 1.
By 42, the attacker may know minnonce in phase 1.
By 41, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))) in phase 1.
By 31, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).

61. By 60, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_b(bob,alice,sid_5) in phase 1.
attacker_p1(msg_b(bob,alice,sid_5)).

62. By 61, attacker_p1(msg_b(bob,alice,sid_5)).
The goal is reached, represented in the following fact:
attacker_p1(msg_b(bob,alice,sid_5)).


RESULT not attacker_p1(msg_b(bob,alice,sid_b)) cannot be proved.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(px,alice)) && event(LeakM(px,alice))
goal reachable: begin(LeakM(phase1,alice)) && begin(LeakS(phase1,alice)) && begin(SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5))) && begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) -> attacker_p1(msg_b(bob,alice,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5))) && begin(LeakM(phase0,alice)) && begin(LeakS(phase0,alice)) -> attacker_p1(msg_b(bob,alice,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(px,alice)) && event(LeakM(px,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(px,alice)) && event(LeakM(px,alice)) && event(LeakS(pz,bob)) && event(LeakM(pz,bob)))
goal reachable: begin(LeakM(phase1,alice)) && begin(LeakS(phase1,alice)) && begin(SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5))) && begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) -> attacker_p1(msg_b(bob,alice,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5))) && begin(LeakM(phase0,alice)) && begin(LeakS(phase0,alice)) -> attacker_p1(msg_b(bob,alice,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(px,alice)) && event(LeakM(px,alice)) && event(LeakS(pz,bob)) && event(LeakM(pz,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))
goal reachable: begin(LeakM(phase1,alice)) && begin(LeakS(phase1,alice)) && begin(SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5))) && begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) -> attacker_p1(msg_b(bob,alice,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),empty,empty,false))) may be inserted in a table at insert {1022}.
table(statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),empty,empty,false)))).

2. The attacker has some term plaintext_a_2.
attacker(plaintext_a_2).

3. Using the function zero the attacker may obtain zero.
attacker(zero).

4. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {963}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

5. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

6. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

7. The message (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))) may be sent to the attacker at output {15}.
attacker((validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)))).

8. By 7, the attacker may know (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(alice),g)).
attacker(validkey(dhexp_real(key_m(alice),g))).

9. By 7, the attacker may know (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(alice),g)).
attacker(validkey(dhexp_real(key_s(alice),g))).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 8, the attacker may know validkey(dhexp_real(key_m(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g)))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))).
By 6, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

17. By 16, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))).
By 5, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 3, the attacker may know zero.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
attacker(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero)).

19. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

20. The event LeakS(phase0,bob) may be executed at {1418}.
The event LeakM(phase0,bob) may be executed at {1419}.
So the message (key_s(bob),key_m(bob)) may be sent to the attacker at output {1420}.
attacker((key_s(bob),key_m(bob))).

21. By 20, the attacker may know (key_s(bob),key_m(bob)).
Using the function 1-proj-2-tuple the attacker may obtain key_s(bob).
attacker(key_s(bob)).

22. By 21, the attacker may know key_s(bob).
By 8, the attacker may know validkey(dhexp_real(key_m(alice),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)).
attacker(dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).

23. By 12, the attacker may know hash(somename,empty).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),zero).
attacker(hmac_hash1(hash(somename,empty),zero)).

24. By 23, the attacker may know hmac_hash1(hash(somename,empty),zero).
By 22, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).
attacker(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)))).

25. By 24, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).
By 19, the attacker may know minnonce.
By 18, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 2, the attacker may know plaintext_a_2.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).

26. The attacker has some term ns_16.
attacker(ns_16).

27. By 3, the attacker may know zero.
By 26, the attacker may know ns_16.
By 25, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

28. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),empty,empty,false))) that may be in a table by 1 may be read at get {1137}.
The message concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)) that the attacker may have by 27 may be received at input {1023}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),zero,empty,false))) may be inserted in a table at insert {1136}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),zero,empty,false)))).

29. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),zero,empty,false))) that may be in a table by 28 may be read at get {1292}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1289}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))) may be sent to the attacker at output {1291}.
attacker(concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

30. By 29, the attacker may know concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).

31. By 30, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).

32. The attacker has some term plaintext_a_3.
attacker(plaintext_a_3).

33. By 24, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).
By 19, the attacker may know minnonce.
By 18, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 32, the attacker may know plaintext_a_3.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)).

34. The attacker has some term ns_17.
attacker(ns_17).

35. By 3, the attacker may know zero.
By 34, the attacker may know ns_17.
By 33, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3).
Using the function concat3 the attacker may obtain concat3(zero,ns_17,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)).
attacker(concat3(zero,ns_17,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))).

36. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),empty,empty,false))) that may be in a table by 1 may be read at get {1137}.
The message concat3(zero,ns_17,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)) that the attacker may have by 35 may be received at input {1023}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),zero,empty,false))) may be inserted in a table at insert {1136}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),zero,empty,false)))).

37. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),zero,empty,false))) that may be in a table by 36 may be read at get {1292}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1289}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_e(bob,alice,sid_5),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_5),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))) may be sent to the attacker at output {1291}.
attacker(concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_e(bob,alice,sid_5),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_5),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

38. By 37, the attacker may know concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_e(bob,alice,sid_5),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_5),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(bob,alice,sid_5),g)).
attacker(validkey(dhexp_real(key_e(bob,alice,sid_5),g))).

39. By 18, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 25, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

40. By 39, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
By 38, the attacker may know validkey(dhexp_real(key_e(bob,alice,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g)))).

41. By 40, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))).
So the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g)))).

42. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

43. By 38, the attacker may know validkey(dhexp_real(key_e(bob,alice,sid_5),g)).
So the attacker may know validkey(dhexp_real(key_e(bob,alice,sid_5),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(bob,alice,sid_5),g))).

44. The event LeakS(phase1,alice) may be executed at {475}.
The event LeakM(phase1,alice) may be executed at {476}.
So the message (key_s(alice),key_m(alice)) may be sent to the attacker in phase 1 at output {477}.
attacker_p1((key_s(alice),key_m(alice))).

45. By 44, the attacker may know (key_s(alice),key_m(alice)) in phase 1.
Using the function 2-proj-2-tuple the attacker may obtain key_m(alice) in phase 1.
attacker_p1(key_m(alice)).

46. By 45, the attacker may know key_m(alice) in phase 1.
By 43, the attacker may know validkey(dhexp_real(key_e(bob,alice,sid_5),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g)) in phase 1.
attacker_p1(dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))).

47. By 44, the attacker may know (key_s(alice),key_m(alice)) in phase 1.
Using the function 1-proj-2-tuple the attacker may obtain key_s(alice) in phase 1.
attacker_p1(key_s(alice)).

48. By 47, the attacker may know key_s(alice) in phase 1.
By 43, the attacker may know validkey(dhexp_real(key_e(bob,alice,sid_5),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g)) in phase 1.
attacker_p1(dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))).

49. Using the function zero the attacker may obtain zero in phase 1.
attacker_p1(zero).

50. By 6, the attacker may know validkey(dhexp_real(key_s(bob),g)).
So the attacker may know validkey(dhexp_real(key_s(bob),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(bob),g))).

51. By 45, the attacker may know key_m(alice) in phase 1.
By 50, the attacker may know validkey(dhexp_real(key_s(bob),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).

52. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

53. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

54. By 53, the attacker may know somename in phase 1.
By 52, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

55. By 54, the attacker may know hash(somename,empty) in phase 1.
By 49, the attacker may know zero in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),zero) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),zero)).

56. By 55, the attacker may know hmac_hash1(hash(somename,empty),zero) in phase 1.
By 51, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)))).

57. By 56, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))) in phase 1.
By 49, the attacker may know zero in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero)).

58. By 57, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero) in phase 1.
By 48, the attacker may know dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g)))).

59. By 58, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))) in phase 1.
By 46, the attacker may know dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g)))).

60. By 59, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))) in phase 1.
By 42, the attacker may know minnonce in phase 1.
By 41, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))) in phase 1.
By 31, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).

61. By 60, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_b(bob,alice,sid_5) in phase 1.
attacker_p1(msg_b(bob,alice,sid_5)).

62. By 61, attacker_p1(msg_b(bob,alice,sid_5)).
The goal is reached, represented in the following fact:
attacker_p1(msg_b(bob,alice,sid_5)).


RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) && event(LeakM(phase0,alice)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),msg))
goal reachable: attacker(msg) && begin(SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5))) && begin(LeakM(phase0,alice)) && begin(LeakS(phase0,alice)) -> end(RecvMsg(bob,alice,stagepack_c(sid_5),msg))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),empty,empty,false))) may be inserted in a table at insert {1022}.
table(statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),empty,empty,false)))).

2. The attacker has some term plaintext_a_2.
attacker(plaintext_a_2).

3. Using the function zero the attacker may obtain zero.
attacker(zero).

4. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {963}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

5. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

6. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

7. The message (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))) may be sent to the attacker at output {15}.
attacker((validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)))).

8. By 7, the attacker may know (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(alice),g)).
attacker(validkey(dhexp_real(key_m(alice),g))).

9. By 7, the attacker may know (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(alice),g)).
attacker(validkey(dhexp_real(key_s(alice),g))).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 8, the attacker may know validkey(dhexp_real(key_m(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g)))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))).
By 6, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

17. By 16, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))).
By 5, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 3, the attacker may know zero.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
attacker(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero)).

19. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

20. The event LeakS(phase0,alice) may be executed at {471}.
The event LeakM(phase0,alice) may be executed at {472}.
So the message (key_s(alice),key_m(alice)) may be sent to the attacker at output {473}.
attacker((key_s(alice),key_m(alice))).

21. By 20, the attacker may know (key_s(alice),key_m(alice)).
Using the function 2-proj-2-tuple the attacker may obtain key_m(alice).
attacker(key_m(alice)).

22. By 21, the attacker may know key_m(alice).
By 6, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)).
attacker(dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).

23. By 12, the attacker may know hash(somename,empty).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),zero).
attacker(hmac_hash1(hash(somename,empty),zero)).

24. By 23, the attacker may know hmac_hash1(hash(somename,empty),zero).
By 22, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).
attacker(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)))).

25. By 24, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).
By 19, the attacker may know minnonce.
By 18, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 2, the attacker may know plaintext_a_2.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).

26. The attacker has some term ns_16.
attacker(ns_16).

27. By 3, the attacker may know zero.
By 26, the attacker may know ns_16.
By 25, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

28. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),empty,empty,false))) that may be in a table by 1 may be read at get {1137}.
The message concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)) that the attacker may have by 27 may be received at input {1023}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),zero,empty,false))) may be inserted in a table at insert {1136}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),zero,empty,false)))).

29. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),zero,empty,false))) that may be in a table by 28 may be read at get {1292}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1289}.
So the entry statestore(bob,alice,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce))) may be inserted in a table at insert {1290}.
table(statestore(bob,alice,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce)))).

30. We assume as hypothesis that
attacker(msg).

31. The attacker has some term ns_17.
attacker(ns_17).

32. By 3, the attacker may know zero.
By 31, the attacker may know ns_17.
By 25, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_17,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(concat3(zero,ns_17,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

33. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),empty,empty,false))) that may be in a table by 1 may be read at get {1137}.
The message concat3(zero,ns_17,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)) that the attacker may have by 32 may be received at input {1023}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),zero,empty,false))) may be inserted in a table at insert {1136}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),zero,empty,false)))).

34. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),zero,empty,false))) that may be in a table by 33 may be read at get {1292}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1289}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))) may be sent to the attacker at output {1291}.
attacker(concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

35. By 34, the attacker may know concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).

36. The attacker has some term plaintext_a_3.
attacker(plaintext_a_3).

37. By 24, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).
By 19, the attacker may know minnonce.
By 18, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 36, the attacker may know plaintext_a_3.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)).

38. The attacker has some term ns_18.
attacker(ns_18).

39. By 3, the attacker may know zero.
By 38, the attacker may know ns_18.
By 37, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3).
Using the function concat3 the attacker may obtain concat3(zero,ns_18,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)).
attacker(concat3(zero,ns_18,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))).

40. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),empty,empty,false))) that may be in a table by 1 may be read at get {1137}.
The message concat3(zero,ns_18,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)) that the attacker may have by 39 may be received at input {1023}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),zero,empty,false))) may be inserted in a table at insert {1136}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),zero,empty,false)))).

41. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),zero,empty,false))) that may be in a table by 40 may be read at get {1292}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1289}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_e(bob,alice,sid_5),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_5),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))) may be sent to the attacker at output {1291}.
attacker(concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_e(bob,alice,sid_5),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_5),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

42. By 41, the attacker may know concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_e(bob,alice,sid_5),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_5),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(bob,alice,sid_5),g)).
attacker(validkey(dhexp_real(key_e(bob,alice,sid_5),g))).

43. By 18, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 25, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

44. By 43, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
By 42, the attacker may know validkey(dhexp_real(key_e(bob,alice,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g)))).

45. By 44, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))).
By 35, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

46. By 21, the attacker may know key_m(alice).
By 42, the attacker may know validkey(dhexp_real(key_e(bob,alice,sid_5),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g)).
attacker(dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))).

47. By 20, the attacker may know (key_s(alice),key_m(alice)).
Using the function 1-proj-2-tuple the attacker may obtain key_s(alice).
attacker(key_s(alice)).

48. By 47, the attacker may know key_s(alice).
By 42, the attacker may know validkey(dhexp_real(key_e(bob,alice,sid_5),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g)).
attacker(dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))).

49. By 23, the attacker may know hmac_hash1(hash(somename,empty),zero).
By 22, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).
attacker(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)))).

50. By 49, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero)).

51. By 50, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero).
By 48, the attacker may know dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g)))).

52. By 51, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))).
By 46, the attacker may know dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g)))).

53. By 52, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero)).

54. By 53, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero).
By 19, the attacker may know minnonce.
By 45, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
By 30, the attacker may know msg.
Using the function encrypt the attacker may obtain encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),msg).
attacker(encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),msg)).

55. The attacker has some term ns_19.
attacker(ns_19).

56. The attacker has some term ne_20.
attacker(ne_20).

57. By 56, the attacker may know ne_20.
By 55, the attacker may know ns_19.
By 54, the attacker may know encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),msg).
Using the function concat3 the attacker may obtain concat3(ne_20,ns_19,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),msg)).
attacker(concat3(ne_20,ns_19,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),msg))).

58. The entry statestore(bob,alice,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce))) that may be in a table by 29 may be read at get {1359}.
The message concat3(ne_20,ns_19,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),msg)) that the attacker may have by 57 may be received at input {1295}.
So event RecvMsg(bob,alice,stagepack_c(sid_5),msg) may be executed at {1357}.
end(RecvMsg(bob,alice,stagepack_c(sid_5),msg)).

59. By 58, end(RecvMsg(bob,alice,stagepack_c(sid_5),msg)).
The goal is reached, represented in the following fact:
end(RecvMsg(bob,alice,stagepack_c(sid_5),msg)).


RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),msg)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),msg)) ==> event(SendMsg(alice,c,stagepack_c(sid_a),msg)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)))
goal reachable: attacker(msg) && begin(SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5))) && begin(LeakM(phase0,alice)) && begin(LeakS(phase0,alice)) -> end(RecvMsg(bob,alice,stagepack_c(sid_5),msg))
Abbreviations:
sid_5 = sid[!1 = @sid]
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),msg)) ==> event(SendMsg(alice,c,stagepack_c(sid_a),msg)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),msg)) ==> event(SendMsg(alice,c,stagepack_c(sid_a),msg)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice)))
goal reachable: attacker(msg) && begin(SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5))) && begin(LeakM(phase0,alice)) && begin(LeakS(phase0,alice)) -> end(RecvMsg(bob,alice,stagepack_c(sid_5),msg))
Abbreviations:
sid_5 = sid[!1 = @sid]
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),msg)) ==> event(SendMsg(alice,c,stagepack_c(sid_a),msg)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),msg)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)))
goal reachable: attacker(msg) && begin(SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5))) && begin(LeakM(phase0,alice)) && begin(LeakS(phase0,alice)) -> end(RecvMsg(bob,alice,stagepack_c(sid_5),msg))
Abbreviations:
sid_5 = sid[!1 = @sid]
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),msg)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),msg)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice)))
goal reachable: attacker(msg) && begin(SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5))) && begin(LeakM(phase0,alice)) && begin(LeakS(phase0,alice)) -> end(RecvMsg(bob,alice,stagepack_c(sid_5),msg))
Abbreviations:
sid_5 = sid[!1 = @sid]
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),msg)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) is true.
Starting query not attacker_p1(msg_c(alice,bob,sid_a))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5))) && begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> attacker_p1(msg_c(alice,bob,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {74}.
table(statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

2. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {187}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {184}.
So the entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {185}.
table(statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

3. The attacker has some term plaintext_b_2.
attacker(plaintext_b_2).

4. Using the function zero the attacker may obtain zero.
attacker(zero).

5. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {187}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {184}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) may be sent to the attacker at output {186}.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

6. By 5, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).

7. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {187}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {184}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) may be sent to the attacker at output {186}.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

8. By 7, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_5),g))).

9. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {963}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

10. By 9, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

11. The message (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))) may be sent to the attacker at output {15}.
attacker((validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)))).

12. By 11, the attacker may know (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(alice),g)).
attacker(validkey(dhexp_real(key_m(alice),g))).

13. By 11, the attacker may know (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(alice),g)).
attacker(validkey(dhexp_real(key_s(alice),g))).

14. Using the function empty the attacker may obtain empty.
attacker(empty).

15. Using the function somename the attacker may obtain somename.
attacker(somename).

16. By 15, the attacker may know somename.
By 14, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

17. By 16, the attacker may know hash(somename,empty).
By 14, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

18. By 17, the attacker may know hash(hash(somename,empty),empty).
By 13, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

19. By 18, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 12, the attacker may know validkey(dhexp_real(key_m(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g)))).

20. By 19, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))).
By 10, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

21. By 20, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))).
By 10, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g)))).

22. By 21, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))).
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
attacker(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g)))).

23. By 22, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

24. By 23, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
By 4, the attacker may know zero.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero)).

25. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

26. The event LeakS(phase0,bob) may be executed at {1418}.
The event LeakM(phase0,bob) may be executed at {1419}.
So the message (key_s(bob),key_m(bob)) may be sent to the attacker at output {1420}.
attacker((key_s(bob),key_m(bob))).

27. By 26, the attacker may know (key_s(bob),key_m(bob)).
Using the function 1-proj-2-tuple the attacker may obtain key_s(bob).
attacker(key_s(bob)).

28. By 27, the attacker may know key_s(bob).
By 12, the attacker may know validkey(dhexp_real(key_m(alice),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)).
attacker(dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).

29. By 27, the attacker may know key_s(bob).
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))).

30. By 16, the attacker may know hash(somename,empty).
By 29, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))).
attacker(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g)))).

31. By 30, the attacker may know hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))).
By 28, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).
attacker(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)))).

32. By 31, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).
By 4, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero)).

33. By 32, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero).
By 4, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero)).

34. By 33, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero).
By 4, the attacker may know zero.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero).
attacker(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero)).

35. By 34, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero).
By 25, the attacker may know minnonce.
By 24, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero).
By 3, the attacker may know plaintext_b_2.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)).

36. The attacker has some term ns_16.
attacker(ns_16).

37. By 4, the attacker may know zero.
By 36, the attacker may know ns_16.
By 35, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)).
attacker(concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))).

38. The entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {344}.
The message concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)) that the attacker may have by 37 may be received at input {188}.
So the entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce))) may be inserted in a table at insert {343}.
table(statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce)))).

39. The entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce))) that may be in a table by 38 may be read at get {403}.
The event SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5)) may be executed at {400}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))) may be sent to the attacker at output {402}.
attacker(concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)))).

40. By 39, the attacker may know concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)).
attacker(encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))).

41. By 24, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero).
By 35, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))).

42. By 33, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero).
By 4, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero)).

43. By 42, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero).
By 4, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero)).

44. By 43, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero).
By 25, the attacker may know minnonce.
By 41, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)).
By 40, the attacker may know encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)).
attacker(aeadpack(true,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))).

45. By 44, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)).
Using the function 3-proj-aeadpack the attacker may obtain msg_c(alice,bob,sid_5).
attacker(msg_c(alice,bob,sid_5)).

46. By 45, the attacker may know msg_c(alice,bob,sid_5).
So the attacker may know msg_c(alice,bob,sid_5) in phase 1.
attacker_p1(msg_c(alice,bob,sid_5)).

47. By 46, attacker_p1(msg_c(alice,bob,sid_5)).
The goal is reached, represented in the following fact:
attacker_p1(msg_c(alice,bob,sid_5)).


RESULT not attacker_p1(msg_c(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakM(px,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5))) && begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> attacker_p1(msg_c(alice,bob,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakM(px,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(px,bob)) && event(LeakM(px,bob)) && event(LeakS(pz,alice)) && event(LeakM(pz,alice)))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5))) && begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> attacker_p1(msg_c(alice,bob,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(px,bob)) && event(LeakM(px,bob)) && event(LeakS(pz,alice)) && event(LeakM(pz,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5))) && begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> attacker_p1(msg_c(alice,bob,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),msg))
goal reachable: attacker(msg) && begin(SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5))) && begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(alice,bob,stagepack_d(sid_5),msg))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {74}.
table(statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

2. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {187}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {184}.
So the entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {185}.
table(statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

3. The attacker has some term plaintext_b_2.
attacker(plaintext_b_2).

4. Using the function zero the attacker may obtain zero.
attacker(zero).

5. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {187}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {184}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) may be sent to the attacker at output {186}.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

6. By 5, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).

7. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {187}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {184}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) may be sent to the attacker at output {186}.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

8. By 7, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_5),g))).

9. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {963}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

10. By 9, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

11. The message (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))) may be sent to the attacker at output {15}.
attacker((validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)))).

12. By 11, the attacker may know (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(alice),g)).
attacker(validkey(dhexp_real(key_m(alice),g))).

13. By 11, the attacker may know (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(alice),g)).
attacker(validkey(dhexp_real(key_s(alice),g))).

14. Using the function empty the attacker may obtain empty.
attacker(empty).

15. Using the function somename the attacker may obtain somename.
attacker(somename).

16. By 15, the attacker may know somename.
By 14, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

17. By 16, the attacker may know hash(somename,empty).
By 14, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

18. By 17, the attacker may know hash(hash(somename,empty),empty).
By 13, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

19. By 18, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 12, the attacker may know validkey(dhexp_real(key_m(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g)))).

20. By 19, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))).
By 10, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

21. By 20, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))).
By 10, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g)))).

22. By 21, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))).
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
attacker(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g)))).

23. By 22, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

24. By 23, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
By 4, the attacker may know zero.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero)).

25. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

26. The event LeakS(phase0,bob) may be executed at {1418}.
The event LeakM(phase0,bob) may be executed at {1419}.
So the message (key_s(bob),key_m(bob)) may be sent to the attacker at output {1420}.
attacker((key_s(bob),key_m(bob))).

27. By 26, the attacker may know (key_s(bob),key_m(bob)).
Using the function 1-proj-2-tuple the attacker may obtain key_s(bob).
attacker(key_s(bob)).

28. By 27, the attacker may know key_s(bob).
By 12, the attacker may know validkey(dhexp_real(key_m(alice),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)).
attacker(dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).

29. By 27, the attacker may know key_s(bob).
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))).

30. By 16, the attacker may know hash(somename,empty).
By 29, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))).
attacker(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g)))).

31. By 30, the attacker may know hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))).
By 28, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).
attacker(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)))).

32. By 31, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).
By 4, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero)).

33. By 32, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero).
By 4, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero)).

34. By 33, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero).
By 4, the attacker may know zero.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero).
attacker(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero)).

35. By 34, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero).
By 25, the attacker may know minnonce.
By 24, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero).
By 3, the attacker may know plaintext_b_2.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)).

36. The attacker has some term ns_16.
attacker(ns_16).

37. By 4, the attacker may know zero.
By 36, the attacker may know ns_16.
By 35, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)).
attacker(concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))).

38. The entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {344}.
The message concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)) that the attacker may have by 37 may be received at input {188}.
So the entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce))) may be inserted in a table at insert {343}.
table(statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce)))).

39. The entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce))) that may be in a table by 38 may be read at get {403}.
The event SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5)) may be executed at {400}.
So the entry statestore(alice,bob,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce))) may be inserted in a table at insert {401}.
table(statestore(alice,bob,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce)))).

40. We assume as hypothesis that
attacker(msg).

41. The attacker has some term ns_17.
attacker(ns_17).

42. By 4, the attacker may know zero.
By 41, the attacker may know ns_17.
By 35, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_17,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)).
attacker(concat3(zero,ns_17,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))).

43. The entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {344}.
The message concat3(zero,ns_17,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)) that the attacker may have by 42 may be received at input {188}.
So the entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce))) may be inserted in a table at insert {343}.
table(statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce)))).

44. The entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce))) that may be in a table by 43 may be read at get {403}.
The event SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5)) may be executed at {400}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))) may be sent to the attacker at output {402}.
attacker(concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)))).

45. By 44, the attacker may know concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)).
attacker(encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))).

46. By 24, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero).
By 35, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))).

47. By 46, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)).
By 45, the attacker may know encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)))).

48. By 33, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero).
By 4, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero)).

49. By 48, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero).
By 4, the attacker may know zero.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero).
attacker(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero)).

50. By 49, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero).
By 25, the attacker may know minnonce.
By 47, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))).
By 40, the attacker may know msg.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))),msg).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))),msg)).

51. The attacker has some term ns_18.
attacker(ns_18).

52. The attacker has some term ne_20.
attacker(ne_20).

53. By 52, the attacker may know ne_20.
By 51, the attacker may know ns_18.
By 50, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))),msg).
Using the function concat3 the attacker may obtain concat3(ne_20,ns_18,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))),msg)).
attacker(concat3(ne_20,ns_18,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))),msg))).

54. The entry statestore(alice,bob,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce))) that may be in a table by 39 may be read at get {470}.
The message concat3(ne_20,ns_18,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))),msg)) that the attacker may have by 53 may be received at input {406}.
So event RecvMsg(alice,bob,stagepack_d(sid_5),msg) may be executed at {468}.
end(RecvMsg(alice,bob,stagepack_d(sid_5),msg)).

55. By 54, end(RecvMsg(alice,bob,stagepack_d(sid_5),msg)).
The goal is reached, represented in the following fact:
end(RecvMsg(alice,bob,stagepack_d(sid_5),msg)).


RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),msg)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),msg)) ==> event(SendMsg(bob,c,stagepack_d(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice)))
goal reachable: attacker(msg) && begin(SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5))) && begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(alice,bob,stagepack_d(sid_5),msg))
Abbreviations:
sid_5 = sid[!1 = @sid]
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),msg)) ==> event(SendMsg(bob,c,stagepack_d(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),msg)) ==> event(SendMsg(bob,c,stagepack_d(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)))
goal reachable: attacker(msg) && begin(SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5))) && begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(alice,bob,stagepack_d(sid_5),msg))
Abbreviations:
sid_5 = sid[!1 = @sid]
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),msg)) ==> event(SendMsg(bob,c,stagepack_d(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice)))
goal reachable: attacker(msg) && begin(SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5))) && begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(alice,bob,stagepack_d(sid_5),msg))
Abbreviations:
sid_5 = sid[!1 = @sid]
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)))
goal reachable: attacker(msg) && begin(SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5))) && begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(alice,bob,stagepack_d(sid_5),msg))
Abbreviations:
sid_5 = sid[!1 = @sid]
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.
Starting query not attacker_p1(msg_d(bob,alice,sid_b))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid_5),msg_d(bob,alice,sid_5))) && begin(SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5))) && begin(LeakM(phase0,alice)) && begin(LeakS(phase0,alice)) -> attacker_p1(msg_d(bob,alice,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),empty,empty,false))) may be inserted in a table at insert {1022}.
table(statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),empty,empty,false)))).

2. The attacker has some term plaintext_a_2.
attacker(plaintext_a_2).

3. Using the function zero the attacker may obtain zero.
attacker(zero).

4. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {963}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

5. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

6. By 4, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

7. The message (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))) may be sent to the attacker at output {15}.
attacker((validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)))).

8. By 7, the attacker may know (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(alice),g)).
attacker(validkey(dhexp_real(key_m(alice),g))).

9. By 7, the attacker may know (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(alice),g)).
attacker(validkey(dhexp_real(key_s(alice),g))).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 8, the attacker may know validkey(dhexp_real(key_m(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g)))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))).
By 6, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

17. By 16, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))).
By 5, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 3, the attacker may know zero.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
attacker(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero)).

19. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

20. The event LeakS(phase0,alice) may be executed at {471}.
The event LeakM(phase0,alice) may be executed at {472}.
So the message (key_s(alice),key_m(alice)) may be sent to the attacker at output {473}.
attacker((key_s(alice),key_m(alice))).

21. By 20, the attacker may know (key_s(alice),key_m(alice)).
Using the function 2-proj-2-tuple the attacker may obtain key_m(alice).
attacker(key_m(alice)).

22. By 21, the attacker may know key_m(alice).
By 6, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)).
attacker(dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).

23. By 12, the attacker may know hash(somename,empty).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),zero).
attacker(hmac_hash1(hash(somename,empty),zero)).

24. By 23, the attacker may know hmac_hash1(hash(somename,empty),zero).
By 22, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).
attacker(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)))).

25. By 24, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).
By 19, the attacker may know minnonce.
By 18, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 2, the attacker may know plaintext_a_2.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).

26. The attacker has some term ns_16.
attacker(ns_16).

27. By 3, the attacker may know zero.
By 26, the attacker may know ns_16.
By 25, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

28. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),empty,empty,false))) that may be in a table by 1 may be read at get {1137}.
The message concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)) that the attacker may have by 27 may be received at input {1023}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),zero,empty,false))) may be inserted in a table at insert {1136}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),zero,empty,false)))).

29. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),zero,empty,false))) that may be in a table by 28 may be read at get {1292}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1289}.
So the entry statestore(bob,alice,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce))) may be inserted in a table at insert {1290}.
table(statestore(bob,alice,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce)))).

30. The attacker has some term plaintext_c_2.
attacker(plaintext_c_2).

31. The attacker has some term ns_17.
attacker(ns_17).

32. By 3, the attacker may know zero.
By 31, the attacker may know ns_17.
By 25, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_17,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(concat3(zero,ns_17,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

33. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),empty,empty,false))) that may be in a table by 1 may be read at get {1137}.
The message concat3(zero,ns_17,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)) that the attacker may have by 32 may be received at input {1023}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),zero,empty,false))) may be inserted in a table at insert {1136}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),zero,empty,false)))).

34. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),zero,empty,false))) that may be in a table by 33 may be read at get {1292}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1289}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))) may be sent to the attacker at output {1291}.
attacker(concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

35. By 34, the attacker may know concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).

36. The attacker has some term plaintext_a_3.
attacker(plaintext_a_3).

37. By 24, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).
By 19, the attacker may know minnonce.
By 18, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 36, the attacker may know plaintext_a_3.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)).

38. The attacker has some term ns_18.
attacker(ns_18).

39. By 3, the attacker may know zero.
By 38, the attacker may know ns_18.
By 37, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3).
Using the function concat3 the attacker may obtain concat3(zero,ns_18,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)).
attacker(concat3(zero,ns_18,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))).

40. The entry statestore(bob,alice,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),empty,empty,false))) that may be in a table by 1 may be read at get {1137}.
The message concat3(zero,ns_18,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)) that the attacker may have by 39 may be received at input {1023}.
So the entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),zero,empty,false))) may be inserted in a table at insert {1136}.
table(statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),zero,empty,false)))).

41. The entry statestore(bob,alice,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),zero,empty,false))) that may be in a table by 40 may be read at get {1292}.
The event SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5)) may be executed at {1289}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_e(bob,alice,sid_5),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_5),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))) may be sent to the attacker at output {1291}.
attacker(concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_e(bob,alice,sid_5),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_5),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

42. By 41, the attacker may know concat3(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_e(bob,alice,sid_5),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_5),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_3)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(bob,alice,sid_5),g)).
attacker(validkey(dhexp_real(key_e(bob,alice,sid_5),g))).

43. By 18, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero).
By 25, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2))).

44. By 43, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)).
By 42, the attacker may know validkey(dhexp_real(key_e(bob,alice,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g)))).

45. By 44, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))).
By 35, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))).

46. By 21, the attacker may know key_m(alice).
By 42, the attacker may know validkey(dhexp_real(key_e(bob,alice,sid_5),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g)).
attacker(dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))).

47. By 20, the attacker may know (key_s(alice),key_m(alice)).
Using the function 1-proj-2-tuple the attacker may obtain key_s(alice).
attacker(key_s(alice)).

48. By 47, the attacker may know key_s(alice).
By 42, the attacker may know validkey(dhexp_real(key_e(bob,alice,sid_5),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g)).
attacker(dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))).

49. By 23, the attacker may know hmac_hash1(hash(somename,empty),zero).
By 22, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).
attacker(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)))).

50. By 49, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero)).

51. By 50, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero).
By 48, the attacker may know dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g)))).

52. By 51, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))).
By 46, the attacker may know dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g)))).

53. By 52, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero)).

54. By 53, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero).
By 19, the attacker may know minnonce.
By 45, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
By 30, the attacker may know plaintext_c_2.
Using the function encrypt the attacker may obtain encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2).
attacker(encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)).

55. The attacker has some term ns_19.
attacker(ns_19).

56. The attacker has some term ne_20.
attacker(ne_20).

57. By 56, the attacker may know ne_20.
By 55, the attacker may know ns_19.
By 54, the attacker may know encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2).
Using the function concat3 the attacker may obtain concat3(ne_20,ns_19,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)).
attacker(concat3(ne_20,ns_19,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2))).

58. The entry statestore(bob,alice,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce))) that may be in a table by 29 may be read at get {1359}.
The message concat3(ne_20,ns_19,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)) that the attacker may have by 57 may be received at input {1295}.
So the entry statestore(bob,alice,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce))) may be inserted in a table at insert {1358}.
table(statestore(bob,alice,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce)))).

59. The entry statestore(bob,alice,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_5),g)),key_e(bob,alice,sid_5)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),zero,empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce))) that may be in a table by 58 may be read at get {1417}.
The event SendMsg(bob,alice,stagepack_d(sid_5),msg_d(bob,alice,sid_5)) may be executed at {1415}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5))) may be sent to the attacker at output {1416}.
attacker(concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5)))).

60. By 59, the attacker may know concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5))).

61. By 45, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))).
By 54, the attacker may know encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2))).

62. By 52, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))).
By 3, the attacker may know zero.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero).
attacker(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero)).

63. By 62, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero).
By 19, the attacker may know minnonce.
By 61, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)).
By 60, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5)).
attacker(aeadpack(true,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5))).

64. By 63, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_5),g))),dhexp_real(key_m(alice),dhexp_real(key_e(bob,alice,sid_5),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),zero),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),zero),plaintext_a_2)),validkey(dhexp_real(key_e(bob,alice,sid_5),g))),msg_b(bob,alice,sid_5))),plaintext_c_2)),msg_d(bob,alice,sid_5)).
Using the function 3-proj-aeadpack the attacker may obtain msg_d(bob,alice,sid_5).
attacker(msg_d(bob,alice,sid_5)).

65. By 64, the attacker may know msg_d(bob,alice,sid_5).
So the attacker may know msg_d(bob,alice,sid_5) in phase 1.
attacker_p1(msg_d(bob,alice,sid_5)).

66. By 65, attacker_p1(msg_d(bob,alice,sid_5)).
The goal is reached, represented in the following fact:
attacker_p1(msg_d(bob,alice,sid_5)).


RESULT not attacker_p1(msg_d(bob,alice,sid_b)) cannot be proved.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(px,alice)) && event(LeakM(px,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid_5),msg_d(bob,alice,sid_5))) && begin(SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5))) && begin(LeakM(phase0,alice)) && begin(LeakS(phase0,alice)) -> attacker_p1(msg_d(bob,alice,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(px,alice)) && event(LeakM(px,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(px,alice)) && event(LeakM(px,alice)) && event(LeakS(pz,bob)) && event(LeakM(pz,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid_5),msg_d(bob,alice,sid_5))) && begin(SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5))) && begin(LeakM(phase0,alice)) && begin(LeakS(phase0,alice)) -> attacker_p1(msg_d(bob,alice,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(px,alice)) && event(LeakM(px,alice)) && event(LeakS(pz,bob)) && event(LeakM(pz,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid_5),msg_d(bob,alice,sid_5))) && begin(SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5))) && begin(LeakM(phase0,alice)) && begin(LeakS(phase0,alice)) -> attacker_p1(msg_d(bob,alice,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) && event(LeakM(phase0,alice)) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5))) && begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvEnd(true))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {74}.
table(statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

2. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {187}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {184}.
So the entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) may be inserted in a table at insert {185}.
table(statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true)))).

3. The attacker has some term plaintext_b_2.
attacker(plaintext_b_2).

4. Using the function zero the attacker may obtain zero.
attacker(zero).

5. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {187}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {184}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) may be sent to the attacker at output {186}.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

6. By 5, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).

7. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {187}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {184}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) may be sent to the attacker at output {186}.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

8. By 7, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_m(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_5),g))).

9. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {963}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

10. By 9, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

11. The message (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))) may be sent to the attacker at output {15}.
attacker((validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)))).

12. By 11, the attacker may know (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(alice),g)).
attacker(validkey(dhexp_real(key_m(alice),g))).

13. By 11, the attacker may know (validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(alice),g)).
attacker(validkey(dhexp_real(key_s(alice),g))).

14. Using the function empty the attacker may obtain empty.
attacker(empty).

15. Using the function somename the attacker may obtain somename.
attacker(somename).

16. By 15, the attacker may know somename.
By 14, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

17. By 16, the attacker may know hash(somename,empty).
By 14, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

18. By 17, the attacker may know hash(hash(somename,empty),empty).
By 13, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

19. By 18, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 12, the attacker may know validkey(dhexp_real(key_m(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g)))).

20. By 19, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))).
By 10, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

21. By 20, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))).
By 10, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g)))).

22. By 21, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))).
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
attacker(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g)))).

23. By 22, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

24. By 23, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
By 4, the attacker may know zero.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero)).

25. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

26. The event LeakS(phase0,bob) may be executed at {1418}.
The event LeakM(phase0,bob) may be executed at {1419}.
So the message (key_s(bob),key_m(bob)) may be sent to the attacker at output {1420}.
attacker((key_s(bob),key_m(bob))).

27. By 26, the attacker may know (key_s(bob),key_m(bob)).
Using the function 1-proj-2-tuple the attacker may obtain key_s(bob).
attacker(key_s(bob)).

28. By 27, the attacker may know key_s(bob).
By 12, the attacker may know validkey(dhexp_real(key_m(alice),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)).
attacker(dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).

29. By 27, the attacker may know key_s(bob).
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))).

30. By 16, the attacker may know hash(somename,empty).
By 29, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))).
attacker(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g)))).

31. By 30, the attacker may know hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))).
By 28, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).
attacker(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g)))).

32. By 31, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))).
By 4, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero)).

33. By 32, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero).
By 4, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero)).

34. By 33, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero).
By 4, the attacker may know zero.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero).
attacker(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero)).

35. By 34, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero).
By 25, the attacker may know minnonce.
By 24, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero).
By 3, the attacker may know plaintext_b_2.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)).

36. The attacker has some term ns_16.
attacker(ns_16).

37. By 4, the attacker may know zero.
By 36, the attacker may know ns_16.
By 35, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)).
attacker(concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))).

38. The entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {344}.
The message concat3(zero,ns_16,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)) that the attacker may have by 37 may be received at input {188}.
So the entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce))) may be inserted in a table at insert {343}.
table(statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce)))).

39. The entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce))) that may be in a table by 38 may be read at get {403}.
The event SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5)) may be executed at {400}.
So the entry statestore(alice,bob,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce))) may be inserted in a table at insert {401}.
table(statestore(alice,bob,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce)))).

40. The attacker has some term plaintext_d_2.
attacker(plaintext_d_2).

41. The attacker has some term ns_17.
attacker(ns_17).

42. By 4, the attacker may know zero.
By 41, the attacker may know ns_17.
By 35, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_17,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)).
attacker(concat3(zero,ns_17,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))).

43. The entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {344}.
The message concat3(zero,ns_17,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)) that the attacker may have by 42 may be received at input {188}.
So the entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce))) may be inserted in a table at insert {343}.
table(statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce)))).

44. The entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce))) that may be in a table by 43 may be read at get {403}.
The event SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5)) may be executed at {400}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))) may be sent to the attacker at output {402}.
attacker(concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)))).

45. By 44, the attacker may know concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)).
attacker(encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))).

46. By 24, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero).
By 35, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))).

47. By 46, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)).
By 45, the attacker may know encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)))).

48. By 33, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero).
By 4, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero)).

49. By 48, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero).
By 4, the attacker may know zero.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero).
attacker(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero)).

50. By 49, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero).
By 25, the attacker may know minnonce.
By 47, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))).
By 40, the attacker may know plaintext_d_2.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))),plaintext_d_2).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))),plaintext_d_2)).

51. The attacker has some term ns_18.
attacker(ns_18).

52. The attacker has some term ne_20.
attacker(ne_20).

53. By 52, the attacker may know ne_20.
By 51, the attacker may know ns_18.
By 50, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))),plaintext_d_2).
Using the function concat3 the attacker may obtain concat3(ne_20,ns_18,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))),plaintext_d_2)).
attacker(concat3(ne_20,ns_18,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))),plaintext_d_2))).

54. The entry statestore(alice,bob,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_s(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce))) that may be in a table by 39 may be read at get {470}.
The message concat3(ne_20,ns_18,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_s(bob),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_m(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))),plaintext_d_2)) that the attacker may have by 53 may be received at input {406}.
So event RecvEnd(true) may be executed at {469}.
end(RecvEnd(true)).

55. By 54, end(RecvEnd(true)).
The goal is reached, represented in the following fact:
end(RecvEnd(true)).


RESULT not event(RecvEnd(true)) cannot be proved.

--------------------------------------------------------------
Verification summary:

Query event(RecvMsg(bob,alice,stagepack_a(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),msg)) cannot be proved.

Query event(RecvMsg(bob,alice,stagepack_a(sid_b),msg)) ==> event(SendMsg(alice,c,stagepack_a(sid_a),msg)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.

Query event(RecvMsg(bob,alice,stagepack_a(sid_b),msg)) ==> event(SendMsg(alice,c,stagepack_a(sid_a),msg)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) cannot be proved.

Query event(RecvMsg(bob,alice,stagepack_a(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),msg)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.

Query event(RecvMsg(bob,alice,stagepack_a(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),msg)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) cannot be proved.

Query not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.

Query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakM(px,bob)) is true.

Query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(px,bob)) && event(LeakM(px,bob)) && event(LeakS(pz,alice)) && event(LeakM(pz,alice))) cannot be proved.

Query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)) cannot be proved.

Query event(RecvMsg(alice,bob,stagepack_b(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),msg)) cannot be proved.

Query event(RecvMsg(alice,bob,stagepack_b(sid_a),msg)) ==> event(SendMsg(bob,c,stagepack_b(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) is true.

Query event(RecvMsg(alice,bob,stagepack_b(sid_a),msg)) ==> event(SendMsg(bob,c,stagepack_b(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.

Query event(RecvMsg(alice,bob,stagepack_b(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) is true.

Query event(RecvMsg(alice,bob,stagepack_b(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.

Query not attacker_p1(msg_b(bob,alice,sid_b)) cannot be proved.

Query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(px,alice)) && event(LeakM(px,alice)) is true.

Query attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(px,alice)) && event(LeakM(px,alice)) && event(LeakS(pz,bob)) && event(LeakM(pz,bob))) is true.

Query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) && event(LeakM(phase0,alice)) cannot be proved.

Query event(RecvMsg(bob,alice,stagepack_c(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),msg)) cannot be proved.

Query event(RecvMsg(bob,alice,stagepack_c(sid_b),msg)) ==> event(SendMsg(alice,c,stagepack_c(sid_a),msg)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.

Query event(RecvMsg(bob,alice,stagepack_c(sid_b),msg)) ==> event(SendMsg(alice,c,stagepack_c(sid_a),msg)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) is true.

Query event(RecvMsg(bob,alice,stagepack_c(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),msg)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.

Query event(RecvMsg(bob,alice,stagepack_c(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),msg)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) is true.

Query not attacker_p1(msg_c(alice,bob,sid_a)) cannot be proved.

Query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakM(px,bob)) is true.

Query attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(px,bob)) && event(LeakM(px,bob)) && event(LeakS(pz,alice)) && event(LeakM(pz,alice))) is true.

Query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)) is true.

Query event(RecvMsg(alice,bob,stagepack_d(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),msg)) cannot be proved.

Query event(RecvMsg(alice,bob,stagepack_d(sid_a),msg)) ==> event(SendMsg(bob,c,stagepack_d(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) is true.

Query event(RecvMsg(alice,bob,stagepack_d(sid_a),msg)) ==> event(SendMsg(bob,c,stagepack_d(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.

Query event(RecvMsg(alice,bob,stagepack_d(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) is true.

Query event(RecvMsg(alice,bob,stagepack_d(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.

Query not attacker_p1(msg_d(bob,alice,sid_b)) cannot be proved.

Query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(px,alice)) && event(LeakM(px,alice)) is true.

Query attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(px,alice)) && event(LeakM(px,alice)) && event(LeakS(pz,bob)) && event(LeakM(pz,bob))) is true.

Query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) && event(LeakM(phase0,alice)) is true.

Query not event(RecvEnd(true)) cannot be proved.

--------------------------------------------------------------

