File "pv/IK-I'K'.xnoise.active.pv", line 223, characters 7-8:
Warning: identifier ck rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 232, characters 7-8:
Warning: identifier ck rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 233, characters 7-8:
Warning: identifier cs rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 233, character 36:
Warning: identifier h rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 263, characters 6-7:
Warning: identifier ss rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 264, characters 6-7:
Warning: identifier ss rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 269, characters 6-7:
Warning: identifier ss rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 270, characters 6-7:
Warning: identifier ss rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 276, character 6:
Warning: identifier e rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 277, characters 6-7:
Warning: identifier ne rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 280, characters 6-7:
Warning: identifier ss rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 283, character 6:
Warning: identifier s rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 284, characters 7-8:
Warning: identifier ss rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 284, characters 26-27:
Warning: identifier ns rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 286, character 6:
Warning: identifier m rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 287, characters 7-8:
Warning: identifier ss rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 287, characters 26-27:
Warning: identifier nm rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 289, characters 7-8:
Warning: identifier ss rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 289, characters 26-35:
Warning: identifier ciphertext rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 290, characters 6-7:
Warning: identifier hs rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 297, character 6:
Warning: identifier e rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 298, characters 6-7:
Warning: identifier ne rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 299, characters 6-7:
Warning: identifier ss rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 301, characters 6-7:
Warning: identifier ss rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 302, characters 6-7:
Warning: identifier ss rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 303, characters 6-7:
Warning: identifier ss rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 304, characters 7-8:
Warning: identifier ss rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 304, characters 26-35:
Warning: identifier ciphertext rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 305, characters 6-7:
Warning: identifier hs rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 313, characters 7-8:
Warning: identifier ss rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 313, characters 26-35:
Warning: identifier ciphertext rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 314, characters 6-7:
Warning: identifier hs rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 321, characters 7-8:
Warning: identifier ss rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 321, characters 26-35:
Warning: identifier ciphertext rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 322, characters 6-7:
Warning: identifier hs rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 331, characters 6-7:
Warning: identifier re rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 332, characters 6-7:
Warning: identifier ss rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 334, characters 6-7:
Warning: identifier ss rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 335, characters 6-7:
Warning: identifier ss rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 337, characters 7-8:
Warning: identifier ss rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 337, characters 26-27:
Warning: identifier ne rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 337, characters 40-45:
Warning: identifier valid1 rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 338, characters 6-7:
Warning: identifier rs rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 340, characters 7-8:
Warning: identifier ss rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 340, characters 26-27:
Warning: identifier me rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 340, characters 40-45:
Warning: identifier valid2 rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 341, characters 6-7:
Warning: identifier rm rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 343, characters 6-7:
Warning: identifier ss rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 344, characters 6-7:
Warning: identifier ss rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 346, characters 7-8:
Warning: identifier ss rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 348, characters 13-14:
Warning: identifier hs rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 356, characters 6-7:
Warning: identifier re rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 357, characters 6-7:
Warning: identifier ss rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 359, characters 6-7:
Warning: identifier ss rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 360, characters 6-7:
Warning: identifier ss rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 361, characters 6-7:
Warning: identifier ss rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 362, characters 7-8:
Warning: identifier ss rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 364, characters 13-14:
Warning: identifier hs rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 373, characters 7-8:
Warning: identifier ss rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 375, characters 13-14:
Warning: identifier hs rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 383, characters 7-8:
Warning: identifier ss rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 385, characters 13-14:
Warning: identifier hs rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 543, characters 7-8:
Warning: identifier hs rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 545, characters 8-9:
Warning: identifier hs rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 536, characters 7-8:
Warning: identifier hs rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 537, characters 8-9:
Warning: identifier hs rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 530, characters 8-9:
Warning: identifier hs rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 523, characters 8-9:
Warning: identifier hs rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 586, characters 7-8:
Warning: identifier hs rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 587, characters 8-9:
Warning: identifier hs rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 578, characters 7-8:
Warning: identifier hs rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 580, characters 8-9:
Warning: identifier hs rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 572, characters 8-9:
Warning: identifier hs rebound.
File "pv/IK-I'K'.xnoise.active.pv", line 566, characters 8-9:
Warning: identifier hs rebound.
Linear part:
dhexp_real(b,dhexp_real(a,g)) = dhexp_real(a,dhexp_real(b,g))
Completing equations...
Completed equations:
dhexp_real(b,dhexp_real(a,g)) = dhexp_real(a,dhexp_real(b,g))
Convergent part: No equation.
Process 0 (that is, the initial process):
{1}out(pub, (key_s(charlie),key_m(charlie)));
{2}!
{3}new sid: sessionid;
(
    {4}let me: principal = alice in
    {5}let them: principal = bob in
    {6}let sid_1: sessionid = sid in
    {7}let s: keypair = keypairpack(empty,empty) in
    {8}let m: keypair = keypairpack(empty,empty) in
    (
        {9}let e: keypair = keypairpack(empty,empty) in
        {10}let basis: key = key_s(them) in
        {11}let public_key: key = catch-fail(dhexp(basis,validkey(g))) in
        {12}let v: bool = not-caught-fail(public_key) in
        {13}let rs: key = getpublickey((if v then keypairpack(validkey(public_key),basis) else fail-any)) in
        {14}let basis_1: key = key_m(them) in
        {15}let public_key_1: key = catch-fail(dhexp(basis_1,validkey(g))) in
        {16}let v_1: bool = not-caught-fail(public_key_1) in
        {17}let rm: key = getpublickey((if v_1 then keypairpack(validkey(public_key_1),basis_1) else fail-any)) in
        {18}let re: key = empty in
        {19}let prologue: bitstring = empty in
        {20}let psk: key = empty in
        {21}let protocol_name: bitstring = somename in
        {22}let h: bitstring = hash(protocol_name,empty) in
        {23}let ck: key = h in
        {24}let k: key = empty in
        {25}let cs: cipherstate = cipherstatepack(k,minnonce) in
        {26}let ss: symmetricstate = symmetricstatepack(cs,ck,h) in
        {27}let v_2: bitstring = catch-fail(symmetricstateunpack(ss)) in
        {28}let v_3: bool = (not-caught-fail(v_2) && success?(1-proj-3-tuple(v_2))) in
        {29}let h_1: bitstring = (if v_3 then 3-proj-3-tuple(v_2) else caught-fail) in
        {30}let ck_1: key = (if v_3 then 2-proj-3-tuple(v_2) else caught-fail) in
        {31}let cs_1: cipherstate = (if v_3 then 1-proj-3-tuple(v_2) else caught-fail) in
        {32}let ss_1: symmetricstate = catch-fail((if v_3 then symmetricstatepack(cs_1,ck_1,hash(h_1,prologue)) else fail-any)) in
        {33}let v_4: bool = not-caught-fail(ss_1) in
        {34}let v_5: bitstring = (if v_4 then catch-fail(symmetricstateunpack(ss_1)) else caught-fail) in
        {35}let v_6: bool = (not-caught-fail(v_5) && success?(1-proj-3-tuple(v_5))) in
        {36}let h_2: bitstring = (if v_6 then 3-proj-3-tuple(v_5) else caught-fail) in
        {37}let ck_2: key = (if v_6 then 2-proj-3-tuple(v_5) else caught-fail) in
        {38}let cs_2: cipherstate = (if v_6 then 1-proj-3-tuple(v_5) else caught-fail) in
        {39}let ss_2: symmetricstate = (if v_4 then catch-fail((if v_6 then symmetricstatepack(cs_2,ck_2,hash(h_2,rs)) else fail-any)) else caught-fail) in
        {40}let v_7: bool = not-caught-fail(ss_2) in
        {41}let v_8: bitstring = (if v_7 then catch-fail(symmetricstateunpack(ss_2)) else caught-fail) in
        {42}let v_9: bool = (not-caught-fail(v_8) && success?(1-proj-3-tuple(v_8))) in
        {43}let h_3: bitstring = (if v_9 then 3-proj-3-tuple(v_8) else caught-fail) in
        {44}let ck_3: key = (if v_9 then 2-proj-3-tuple(v_8) else caught-fail) in
        {45}let cs_3: cipherstate = (if v_9 then 1-proj-3-tuple(v_8) else caught-fail) in
        {46}let ss_3: symmetricstate = (if v_7 then catch-fail((if v_9 then symmetricstatepack(cs_3,ck_3,hash(h_3,rm)) else fail-any)) else caught-fail) in
        {47}let v_10: bool = not-caught-fail(ss_3) in
        {48}let hs: handshakestate = (if v_4 then (if v_7 then (if v_10 then handshakestatepack(ss_3,s,m,e,rs,rm,re,psk,true) else fail-any) else fail-any) else fail-any) in
        {49}insert statestore(me,them,sid_1,statepack_a(hs))
    ) | (
        {243}get statestore(=me,=them,=sid_1,statepack_a(hs_1: handshakestate)) in
        {50}let payload: bitstring = msg_a(me,them,sid_1) in
        {51}let v_11: bitstring = catch-fail(handshakestateunpack(hs_1)) in
        {52}let v_12: bool = (not-caught-fail(v_11) && success?(1-proj-9-tuple(v_11))) in
        {53}let initiator_1: bool = (if v_12 then 9-proj-9-tuple(v_11) else caught-fail) in
        {54}let psk_1: key = (if v_12 then 8-proj-9-tuple(v_11) else caught-fail) in
        {55}let re_1: key = (if v_12 then 7-proj-9-tuple(v_11) else caught-fail) in
        {56}let rm_1: key = (if v_12 then 6-proj-9-tuple(v_11) else caught-fail) in
        {57}let rs_1: key = (if v_12 then 5-proj-9-tuple(v_11) else caught-fail) in
        {58}let e_1: keypair = (if v_12 then 4-proj-9-tuple(v_11) else caught-fail) in
        {59}let m_1: keypair = (if v_12 then 3-proj-9-tuple(v_11) else caught-fail) in
        {60}let s_1: keypair = (if v_12 then 2-proj-9-tuple(v_11) else caught-fail) in
        {61}let ss_4: symmetricstate = (if v_12 then 1-proj-9-tuple(v_11) else caught-fail) in
        {62}let v_13: bitstring = (if v_12 then catch-fail((empty,empty,empty,empty)) else caught-fail) in
        {63}let v_14: bool = (not-caught-fail(v_13) && success?(1-proj-4-tuple(v_13))) in
        {64}let ciphertext: bitstring = (if v_14 then 4-proj-4-tuple(v_13) else caught-fail) in
        {65}let nm: bitstring = (if v_14 then 3-proj-4-tuple(v_13) else caught-fail) in
        {66}let ns: bitstring = (if v_14 then 2-proj-4-tuple(v_13) else caught-fail) in
        {67}let ne: bitstring = (if v_14 then 1-proj-4-tuple(v_13) else caught-fail) in
        {68}let basis_2: key = (if v_14 then key_e(me,them,sid_1) else caught-fail) in
        {69}let public_key_2: key = (if v_14 then catch-fail(dhexp(basis_2,validkey(g))) else caught-fail) in
        {70}let v_15: bool = not-caught-fail(public_key_2) in
        {71}let e_2: keypair = (if v_14 then catch-fail((if v_15 then keypairpack(validkey(public_key_2),basis_2) else fail-any)) else caught-fail) in
        {72}let v_16: bool = not-caught-fail(e_2) in
        {73}let ne_1: bitstring = (if v_16 then catch-fail(getpublickey(e_2)) else caught-fail) in
        {74}let v_17: bool = not-caught-fail(ne_1) in
        {75}let v_18: bitstring = (if v_17 then catch-fail(symmetricstateunpack(ss_4)) else caught-fail) in
        {76}let v_19: bool = (not-caught-fail(v_18) && success?(1-proj-3-tuple(v_18))) in
        {77}let h_4: bitstring = (if v_19 then 3-proj-3-tuple(v_18) else caught-fail) in
        {78}let ck_4: key = (if v_19 then 2-proj-3-tuple(v_18) else caught-fail) in
        {79}let cs_4: cipherstate = (if v_19 then 1-proj-3-tuple(v_18) else caught-fail) in
        {80}let ss_5: symmetricstate = (if v_17 then catch-fail((if v_19 then symmetricstatepack(cs_4,ck_4,hash(h_4,ne_1)) else fail-any)) else caught-fail) in
        {81}let v_20: bool = not-caught-fail(ss_5) in
        {82}let v_21: bitstring = (if v_20 then catch-fail(keypairunpack(e_2)) else caught-fail) in
        {83}let v_22: bool = (not-caught-fail(v_21) && success?(1-proj-2-tuple(v_21))) in
        {84}let my_private_key: key = (if v_22 then 2-proj-2-tuple(v_21) else caught-fail) in
        {85}let my_public_key: key = (if v_22 then 1-proj-2-tuple(v_21) else caught-fail) in
        {86}let input_key_material: key = (if v_20 then catch-fail((if v_22 then dhexp(my_private_key,rs_1) else fail-any)) else caught-fail) in
        {87}let v_23: bool = not-caught-fail(input_key_material) in
        {88}let v_24: bitstring = (if v_23 then catch-fail(symmetricstateunpack(ss_5)) else caught-fail) in
        {89}let v_25: bool = (not-caught-fail(v_24) && success?(1-proj-3-tuple(v_24))) in
        {90}let h_5: bitstring = (if v_25 then 3-proj-3-tuple(v_24) else caught-fail) in
        {91}let ck_5: key = (if v_25 then 2-proj-3-tuple(v_24) else caught-fail) in
        {92}let cs_5: cipherstate = (if v_25 then 1-proj-3-tuple(v_24) else caught-fail) in
        {93}let output1: key = (if v_25 then hmac_hash1(ck_5,input_key_material) else caught-fail) in
        {94}let output2: key = (if v_25 then hmac_hash2(ck_5,input_key_material) else caught-fail) in
        {95}let output3: key = (if v_25 then hmac_hash3(ck_5,input_key_material) else caught-fail) in
        {96}let v_26: bitstring = (if v_25 then catch-fail((output1,output2,output3)) else caught-fail) in
        {97}let v_27: bool = (not-caught-fail(v_26) && success?(1-proj-3-tuple(v_26))) in
        {98}let output_3: key = (if v_27 then 3-proj-3-tuple(v_26) else caught-fail) in
        {99}let temp_k: key = (if v_27 then 2-proj-3-tuple(v_26) else caught-fail) in
        {100}let ck_6: key = (if v_27 then 1-proj-3-tuple(v_26) else caught-fail) in
        {101}let ss_6: symmetricstate = (if v_20 then catch-fail((if v_23 then (if v_25 then (if v_27 then symmetricstatepack(cipherstatepack(temp_k,minnonce),ck_6,h_5) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {102}let v_28: bool = not-caught-fail(ss_6) in
        {103}let v_29: bitstring = (if v_28 then catch-fail(keypairunpack(e_2)) else caught-fail) in
        {104}let v_30: bool = (not-caught-fail(v_29) && success?(1-proj-2-tuple(v_29))) in
        {105}let my_private_key_1: key = (if v_30 then 2-proj-2-tuple(v_29) else caught-fail) in
        {106}let my_public_key_1: key = (if v_30 then 1-proj-2-tuple(v_29) else caught-fail) in
        {107}let input_key_material_1: key = (if v_28 then catch-fail((if v_30 then dhexp(my_private_key_1,rm_1) else fail-any)) else caught-fail) in
        {108}let v_31: bool = not-caught-fail(input_key_material_1) in
        {109}let v_32: bitstring = (if v_31 then catch-fail(symmetricstateunpack(ss_6)) else caught-fail) in
        {110}let v_33: bool = (not-caught-fail(v_32) && success?(1-proj-3-tuple(v_32))) in
        {111}let h_6: bitstring = (if v_33 then 3-proj-3-tuple(v_32) else caught-fail) in
        {112}let ck_7: key = (if v_33 then 2-proj-3-tuple(v_32) else caught-fail) in
        {113}let cs_6: cipherstate = (if v_33 then 1-proj-3-tuple(v_32) else caught-fail) in
        {114}let output1_1: key = (if v_33 then hmac_hash1(ck_7,input_key_material_1) else caught-fail) in
        {115}let output2_1: key = (if v_33 then hmac_hash2(ck_7,input_key_material_1) else caught-fail) in
        {116}let output3_1: key = (if v_33 then hmac_hash3(ck_7,input_key_material_1) else caught-fail) in
        {117}let v_34: bitstring = (if v_33 then catch-fail((output1_1,output2_1,output3_1)) else caught-fail) in
        {118}let v_35: bool = (not-caught-fail(v_34) && success?(1-proj-3-tuple(v_34))) in
        {119}let output: key = (if v_35 then 3-proj-3-tuple(v_34) else caught-fail) in
        {120}let temp_k_1: key = (if v_35 then 2-proj-3-tuple(v_34) else caught-fail) in
        {121}let ck_8: key = (if v_35 then 1-proj-3-tuple(v_34) else caught-fail) in
        {122}let ss_7: symmetricstate = (if v_28 then catch-fail((if v_31 then (if v_33 then (if v_35 then symmetricstatepack(cipherstatepack(temp_k_1,minnonce),ck_8,h_6) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {123}let v_36: bool = not-caught-fail(ss_7) in
        {124}let basis_3: key = (if v_36 then key_s(me) else caught-fail) in
        {125}let public_key_3: key = (if v_36 then catch-fail(dhexp(basis_3,validkey(g))) else caught-fail) in
        {126}let v_37: bool = not-caught-fail(public_key_3) in
        {127}let s_2: keypair = (if v_36 then catch-fail((if v_37 then keypairpack(validkey(public_key_3),basis_3) else fail-any)) else caught-fail) in
        {128}let v_38: bool = not-caught-fail(s_2) in
        {129}let plaintext: bitstring = (if v_38 then catch-fail(getpublickey(s_2)) else caught-fail) in
        {130}let v_39: bool = not-caught-fail(plaintext) in
        {131}let v_40: bitstring = (if v_39 then catch-fail(symmetricstateunpack(ss_7)) else caught-fail) in
        {132}let v_41: bool = (not-caught-fail(v_40) && success?(1-proj-3-tuple(v_40))) in
        {133}let h_7: bitstring = (if v_41 then 3-proj-3-tuple(v_40) else caught-fail) in
        {134}let ck_9: key = (if v_41 then 2-proj-3-tuple(v_40) else caught-fail) in
        {135}let cs_7: cipherstate = (if v_41 then 1-proj-3-tuple(v_40) else caught-fail) in
        {136}let v_42: bitstring = (if v_41 then catch-fail(cipherstateunpack(cs_7)) else caught-fail) in
        {137}let v_43: bool = (not-caught-fail(v_42) && success?(1-proj-2-tuple(v_42))) in
        {138}let n: nonce = (if v_43 then 2-proj-2-tuple(v_42) else caught-fail) in
        {139}let k_1: key = (if v_43 then 1-proj-2-tuple(v_42) else caught-fail) in
        {140}let e_3: bitstring = (if v_43 then encrypt(k_1,n,h_7,plaintext) else caught-fail) in
        {141}let n_1: nonce = (if v_43 then increment_nonce(n) else caught-fail) in
        {142}let v_44: bitstring = (if v_43 then catch-fail(cipherstateunpack(cs_7)) else caught-fail) in
        {143}let v_45: bool = (not-caught-fail(v_44) && success?(1-proj-2-tuple(v_44))) in
        {144}let o: nonce = (if v_45 then 2-proj-2-tuple(v_44) else caught-fail) in
        {145}let k_2: key = (if v_45 then 1-proj-2-tuple(v_44) else caught-fail) in
        {146}let csi: cipherstate = (if v_43 then catch-fail((if v_45 then cipherstatepack(k_2,n_1) else fail-any)) else caught-fail) in
        {147}let v_46: bool = not-caught-fail(csi) in
        {148}let v_47: bitstring = (if v_41 then catch-fail((if v_43 then (if v_46 then (csi,e_3) else fail-any) else fail-any)) else caught-fail) in
        {149}let v_48: bool = (not-caught-fail(v_47) && success?(1-proj-2-tuple(v_47))) in
        {150}let ciphertext_1: bitstring = (if v_48 then 2-proj-2-tuple(v_47) else caught-fail) in
        {151}let csi_1: cipherstate = (if v_48 then 1-proj-2-tuple(v_47) else caught-fail) in
        {152}let ss_8: symmetricstate = (if v_48 then symmetricstatepack(csi_1,ck_9,h_7) else caught-fail) in
        {153}let v_49: bitstring = (if v_48 then catch-fail(symmetricstateunpack(ss_8)) else caught-fail) in
        {154}let v_50: bool = (not-caught-fail(v_49) && success?(1-proj-3-tuple(v_49))) in
        {155}let h_8: bitstring = (if v_50 then 3-proj-3-tuple(v_49) else caught-fail) in
        {156}let ck_10: key = (if v_50 then 2-proj-3-tuple(v_49) else caught-fail) in
        {157}let cs_8: cipherstate = (if v_50 then 1-proj-3-tuple(v_49) else caught-fail) in
        {158}let ssi: symmetricstate = (if v_48 then catch-fail((if v_50 then symmetricstatepack(cs_8,ck_10,hash(h_8,ciphertext_1)) else fail-any)) else caught-fail) in
        {159}let v_51: bool = not-caught-fail(ssi) in
        {160}let v_52: bitstring = (if v_38 then catch-fail((if v_39 then (if v_41 then (if v_48 then (if v_51 then (ssi,ciphertext_1) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {161}let v_53: bool = (not-caught-fail(v_52) && success?(1-proj-2-tuple(v_52))) in
        {162}let ns_1: bitstring = (if v_53 then 2-proj-2-tuple(v_52) else caught-fail) in
        {163}let ss_9: symmetricstate = (if v_53 then 1-proj-2-tuple(v_52) else caught-fail) in
        {164}let basis_4: key = (if v_53 then key_m(me) else caught-fail) in
        {165}let public_key_4: key = (if v_53 then catch-fail(dhexp(basis_4,validkey(g))) else caught-fail) in
        {166}let v_54: bool = not-caught-fail(public_key_4) in
        {167}let m_2: keypair = (if v_53 then catch-fail((if v_54 then keypairpack(validkey(public_key_4),basis_4) else fail-any)) else caught-fail) in
        {168}let v_55: bool = not-caught-fail(m_2) in
        {169}let plaintext_1: bitstring = (if v_55 then catch-fail(getpublickey(m_2)) else caught-fail) in
        {170}let v_56: bool = not-caught-fail(plaintext_1) in
        {171}let v_57: bitstring = (if v_56 then catch-fail(symmetricstateunpack(ss_9)) else caught-fail) in
        {172}let v_58: bool = (not-caught-fail(v_57) && success?(1-proj-3-tuple(v_57))) in
        {173}let h_9: bitstring = (if v_58 then 3-proj-3-tuple(v_57) else caught-fail) in
        {174}let ck_11: key = (if v_58 then 2-proj-3-tuple(v_57) else caught-fail) in
        {175}let cs_9: cipherstate = (if v_58 then 1-proj-3-tuple(v_57) else caught-fail) in
        {176}let v_59: bitstring = (if v_58 then catch-fail(cipherstateunpack(cs_9)) else caught-fail) in
        {177}let v_60: bool = (not-caught-fail(v_59) && success?(1-proj-2-tuple(v_59))) in
        {178}let n_2: nonce = (if v_60 then 2-proj-2-tuple(v_59) else caught-fail) in
        {179}let k_3: key = (if v_60 then 1-proj-2-tuple(v_59) else caught-fail) in
        {180}let e_4: bitstring = (if v_60 then encrypt(k_3,n_2,h_9,plaintext_1) else caught-fail) in
        {181}let n_3: nonce = (if v_60 then increment_nonce(n_2) else caught-fail) in
        {182}let v_61: bitstring = (if v_60 then catch-fail(cipherstateunpack(cs_9)) else caught-fail) in
        {183}let v_62: bool = (not-caught-fail(v_61) && success?(1-proj-2-tuple(v_61))) in
        {184}let o_1: nonce = (if v_62 then 2-proj-2-tuple(v_61) else caught-fail) in
        {185}let k_4: key = (if v_62 then 1-proj-2-tuple(v_61) else caught-fail) in
        {186}let csi_2: cipherstate = (if v_60 then catch-fail((if v_62 then cipherstatepack(k_4,n_3) else fail-any)) else caught-fail) in
        {187}let v_63: bool = not-caught-fail(csi_2) in
        {188}let v_64: bitstring = (if v_58 then catch-fail((if v_60 then (if v_63 then (csi_2,e_4) else fail-any) else fail-any)) else caught-fail) in
        {189}let v_65: bool = (not-caught-fail(v_64) && success?(1-proj-2-tuple(v_64))) in
        {190}let ciphertext_2: bitstring = (if v_65 then 2-proj-2-tuple(v_64) else caught-fail) in
        {191}let csi_3: cipherstate = (if v_65 then 1-proj-2-tuple(v_64) else caught-fail) in
        {192}let ss_10: symmetricstate = (if v_65 then symmetricstatepack(csi_3,ck_11,h_9) else caught-fail) in
        {193}let v_66: bitstring = (if v_65 then catch-fail(symmetricstateunpack(ss_10)) else caught-fail) in
        {194}let v_67: bool = (not-caught-fail(v_66) && success?(1-proj-3-tuple(v_66))) in
        {195}let h_10: bitstring = (if v_67 then 3-proj-3-tuple(v_66) else caught-fail) in
        {196}let ck_12: key = (if v_67 then 2-proj-3-tuple(v_66) else caught-fail) in
        {197}let cs_10: cipherstate = (if v_67 then 1-proj-3-tuple(v_66) else caught-fail) in
        {198}let ssi_1: symmetricstate = (if v_65 then catch-fail((if v_67 then symmetricstatepack(cs_10,ck_12,hash(h_10,ciphertext_2)) else fail-any)) else caught-fail) in
        {199}let v_68: bool = not-caught-fail(ssi_1) in
        {200}let v_69: bitstring = (if v_55 then catch-fail((if v_56 then (if v_58 then (if v_65 then (if v_68 then (ssi_1,ciphertext_2) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {201}let v_70: bool = (not-caught-fail(v_69) && success?(1-proj-2-tuple(v_69))) in
        {202}let nm_1: bitstring = (if v_70 then 2-proj-2-tuple(v_69) else caught-fail) in
        {203}let ss_11: symmetricstate = (if v_70 then 1-proj-2-tuple(v_69) else caught-fail) in
        {204}let v_71: bitstring = (if v_70 then catch-fail(symmetricstateunpack(ss_11)) else caught-fail) in
        {205}let v_72: bool = (not-caught-fail(v_71) && success?(1-proj-3-tuple(v_71))) in
        {206}let h_11: bitstring = (if v_72 then 3-proj-3-tuple(v_71) else caught-fail) in
        {207}let ck_13: key = (if v_72 then 2-proj-3-tuple(v_71) else caught-fail) in
        {208}let cs_11: cipherstate = (if v_72 then 1-proj-3-tuple(v_71) else caught-fail) in
        {209}let v_73: bitstring = (if v_72 then catch-fail(cipherstateunpack(cs_11)) else caught-fail) in
        {210}let v_74: bool = (not-caught-fail(v_73) && success?(1-proj-2-tuple(v_73))) in
        {211}let n_4: nonce = (if v_74 then 2-proj-2-tuple(v_73) else caught-fail) in
        {212}let k_5: key = (if v_74 then 1-proj-2-tuple(v_73) else caught-fail) in
        {213}let e_5: bitstring = (if v_74 then encrypt(k_5,n_4,h_11,payload) else caught-fail) in
        {214}let n_5: nonce = (if v_74 then increment_nonce(n_4) else caught-fail) in
        {215}let v_75: bitstring = (if v_74 then catch-fail(cipherstateunpack(cs_11)) else caught-fail) in
        {216}let v_76: bool = (not-caught-fail(v_75) && success?(1-proj-2-tuple(v_75))) in
        {217}let o_2: nonce = (if v_76 then 2-proj-2-tuple(v_75) else caught-fail) in
        {218}let k_6: key = (if v_76 then 1-proj-2-tuple(v_75) else caught-fail) in
        {219}let csi_4: cipherstate = (if v_74 then catch-fail((if v_76 then cipherstatepack(k_6,n_5) else fail-any)) else caught-fail) in
        {220}let v_77: bool = not-caught-fail(csi_4) in
        {221}let v_78: bitstring = (if v_72 then catch-fail((if v_74 then (if v_77 then (csi_4,e_5) else fail-any) else fail-any)) else caught-fail) in
        {222}let v_79: bool = (not-caught-fail(v_78) && success?(1-proj-2-tuple(v_78))) in
        {223}let ciphertext_3: bitstring = (if v_79 then 2-proj-2-tuple(v_78) else caught-fail) in
        {224}let csi_5: cipherstate = (if v_79 then 1-proj-2-tuple(v_78) else caught-fail) in
        {225}let ss_12: symmetricstate = (if v_79 then symmetricstatepack(csi_5,ck_13,h_11) else caught-fail) in
        {226}let v_80: bitstring = (if v_79 then catch-fail(symmetricstateunpack(ss_12)) else caught-fail) in
        {227}let v_81: bool = (not-caught-fail(v_80) && success?(1-proj-3-tuple(v_80))) in
        {228}let h_12: bitstring = (if v_81 then 3-proj-3-tuple(v_80) else caught-fail) in
        {229}let ck_14: key = (if v_81 then 2-proj-3-tuple(v_80) else caught-fail) in
        {230}let cs_12: cipherstate = (if v_81 then 1-proj-3-tuple(v_80) else caught-fail) in
        {231}let ssi_2: symmetricstate = (if v_79 then catch-fail((if v_81 then symmetricstatepack(cs_12,ck_14,hash(h_12,ciphertext_3)) else fail-any)) else caught-fail) in
        {232}let v_82: bool = not-caught-fail(ssi_2) in
        {233}let v_83: bitstring = (if v_70 then catch-fail((if v_72 then (if v_79 then (if v_82 then (ssi_2,ciphertext_3) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {234}let v_84: bool = (not-caught-fail(v_83) && success?(1-proj-2-tuple(v_83))) in
        {235}let ciphertext_4: bitstring = (if v_84 then 2-proj-2-tuple(v_83) else caught-fail) in
        {236}let ss_13: symmetricstate = (if v_84 then 1-proj-2-tuple(v_83) else caught-fail) in
        {237}let hs_2: handshakestate = (if v_84 then handshakestatepack(ss_13,s_2,m_2,e_2,rs_1,rm_1,re_1,psk_1,initiator_1) else caught-fail) in
        {238}let message_buffer: bitstring = (if v_84 then concat4(ne_1,ns_1,nm_1,ciphertext_4) else caught-fail) in
        {239}let (hs_3: handshakestate,message_a: bitstring) = (if v_12 then (if v_14 then (if v_16 then (if v_17 then (if v_20 then (if v_28 then (if v_36 then (if v_38 then (if v_53 then (if v_55 then (if v_70 then (if v_84 then (hs_2,message_buffer) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {240}event SendMsg(me,them,stagepack_a(sid_1),msg_a(me,them,sid_1));
        {241}insert statestore(me,them,sid_1,statepack_b(hs_3));
        {242}out(pub, message_a)
    ) | (
        {400}get statestore(=me,=them,=sid_1,statepack_b(hs_4: handshakestate)) in
        {244}in(pub, message_b: bitstring);
        {245}let v_85: bitstring = catch-fail(handshakestateunpack(hs_4)) in
        {246}let v_86: bool = (not-caught-fail(v_85) && success?(1-proj-9-tuple(v_85))) in
        {247}let initiator_2: bool = (if v_86 then 9-proj-9-tuple(v_85) else caught-fail) in
        {248}let psk_2: key = (if v_86 then 8-proj-9-tuple(v_85) else caught-fail) in
        {249}let re_2: key = (if v_86 then 7-proj-9-tuple(v_85) else caught-fail) in
        {250}let rm_2: key = (if v_86 then 6-proj-9-tuple(v_85) else caught-fail) in
        {251}let rs_2: key = (if v_86 then 5-proj-9-tuple(v_85) else caught-fail) in
        {252}let e_6: keypair = (if v_86 then 4-proj-9-tuple(v_85) else caught-fail) in
        {253}let m_3: keypair = (if v_86 then 3-proj-9-tuple(v_85) else caught-fail) in
        {254}let s_3: keypair = (if v_86 then 2-proj-9-tuple(v_85) else caught-fail) in
        {255}let ss_14: symmetricstate = (if v_86 then 1-proj-9-tuple(v_85) else caught-fail) in
        {256}let v_87: bitstring = (if v_86 then catch-fail(deconcat3(message_b)) else caught-fail) in
        {257}let v_88: bool = (not-caught-fail(v_87) && success?(1-proj-3-tuple(v_87))) in
        {258}let ciphertext_5: bitstring = (if v_88 then 3-proj-3-tuple(v_87) else caught-fail) in
        {259}let ns_2: bitstring = (if v_88 then 2-proj-3-tuple(v_87) else caught-fail) in
        {260}let ne_2: bitstring = (if v_88 then 1-proj-3-tuple(v_87) else caught-fail) in
        {261}let valid1: bool = (if v_88 then true else caught-fail) in
        {262}let re_3: key = (if v_88 then ne_2 else caught-fail) in
        {263}let v_89: bitstring = (if v_88 then catch-fail(symmetricstateunpack(ss_14)) else caught-fail) in
        {264}let v_90: bool = (not-caught-fail(v_89) && success?(1-proj-3-tuple(v_89))) in
        {265}let h_13: bitstring = (if v_90 then 3-proj-3-tuple(v_89) else caught-fail) in
        {266}let ck_15: key = (if v_90 then 2-proj-3-tuple(v_89) else caught-fail) in
        {267}let cs_13: cipherstate = (if v_90 then 1-proj-3-tuple(v_89) else caught-fail) in
        {268}let ss_15: symmetricstate = (if v_88 then catch-fail((if v_90 then symmetricstatepack(cs_13,ck_15,hash(h_13,re_3)) else fail-any)) else caught-fail) in
        {269}let v_91: bool = not-caught-fail(ss_15) in
        {270}let v_92: bitstring = (if v_91 then catch-fail(keypairunpack(e_6)) else caught-fail) in
        {271}let v_93: bool = (not-caught-fail(v_92) && success?(1-proj-2-tuple(v_92))) in
        {272}let my_private_key_2: key = (if v_93 then 2-proj-2-tuple(v_92) else caught-fail) in
        {273}let my_public_key_2: key = (if v_93 then 1-proj-2-tuple(v_92) else caught-fail) in
        {274}let input_key_material_2: key = (if v_91 then catch-fail((if v_93 then dhexp(my_private_key_2,re_3) else fail-any)) else caught-fail) in
        {275}let v_94: bool = not-caught-fail(input_key_material_2) in
        {276}let v_95: bitstring = (if v_94 then catch-fail(symmetricstateunpack(ss_15)) else caught-fail) in
        {277}let v_96: bool = (not-caught-fail(v_95) && success?(1-proj-3-tuple(v_95))) in
        {278}let h_14: bitstring = (if v_96 then 3-proj-3-tuple(v_95) else caught-fail) in
        {279}let ck_16: key = (if v_96 then 2-proj-3-tuple(v_95) else caught-fail) in
        {280}let cs_14: cipherstate = (if v_96 then 1-proj-3-tuple(v_95) else caught-fail) in
        {281}let output1_2: key = (if v_96 then hmac_hash1(ck_16,input_key_material_2) else caught-fail) in
        {282}let output2_2: key = (if v_96 then hmac_hash2(ck_16,input_key_material_2) else caught-fail) in
        {283}let output3_2: key = (if v_96 then hmac_hash3(ck_16,input_key_material_2) else caught-fail) in
        {284}let v_97: bitstring = (if v_96 then catch-fail((output1_2,output2_2,output3_2)) else caught-fail) in
        {285}let v_98: bool = (not-caught-fail(v_97) && success?(1-proj-3-tuple(v_97))) in
        {286}let output_1: key = (if v_98 then 3-proj-3-tuple(v_97) else caught-fail) in
        {287}let temp_k_2: key = (if v_98 then 2-proj-3-tuple(v_97) else caught-fail) in
        {288}let ck_17: key = (if v_98 then 1-proj-3-tuple(v_97) else caught-fail) in
        {289}let ss_16: symmetricstate = (if v_91 then catch-fail((if v_94 then (if v_96 then (if v_98 then symmetricstatepack(cipherstatepack(temp_k_2,minnonce),ck_17,h_14) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {290}let v_99: bool = not-caught-fail(ss_16) in
        {291}let v_100: bitstring = (if v_99 then catch-fail(keypairunpack(s_3)) else caught-fail) in
        {292}let v_101: bool = (not-caught-fail(v_100) && success?(1-proj-2-tuple(v_100))) in
        {293}let my_private_key_3: key = (if v_101 then 2-proj-2-tuple(v_100) else caught-fail) in
        {294}let my_public_key_3: key = (if v_101 then 1-proj-2-tuple(v_100) else caught-fail) in
        {295}let input_key_material_3: key = (if v_99 then catch-fail((if v_101 then dhexp(my_private_key_3,re_3) else fail-any)) else caught-fail) in
        {296}let v_102: bool = not-caught-fail(input_key_material_3) in
        {297}let v_103: bitstring = (if v_102 then catch-fail(symmetricstateunpack(ss_16)) else caught-fail) in
        {298}let v_104: bool = (not-caught-fail(v_103) && success?(1-proj-3-tuple(v_103))) in
        {299}let h_15: bitstring = (if v_104 then 3-proj-3-tuple(v_103) else caught-fail) in
        {300}let ck_18: key = (if v_104 then 2-proj-3-tuple(v_103) else caught-fail) in
        {301}let cs_15: cipherstate = (if v_104 then 1-proj-3-tuple(v_103) else caught-fail) in
        {302}let output1_3: key = (if v_104 then hmac_hash1(ck_18,input_key_material_3) else caught-fail) in
        {303}let output2_3: key = (if v_104 then hmac_hash2(ck_18,input_key_material_3) else caught-fail) in
        {304}let output3_3: key = (if v_104 then hmac_hash3(ck_18,input_key_material_3) else caught-fail) in
        {305}let v_105: bitstring = (if v_104 then catch-fail((output1_3,output2_3,output3_3)) else caught-fail) in
        {306}let v_106: bool = (not-caught-fail(v_105) && success?(1-proj-3-tuple(v_105))) in
        {307}let output_2: key = (if v_106 then 3-proj-3-tuple(v_105) else caught-fail) in
        {308}let temp_k_3: key = (if v_106 then 2-proj-3-tuple(v_105) else caught-fail) in
        {309}let ck_19: key = (if v_106 then 1-proj-3-tuple(v_105) else caught-fail) in
        {310}let ss_17: symmetricstate = (if v_99 then catch-fail((if v_102 then (if v_104 then (if v_106 then symmetricstatepack(cipherstatepack(temp_k_3,minnonce),ck_19,h_15) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {311}let v_107: bool = not-caught-fail(ss_17) in
        {312}let v_108: bitstring = (if v_107 then catch-fail(keypairunpack(m_3)) else caught-fail) in
        {313}let v_109: bool = (not-caught-fail(v_108) && success?(1-proj-2-tuple(v_108))) in
        {314}let my_private_key_4: key = (if v_109 then 2-proj-2-tuple(v_108) else caught-fail) in
        {315}let my_public_key_4: key = (if v_109 then 1-proj-2-tuple(v_108) else caught-fail) in
        {316}let input_key_material_4: key = (if v_107 then catch-fail((if v_109 then dhexp(my_private_key_4,re_3) else fail-any)) else caught-fail) in
        {317}let v_110: bool = not-caught-fail(input_key_material_4) in
        {318}let v_111: bitstring = (if v_110 then catch-fail(symmetricstateunpack(ss_17)) else caught-fail) in
        {319}let v_112: bool = (not-caught-fail(v_111) && success?(1-proj-3-tuple(v_111))) in
        {320}let h_16: bitstring = (if v_112 then 3-proj-3-tuple(v_111) else caught-fail) in
        {321}let ck_20: key = (if v_112 then 2-proj-3-tuple(v_111) else caught-fail) in
        {322}let cs_16: cipherstate = (if v_112 then 1-proj-3-tuple(v_111) else caught-fail) in
        {323}let output1_4: key = (if v_112 then hmac_hash1(ck_20,input_key_material_4) else caught-fail) in
        {324}let output2_4: key = (if v_112 then hmac_hash2(ck_20,input_key_material_4) else caught-fail) in
        {325}let output3_4: key = (if v_112 then hmac_hash3(ck_20,input_key_material_4) else caught-fail) in
        {326}let v_113: bitstring = (if v_112 then catch-fail((output1_4,output2_4,output3_4)) else caught-fail) in
        {327}let v_114: bool = (not-caught-fail(v_113) && success?(1-proj-3-tuple(v_113))) in
        {328}let output_4: key = (if v_114 then 3-proj-3-tuple(v_113) else caught-fail) in
        {329}let temp_k_4: key = (if v_114 then 2-proj-3-tuple(v_113) else caught-fail) in
        {330}let ck_21: key = (if v_114 then 1-proj-3-tuple(v_113) else caught-fail) in
        {331}let ss_18: symmetricstate = (if v_107 then catch-fail((if v_110 then (if v_112 then (if v_114 then symmetricstatepack(cipherstatepack(temp_k_4,minnonce),ck_21,h_16) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {332}let v_115: bool = not-caught-fail(ss_18) in
        {333}let v_116: bitstring = (if v_115 then catch-fail(symmetricstateunpack(ss_18)) else caught-fail) in
        {334}let v_117: bool = (not-caught-fail(v_116) && success?(1-proj-3-tuple(v_116))) in
        {335}let h_17: bitstring = (if v_117 then 3-proj-3-tuple(v_116) else caught-fail) in
        {336}let ck_22: key = (if v_117 then 2-proj-3-tuple(v_116) else caught-fail) in
        {337}let cs_17: cipherstate = (if v_117 then 1-proj-3-tuple(v_116) else caught-fail) in
        {338}let v_118: bitstring = (if v_117 then catch-fail(cipherstateunpack(cs_17)) else caught-fail) in
        {339}let v_119: bool = (not-caught-fail(v_118) && success?(1-proj-2-tuple(v_118))) in
        {340}let n_6: nonce = (if v_119 then 2-proj-2-tuple(v_118) else caught-fail) in
        {341}let k_7: key = (if v_119 then 1-proj-2-tuple(v_118) else caught-fail) in
        {342}let d: aead = (if v_119 then catch-fail(decrypt(k_7,n_6,h_17,ciphertext_5)) else caught-fail) in
        {343}let v_120: bool = not-caught-fail(d) in
        {344}let v_121: bitstring = (if v_120 then catch-fail(aeadunpack(d)) else caught-fail) in
        {345}let v_122: bool = (not-caught-fail(v_121) && success?(1-proj-3-tuple(v_121))) in
        {346}let plaintext_2: bitstring = (if v_122 then 3-proj-3-tuple(v_121) else caught-fail) in
        {347}let adi: bitstring = (if v_122 then 2-proj-3-tuple(v_121) else caught-fail) in
        {348}let valid: bool = (if v_122 then 1-proj-3-tuple(v_121) else caught-fail) in
        {349}let n_7: nonce = (if v_122 then increment_nonce(n_6) else caught-fail) in
        {350}let v_123: bitstring = (if v_122 then catch-fail(cipherstateunpack(cs_17)) else caught-fail) in
        {351}let v_124: bool = (not-caught-fail(v_123) && success?(1-proj-2-tuple(v_123))) in
        {352}let o_3: nonce = (if v_124 then 2-proj-2-tuple(v_123) else caught-fail) in
        {353}let k_8: key = (if v_124 then 1-proj-2-tuple(v_123) else caught-fail) in
        {354}let csi_6: cipherstate = (if v_122 then catch-fail((if v_124 then cipherstatepack(k_8,n_7) else fail-any)) else caught-fail) in
        {355}let v_125: bool = not-caught-fail(csi_6) in
        {356}let v_126: bitstring = (if v_117 then catch-fail((if v_119 then (if v_120 then (if v_122 then (if v_125 then (csi_6,plaintext_2,valid) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {357}let v_127: bool = (not-caught-fail(v_126) && success?(1-proj-3-tuple(v_126))) in
        {358}let valid_1: bool = (if v_127 then 3-proj-3-tuple(v_126) else caught-fail) in
        {359}let plaintext_3: bitstring = (if v_127 then 2-proj-3-tuple(v_126) else caught-fail) in
        {360}let csi_7: cipherstate = (if v_127 then 1-proj-3-tuple(v_126) else caught-fail) in
        {361}let ss_19: symmetricstate = (if v_127 then symmetricstatepack(csi_7,ck_22,h_17) else caught-fail) in
        {362}let v_128: bitstring = (if v_127 then catch-fail(symmetricstateunpack(ss_19)) else caught-fail) in
        {363}let v_129: bool = (not-caught-fail(v_128) && success?(1-proj-3-tuple(v_128))) in
        {364}let h_18: bitstring = (if v_129 then 3-proj-3-tuple(v_128) else caught-fail) in
        {365}let ck_23: key = (if v_129 then 2-proj-3-tuple(v_128) else caught-fail) in
        {366}let cs_18: cipherstate = (if v_129 then 1-proj-3-tuple(v_128) else caught-fail) in
        {367}let ssi_3: symmetricstate = (if v_127 then catch-fail((if v_129 then symmetricstatepack(cs_18,ck_23,hash(h_18,ciphertext_5)) else fail-any)) else caught-fail) in
        {368}let v_130: bool = not-caught-fail(ssi_3) in
        {369}let v_131: bitstring = (if v_115 then catch-fail((if v_117 then (if v_127 then (if v_130 then (ssi_3,plaintext_3,valid_1) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {370}let v_132: bool = (not-caught-fail(v_131) && success?(1-proj-3-tuple(v_131))) in
        {371}let valid2: bool = (if v_132 then 3-proj-3-tuple(v_131) else caught-fail) in
        {372}let plaintext_4: bitstring = (if v_132 then 2-proj-3-tuple(v_131) else caught-fail) in
        {373}let ss_20: symmetricstate = (if v_132 then 1-proj-3-tuple(v_131) else caught-fail) in
        {374}let v_133: bool = (if v_132 then catch-fail((valid1 && valid2)) else caught-fail) in
        {375}let hs_5: handshakestate = (if v_133 then handshakestatepack(ss_20,s_3,m_3,e_6,rs_2,rm_2,re_3,psk_2,initiator_2) else caught-fail) in
        {376}let v_134: bitstring = (if v_133 then catch-fail(symmetricstateunpack(ss_20)) else caught-fail) in
        {377}let v_135: bool = (not-caught-fail(v_134) && success?(1-proj-3-tuple(v_134))) in
        {378}let h_19: bitstring = (if v_135 then 3-proj-3-tuple(v_134) else caught-fail) in
        {379}let ck_24: key = (if v_135 then 2-proj-3-tuple(v_134) else caught-fail) in
        {380}let cs_19: cipherstate = (if v_135 then 1-proj-3-tuple(v_134) else caught-fail) in
        {381}let input_key_material_5: key = (if v_135 then zero else caught-fail) in
        {382}let output1_5: key = (if v_135 then hmac_hash1(ck_24,input_key_material_5) else caught-fail) in
        {383}let output2_5: key = (if v_135 then hmac_hash2(ck_24,input_key_material_5) else caught-fail) in
        {384}let output3_5: key = (if v_135 then hmac_hash3(ck_24,input_key_material_5) else caught-fail) in
        {385}let v_136: bitstring = (if v_135 then catch-fail((output1_5,output2_5,output3_5)) else caught-fail) in
        {386}let v_137: bool = (not-caught-fail(v_136) && success?(1-proj-3-tuple(v_136))) in
        {387}let temp_k3: key = (if v_137 then 3-proj-3-tuple(v_136) else caught-fail) in
        {388}let temp_k2: key = (if v_137 then 2-proj-3-tuple(v_136) else caught-fail) in
        {389}let temp_k1: key = (if v_137 then 1-proj-3-tuple(v_136) else caught-fail) in
        {390}let cs1: cipherstate = (if v_137 then cipherstatepack(temp_k1,minnonce) else caught-fail) in
        {391}let cs2: cipherstate = (if v_137 then cipherstatepack(temp_k2,minnonce) else caught-fail) in
        {392}let v_138: bitstring = (if v_133 then catch-fail((if v_135 then (if v_137 then (ss_20,cs1,cs2) else fail-any) else fail-any)) else caught-fail) in
        {393}let v_139: bool = (not-caught-fail(v_138) && success?(1-proj-3-tuple(v_138))) in
        {394}let cs2_1: cipherstate = (if v_139 then 3-proj-3-tuple(v_138) else caught-fail) in
        {395}let cs1_1: cipherstate = (if v_139 then 2-proj-3-tuple(v_138) else caught-fail) in
        {396}let ssi_4: symmetricstate = (if v_139 then 1-proj-3-tuple(v_138) else caught-fail) in
        {397}let (hs_6: handshakestate,plaintext_b: bitstring,valid_2: bool,cs1_2: cipherstate,cs2_2: cipherstate) = (if v_86 then (if v_88 then (if v_91 then (if v_99 then (if v_107 then (if v_115 then (if v_132 then (if undo-catch-fail(v_133) then (if v_139 then (hs_5,plaintext_4,true,cs1_1,cs2_1) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {398}event RecvMsg(me,them,stagepack_b(sid_1),plaintext_b);
        {399}insert statestore(me,them,sid_1,statepack_c(hs_6,cs1_2,cs2_2))
    ) | (
        {401}!
        {459}get statestore(=me,=them,=sid_1,statepack_c(hs_7: handshakestate,cs1_3: cipherstate,cs2_3: cipherstate)) in
        {402}let hs_8: handshakestate = handshakestatesetcs(hs_7,cs1_3) in
        {403}let payload_1: bitstring = msg_c(me,them,sid_1) in
        {404}let v_140: bitstring = catch-fail(handshakestateunpack(hs_8)) in
        {405}let v_141: bool = (not-caught-fail(v_140) && success?(1-proj-9-tuple(v_140))) in
        {406}let initiator_3: bool = (if v_141 then 9-proj-9-tuple(v_140) else caught-fail) in
        {407}let psk_3: key = (if v_141 then 8-proj-9-tuple(v_140) else caught-fail) in
        {408}let re_4: key = (if v_141 then 7-proj-9-tuple(v_140) else caught-fail) in
        {409}let rm_3: key = (if v_141 then 6-proj-9-tuple(v_140) else caught-fail) in
        {410}let rs_3: key = (if v_141 then 5-proj-9-tuple(v_140) else caught-fail) in
        {411}let e_7: keypair = (if v_141 then 4-proj-9-tuple(v_140) else caught-fail) in
        {412}let m_4: keypair = (if v_141 then 3-proj-9-tuple(v_140) else caught-fail) in
        {413}let s_4: keypair = (if v_141 then 2-proj-9-tuple(v_140) else caught-fail) in
        {414}let ss_21: symmetricstate = (if v_141 then 1-proj-9-tuple(v_140) else caught-fail) in
        {415}let v_142: bitstring = (if v_141 then catch-fail((empty,empty,empty)) else caught-fail) in
        {416}let v_143: bool = (not-caught-fail(v_142) && success?(1-proj-3-tuple(v_142))) in
        {417}let ciphertext_6: bitstring = (if v_143 then 3-proj-3-tuple(v_142) else caught-fail) in
        {418}let ns_3: bitstring = (if v_143 then 2-proj-3-tuple(v_142) else caught-fail) in
        {419}let ne_3: bitstring = (if v_143 then 1-proj-3-tuple(v_142) else caught-fail) in
        {420}let v_144: bitstring = (if v_143 then catch-fail(symmetricstateunpack(ss_21)) else caught-fail) in
        {421}let v_145: bool = (not-caught-fail(v_144) && success?(1-proj-3-tuple(v_144))) in
        {422}let h_20: bitstring = (if v_145 then 3-proj-3-tuple(v_144) else caught-fail) in
        {423}let ck_25: key = (if v_145 then 2-proj-3-tuple(v_144) else caught-fail) in
        {424}let cs_20: cipherstate = (if v_145 then 1-proj-3-tuple(v_144) else caught-fail) in
        {425}let v_146: bitstring = (if v_145 then catch-fail(cipherstateunpack(cs_20)) else caught-fail) in
        {426}let v_147: bool = (not-caught-fail(v_146) && success?(1-proj-2-tuple(v_146))) in
        {427}let n_8: nonce = (if v_147 then 2-proj-2-tuple(v_146) else caught-fail) in
        {428}let k_9: key = (if v_147 then 1-proj-2-tuple(v_146) else caught-fail) in
        {429}let e_8: bitstring = (if v_147 then encrypt(k_9,n_8,h_20,payload_1) else caught-fail) in
        {430}let n_9: nonce = (if v_147 then increment_nonce(n_8) else caught-fail) in
        {431}let v_148: bitstring = (if v_147 then catch-fail(cipherstateunpack(cs_20)) else caught-fail) in
        {432}let v_149: bool = (not-caught-fail(v_148) && success?(1-proj-2-tuple(v_148))) in
        {433}let o_4: nonce = (if v_149 then 2-proj-2-tuple(v_148) else caught-fail) in
        {434}let k_10: key = (if v_149 then 1-proj-2-tuple(v_148) else caught-fail) in
        {435}let csi_8: cipherstate = (if v_147 then catch-fail((if v_149 then cipherstatepack(k_10,n_9) else fail-any)) else caught-fail) in
        {436}let v_150: bool = not-caught-fail(csi_8) in
        {437}let v_151: bitstring = (if v_145 then catch-fail((if v_147 then (if v_150 then (csi_8,e_8) else fail-any) else fail-any)) else caught-fail) in
        {438}let v_152: bool = (not-caught-fail(v_151) && success?(1-proj-2-tuple(v_151))) in
        {439}let ciphertext_7: bitstring = (if v_152 then 2-proj-2-tuple(v_151) else caught-fail) in
        {440}let csi_9: cipherstate = (if v_152 then 1-proj-2-tuple(v_151) else caught-fail) in
        {441}let ss_22: symmetricstate = (if v_152 then symmetricstatepack(csi_9,ck_25,h_20) else caught-fail) in
        {442}let v_153: bitstring = (if v_152 then catch-fail(symmetricstateunpack(ss_22)) else caught-fail) in
        {443}let v_154: bool = (not-caught-fail(v_153) && success?(1-proj-3-tuple(v_153))) in
        {444}let h_21: bitstring = (if v_154 then 3-proj-3-tuple(v_153) else caught-fail) in
        {445}let ck_26: key = (if v_154 then 2-proj-3-tuple(v_153) else caught-fail) in
        {446}let cs_21: cipherstate = (if v_154 then 1-proj-3-tuple(v_153) else caught-fail) in
        {447}let ssi_5: symmetricstate = (if v_152 then catch-fail((if v_154 then symmetricstatepack(cs_21,ck_26,hash(h_21,ciphertext_7)) else fail-any)) else caught-fail) in
        {448}let v_155: bool = not-caught-fail(ssi_5) in
        {449}let v_156: bitstring = (if v_143 then catch-fail((if v_145 then (if v_152 then (if v_155 then (ssi_5,ciphertext_7) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {450}let v_157: bool = (not-caught-fail(v_156) && success?(1-proj-2-tuple(v_156))) in
        {451}let ciphertext_8: bitstring = (if v_157 then 2-proj-2-tuple(v_156) else caught-fail) in
        {452}let ss_23: symmetricstate = (if v_157 then 1-proj-2-tuple(v_156) else caught-fail) in
        {453}let hs_9: handshakestate = (if v_157 then handshakestatepack(ss_23,s_4,m_4,e_7,rs_3,rm_3,re_4,psk_3,initiator_3) else caught-fail) in
        {454}let message_buffer_1: bitstring = (if v_157 then concat3(ne_3,ns_3,ciphertext_8) else caught-fail) in
        {455}let (hs_10: handshakestate,message_c: bitstring) = (if v_141 then (if v_143 then (if v_157 then (hs_9,message_buffer_1) else fail-any) else fail-any) else fail-any) in
        {456}event SendMsg(me,them,stagepack_c(sid_1),msg_c(me,them,sid_1));
        {457}insert statestore(me,them,sid_1,statepack_d(hs_10,handshakestategetcs(hs_10),cs2_3));
        {458}out(pub, message_c)
    ) | (
        {460}!
        {526}get statestore(=me,=them,=sid_1,statepack_d(hs_11: handshakestate,cs1_4: cipherstate,cs2_4: cipherstate)) in
        {461}let hs_12: handshakestate = handshakestatesetcs(hs_11,cs2_4) in
        {462}in(pub, message_d: bitstring);
        {463}let v_158: bitstring = catch-fail(handshakestateunpack(hs_12)) in
        {464}let v_159: bool = (not-caught-fail(v_158) && success?(1-proj-9-tuple(v_158))) in
        {465}let initiator_4: bool = (if v_159 then 9-proj-9-tuple(v_158) else caught-fail) in
        {466}let psk_4: key = (if v_159 then 8-proj-9-tuple(v_158) else caught-fail) in
        {467}let re_5: key = (if v_159 then 7-proj-9-tuple(v_158) else caught-fail) in
        {468}let rm_4: key = (if v_159 then 6-proj-9-tuple(v_158) else caught-fail) in
        {469}let rs_4: key = (if v_159 then 5-proj-9-tuple(v_158) else caught-fail) in
        {470}let e_9: keypair = (if v_159 then 4-proj-9-tuple(v_158) else caught-fail) in
        {471}let m_5: keypair = (if v_159 then 3-proj-9-tuple(v_158) else caught-fail) in
        {472}let s_5: keypair = (if v_159 then 2-proj-9-tuple(v_158) else caught-fail) in
        {473}let ss_24: symmetricstate = (if v_159 then 1-proj-9-tuple(v_158) else caught-fail) in
        {474}let v_160: bitstring = (if v_159 then catch-fail(deconcat3(message_d)) else caught-fail) in
        {475}let v_161: bool = (not-caught-fail(v_160) && success?(1-proj-3-tuple(v_160))) in
        {476}let ciphertext_9: bitstring = (if v_161 then 3-proj-3-tuple(v_160) else caught-fail) in
        {477}let ns_4: bitstring = (if v_161 then 2-proj-3-tuple(v_160) else caught-fail) in
        {478}let ne_4: bitstring = (if v_161 then 1-proj-3-tuple(v_160) else caught-fail) in
        {479}let valid1_1: bool = (if v_161 then true else caught-fail) in
        {480}let v_162: bitstring = (if v_161 then catch-fail(symmetricstateunpack(ss_24)) else caught-fail) in
        {481}let v_163: bool = (not-caught-fail(v_162) && success?(1-proj-3-tuple(v_162))) in
        {482}let h_22: bitstring = (if v_163 then 3-proj-3-tuple(v_162) else caught-fail) in
        {483}let ck_27: key = (if v_163 then 2-proj-3-tuple(v_162) else caught-fail) in
        {484}let cs_22: cipherstate = (if v_163 then 1-proj-3-tuple(v_162) else caught-fail) in
        {485}let v_164: bitstring = (if v_163 then catch-fail(cipherstateunpack(cs_22)) else caught-fail) in
        {486}let v_165: bool = (not-caught-fail(v_164) && success?(1-proj-2-tuple(v_164))) in
        {487}let n_10: nonce = (if v_165 then 2-proj-2-tuple(v_164) else caught-fail) in
        {488}let k_11: key = (if v_165 then 1-proj-2-tuple(v_164) else caught-fail) in
        {489}let d_1: aead = (if v_165 then catch-fail(decrypt(k_11,n_10,h_22,ciphertext_9)) else caught-fail) in
        {490}let v_166: bool = not-caught-fail(d_1) in
        {491}let v_167: bitstring = (if v_166 then catch-fail(aeadunpack(d_1)) else caught-fail) in
        {492}let v_168: bool = (not-caught-fail(v_167) && success?(1-proj-3-tuple(v_167))) in
        {493}let plaintext_5: bitstring = (if v_168 then 3-proj-3-tuple(v_167) else caught-fail) in
        {494}let adi_1: bitstring = (if v_168 then 2-proj-3-tuple(v_167) else caught-fail) in
        {495}let valid_3: bool = (if v_168 then 1-proj-3-tuple(v_167) else caught-fail) in
        {496}let n_11: nonce = (if v_168 then increment_nonce(n_10) else caught-fail) in
        {497}let v_169: bitstring = (if v_168 then catch-fail(cipherstateunpack(cs_22)) else caught-fail) in
        {498}let v_170: bool = (not-caught-fail(v_169) && success?(1-proj-2-tuple(v_169))) in
        {499}let o_5: nonce = (if v_170 then 2-proj-2-tuple(v_169) else caught-fail) in
        {500}let k_12: key = (if v_170 then 1-proj-2-tuple(v_169) else caught-fail) in
        {501}let csi_10: cipherstate = (if v_168 then catch-fail((if v_170 then cipherstatepack(k_12,n_11) else fail-any)) else caught-fail) in
        {502}let v_171: bool = not-caught-fail(csi_10) in
        {503}let v_172: bitstring = (if v_163 then catch-fail((if v_165 then (if v_166 then (if v_168 then (if v_171 then (csi_10,plaintext_5,valid_3) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {504}let v_173: bool = (not-caught-fail(v_172) && success?(1-proj-3-tuple(v_172))) in
        {505}let valid_4: bool = (if v_173 then 3-proj-3-tuple(v_172) else caught-fail) in
        {506}let plaintext_6: bitstring = (if v_173 then 2-proj-3-tuple(v_172) else caught-fail) in
        {507}let csi_11: cipherstate = (if v_173 then 1-proj-3-tuple(v_172) else caught-fail) in
        {508}let ss_25: symmetricstate = (if v_173 then symmetricstatepack(csi_11,ck_27,h_22) else caught-fail) in
        {509}let v_174: bitstring = (if v_173 then catch-fail(symmetricstateunpack(ss_25)) else caught-fail) in
        {510}let v_175: bool = (not-caught-fail(v_174) && success?(1-proj-3-tuple(v_174))) in
        {511}let h_23: bitstring = (if v_175 then 3-proj-3-tuple(v_174) else caught-fail) in
        {512}let ck_28: key = (if v_175 then 2-proj-3-tuple(v_174) else caught-fail) in
        {513}let cs_23: cipherstate = (if v_175 then 1-proj-3-tuple(v_174) else caught-fail) in
        {514}let ssi_6: symmetricstate = (if v_173 then catch-fail((if v_175 then symmetricstatepack(cs_23,ck_28,hash(h_23,ciphertext_9)) else fail-any)) else caught-fail) in
        {515}let v_176: bool = not-caught-fail(ssi_6) in
        {516}let v_177: bitstring = (if v_161 then catch-fail((if v_163 then (if v_173 then (if v_176 then (ssi_6,plaintext_6,valid_4) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {517}let v_178: bool = (not-caught-fail(v_177) && success?(1-proj-3-tuple(v_177))) in
        {518}let valid2_1: bool = (if v_178 then 3-proj-3-tuple(v_177) else caught-fail) in
        {519}let plaintext_7: bitstring = (if v_178 then 2-proj-3-tuple(v_177) else caught-fail) in
        {520}let ss_26: symmetricstate = (if v_178 then 1-proj-3-tuple(v_177) else caught-fail) in
        {521}let v_179: bool = (if v_178 then catch-fail((valid1_1 && valid2_1)) else caught-fail) in
        {522}let hs_13: handshakestate = (if v_179 then handshakestatepack(ss_26,s_5,m_5,e_9,rs_4,rm_4,re_5,psk_4,initiator_4) else caught-fail) in
        {523}let (hs_14: handshakestate,plaintext_d: bitstring,valid_5: bool) = (if v_159 then (if v_161 then (if v_178 then (if undo-catch-fail(v_179) then (hs_13,plaintext_7,true) else fail-any) else fail-any) else fail-any) else fail-any) in
        {524}event RecvMsg(me,them,stagepack_d(sid_1),plaintext_d);
        {525}event RecvEnd(valid_5)
    ) | (
        0
    )
) | (
    {527}let me_1: principal = alice in
    {528}let them_1: principal = charlie in
    {529}let sid_2: sessionid = sid in
    {530}let s_6: keypair = keypairpack(empty,empty) in
    {531}let m_6: keypair = keypairpack(empty,empty) in
    (
        {532}let e_10: keypair = keypairpack(empty,empty) in
        {533}let basis_5: key = key_s(them_1) in
        {534}let public_key_5: key = catch-fail(dhexp(basis_5,validkey(g))) in
        {535}let v_180: bool = not-caught-fail(public_key_5) in
        {536}let rs_5: key = getpublickey((if v_180 then keypairpack(validkey(public_key_5),basis_5) else fail-any)) in
        {537}let basis_6: key = key_m(them_1) in
        {538}let public_key_6: key = catch-fail(dhexp(basis_6,validkey(g))) in
        {539}let v_181: bool = not-caught-fail(public_key_6) in
        {540}let rm_5: key = getpublickey((if v_181 then keypairpack(validkey(public_key_6),basis_6) else fail-any)) in
        {541}let re_6: key = empty in
        {542}let prologue_1: bitstring = empty in
        {543}let psk_5: key = empty in
        {544}let protocol_name_1: bitstring = somename in
        {545}let h_24: bitstring = hash(protocol_name_1,empty) in
        {546}let ck_29: key = h_24 in
        {547}let k_13: key = empty in
        {548}let cs_24: cipherstate = cipherstatepack(k_13,minnonce) in
        {549}let ss_27: symmetricstate = symmetricstatepack(cs_24,ck_29,h_24) in
        {550}let v_182: bitstring = catch-fail(symmetricstateunpack(ss_27)) in
        {551}let v_183: bool = (not-caught-fail(v_182) && success?(1-proj-3-tuple(v_182))) in
        {552}let h_25: bitstring = (if v_183 then 3-proj-3-tuple(v_182) else caught-fail) in
        {553}let ck_30: key = (if v_183 then 2-proj-3-tuple(v_182) else caught-fail) in
        {554}let cs_25: cipherstate = (if v_183 then 1-proj-3-tuple(v_182) else caught-fail) in
        {555}let ss_28: symmetricstate = catch-fail((if v_183 then symmetricstatepack(cs_25,ck_30,hash(h_25,prologue_1)) else fail-any)) in
        {556}let v_184: bool = not-caught-fail(ss_28) in
        {557}let v_185: bitstring = (if v_184 then catch-fail(symmetricstateunpack(ss_28)) else caught-fail) in
        {558}let v_186: bool = (not-caught-fail(v_185) && success?(1-proj-3-tuple(v_185))) in
        {559}let h_26: bitstring = (if v_186 then 3-proj-3-tuple(v_185) else caught-fail) in
        {560}let ck_31: key = (if v_186 then 2-proj-3-tuple(v_185) else caught-fail) in
        {561}let cs_26: cipherstate = (if v_186 then 1-proj-3-tuple(v_185) else caught-fail) in
        {562}let ss_29: symmetricstate = (if v_184 then catch-fail((if v_186 then symmetricstatepack(cs_26,ck_31,hash(h_26,rs_5)) else fail-any)) else caught-fail) in
        {563}let v_187: bool = not-caught-fail(ss_29) in
        {564}let v_188: bitstring = (if v_187 then catch-fail(symmetricstateunpack(ss_29)) else caught-fail) in
        {565}let v_189: bool = (not-caught-fail(v_188) && success?(1-proj-3-tuple(v_188))) in
        {566}let h_27: bitstring = (if v_189 then 3-proj-3-tuple(v_188) else caught-fail) in
        {567}let ck_32: key = (if v_189 then 2-proj-3-tuple(v_188) else caught-fail) in
        {568}let cs_27: cipherstate = (if v_189 then 1-proj-3-tuple(v_188) else caught-fail) in
        {569}let ss_30: symmetricstate = (if v_187 then catch-fail((if v_189 then symmetricstatepack(cs_27,ck_32,hash(h_27,rm_5)) else fail-any)) else caught-fail) in
        {570}let v_190: bool = not-caught-fail(ss_30) in
        {571}let hs_15: handshakestate = (if v_184 then (if v_187 then (if v_190 then handshakestatepack(ss_30,s_6,m_6,e_10,rs_5,rm_5,re_6,psk_5,true) else fail-any) else fail-any) else fail-any) in
        {572}insert statestore(me_1,them_1,sid_2,statepack_a(hs_15))
    ) | (
        {766}get statestore(=me_1,=them_1,=sid_2,statepack_a(hs_16: handshakestate)) in
        {573}let payload_2: bitstring = msg_a(me_1,them_1,sid_2) in
        {574}let v_191: bitstring = catch-fail(handshakestateunpack(hs_16)) in
        {575}let v_192: bool = (not-caught-fail(v_191) && success?(1-proj-9-tuple(v_191))) in
        {576}let initiator_5: bool = (if v_192 then 9-proj-9-tuple(v_191) else caught-fail) in
        {577}let psk_6: key = (if v_192 then 8-proj-9-tuple(v_191) else caught-fail) in
        {578}let re_7: key = (if v_192 then 7-proj-9-tuple(v_191) else caught-fail) in
        {579}let rm_6: key = (if v_192 then 6-proj-9-tuple(v_191) else caught-fail) in
        {580}let rs_6: key = (if v_192 then 5-proj-9-tuple(v_191) else caught-fail) in
        {581}let e_11: keypair = (if v_192 then 4-proj-9-tuple(v_191) else caught-fail) in
        {582}let m_7: keypair = (if v_192 then 3-proj-9-tuple(v_191) else caught-fail) in
        {583}let s_7: keypair = (if v_192 then 2-proj-9-tuple(v_191) else caught-fail) in
        {584}let ss_31: symmetricstate = (if v_192 then 1-proj-9-tuple(v_191) else caught-fail) in
        {585}let v_193: bitstring = (if v_192 then catch-fail((empty,empty,empty,empty)) else caught-fail) in
        {586}let v_194: bool = (not-caught-fail(v_193) && success?(1-proj-4-tuple(v_193))) in
        {587}let ciphertext_10: bitstring = (if v_194 then 4-proj-4-tuple(v_193) else caught-fail) in
        {588}let nm_2: bitstring = (if v_194 then 3-proj-4-tuple(v_193) else caught-fail) in
        {589}let ns_5: bitstring = (if v_194 then 2-proj-4-tuple(v_193) else caught-fail) in
        {590}let ne_5: bitstring = (if v_194 then 1-proj-4-tuple(v_193) else caught-fail) in
        {591}let basis_7: key = (if v_194 then key_e(me_1,them_1,sid_2) else caught-fail) in
        {592}let public_key_7: key = (if v_194 then catch-fail(dhexp(basis_7,validkey(g))) else caught-fail) in
        {593}let v_195: bool = not-caught-fail(public_key_7) in
        {594}let e_12: keypair = (if v_194 then catch-fail((if v_195 then keypairpack(validkey(public_key_7),basis_7) else fail-any)) else caught-fail) in
        {595}let v_196: bool = not-caught-fail(e_12) in
        {596}let ne_6: bitstring = (if v_196 then catch-fail(getpublickey(e_12)) else caught-fail) in
        {597}let v_197: bool = not-caught-fail(ne_6) in
        {598}let v_198: bitstring = (if v_197 then catch-fail(symmetricstateunpack(ss_31)) else caught-fail) in
        {599}let v_199: bool = (not-caught-fail(v_198) && success?(1-proj-3-tuple(v_198))) in
        {600}let h_28: bitstring = (if v_199 then 3-proj-3-tuple(v_198) else caught-fail) in
        {601}let ck_33: key = (if v_199 then 2-proj-3-tuple(v_198) else caught-fail) in
        {602}let cs_28: cipherstate = (if v_199 then 1-proj-3-tuple(v_198) else caught-fail) in
        {603}let ss_32: symmetricstate = (if v_197 then catch-fail((if v_199 then symmetricstatepack(cs_28,ck_33,hash(h_28,ne_6)) else fail-any)) else caught-fail) in
        {604}let v_200: bool = not-caught-fail(ss_32) in
        {605}let v_201: bitstring = (if v_200 then catch-fail(keypairunpack(e_12)) else caught-fail) in
        {606}let v_202: bool = (not-caught-fail(v_201) && success?(1-proj-2-tuple(v_201))) in
        {607}let my_private_key_5: key = (if v_202 then 2-proj-2-tuple(v_201) else caught-fail) in
        {608}let my_public_key_5: key = (if v_202 then 1-proj-2-tuple(v_201) else caught-fail) in
        {609}let input_key_material_6: key = (if v_200 then catch-fail((if v_202 then dhexp(my_private_key_5,rs_6) else fail-any)) else caught-fail) in
        {610}let v_203: bool = not-caught-fail(input_key_material_6) in
        {611}let v_204: bitstring = (if v_203 then catch-fail(symmetricstateunpack(ss_32)) else caught-fail) in
        {612}let v_205: bool = (not-caught-fail(v_204) && success?(1-proj-3-tuple(v_204))) in
        {613}let h_29: bitstring = (if v_205 then 3-proj-3-tuple(v_204) else caught-fail) in
        {614}let ck_34: key = (if v_205 then 2-proj-3-tuple(v_204) else caught-fail) in
        {615}let cs_29: cipherstate = (if v_205 then 1-proj-3-tuple(v_204) else caught-fail) in
        {616}let output1_6: key = (if v_205 then hmac_hash1(ck_34,input_key_material_6) else caught-fail) in
        {617}let output2_6: key = (if v_205 then hmac_hash2(ck_34,input_key_material_6) else caught-fail) in
        {618}let output3_6: key = (if v_205 then hmac_hash3(ck_34,input_key_material_6) else caught-fail) in
        {619}let v_206: bitstring = (if v_205 then catch-fail((output1_6,output2_6,output3_6)) else caught-fail) in
        {620}let v_207: bool = (not-caught-fail(v_206) && success?(1-proj-3-tuple(v_206))) in
        {621}let output_5: key = (if v_207 then 3-proj-3-tuple(v_206) else caught-fail) in
        {622}let temp_k_5: key = (if v_207 then 2-proj-3-tuple(v_206) else caught-fail) in
        {623}let ck_35: key = (if v_207 then 1-proj-3-tuple(v_206) else caught-fail) in
        {624}let ss_33: symmetricstate = (if v_200 then catch-fail((if v_203 then (if v_205 then (if v_207 then symmetricstatepack(cipherstatepack(temp_k_5,minnonce),ck_35,h_29) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {625}let v_208: bool = not-caught-fail(ss_33) in
        {626}let v_209: bitstring = (if v_208 then catch-fail(keypairunpack(e_12)) else caught-fail) in
        {627}let v_210: bool = (not-caught-fail(v_209) && success?(1-proj-2-tuple(v_209))) in
        {628}let my_private_key_6: key = (if v_210 then 2-proj-2-tuple(v_209) else caught-fail) in
        {629}let my_public_key_6: key = (if v_210 then 1-proj-2-tuple(v_209) else caught-fail) in
        {630}let input_key_material_7: key = (if v_208 then catch-fail((if v_210 then dhexp(my_private_key_6,rm_6) else fail-any)) else caught-fail) in
        {631}let v_211: bool = not-caught-fail(input_key_material_7) in
        {632}let v_212: bitstring = (if v_211 then catch-fail(symmetricstateunpack(ss_33)) else caught-fail) in
        {633}let v_213: bool = (not-caught-fail(v_212) && success?(1-proj-3-tuple(v_212))) in
        {634}let h_30: bitstring = (if v_213 then 3-proj-3-tuple(v_212) else caught-fail) in
        {635}let ck_36: key = (if v_213 then 2-proj-3-tuple(v_212) else caught-fail) in
        {636}let cs_30: cipherstate = (if v_213 then 1-proj-3-tuple(v_212) else caught-fail) in
        {637}let output1_7: key = (if v_213 then hmac_hash1(ck_36,input_key_material_7) else caught-fail) in
        {638}let output2_7: key = (if v_213 then hmac_hash2(ck_36,input_key_material_7) else caught-fail) in
        {639}let output3_7: key = (if v_213 then hmac_hash3(ck_36,input_key_material_7) else caught-fail) in
        {640}let v_214: bitstring = (if v_213 then catch-fail((output1_7,output2_7,output3_7)) else caught-fail) in
        {641}let v_215: bool = (not-caught-fail(v_214) && success?(1-proj-3-tuple(v_214))) in
        {642}let output_6: key = (if v_215 then 3-proj-3-tuple(v_214) else caught-fail) in
        {643}let temp_k_6: key = (if v_215 then 2-proj-3-tuple(v_214) else caught-fail) in
        {644}let ck_37: key = (if v_215 then 1-proj-3-tuple(v_214) else caught-fail) in
        {645}let ss_34: symmetricstate = (if v_208 then catch-fail((if v_211 then (if v_213 then (if v_215 then symmetricstatepack(cipherstatepack(temp_k_6,minnonce),ck_37,h_30) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {646}let v_216: bool = not-caught-fail(ss_34) in
        {647}let basis_8: key = (if v_216 then key_s(me_1) else caught-fail) in
        {648}let public_key_8: key = (if v_216 then catch-fail(dhexp(basis_8,validkey(g))) else caught-fail) in
        {649}let v_217: bool = not-caught-fail(public_key_8) in
        {650}let s_8: keypair = (if v_216 then catch-fail((if v_217 then keypairpack(validkey(public_key_8),basis_8) else fail-any)) else caught-fail) in
        {651}let v_218: bool = not-caught-fail(s_8) in
        {652}let plaintext_8: bitstring = (if v_218 then catch-fail(getpublickey(s_8)) else caught-fail) in
        {653}let v_219: bool = not-caught-fail(plaintext_8) in
        {654}let v_220: bitstring = (if v_219 then catch-fail(symmetricstateunpack(ss_34)) else caught-fail) in
        {655}let v_221: bool = (not-caught-fail(v_220) && success?(1-proj-3-tuple(v_220))) in
        {656}let h_31: bitstring = (if v_221 then 3-proj-3-tuple(v_220) else caught-fail) in
        {657}let ck_38: key = (if v_221 then 2-proj-3-tuple(v_220) else caught-fail) in
        {658}let cs_31: cipherstate = (if v_221 then 1-proj-3-tuple(v_220) else caught-fail) in
        {659}let v_222: bitstring = (if v_221 then catch-fail(cipherstateunpack(cs_31)) else caught-fail) in
        {660}let v_223: bool = (not-caught-fail(v_222) && success?(1-proj-2-tuple(v_222))) in
        {661}let n_12: nonce = (if v_223 then 2-proj-2-tuple(v_222) else caught-fail) in
        {662}let k_14: key = (if v_223 then 1-proj-2-tuple(v_222) else caught-fail) in
        {663}let e_13: bitstring = (if v_223 then encrypt(k_14,n_12,h_31,plaintext_8) else caught-fail) in
        {664}let n_13: nonce = (if v_223 then increment_nonce(n_12) else caught-fail) in
        {665}let v_224: bitstring = (if v_223 then catch-fail(cipherstateunpack(cs_31)) else caught-fail) in
        {666}let v_225: bool = (not-caught-fail(v_224) && success?(1-proj-2-tuple(v_224))) in
        {667}let o_6: nonce = (if v_225 then 2-proj-2-tuple(v_224) else caught-fail) in
        {668}let k_15: key = (if v_225 then 1-proj-2-tuple(v_224) else caught-fail) in
        {669}let csi_12: cipherstate = (if v_223 then catch-fail((if v_225 then cipherstatepack(k_15,n_13) else fail-any)) else caught-fail) in
        {670}let v_226: bool = not-caught-fail(csi_12) in
        {671}let v_227: bitstring = (if v_221 then catch-fail((if v_223 then (if v_226 then (csi_12,e_13) else fail-any) else fail-any)) else caught-fail) in
        {672}let v_228: bool = (not-caught-fail(v_227) && success?(1-proj-2-tuple(v_227))) in
        {673}let ciphertext_11: bitstring = (if v_228 then 2-proj-2-tuple(v_227) else caught-fail) in
        {674}let csi_13: cipherstate = (if v_228 then 1-proj-2-tuple(v_227) else caught-fail) in
        {675}let ss_35: symmetricstate = (if v_228 then symmetricstatepack(csi_13,ck_38,h_31) else caught-fail) in
        {676}let v_229: bitstring = (if v_228 then catch-fail(symmetricstateunpack(ss_35)) else caught-fail) in
        {677}let v_230: bool = (not-caught-fail(v_229) && success?(1-proj-3-tuple(v_229))) in
        {678}let h_32: bitstring = (if v_230 then 3-proj-3-tuple(v_229) else caught-fail) in
        {679}let ck_39: key = (if v_230 then 2-proj-3-tuple(v_229) else caught-fail) in
        {680}let cs_32: cipherstate = (if v_230 then 1-proj-3-tuple(v_229) else caught-fail) in
        {681}let ssi_7: symmetricstate = (if v_228 then catch-fail((if v_230 then symmetricstatepack(cs_32,ck_39,hash(h_32,ciphertext_11)) else fail-any)) else caught-fail) in
        {682}let v_231: bool = not-caught-fail(ssi_7) in
        {683}let v_232: bitstring = (if v_218 then catch-fail((if v_219 then (if v_221 then (if v_228 then (if v_231 then (ssi_7,ciphertext_11) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {684}let v_233: bool = (not-caught-fail(v_232) && success?(1-proj-2-tuple(v_232))) in
        {685}let ns_6: bitstring = (if v_233 then 2-proj-2-tuple(v_232) else caught-fail) in
        {686}let ss_36: symmetricstate = (if v_233 then 1-proj-2-tuple(v_232) else caught-fail) in
        {687}let basis_9: key = (if v_233 then key_m(me_1) else caught-fail) in
        {688}let public_key_9: key = (if v_233 then catch-fail(dhexp(basis_9,validkey(g))) else caught-fail) in
        {689}let v_234: bool = not-caught-fail(public_key_9) in
        {690}let m_8: keypair = (if v_233 then catch-fail((if v_234 then keypairpack(validkey(public_key_9),basis_9) else fail-any)) else caught-fail) in
        {691}let v_235: bool = not-caught-fail(m_8) in
        {692}let plaintext_9: bitstring = (if v_235 then catch-fail(getpublickey(m_8)) else caught-fail) in
        {693}let v_236: bool = not-caught-fail(plaintext_9) in
        {694}let v_237: bitstring = (if v_236 then catch-fail(symmetricstateunpack(ss_36)) else caught-fail) in
        {695}let v_238: bool = (not-caught-fail(v_237) && success?(1-proj-3-tuple(v_237))) in
        {696}let h_33: bitstring = (if v_238 then 3-proj-3-tuple(v_237) else caught-fail) in
        {697}let ck_40: key = (if v_238 then 2-proj-3-tuple(v_237) else caught-fail) in
        {698}let cs_33: cipherstate = (if v_238 then 1-proj-3-tuple(v_237) else caught-fail) in
        {699}let v_239: bitstring = (if v_238 then catch-fail(cipherstateunpack(cs_33)) else caught-fail) in
        {700}let v_240: bool = (not-caught-fail(v_239) && success?(1-proj-2-tuple(v_239))) in
        {701}let n_14: nonce = (if v_240 then 2-proj-2-tuple(v_239) else caught-fail) in
        {702}let k_16: key = (if v_240 then 1-proj-2-tuple(v_239) else caught-fail) in
        {703}let e_14: bitstring = (if v_240 then encrypt(k_16,n_14,h_33,plaintext_9) else caught-fail) in
        {704}let n_15: nonce = (if v_240 then increment_nonce(n_14) else caught-fail) in
        {705}let v_241: bitstring = (if v_240 then catch-fail(cipherstateunpack(cs_33)) else caught-fail) in
        {706}let v_242: bool = (not-caught-fail(v_241) && success?(1-proj-2-tuple(v_241))) in
        {707}let o_7: nonce = (if v_242 then 2-proj-2-tuple(v_241) else caught-fail) in
        {708}let k_17: key = (if v_242 then 1-proj-2-tuple(v_241) else caught-fail) in
        {709}let csi_14: cipherstate = (if v_240 then catch-fail((if v_242 then cipherstatepack(k_17,n_15) else fail-any)) else caught-fail) in
        {710}let v_243: bool = not-caught-fail(csi_14) in
        {711}let v_244: bitstring = (if v_238 then catch-fail((if v_240 then (if v_243 then (csi_14,e_14) else fail-any) else fail-any)) else caught-fail) in
        {712}let v_245: bool = (not-caught-fail(v_244) && success?(1-proj-2-tuple(v_244))) in
        {713}let ciphertext_12: bitstring = (if v_245 then 2-proj-2-tuple(v_244) else caught-fail) in
        {714}let csi_15: cipherstate = (if v_245 then 1-proj-2-tuple(v_244) else caught-fail) in
        {715}let ss_37: symmetricstate = (if v_245 then symmetricstatepack(csi_15,ck_40,h_33) else caught-fail) in
        {716}let v_246: bitstring = (if v_245 then catch-fail(symmetricstateunpack(ss_37)) else caught-fail) in
        {717}let v_247: bool = (not-caught-fail(v_246) && success?(1-proj-3-tuple(v_246))) in
        {718}let h_34: bitstring = (if v_247 then 3-proj-3-tuple(v_246) else caught-fail) in
        {719}let ck_41: key = (if v_247 then 2-proj-3-tuple(v_246) else caught-fail) in
        {720}let cs_34: cipherstate = (if v_247 then 1-proj-3-tuple(v_246) else caught-fail) in
        {721}let ssi_8: symmetricstate = (if v_245 then catch-fail((if v_247 then symmetricstatepack(cs_34,ck_41,hash(h_34,ciphertext_12)) else fail-any)) else caught-fail) in
        {722}let v_248: bool = not-caught-fail(ssi_8) in
        {723}let v_249: bitstring = (if v_235 then catch-fail((if v_236 then (if v_238 then (if v_245 then (if v_248 then (ssi_8,ciphertext_12) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {724}let v_250: bool = (not-caught-fail(v_249) && success?(1-proj-2-tuple(v_249))) in
        {725}let nm_3: bitstring = (if v_250 then 2-proj-2-tuple(v_249) else caught-fail) in
        {726}let ss_38: symmetricstate = (if v_250 then 1-proj-2-tuple(v_249) else caught-fail) in
        {727}let v_251: bitstring = (if v_250 then catch-fail(symmetricstateunpack(ss_38)) else caught-fail) in
        {728}let v_252: bool = (not-caught-fail(v_251) && success?(1-proj-3-tuple(v_251))) in
        {729}let h_35: bitstring = (if v_252 then 3-proj-3-tuple(v_251) else caught-fail) in
        {730}let ck_42: key = (if v_252 then 2-proj-3-tuple(v_251) else caught-fail) in
        {731}let cs_35: cipherstate = (if v_252 then 1-proj-3-tuple(v_251) else caught-fail) in
        {732}let v_253: bitstring = (if v_252 then catch-fail(cipherstateunpack(cs_35)) else caught-fail) in
        {733}let v_254: bool = (not-caught-fail(v_253) && success?(1-proj-2-tuple(v_253))) in
        {734}let n_16: nonce = (if v_254 then 2-proj-2-tuple(v_253) else caught-fail) in
        {735}let k_18: key = (if v_254 then 1-proj-2-tuple(v_253) else caught-fail) in
        {736}let e_15: bitstring = (if v_254 then encrypt(k_18,n_16,h_35,payload_2) else caught-fail) in
        {737}let n_17: nonce = (if v_254 then increment_nonce(n_16) else caught-fail) in
        {738}let v_255: bitstring = (if v_254 then catch-fail(cipherstateunpack(cs_35)) else caught-fail) in
        {739}let v_256: bool = (not-caught-fail(v_255) && success?(1-proj-2-tuple(v_255))) in
        {740}let o_8: nonce = (if v_256 then 2-proj-2-tuple(v_255) else caught-fail) in
        {741}let k_19: key = (if v_256 then 1-proj-2-tuple(v_255) else caught-fail) in
        {742}let csi_16: cipherstate = (if v_254 then catch-fail((if v_256 then cipherstatepack(k_19,n_17) else fail-any)) else caught-fail) in
        {743}let v_257: bool = not-caught-fail(csi_16) in
        {744}let v_258: bitstring = (if v_252 then catch-fail((if v_254 then (if v_257 then (csi_16,e_15) else fail-any) else fail-any)) else caught-fail) in
        {745}let v_259: bool = (not-caught-fail(v_258) && success?(1-proj-2-tuple(v_258))) in
        {746}let ciphertext_13: bitstring = (if v_259 then 2-proj-2-tuple(v_258) else caught-fail) in
        {747}let csi_17: cipherstate = (if v_259 then 1-proj-2-tuple(v_258) else caught-fail) in
        {748}let ss_39: symmetricstate = (if v_259 then symmetricstatepack(csi_17,ck_42,h_35) else caught-fail) in
        {749}let v_260: bitstring = (if v_259 then catch-fail(symmetricstateunpack(ss_39)) else caught-fail) in
        {750}let v_261: bool = (not-caught-fail(v_260) && success?(1-proj-3-tuple(v_260))) in
        {751}let h_36: bitstring = (if v_261 then 3-proj-3-tuple(v_260) else caught-fail) in
        {752}let ck_43: key = (if v_261 then 2-proj-3-tuple(v_260) else caught-fail) in
        {753}let cs_36: cipherstate = (if v_261 then 1-proj-3-tuple(v_260) else caught-fail) in
        {754}let ssi_9: symmetricstate = (if v_259 then catch-fail((if v_261 then symmetricstatepack(cs_36,ck_43,hash(h_36,ciphertext_13)) else fail-any)) else caught-fail) in
        {755}let v_262: bool = not-caught-fail(ssi_9) in
        {756}let v_263: bitstring = (if v_250 then catch-fail((if v_252 then (if v_259 then (if v_262 then (ssi_9,ciphertext_13) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {757}let v_264: bool = (not-caught-fail(v_263) && success?(1-proj-2-tuple(v_263))) in
        {758}let ciphertext_14: bitstring = (if v_264 then 2-proj-2-tuple(v_263) else caught-fail) in
        {759}let ss_40: symmetricstate = (if v_264 then 1-proj-2-tuple(v_263) else caught-fail) in
        {760}let hs_17: handshakestate = (if v_264 then handshakestatepack(ss_40,s_8,m_8,e_12,rs_6,rm_6,re_7,psk_6,initiator_5) else caught-fail) in
        {761}let message_buffer_2: bitstring = (if v_264 then concat4(ne_6,ns_6,nm_3,ciphertext_14) else caught-fail) in
        {762}let (hs_18: handshakestate,message_a_1: bitstring) = (if v_192 then (if v_194 then (if v_196 then (if v_197 then (if v_200 then (if v_208 then (if v_216 then (if v_218 then (if v_233 then (if v_235 then (if v_250 then (if v_264 then (hs_17,message_buffer_2) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {763}event SendMsg(me_1,them_1,stagepack_a(sid_2),msg_a(me_1,them_1,sid_2));
        {764}insert statestore(me_1,them_1,sid_2,statepack_b(hs_18));
        {765}out(pub, message_a_1)
    ) | (
        {923}get statestore(=me_1,=them_1,=sid_2,statepack_b(hs_19: handshakestate)) in
        {767}in(pub, message_b_1: bitstring);
        {768}let v_265: bitstring = catch-fail(handshakestateunpack(hs_19)) in
        {769}let v_266: bool = (not-caught-fail(v_265) && success?(1-proj-9-tuple(v_265))) in
        {770}let initiator_6: bool = (if v_266 then 9-proj-9-tuple(v_265) else caught-fail) in
        {771}let psk_7: key = (if v_266 then 8-proj-9-tuple(v_265) else caught-fail) in
        {772}let re_8: key = (if v_266 then 7-proj-9-tuple(v_265) else caught-fail) in
        {773}let rm_7: key = (if v_266 then 6-proj-9-tuple(v_265) else caught-fail) in
        {774}let rs_7: key = (if v_266 then 5-proj-9-tuple(v_265) else caught-fail) in
        {775}let e_16: keypair = (if v_266 then 4-proj-9-tuple(v_265) else caught-fail) in
        {776}let m_9: keypair = (if v_266 then 3-proj-9-tuple(v_265) else caught-fail) in
        {777}let s_9: keypair = (if v_266 then 2-proj-9-tuple(v_265) else caught-fail) in
        {778}let ss_41: symmetricstate = (if v_266 then 1-proj-9-tuple(v_265) else caught-fail) in
        {779}let v_267: bitstring = (if v_266 then catch-fail(deconcat3(message_b_1)) else caught-fail) in
        {780}let v_268: bool = (not-caught-fail(v_267) && success?(1-proj-3-tuple(v_267))) in
        {781}let ciphertext_15: bitstring = (if v_268 then 3-proj-3-tuple(v_267) else caught-fail) in
        {782}let ns_7: bitstring = (if v_268 then 2-proj-3-tuple(v_267) else caught-fail) in
        {783}let ne_7: bitstring = (if v_268 then 1-proj-3-tuple(v_267) else caught-fail) in
        {784}let valid1_2: bool = (if v_268 then true else caught-fail) in
        {785}let re_9: key = (if v_268 then ne_7 else caught-fail) in
        {786}let v_269: bitstring = (if v_268 then catch-fail(symmetricstateunpack(ss_41)) else caught-fail) in
        {787}let v_270: bool = (not-caught-fail(v_269) && success?(1-proj-3-tuple(v_269))) in
        {788}let h_37: bitstring = (if v_270 then 3-proj-3-tuple(v_269) else caught-fail) in
        {789}let ck_44: key = (if v_270 then 2-proj-3-tuple(v_269) else caught-fail) in
        {790}let cs_37: cipherstate = (if v_270 then 1-proj-3-tuple(v_269) else caught-fail) in
        {791}let ss_42: symmetricstate = (if v_268 then catch-fail((if v_270 then symmetricstatepack(cs_37,ck_44,hash(h_37,re_9)) else fail-any)) else caught-fail) in
        {792}let v_271: bool = not-caught-fail(ss_42) in
        {793}let v_272: bitstring = (if v_271 then catch-fail(keypairunpack(e_16)) else caught-fail) in
        {794}let v_273: bool = (not-caught-fail(v_272) && success?(1-proj-2-tuple(v_272))) in
        {795}let my_private_key_7: key = (if v_273 then 2-proj-2-tuple(v_272) else caught-fail) in
        {796}let my_public_key_7: key = (if v_273 then 1-proj-2-tuple(v_272) else caught-fail) in
        {797}let input_key_material_8: key = (if v_271 then catch-fail((if v_273 then dhexp(my_private_key_7,re_9) else fail-any)) else caught-fail) in
        {798}let v_274: bool = not-caught-fail(input_key_material_8) in
        {799}let v_275: bitstring = (if v_274 then catch-fail(symmetricstateunpack(ss_42)) else caught-fail) in
        {800}let v_276: bool = (not-caught-fail(v_275) && success?(1-proj-3-tuple(v_275))) in
        {801}let h_38: bitstring = (if v_276 then 3-proj-3-tuple(v_275) else caught-fail) in
        {802}let ck_45: key = (if v_276 then 2-proj-3-tuple(v_275) else caught-fail) in
        {803}let cs_38: cipherstate = (if v_276 then 1-proj-3-tuple(v_275) else caught-fail) in
        {804}let output1_8: key = (if v_276 then hmac_hash1(ck_45,input_key_material_8) else caught-fail) in
        {805}let output2_8: key = (if v_276 then hmac_hash2(ck_45,input_key_material_8) else caught-fail) in
        {806}let output3_8: key = (if v_276 then hmac_hash3(ck_45,input_key_material_8) else caught-fail) in
        {807}let v_277: bitstring = (if v_276 then catch-fail((output1_8,output2_8,output3_8)) else caught-fail) in
        {808}let v_278: bool = (not-caught-fail(v_277) && success?(1-proj-3-tuple(v_277))) in
        {809}let output_7: key = (if v_278 then 3-proj-3-tuple(v_277) else caught-fail) in
        {810}let temp_k_7: key = (if v_278 then 2-proj-3-tuple(v_277) else caught-fail) in
        {811}let ck_46: key = (if v_278 then 1-proj-3-tuple(v_277) else caught-fail) in
        {812}let ss_43: symmetricstate = (if v_271 then catch-fail((if v_274 then (if v_276 then (if v_278 then symmetricstatepack(cipherstatepack(temp_k_7,minnonce),ck_46,h_38) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {813}let v_279: bool = not-caught-fail(ss_43) in
        {814}let v_280: bitstring = (if v_279 then catch-fail(keypairunpack(s_9)) else caught-fail) in
        {815}let v_281: bool = (not-caught-fail(v_280) && success?(1-proj-2-tuple(v_280))) in
        {816}let my_private_key_8: key = (if v_281 then 2-proj-2-tuple(v_280) else caught-fail) in
        {817}let my_public_key_8: key = (if v_281 then 1-proj-2-tuple(v_280) else caught-fail) in
        {818}let input_key_material_9: key = (if v_279 then catch-fail((if v_281 then dhexp(my_private_key_8,re_9) else fail-any)) else caught-fail) in
        {819}let v_282: bool = not-caught-fail(input_key_material_9) in
        {820}let v_283: bitstring = (if v_282 then catch-fail(symmetricstateunpack(ss_43)) else caught-fail) in
        {821}let v_284: bool = (not-caught-fail(v_283) && success?(1-proj-3-tuple(v_283))) in
        {822}let h_39: bitstring = (if v_284 then 3-proj-3-tuple(v_283) else caught-fail) in
        {823}let ck_47: key = (if v_284 then 2-proj-3-tuple(v_283) else caught-fail) in
        {824}let cs_39: cipherstate = (if v_284 then 1-proj-3-tuple(v_283) else caught-fail) in
        {825}let output1_9: key = (if v_284 then hmac_hash1(ck_47,input_key_material_9) else caught-fail) in
        {826}let output2_9: key = (if v_284 then hmac_hash2(ck_47,input_key_material_9) else caught-fail) in
        {827}let output3_9: key = (if v_284 then hmac_hash3(ck_47,input_key_material_9) else caught-fail) in
        {828}let v_285: bitstring = (if v_284 then catch-fail((output1_9,output2_9,output3_9)) else caught-fail) in
        {829}let v_286: bool = (not-caught-fail(v_285) && success?(1-proj-3-tuple(v_285))) in
        {830}let output_8: key = (if v_286 then 3-proj-3-tuple(v_285) else caught-fail) in
        {831}let temp_k_8: key = (if v_286 then 2-proj-3-tuple(v_285) else caught-fail) in
        {832}let ck_48: key = (if v_286 then 1-proj-3-tuple(v_285) else caught-fail) in
        {833}let ss_44: symmetricstate = (if v_279 then catch-fail((if v_282 then (if v_284 then (if v_286 then symmetricstatepack(cipherstatepack(temp_k_8,minnonce),ck_48,h_39) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {834}let v_287: bool = not-caught-fail(ss_44) in
        {835}let v_288: bitstring = (if v_287 then catch-fail(keypairunpack(m_9)) else caught-fail) in
        {836}let v_289: bool = (not-caught-fail(v_288) && success?(1-proj-2-tuple(v_288))) in
        {837}let my_private_key_9: key = (if v_289 then 2-proj-2-tuple(v_288) else caught-fail) in
        {838}let my_public_key_9: key = (if v_289 then 1-proj-2-tuple(v_288) else caught-fail) in
        {839}let input_key_material_10: key = (if v_287 then catch-fail((if v_289 then dhexp(my_private_key_9,re_9) else fail-any)) else caught-fail) in
        {840}let v_290: bool = not-caught-fail(input_key_material_10) in
        {841}let v_291: bitstring = (if v_290 then catch-fail(symmetricstateunpack(ss_44)) else caught-fail) in
        {842}let v_292: bool = (not-caught-fail(v_291) && success?(1-proj-3-tuple(v_291))) in
        {843}let h_40: bitstring = (if v_292 then 3-proj-3-tuple(v_291) else caught-fail) in
        {844}let ck_49: key = (if v_292 then 2-proj-3-tuple(v_291) else caught-fail) in
        {845}let cs_40: cipherstate = (if v_292 then 1-proj-3-tuple(v_291) else caught-fail) in
        {846}let output1_10: key = (if v_292 then hmac_hash1(ck_49,input_key_material_10) else caught-fail) in
        {847}let output2_10: key = (if v_292 then hmac_hash2(ck_49,input_key_material_10) else caught-fail) in
        {848}let output3_10: key = (if v_292 then hmac_hash3(ck_49,input_key_material_10) else caught-fail) in
        {849}let v_293: bitstring = (if v_292 then catch-fail((output1_10,output2_10,output3_10)) else caught-fail) in
        {850}let v_294: bool = (not-caught-fail(v_293) && success?(1-proj-3-tuple(v_293))) in
        {851}let output_9: key = (if v_294 then 3-proj-3-tuple(v_293) else caught-fail) in
        {852}let temp_k_9: key = (if v_294 then 2-proj-3-tuple(v_293) else caught-fail) in
        {853}let ck_50: key = (if v_294 then 1-proj-3-tuple(v_293) else caught-fail) in
        {854}let ss_45: symmetricstate = (if v_287 then catch-fail((if v_290 then (if v_292 then (if v_294 then symmetricstatepack(cipherstatepack(temp_k_9,minnonce),ck_50,h_40) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {855}let v_295: bool = not-caught-fail(ss_45) in
        {856}let v_296: bitstring = (if v_295 then catch-fail(symmetricstateunpack(ss_45)) else caught-fail) in
        {857}let v_297: bool = (not-caught-fail(v_296) && success?(1-proj-3-tuple(v_296))) in
        {858}let h_41: bitstring = (if v_297 then 3-proj-3-tuple(v_296) else caught-fail) in
        {859}let ck_51: key = (if v_297 then 2-proj-3-tuple(v_296) else caught-fail) in
        {860}let cs_41: cipherstate = (if v_297 then 1-proj-3-tuple(v_296) else caught-fail) in
        {861}let v_298: bitstring = (if v_297 then catch-fail(cipherstateunpack(cs_41)) else caught-fail) in
        {862}let v_299: bool = (not-caught-fail(v_298) && success?(1-proj-2-tuple(v_298))) in
        {863}let n_18: nonce = (if v_299 then 2-proj-2-tuple(v_298) else caught-fail) in
        {864}let k_20: key = (if v_299 then 1-proj-2-tuple(v_298) else caught-fail) in
        {865}let d_2: aead = (if v_299 then catch-fail(decrypt(k_20,n_18,h_41,ciphertext_15)) else caught-fail) in
        {866}let v_300: bool = not-caught-fail(d_2) in
        {867}let v_301: bitstring = (if v_300 then catch-fail(aeadunpack(d_2)) else caught-fail) in
        {868}let v_302: bool = (not-caught-fail(v_301) && success?(1-proj-3-tuple(v_301))) in
        {869}let plaintext_10: bitstring = (if v_302 then 3-proj-3-tuple(v_301) else caught-fail) in
        {870}let adi_2: bitstring = (if v_302 then 2-proj-3-tuple(v_301) else caught-fail) in
        {871}let valid_6: bool = (if v_302 then 1-proj-3-tuple(v_301) else caught-fail) in
        {872}let n_19: nonce = (if v_302 then increment_nonce(n_18) else caught-fail) in
        {873}let v_303: bitstring = (if v_302 then catch-fail(cipherstateunpack(cs_41)) else caught-fail) in
        {874}let v_304: bool = (not-caught-fail(v_303) && success?(1-proj-2-tuple(v_303))) in
        {875}let o_9: nonce = (if v_304 then 2-proj-2-tuple(v_303) else caught-fail) in
        {876}let k_21: key = (if v_304 then 1-proj-2-tuple(v_303) else caught-fail) in
        {877}let csi_18: cipherstate = (if v_302 then catch-fail((if v_304 then cipherstatepack(k_21,n_19) else fail-any)) else caught-fail) in
        {878}let v_305: bool = not-caught-fail(csi_18) in
        {879}let v_306: bitstring = (if v_297 then catch-fail((if v_299 then (if v_300 then (if v_302 then (if v_305 then (csi_18,plaintext_10,valid_6) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {880}let v_307: bool = (not-caught-fail(v_306) && success?(1-proj-3-tuple(v_306))) in
        {881}let valid_7: bool = (if v_307 then 3-proj-3-tuple(v_306) else caught-fail) in
        {882}let plaintext_11: bitstring = (if v_307 then 2-proj-3-tuple(v_306) else caught-fail) in
        {883}let csi_19: cipherstate = (if v_307 then 1-proj-3-tuple(v_306) else caught-fail) in
        {884}let ss_46: symmetricstate = (if v_307 then symmetricstatepack(csi_19,ck_51,h_41) else caught-fail) in
        {885}let v_308: bitstring = (if v_307 then catch-fail(symmetricstateunpack(ss_46)) else caught-fail) in
        {886}let v_309: bool = (not-caught-fail(v_308) && success?(1-proj-3-tuple(v_308))) in
        {887}let h_42: bitstring = (if v_309 then 3-proj-3-tuple(v_308) else caught-fail) in
        {888}let ck_52: key = (if v_309 then 2-proj-3-tuple(v_308) else caught-fail) in
        {889}let cs_42: cipherstate = (if v_309 then 1-proj-3-tuple(v_308) else caught-fail) in
        {890}let ssi_10: symmetricstate = (if v_307 then catch-fail((if v_309 then symmetricstatepack(cs_42,ck_52,hash(h_42,ciphertext_15)) else fail-any)) else caught-fail) in
        {891}let v_310: bool = not-caught-fail(ssi_10) in
        {892}let v_311: bitstring = (if v_295 then catch-fail((if v_297 then (if v_307 then (if v_310 then (ssi_10,plaintext_11,valid_7) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {893}let v_312: bool = (not-caught-fail(v_311) && success?(1-proj-3-tuple(v_311))) in
        {894}let valid2_2: bool = (if v_312 then 3-proj-3-tuple(v_311) else caught-fail) in
        {895}let plaintext_12: bitstring = (if v_312 then 2-proj-3-tuple(v_311) else caught-fail) in
        {896}let ss_47: symmetricstate = (if v_312 then 1-proj-3-tuple(v_311) else caught-fail) in
        {897}let v_313: bool = (if v_312 then catch-fail((valid1_2 && valid2_2)) else caught-fail) in
        {898}let hs_20: handshakestate = (if v_313 then handshakestatepack(ss_47,s_9,m_9,e_16,rs_7,rm_7,re_9,psk_7,initiator_6) else caught-fail) in
        {899}let v_314: bitstring = (if v_313 then catch-fail(symmetricstateunpack(ss_47)) else caught-fail) in
        {900}let v_315: bool = (not-caught-fail(v_314) && success?(1-proj-3-tuple(v_314))) in
        {901}let h_43: bitstring = (if v_315 then 3-proj-3-tuple(v_314) else caught-fail) in
        {902}let ck_53: key = (if v_315 then 2-proj-3-tuple(v_314) else caught-fail) in
        {903}let cs_43: cipherstate = (if v_315 then 1-proj-3-tuple(v_314) else caught-fail) in
        {904}let input_key_material_11: key = (if v_315 then zero else caught-fail) in
        {905}let output1_11: key = (if v_315 then hmac_hash1(ck_53,input_key_material_11) else caught-fail) in
        {906}let output2_11: key = (if v_315 then hmac_hash2(ck_53,input_key_material_11) else caught-fail) in
        {907}let output3_11: key = (if v_315 then hmac_hash3(ck_53,input_key_material_11) else caught-fail) in
        {908}let v_316: bitstring = (if v_315 then catch-fail((output1_11,output2_11,output3_11)) else caught-fail) in
        {909}let v_317: bool = (not-caught-fail(v_316) && success?(1-proj-3-tuple(v_316))) in
        {910}let temp_k3_1: key = (if v_317 then 3-proj-3-tuple(v_316) else caught-fail) in
        {911}let temp_k2_1: key = (if v_317 then 2-proj-3-tuple(v_316) else caught-fail) in
        {912}let temp_k1_1: key = (if v_317 then 1-proj-3-tuple(v_316) else caught-fail) in
        {913}let cs1_5: cipherstate = (if v_317 then cipherstatepack(temp_k1_1,minnonce) else caught-fail) in
        {914}let cs2_5: cipherstate = (if v_317 then cipherstatepack(temp_k2_1,minnonce) else caught-fail) in
        {915}let v_318: bitstring = (if v_313 then catch-fail((if v_315 then (if v_317 then (ss_47,cs1_5,cs2_5) else fail-any) else fail-any)) else caught-fail) in
        {916}let v_319: bool = (not-caught-fail(v_318) && success?(1-proj-3-tuple(v_318))) in
        {917}let cs2_6: cipherstate = (if v_319 then 3-proj-3-tuple(v_318) else caught-fail) in
        {918}let cs1_6: cipherstate = (if v_319 then 2-proj-3-tuple(v_318) else caught-fail) in
        {919}let ssi_11: symmetricstate = (if v_319 then 1-proj-3-tuple(v_318) else caught-fail) in
        {920}let (hs_21: handshakestate,plaintext_b_1: bitstring,valid_8: bool,cs1_7: cipherstate,cs2_7: cipherstate) = (if v_266 then (if v_268 then (if v_271 then (if v_279 then (if v_287 then (if v_295 then (if v_312 then (if undo-catch-fail(v_313) then (if v_319 then (hs_20,plaintext_12,true,cs1_6,cs2_6) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {921}event RecvMsg(me_1,them_1,stagepack_b(sid_2),plaintext_b_1);
        {922}insert statestore(me_1,them_1,sid_2,statepack_c(hs_21,cs1_7,cs2_7))
    ) | (
        {924}!
        {982}get statestore(=me_1,=them_1,=sid_2,statepack_c(hs_22: handshakestate,cs1_8: cipherstate,cs2_8: cipherstate)) in
        {925}let hs_23: handshakestate = handshakestatesetcs(hs_22,cs1_8) in
        {926}let payload_3: bitstring = msg_c(me_1,them_1,sid_2) in
        {927}let v_320: bitstring = catch-fail(handshakestateunpack(hs_23)) in
        {928}let v_321: bool = (not-caught-fail(v_320) && success?(1-proj-9-tuple(v_320))) in
        {929}let initiator_7: bool = (if v_321 then 9-proj-9-tuple(v_320) else caught-fail) in
        {930}let psk_8: key = (if v_321 then 8-proj-9-tuple(v_320) else caught-fail) in
        {931}let re_10: key = (if v_321 then 7-proj-9-tuple(v_320) else caught-fail) in
        {932}let rm_8: key = (if v_321 then 6-proj-9-tuple(v_320) else caught-fail) in
        {933}let rs_8: key = (if v_321 then 5-proj-9-tuple(v_320) else caught-fail) in
        {934}let e_17: keypair = (if v_321 then 4-proj-9-tuple(v_320) else caught-fail) in
        {935}let m_10: keypair = (if v_321 then 3-proj-9-tuple(v_320) else caught-fail) in
        {936}let s_10: keypair = (if v_321 then 2-proj-9-tuple(v_320) else caught-fail) in
        {937}let ss_48: symmetricstate = (if v_321 then 1-proj-9-tuple(v_320) else caught-fail) in
        {938}let v_322: bitstring = (if v_321 then catch-fail((empty,empty,empty)) else caught-fail) in
        {939}let v_323: bool = (not-caught-fail(v_322) && success?(1-proj-3-tuple(v_322))) in
        {940}let ciphertext_16: bitstring = (if v_323 then 3-proj-3-tuple(v_322) else caught-fail) in
        {941}let ns_8: bitstring = (if v_323 then 2-proj-3-tuple(v_322) else caught-fail) in
        {942}let ne_8: bitstring = (if v_323 then 1-proj-3-tuple(v_322) else caught-fail) in
        {943}let v_324: bitstring = (if v_323 then catch-fail(symmetricstateunpack(ss_48)) else caught-fail) in
        {944}let v_325: bool = (not-caught-fail(v_324) && success?(1-proj-3-tuple(v_324))) in
        {945}let h_44: bitstring = (if v_325 then 3-proj-3-tuple(v_324) else caught-fail) in
        {946}let ck_54: key = (if v_325 then 2-proj-3-tuple(v_324) else caught-fail) in
        {947}let cs_44: cipherstate = (if v_325 then 1-proj-3-tuple(v_324) else caught-fail) in
        {948}let v_326: bitstring = (if v_325 then catch-fail(cipherstateunpack(cs_44)) else caught-fail) in
        {949}let v_327: bool = (not-caught-fail(v_326) && success?(1-proj-2-tuple(v_326))) in
        {950}let n_20: nonce = (if v_327 then 2-proj-2-tuple(v_326) else caught-fail) in
        {951}let k_22: key = (if v_327 then 1-proj-2-tuple(v_326) else caught-fail) in
        {952}let e_18: bitstring = (if v_327 then encrypt(k_22,n_20,h_44,payload_3) else caught-fail) in
        {953}let n_21: nonce = (if v_327 then increment_nonce(n_20) else caught-fail) in
        {954}let v_328: bitstring = (if v_327 then catch-fail(cipherstateunpack(cs_44)) else caught-fail) in
        {955}let v_329: bool = (not-caught-fail(v_328) && success?(1-proj-2-tuple(v_328))) in
        {956}let o_10: nonce = (if v_329 then 2-proj-2-tuple(v_328) else caught-fail) in
        {957}let k_23: key = (if v_329 then 1-proj-2-tuple(v_328) else caught-fail) in
        {958}let csi_20: cipherstate = (if v_327 then catch-fail((if v_329 then cipherstatepack(k_23,n_21) else fail-any)) else caught-fail) in
        {959}let v_330: bool = not-caught-fail(csi_20) in
        {960}let v_331: bitstring = (if v_325 then catch-fail((if v_327 then (if v_330 then (csi_20,e_18) else fail-any) else fail-any)) else caught-fail) in
        {961}let v_332: bool = (not-caught-fail(v_331) && success?(1-proj-2-tuple(v_331))) in
        {962}let ciphertext_17: bitstring = (if v_332 then 2-proj-2-tuple(v_331) else caught-fail) in
        {963}let csi_21: cipherstate = (if v_332 then 1-proj-2-tuple(v_331) else caught-fail) in
        {964}let ss_49: symmetricstate = (if v_332 then symmetricstatepack(csi_21,ck_54,h_44) else caught-fail) in
        {965}let v_333: bitstring = (if v_332 then catch-fail(symmetricstateunpack(ss_49)) else caught-fail) in
        {966}let v_334: bool = (not-caught-fail(v_333) && success?(1-proj-3-tuple(v_333))) in
        {967}let h_45: bitstring = (if v_334 then 3-proj-3-tuple(v_333) else caught-fail) in
        {968}let ck_55: key = (if v_334 then 2-proj-3-tuple(v_333) else caught-fail) in
        {969}let cs_45: cipherstate = (if v_334 then 1-proj-3-tuple(v_333) else caught-fail) in
        {970}let ssi_12: symmetricstate = (if v_332 then catch-fail((if v_334 then symmetricstatepack(cs_45,ck_55,hash(h_45,ciphertext_17)) else fail-any)) else caught-fail) in
        {971}let v_335: bool = not-caught-fail(ssi_12) in
        {972}let v_336: bitstring = (if v_323 then catch-fail((if v_325 then (if v_332 then (if v_335 then (ssi_12,ciphertext_17) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {973}let v_337: bool = (not-caught-fail(v_336) && success?(1-proj-2-tuple(v_336))) in
        {974}let ciphertext_18: bitstring = (if v_337 then 2-proj-2-tuple(v_336) else caught-fail) in
        {975}let ss_50: symmetricstate = (if v_337 then 1-proj-2-tuple(v_336) else caught-fail) in
        {976}let hs_24: handshakestate = (if v_337 then handshakestatepack(ss_50,s_10,m_10,e_17,rs_8,rm_8,re_10,psk_8,initiator_7) else caught-fail) in
        {977}let message_buffer_3: bitstring = (if v_337 then concat3(ne_8,ns_8,ciphertext_18) else caught-fail) in
        {978}let (hs_25: handshakestate,message_c_1: bitstring) = (if v_321 then (if v_323 then (if v_337 then (hs_24,message_buffer_3) else fail-any) else fail-any) else fail-any) in
        {979}event SendMsg(me_1,them_1,stagepack_c(sid_2),msg_c(me_1,them_1,sid_2));
        {980}insert statestore(me_1,them_1,sid_2,statepack_d(hs_25,handshakestategetcs(hs_25),cs2_8));
        {981}out(pub, message_c_1)
    ) | (
        {983}!
        {1049}get statestore(=me_1,=them_1,=sid_2,statepack_d(hs_26: handshakestate,cs1_9: cipherstate,cs2_9: cipherstate)) in
        {984}let hs_27: handshakestate = handshakestatesetcs(hs_26,cs2_9) in
        {985}in(pub, message_d_1: bitstring);
        {986}let v_338: bitstring = catch-fail(handshakestateunpack(hs_27)) in
        {987}let v_339: bool = (not-caught-fail(v_338) && success?(1-proj-9-tuple(v_338))) in
        {988}let initiator_8: bool = (if v_339 then 9-proj-9-tuple(v_338) else caught-fail) in
        {989}let psk_9: key = (if v_339 then 8-proj-9-tuple(v_338) else caught-fail) in
        {990}let re_11: key = (if v_339 then 7-proj-9-tuple(v_338) else caught-fail) in
        {991}let rm_9: key = (if v_339 then 6-proj-9-tuple(v_338) else caught-fail) in
        {992}let rs_9: key = (if v_339 then 5-proj-9-tuple(v_338) else caught-fail) in
        {993}let e_19: keypair = (if v_339 then 4-proj-9-tuple(v_338) else caught-fail) in
        {994}let m_11: keypair = (if v_339 then 3-proj-9-tuple(v_338) else caught-fail) in
        {995}let s_11: keypair = (if v_339 then 2-proj-9-tuple(v_338) else caught-fail) in
        {996}let ss_51: symmetricstate = (if v_339 then 1-proj-9-tuple(v_338) else caught-fail) in
        {997}let v_340: bitstring = (if v_339 then catch-fail(deconcat3(message_d_1)) else caught-fail) in
        {998}let v_341: bool = (not-caught-fail(v_340) && success?(1-proj-3-tuple(v_340))) in
        {999}let ciphertext_19: bitstring = (if v_341 then 3-proj-3-tuple(v_340) else caught-fail) in
        {1000}let ns_9: bitstring = (if v_341 then 2-proj-3-tuple(v_340) else caught-fail) in
        {1001}let ne_9: bitstring = (if v_341 then 1-proj-3-tuple(v_340) else caught-fail) in
        {1002}let valid1_3: bool = (if v_341 then true else caught-fail) in
        {1003}let v_342: bitstring = (if v_341 then catch-fail(symmetricstateunpack(ss_51)) else caught-fail) in
        {1004}let v_343: bool = (not-caught-fail(v_342) && success?(1-proj-3-tuple(v_342))) in
        {1005}let h_46: bitstring = (if v_343 then 3-proj-3-tuple(v_342) else caught-fail) in
        {1006}let ck_56: key = (if v_343 then 2-proj-3-tuple(v_342) else caught-fail) in
        {1007}let cs_46: cipherstate = (if v_343 then 1-proj-3-tuple(v_342) else caught-fail) in
        {1008}let v_344: bitstring = (if v_343 then catch-fail(cipherstateunpack(cs_46)) else caught-fail) in
        {1009}let v_345: bool = (not-caught-fail(v_344) && success?(1-proj-2-tuple(v_344))) in
        {1010}let n_22: nonce = (if v_345 then 2-proj-2-tuple(v_344) else caught-fail) in
        {1011}let k_24: key = (if v_345 then 1-proj-2-tuple(v_344) else caught-fail) in
        {1012}let d_3: aead = (if v_345 then catch-fail(decrypt(k_24,n_22,h_46,ciphertext_19)) else caught-fail) in
        {1013}let v_346: bool = not-caught-fail(d_3) in
        {1014}let v_347: bitstring = (if v_346 then catch-fail(aeadunpack(d_3)) else caught-fail) in
        {1015}let v_348: bool = (not-caught-fail(v_347) && success?(1-proj-3-tuple(v_347))) in
        {1016}let plaintext_13: bitstring = (if v_348 then 3-proj-3-tuple(v_347) else caught-fail) in
        {1017}let adi_3: bitstring = (if v_348 then 2-proj-3-tuple(v_347) else caught-fail) in
        {1018}let valid_9: bool = (if v_348 then 1-proj-3-tuple(v_347) else caught-fail) in
        {1019}let n_23: nonce = (if v_348 then increment_nonce(n_22) else caught-fail) in
        {1020}let v_349: bitstring = (if v_348 then catch-fail(cipherstateunpack(cs_46)) else caught-fail) in
        {1021}let v_350: bool = (not-caught-fail(v_349) && success?(1-proj-2-tuple(v_349))) in
        {1022}let o_11: nonce = (if v_350 then 2-proj-2-tuple(v_349) else caught-fail) in
        {1023}let k_25: key = (if v_350 then 1-proj-2-tuple(v_349) else caught-fail) in
        {1024}let csi_22: cipherstate = (if v_348 then catch-fail((if v_350 then cipherstatepack(k_25,n_23) else fail-any)) else caught-fail) in
        {1025}let v_351: bool = not-caught-fail(csi_22) in
        {1026}let v_352: bitstring = (if v_343 then catch-fail((if v_345 then (if v_346 then (if v_348 then (if v_351 then (csi_22,plaintext_13,valid_9) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1027}let v_353: bool = (not-caught-fail(v_352) && success?(1-proj-3-tuple(v_352))) in
        {1028}let valid_10: bool = (if v_353 then 3-proj-3-tuple(v_352) else caught-fail) in
        {1029}let plaintext_14: bitstring = (if v_353 then 2-proj-3-tuple(v_352) else caught-fail) in
        {1030}let csi_23: cipherstate = (if v_353 then 1-proj-3-tuple(v_352) else caught-fail) in
        {1031}let ss_52: symmetricstate = (if v_353 then symmetricstatepack(csi_23,ck_56,h_46) else caught-fail) in
        {1032}let v_354: bitstring = (if v_353 then catch-fail(symmetricstateunpack(ss_52)) else caught-fail) in
        {1033}let v_355: bool = (not-caught-fail(v_354) && success?(1-proj-3-tuple(v_354))) in
        {1034}let h_47: bitstring = (if v_355 then 3-proj-3-tuple(v_354) else caught-fail) in
        {1035}let ck_57: key = (if v_355 then 2-proj-3-tuple(v_354) else caught-fail) in
        {1036}let cs_47: cipherstate = (if v_355 then 1-proj-3-tuple(v_354) else caught-fail) in
        {1037}let ssi_13: symmetricstate = (if v_353 then catch-fail((if v_355 then symmetricstatepack(cs_47,ck_57,hash(h_47,ciphertext_19)) else fail-any)) else caught-fail) in
        {1038}let v_356: bool = not-caught-fail(ssi_13) in
        {1039}let v_357: bitstring = (if v_341 then catch-fail((if v_343 then (if v_353 then (if v_356 then (ssi_13,plaintext_14,valid_10) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1040}let v_358: bool = (not-caught-fail(v_357) && success?(1-proj-3-tuple(v_357))) in
        {1041}let valid2_3: bool = (if v_358 then 3-proj-3-tuple(v_357) else caught-fail) in
        {1042}let plaintext_15: bitstring = (if v_358 then 2-proj-3-tuple(v_357) else caught-fail) in
        {1043}let ss_53: symmetricstate = (if v_358 then 1-proj-3-tuple(v_357) else caught-fail) in
        {1044}let v_359: bool = (if v_358 then catch-fail((valid1_3 && valid2_3)) else caught-fail) in
        {1045}let hs_28: handshakestate = (if v_359 then handshakestatepack(ss_53,s_11,m_11,e_19,rs_9,rm_9,re_11,psk_9,initiator_8) else caught-fail) in
        {1046}let (hs_29: handshakestate,plaintext_d_1: bitstring,valid_11: bool) = (if v_339 then (if v_341 then (if v_358 then (if undo-catch-fail(v_359) then (hs_28,plaintext_15,true) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1047}event RecvMsg(me_1,them_1,stagepack_d(sid_2),plaintext_d_1);
        {1048}event RecvEnd(valid_11)
    ) | (
        0
    )
) | (
    {1050}let me_2: principal = bob in
    {1051}let them_2: principal = alice in
    {1052}let sid_3: sessionid = sid in
    {1053}let basis_10: key = key_s(me_2) in
    {1054}let public_key_10: key = catch-fail(dhexp(basis_10,validkey(g))) in
    {1055}let v_360: bool = not-caught-fail(public_key_10) in
    {1056}let s_12: keypair = (if v_360 then keypairpack(validkey(public_key_10),basis_10) else fail-any) in
    {1057}let basis_11: key = key_m(me_2) in
    {1058}let public_key_11: key = catch-fail(dhexp(basis_11,validkey(g))) in
    {1059}let v_361: bool = not-caught-fail(public_key_11) in
    {1060}let m_12: keypair = (if v_361 then keypairpack(validkey(public_key_11),basis_11) else fail-any) in
    {1061}out(pub, (getpublickey(s_12),getpublickey(m_12)));
    (
        {1062}let e_20: keypair = keypairpack(empty,empty) in
        {1063}let rs_10: key = empty in
        {1064}let rm_10: key = empty in
        {1065}let re_12: key = empty in
        {1066}let prologue_2: bitstring = empty in
        {1067}let psk_10: key = empty in
        {1068}let protocol_name_2: bitstring = somename in
        {1069}let h_48: bitstring = hash(protocol_name_2,empty) in
        {1070}let ck_58: key = h_48 in
        {1071}let k_26: key = empty in
        {1072}let cs_48: cipherstate = cipherstatepack(k_26,minnonce) in
        {1073}let ss_54: symmetricstate = symmetricstatepack(cs_48,ck_58,h_48) in
        {1074}let v_362: bitstring = catch-fail(symmetricstateunpack(ss_54)) in
        {1075}let v_363: bool = (not-caught-fail(v_362) && success?(1-proj-3-tuple(v_362))) in
        {1076}let h_49: bitstring = (if v_363 then 3-proj-3-tuple(v_362) else caught-fail) in
        {1077}let ck_59: key = (if v_363 then 2-proj-3-tuple(v_362) else caught-fail) in
        {1078}let cs_49: cipherstate = (if v_363 then 1-proj-3-tuple(v_362) else caught-fail) in
        {1079}let ss_55: symmetricstate = catch-fail((if v_363 then symmetricstatepack(cs_49,ck_59,hash(h_49,prologue_2)) else fail-any)) in
        {1080}let v_364: bool = not-caught-fail(ss_55) in
        {1081}let data: bitstring = (if v_364 then catch-fail(getpublickey(s_12)) else caught-fail) in
        {1082}let v_365: bool = not-caught-fail(data) in
        {1083}let v_366: bitstring = (if v_365 then catch-fail(symmetricstateunpack(ss_55)) else caught-fail) in
        {1084}let v_367: bool = (not-caught-fail(v_366) && success?(1-proj-3-tuple(v_366))) in
        {1085}let h_50: bitstring = (if v_367 then 3-proj-3-tuple(v_366) else caught-fail) in
        {1086}let ck_60: key = (if v_367 then 2-proj-3-tuple(v_366) else caught-fail) in
        {1087}let cs_50: cipherstate = (if v_367 then 1-proj-3-tuple(v_366) else caught-fail) in
        {1088}let ss_56: symmetricstate = (if v_364 then catch-fail((if v_365 then (if v_367 then symmetricstatepack(cs_50,ck_60,hash(h_50,data)) else fail-any) else fail-any)) else caught-fail) in
        {1089}let v_368: bool = not-caught-fail(ss_56) in
        {1090}let data_1: bitstring = (if v_368 then catch-fail(getpublickey(m_12)) else caught-fail) in
        {1091}let v_369: bool = not-caught-fail(data_1) in
        {1092}let v_370: bitstring = (if v_369 then catch-fail(symmetricstateunpack(ss_56)) else caught-fail) in
        {1093}let v_371: bool = (not-caught-fail(v_370) && success?(1-proj-3-tuple(v_370))) in
        {1094}let h_51: bitstring = (if v_371 then 3-proj-3-tuple(v_370) else caught-fail) in
        {1095}let ck_61: key = (if v_371 then 2-proj-3-tuple(v_370) else caught-fail) in
        {1096}let cs_51: cipherstate = (if v_371 then 1-proj-3-tuple(v_370) else caught-fail) in
        {1097}let ss_57: symmetricstate = (if v_368 then catch-fail((if v_369 then (if v_371 then symmetricstatepack(cs_51,ck_61,hash(h_51,data_1)) else fail-any) else fail-any)) else caught-fail) in
        {1098}let v_372: bool = not-caught-fail(ss_57) in
        {1099}let hs_30: handshakestate = (if v_364 then (if v_368 then (if v_372 then handshakestatepack(ss_57,s_12,m_12,e_20,rs_10,rm_10,re_12,psk_10,false) else fail-any) else fail-any) else fail-any) in
        {1100}insert statestore(me_2,them_2,sid_3,statepack_a(hs_30))
    ) | (
        {1343}get statestore(=me_2,=them_2,=sid_3,statepack_a(hs_31: handshakestate)) in
        {1101}in(pub, message_a_2: bitstring);
        {1102}let v_373: bitstring = catch-fail(handshakestateunpack(hs_31)) in
        {1103}let v_374: bool = (not-caught-fail(v_373) && success?(1-proj-9-tuple(v_373))) in
        {1104}let initiator_9: bool = (if v_374 then 9-proj-9-tuple(v_373) else caught-fail) in
        {1105}let psk_11: key = (if v_374 then 8-proj-9-tuple(v_373) else caught-fail) in
        {1106}let re_13: key = (if v_374 then 7-proj-9-tuple(v_373) else caught-fail) in
        {1107}let rm_11: key = (if v_374 then 6-proj-9-tuple(v_373) else caught-fail) in
        {1108}let rs_11: key = (if v_374 then 5-proj-9-tuple(v_373) else caught-fail) in
        {1109}let e_21: keypair = (if v_374 then 4-proj-9-tuple(v_373) else caught-fail) in
        {1110}let m_13: keypair = (if v_374 then 3-proj-9-tuple(v_373) else caught-fail) in
        {1111}let s_13: keypair = (if v_374 then 2-proj-9-tuple(v_373) else caught-fail) in
        {1112}let ss_58: symmetricstate = (if v_374 then 1-proj-9-tuple(v_373) else caught-fail) in
        {1113}let v_375: bitstring = (if v_374 then catch-fail((empty,empty,empty,empty)) else caught-fail) in
        {1114}let v_376: bool = (not-caught-fail(v_375) && success?(1-proj-4-tuple(v_375))) in
        {1115}let ciphertext_20: bitstring = (if v_376 then 4-proj-4-tuple(v_375) else caught-fail) in
        {1116}let nm_4: bitstring = (if v_376 then 3-proj-4-tuple(v_375) else caught-fail) in
        {1117}let ns_10: bitstring = (if v_376 then 2-proj-4-tuple(v_375) else caught-fail) in
        {1118}let ne_10: bitstring = (if v_376 then 1-proj-4-tuple(v_375) else caught-fail) in
        {1119}let valid1_4: bool = (if v_376 then true else caught-fail) in
        {1120}let valid2_4: bool = (if v_376 then true else caught-fail) in
        {1121}let re_14: key = (if v_376 then ne_10 else caught-fail) in
        {1122}let v_377: bitstring = (if v_376 then catch-fail(symmetricstateunpack(ss_58)) else caught-fail) in
        {1123}let v_378: bool = (not-caught-fail(v_377) && success?(1-proj-3-tuple(v_377))) in
        {1124}let h_52: bitstring = (if v_378 then 3-proj-3-tuple(v_377) else caught-fail) in
        {1125}let ck_62: key = (if v_378 then 2-proj-3-tuple(v_377) else caught-fail) in
        {1126}let cs_52: cipherstate = (if v_378 then 1-proj-3-tuple(v_377) else caught-fail) in
        {1127}let ss_59: symmetricstate = (if v_376 then catch-fail((if v_378 then symmetricstatepack(cs_52,ck_62,hash(h_52,re_14)) else fail-any)) else caught-fail) in
        {1128}let v_379: bool = not-caught-fail(ss_59) in
        {1129}let v_380: bitstring = (if v_379 then catch-fail(keypairunpack(s_13)) else caught-fail) in
        {1130}let v_381: bool = (not-caught-fail(v_380) && success?(1-proj-2-tuple(v_380))) in
        {1131}let my_private_key_10: key = (if v_381 then 2-proj-2-tuple(v_380) else caught-fail) in
        {1132}let my_public_key_10: key = (if v_381 then 1-proj-2-tuple(v_380) else caught-fail) in
        {1133}let input_key_material_12: key = (if v_379 then catch-fail((if v_381 then dhexp(my_private_key_10,re_14) else fail-any)) else caught-fail) in
        {1134}let v_382: bool = not-caught-fail(input_key_material_12) in
        {1135}let v_383: bitstring = (if v_382 then catch-fail(symmetricstateunpack(ss_59)) else caught-fail) in
        {1136}let v_384: bool = (not-caught-fail(v_383) && success?(1-proj-3-tuple(v_383))) in
        {1137}let h_53: bitstring = (if v_384 then 3-proj-3-tuple(v_383) else caught-fail) in
        {1138}let ck_63: key = (if v_384 then 2-proj-3-tuple(v_383) else caught-fail) in
        {1139}let cs_53: cipherstate = (if v_384 then 1-proj-3-tuple(v_383) else caught-fail) in
        {1140}let output1_12: key = (if v_384 then hmac_hash1(ck_63,input_key_material_12) else caught-fail) in
        {1141}let output2_12: key = (if v_384 then hmac_hash2(ck_63,input_key_material_12) else caught-fail) in
        {1142}let output3_12: key = (if v_384 then hmac_hash3(ck_63,input_key_material_12) else caught-fail) in
        {1143}let v_385: bitstring = (if v_384 then catch-fail((output1_12,output2_12,output3_12)) else caught-fail) in
        {1144}let v_386: bool = (not-caught-fail(v_385) && success?(1-proj-3-tuple(v_385))) in
        {1145}let output_10: key = (if v_386 then 3-proj-3-tuple(v_385) else caught-fail) in
        {1146}let temp_k_10: key = (if v_386 then 2-proj-3-tuple(v_385) else caught-fail) in
        {1147}let ck_64: key = (if v_386 then 1-proj-3-tuple(v_385) else caught-fail) in
        {1148}let ss_60: symmetricstate = (if v_379 then catch-fail((if v_382 then (if v_384 then (if v_386 then symmetricstatepack(cipherstatepack(temp_k_10,minnonce),ck_64,h_53) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1149}let v_387: bool = not-caught-fail(ss_60) in
        {1150}let v_388: bitstring = (if v_387 then catch-fail(keypairunpack(m_13)) else caught-fail) in
        {1151}let v_389: bool = (not-caught-fail(v_388) && success?(1-proj-2-tuple(v_388))) in
        {1152}let my_private_key_11: key = (if v_389 then 2-proj-2-tuple(v_388) else caught-fail) in
        {1153}let my_public_key_11: key = (if v_389 then 1-proj-2-tuple(v_388) else caught-fail) in
        {1154}let input_key_material_13: key = (if v_387 then catch-fail((if v_389 then dhexp(my_private_key_11,re_14) else fail-any)) else caught-fail) in
        {1155}let v_390: bool = not-caught-fail(input_key_material_13) in
        {1156}let v_391: bitstring = (if v_390 then catch-fail(symmetricstateunpack(ss_60)) else caught-fail) in
        {1157}let v_392: bool = (not-caught-fail(v_391) && success?(1-proj-3-tuple(v_391))) in
        {1158}let h_54: bitstring = (if v_392 then 3-proj-3-tuple(v_391) else caught-fail) in
        {1159}let ck_65: key = (if v_392 then 2-proj-3-tuple(v_391) else caught-fail) in
        {1160}let cs_54: cipherstate = (if v_392 then 1-proj-3-tuple(v_391) else caught-fail) in
        {1161}let output1_13: key = (if v_392 then hmac_hash1(ck_65,input_key_material_13) else caught-fail) in
        {1162}let output2_13: key = (if v_392 then hmac_hash2(ck_65,input_key_material_13) else caught-fail) in
        {1163}let output3_13: key = (if v_392 then hmac_hash3(ck_65,input_key_material_13) else caught-fail) in
        {1164}let v_393: bitstring = (if v_392 then catch-fail((output1_13,output2_13,output3_13)) else caught-fail) in
        {1165}let v_394: bool = (not-caught-fail(v_393) && success?(1-proj-3-tuple(v_393))) in
        {1166}let output_11: key = (if v_394 then 3-proj-3-tuple(v_393) else caught-fail) in
        {1167}let temp_k_11: key = (if v_394 then 2-proj-3-tuple(v_393) else caught-fail) in
        {1168}let ck_66: key = (if v_394 then 1-proj-3-tuple(v_393) else caught-fail) in
        {1169}let ss_61: symmetricstate = (if v_387 then catch-fail((if v_390 then (if v_392 then (if v_394 then symmetricstatepack(cipherstatepack(temp_k_11,minnonce),ck_66,h_54) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1170}let v_395: bool = not-caught-fail(ss_61) in
        {1171}let v_396: bitstring = (if v_395 then catch-fail(symmetricstateunpack(ss_61)) else caught-fail) in
        {1172}let v_397: bool = (not-caught-fail(v_396) && success?(1-proj-3-tuple(v_396))) in
        {1173}let h_55: bitstring = (if v_397 then 3-proj-3-tuple(v_396) else caught-fail) in
        {1174}let ck_67: key = (if v_397 then 2-proj-3-tuple(v_396) else caught-fail) in
        {1175}let cs_55: cipherstate = (if v_397 then 1-proj-3-tuple(v_396) else caught-fail) in
        {1176}let v_398: bitstring = (if v_397 then catch-fail(cipherstateunpack(cs_55)) else caught-fail) in
        {1177}let v_399: bool = (not-caught-fail(v_398) && success?(1-proj-2-tuple(v_398))) in
        {1178}let n_24: nonce = (if v_399 then 2-proj-2-tuple(v_398) else caught-fail) in
        {1179}let k_27: key = (if v_399 then 1-proj-2-tuple(v_398) else caught-fail) in
        {1180}let d_4: aead = (if v_399 then catch-fail(decrypt(k_27,n_24,h_55,ns_10)) else caught-fail) in
        {1181}let v_400: bool = not-caught-fail(d_4) in
        {1182}let v_401: bitstring = (if v_400 then catch-fail(aeadunpack(d_4)) else caught-fail) in
        {1183}let v_402: bool = (not-caught-fail(v_401) && success?(1-proj-3-tuple(v_401))) in
        {1184}let plaintext_16: bitstring = (if v_402 then 3-proj-3-tuple(v_401) else caught-fail) in
        {1185}let adi_4: bitstring = (if v_402 then 2-proj-3-tuple(v_401) else caught-fail) in
        {1186}let valid_12: bool = (if v_402 then 1-proj-3-tuple(v_401) else caught-fail) in
        {1187}let n_25: nonce = (if v_402 then increment_nonce(n_24) else caught-fail) in
        {1188}let v_403: bitstring = (if v_402 then catch-fail(cipherstateunpack(cs_55)) else caught-fail) in
        {1189}let v_404: bool = (not-caught-fail(v_403) && success?(1-proj-2-tuple(v_403))) in
        {1190}let o_12: nonce = (if v_404 then 2-proj-2-tuple(v_403) else caught-fail) in
        {1191}let k_28: key = (if v_404 then 1-proj-2-tuple(v_403) else caught-fail) in
        {1192}let csi_24: cipherstate = (if v_402 then catch-fail((if v_404 then cipherstatepack(k_28,n_25) else fail-any)) else caught-fail) in
        {1193}let v_405: bool = not-caught-fail(csi_24) in
        {1194}let v_406: bitstring = (if v_397 then catch-fail((if v_399 then (if v_400 then (if v_402 then (if v_405 then (csi_24,plaintext_16,valid_12) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1195}let v_407: bool = (not-caught-fail(v_406) && success?(1-proj-3-tuple(v_406))) in
        {1196}let valid_13: bool = (if v_407 then 3-proj-3-tuple(v_406) else caught-fail) in
        {1197}let plaintext_17: bitstring = (if v_407 then 2-proj-3-tuple(v_406) else caught-fail) in
        {1198}let csi_25: cipherstate = (if v_407 then 1-proj-3-tuple(v_406) else caught-fail) in
        {1199}let ss_62: symmetricstate = (if v_407 then symmetricstatepack(csi_25,ck_67,h_55) else caught-fail) in
        {1200}let v_408: bitstring = (if v_407 then catch-fail(symmetricstateunpack(ss_62)) else caught-fail) in
        {1201}let v_409: bool = (not-caught-fail(v_408) && success?(1-proj-3-tuple(v_408))) in
        {1202}let h_56: bitstring = (if v_409 then 3-proj-3-tuple(v_408) else caught-fail) in
        {1203}let ck_68: key = (if v_409 then 2-proj-3-tuple(v_408) else caught-fail) in
        {1204}let cs_56: cipherstate = (if v_409 then 1-proj-3-tuple(v_408) else caught-fail) in
        {1205}let ssi_14: symmetricstate = (if v_407 then catch-fail((if v_409 then symmetricstatepack(cs_56,ck_68,hash(h_56,ns_10)) else fail-any)) else caught-fail) in
        {1206}let v_410: bool = not-caught-fail(ssi_14) in
        {1207}let v_411: bitstring = (if v_395 then catch-fail((if v_397 then (if v_407 then (if v_410 then (ssi_14,plaintext_17,valid_13) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1208}let v_412: bool = (not-caught-fail(v_411) && success?(1-proj-3-tuple(v_411))) in
        {1209}let valid1_5: bool = (if v_412 then 3-proj-3-tuple(v_411) else caught-fail) in
        {1210}let ne_11: bitstring = (if v_412 then 2-proj-3-tuple(v_411) else caught-fail) in
        {1211}let ss_63: symmetricstate = (if v_412 then 1-proj-3-tuple(v_411) else caught-fail) in
        {1212}let rs_12: key = (if v_412 then ne_11 else caught-fail) in
        {1213}let v_413: bitstring = (if v_412 then catch-fail(symmetricstateunpack(ss_63)) else caught-fail) in
        {1214}let v_414: bool = (not-caught-fail(v_413) && success?(1-proj-3-tuple(v_413))) in
        {1215}let h_57: bitstring = (if v_414 then 3-proj-3-tuple(v_413) else caught-fail) in
        {1216}let ck_69: key = (if v_414 then 2-proj-3-tuple(v_413) else caught-fail) in
        {1217}let cs_57: cipherstate = (if v_414 then 1-proj-3-tuple(v_413) else caught-fail) in
        {1218}let v_415: bitstring = (if v_414 then catch-fail(cipherstateunpack(cs_57)) else caught-fail) in
        {1219}let v_416: bool = (not-caught-fail(v_415) && success?(1-proj-2-tuple(v_415))) in
        {1220}let n_26: nonce = (if v_416 then 2-proj-2-tuple(v_415) else caught-fail) in
        {1221}let k_29: key = (if v_416 then 1-proj-2-tuple(v_415) else caught-fail) in
        {1222}let d_5: aead = (if v_416 then catch-fail(decrypt(k_29,n_26,h_57,nm_4)) else caught-fail) in
        {1223}let v_417: bool = not-caught-fail(d_5) in
        {1224}let v_418: bitstring = (if v_417 then catch-fail(aeadunpack(d_5)) else caught-fail) in
        {1225}let v_419: bool = (not-caught-fail(v_418) && success?(1-proj-3-tuple(v_418))) in
        {1226}let plaintext_18: bitstring = (if v_419 then 3-proj-3-tuple(v_418) else caught-fail) in
        {1227}let adi_5: bitstring = (if v_419 then 2-proj-3-tuple(v_418) else caught-fail) in
        {1228}let valid_14: bool = (if v_419 then 1-proj-3-tuple(v_418) else caught-fail) in
        {1229}let n_27: nonce = (if v_419 then increment_nonce(n_26) else caught-fail) in
        {1230}let v_420: bitstring = (if v_419 then catch-fail(cipherstateunpack(cs_57)) else caught-fail) in
        {1231}let v_421: bool = (not-caught-fail(v_420) && success?(1-proj-2-tuple(v_420))) in
        {1232}let o_13: nonce = (if v_421 then 2-proj-2-tuple(v_420) else caught-fail) in
        {1233}let k_30: key = (if v_421 then 1-proj-2-tuple(v_420) else caught-fail) in
        {1234}let csi_26: cipherstate = (if v_419 then catch-fail((if v_421 then cipherstatepack(k_30,n_27) else fail-any)) else caught-fail) in
        {1235}let v_422: bool = not-caught-fail(csi_26) in
        {1236}let v_423: bitstring = (if v_414 then catch-fail((if v_416 then (if v_417 then (if v_419 then (if v_422 then (csi_26,plaintext_18,valid_14) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1237}let v_424: bool = (not-caught-fail(v_423) && success?(1-proj-3-tuple(v_423))) in
        {1238}let valid_15: bool = (if v_424 then 3-proj-3-tuple(v_423) else caught-fail) in
        {1239}let plaintext_19: bitstring = (if v_424 then 2-proj-3-tuple(v_423) else caught-fail) in
        {1240}let csi_27: cipherstate = (if v_424 then 1-proj-3-tuple(v_423) else caught-fail) in
        {1241}let ss_64: symmetricstate = (if v_424 then symmetricstatepack(csi_27,ck_69,h_57) else caught-fail) in
        {1242}let v_425: bitstring = (if v_424 then catch-fail(symmetricstateunpack(ss_64)) else caught-fail) in
        {1243}let v_426: bool = (not-caught-fail(v_425) && success?(1-proj-3-tuple(v_425))) in
        {1244}let h_58: bitstring = (if v_426 then 3-proj-3-tuple(v_425) else caught-fail) in
        {1245}let ck_70: key = (if v_426 then 2-proj-3-tuple(v_425) else caught-fail) in
        {1246}let cs_58: cipherstate = (if v_426 then 1-proj-3-tuple(v_425) else caught-fail) in
        {1247}let ssi_15: symmetricstate = (if v_424 then catch-fail((if v_426 then symmetricstatepack(cs_58,ck_70,hash(h_58,nm_4)) else fail-any)) else caught-fail) in
        {1248}let v_427: bool = not-caught-fail(ssi_15) in
        {1249}let v_428: bitstring = (if v_412 then catch-fail((if v_414 then (if v_424 then (if v_427 then (ssi_15,plaintext_19,valid_15) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1250}let v_429: bool = (not-caught-fail(v_428) && success?(1-proj-3-tuple(v_428))) in
        {1251}let valid2_5: bool = (if v_429 then 3-proj-3-tuple(v_428) else caught-fail) in
        {1252}let me_3: bitstring = (if v_429 then 2-proj-3-tuple(v_428) else caught-fail) in
        {1253}let ss_65: symmetricstate = (if v_429 then 1-proj-3-tuple(v_428) else caught-fail) in
        {1254}let rm_12: key = (if v_429 then me_3 else caught-fail) in
        {1255}let v_430: bitstring = (if v_429 then catch-fail(keypairunpack(s_13)) else caught-fail) in
        {1256}let v_431: bool = (not-caught-fail(v_430) && success?(1-proj-2-tuple(v_430))) in
        {1257}let my_private_key_12: key = (if v_431 then 2-proj-2-tuple(v_430) else caught-fail) in
        {1258}let my_public_key_12: key = (if v_431 then 1-proj-2-tuple(v_430) else caught-fail) in
        {1259}let input_key_material_14: key = (if v_429 then catch-fail((if v_431 then dhexp(my_private_key_12,rm_12) else fail-any)) else caught-fail) in
        {1260}let v_432: bool = not-caught-fail(input_key_material_14) in
        {1261}let v_433: bitstring = (if v_432 then catch-fail(symmetricstateunpack(ss_65)) else caught-fail) in
        {1262}let v_434: bool = (not-caught-fail(v_433) && success?(1-proj-3-tuple(v_433))) in
        {1263}let h_59: bitstring = (if v_434 then 3-proj-3-tuple(v_433) else caught-fail) in
        {1264}let ck_71: key = (if v_434 then 2-proj-3-tuple(v_433) else caught-fail) in
        {1265}let cs_59: cipherstate = (if v_434 then 1-proj-3-tuple(v_433) else caught-fail) in
        {1266}let output1_14: key = (if v_434 then hmac_hash1(ck_71,input_key_material_14) else caught-fail) in
        {1267}let output2_14: key = (if v_434 then hmac_hash2(ck_71,input_key_material_14) else caught-fail) in
        {1268}let output3_14: key = (if v_434 then hmac_hash3(ck_71,input_key_material_14) else caught-fail) in
        {1269}let v_435: bitstring = (if v_434 then catch-fail((output1_14,output2_14,output3_14)) else caught-fail) in
        {1270}let v_436: bool = (not-caught-fail(v_435) && success?(1-proj-3-tuple(v_435))) in
        {1271}let output_12: key = (if v_436 then 3-proj-3-tuple(v_435) else caught-fail) in
        {1272}let temp_k_12: key = (if v_436 then 2-proj-3-tuple(v_435) else caught-fail) in
        {1273}let ck_72: key = (if v_436 then 1-proj-3-tuple(v_435) else caught-fail) in
        {1274}let ss_66: symmetricstate = (if v_429 then catch-fail((if v_432 then (if v_434 then (if v_436 then symmetricstatepack(cipherstatepack(temp_k_12,minnonce),ck_72,h_59) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1275}let v_437: bool = not-caught-fail(ss_66) in
        {1276}let v_438: bitstring = (if v_437 then catch-fail(keypairunpack(m_13)) else caught-fail) in
        {1277}let v_439: bool = (not-caught-fail(v_438) && success?(1-proj-2-tuple(v_438))) in
        {1278}let my_private_key_13: key = (if v_439 then 2-proj-2-tuple(v_438) else caught-fail) in
        {1279}let my_public_key_13: key = (if v_439 then 1-proj-2-tuple(v_438) else caught-fail) in
        {1280}let input_key_material_15: key = (if v_437 then catch-fail((if v_439 then dhexp(my_private_key_13,rs_12) else fail-any)) else caught-fail) in
        {1281}let v_440: bool = not-caught-fail(input_key_material_15) in
        {1282}let v_441: bitstring = (if v_440 then catch-fail(symmetricstateunpack(ss_66)) else caught-fail) in
        {1283}let v_442: bool = (not-caught-fail(v_441) && success?(1-proj-3-tuple(v_441))) in
        {1284}let h_60: bitstring = (if v_442 then 3-proj-3-tuple(v_441) else caught-fail) in
        {1285}let ck_73: key = (if v_442 then 2-proj-3-tuple(v_441) else caught-fail) in
        {1286}let cs_60: cipherstate = (if v_442 then 1-proj-3-tuple(v_441) else caught-fail) in
        {1287}let output1_15: key = (if v_442 then hmac_hash1(ck_73,input_key_material_15) else caught-fail) in
        {1288}let output2_15: key = (if v_442 then hmac_hash2(ck_73,input_key_material_15) else caught-fail) in
        {1289}let output3_15: key = (if v_442 then hmac_hash3(ck_73,input_key_material_15) else caught-fail) in
        {1290}let v_443: bitstring = (if v_442 then catch-fail((output1_15,output2_15,output3_15)) else caught-fail) in
        {1291}let v_444: bool = (not-caught-fail(v_443) && success?(1-proj-3-tuple(v_443))) in
        {1292}let output_13: key = (if v_444 then 3-proj-3-tuple(v_443) else caught-fail) in
        {1293}let temp_k_13: key = (if v_444 then 2-proj-3-tuple(v_443) else caught-fail) in
        {1294}let ck_74: key = (if v_444 then 1-proj-3-tuple(v_443) else caught-fail) in
        {1295}let ss_67: symmetricstate = (if v_437 then catch-fail((if v_440 then (if v_442 then (if v_444 then symmetricstatepack(cipherstatepack(temp_k_13,minnonce),ck_74,h_60) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1296}let v_445: bool = not-caught-fail(ss_67) in
        {1297}let v_446: bitstring = (if v_445 then catch-fail(symmetricstateunpack(ss_67)) else caught-fail) in
        {1298}let v_447: bool = (not-caught-fail(v_446) && success?(1-proj-3-tuple(v_446))) in
        {1299}let h_61: bitstring = (if v_447 then 3-proj-3-tuple(v_446) else caught-fail) in
        {1300}let ck_75: key = (if v_447 then 2-proj-3-tuple(v_446) else caught-fail) in
        {1301}let cs_61: cipherstate = (if v_447 then 1-proj-3-tuple(v_446) else caught-fail) in
        {1302}let v_448: bitstring = (if v_447 then catch-fail(cipherstateunpack(cs_61)) else caught-fail) in
        {1303}let v_449: bool = (not-caught-fail(v_448) && success?(1-proj-2-tuple(v_448))) in
        {1304}let n_28: nonce = (if v_449 then 2-proj-2-tuple(v_448) else caught-fail) in
        {1305}let k_31: key = (if v_449 then 1-proj-2-tuple(v_448) else caught-fail) in
        {1306}let d_6: aead = (if v_449 then catch-fail(decrypt(k_31,n_28,h_61,ciphertext_20)) else caught-fail) in
        {1307}let v_450: bool = not-caught-fail(d_6) in
        {1308}let v_451: bitstring = (if v_450 then catch-fail(aeadunpack(d_6)) else caught-fail) in
        {1309}let v_452: bool = (not-caught-fail(v_451) && success?(1-proj-3-tuple(v_451))) in
        {1310}let plaintext_20: bitstring = (if v_452 then 3-proj-3-tuple(v_451) else caught-fail) in
        {1311}let adi_6: bitstring = (if v_452 then 2-proj-3-tuple(v_451) else caught-fail) in
        {1312}let valid_16: bool = (if v_452 then 1-proj-3-tuple(v_451) else caught-fail) in
        {1313}let n_29: nonce = (if v_452 then increment_nonce(n_28) else caught-fail) in
        {1314}let v_453: bitstring = (if v_452 then catch-fail(cipherstateunpack(cs_61)) else caught-fail) in
        {1315}let v_454: bool = (not-caught-fail(v_453) && success?(1-proj-2-tuple(v_453))) in
        {1316}let o_14: nonce = (if v_454 then 2-proj-2-tuple(v_453) else caught-fail) in
        {1317}let k_32: key = (if v_454 then 1-proj-2-tuple(v_453) else caught-fail) in
        {1318}let csi_28: cipherstate = (if v_452 then catch-fail((if v_454 then cipherstatepack(k_32,n_29) else fail-any)) else caught-fail) in
        {1319}let v_455: bool = not-caught-fail(csi_28) in
        {1320}let v_456: bitstring = (if v_447 then catch-fail((if v_449 then (if v_450 then (if v_452 then (if v_455 then (csi_28,plaintext_20,valid_16) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1321}let v_457: bool = (not-caught-fail(v_456) && success?(1-proj-3-tuple(v_456))) in
        {1322}let valid_17: bool = (if v_457 then 3-proj-3-tuple(v_456) else caught-fail) in
        {1323}let plaintext_21: bitstring = (if v_457 then 2-proj-3-tuple(v_456) else caught-fail) in
        {1324}let csi_29: cipherstate = (if v_457 then 1-proj-3-tuple(v_456) else caught-fail) in
        {1325}let ss_68: symmetricstate = (if v_457 then symmetricstatepack(csi_29,ck_75,h_61) else caught-fail) in
        {1326}let v_458: bitstring = (if v_457 then catch-fail(symmetricstateunpack(ss_68)) else caught-fail) in
        {1327}let v_459: bool = (not-caught-fail(v_458) && success?(1-proj-3-tuple(v_458))) in
        {1328}let h_62: bitstring = (if v_459 then 3-proj-3-tuple(v_458) else caught-fail) in
        {1329}let ck_76: key = (if v_459 then 2-proj-3-tuple(v_458) else caught-fail) in
        {1330}let cs_62: cipherstate = (if v_459 then 1-proj-3-tuple(v_458) else caught-fail) in
        {1331}let ssi_16: symmetricstate = (if v_457 then catch-fail((if v_459 then symmetricstatepack(cs_62,ck_76,hash(h_62,ciphertext_20)) else fail-any)) else caught-fail) in
        {1332}let v_460: bool = not-caught-fail(ssi_16) in
        {1333}let v_461: bitstring = (if v_445 then catch-fail((if v_447 then (if v_457 then (if v_460 then (ssi_16,plaintext_21,valid_17) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1334}let v_462: bool = (not-caught-fail(v_461) && success?(1-proj-3-tuple(v_461))) in
        {1335}let valid3: bool = (if v_462 then 3-proj-3-tuple(v_461) else caught-fail) in
        {1336}let plaintext_22: bitstring = (if v_462 then 2-proj-3-tuple(v_461) else caught-fail) in
        {1337}let ss_69: symmetricstate = (if v_462 then 1-proj-3-tuple(v_461) else caught-fail) in
        {1338}let v_463: bool = (if v_462 then catch-fail((valid1_5 && (valid2_5 && valid3))) else caught-fail) in
        {1339}let hs_32: handshakestate = (if v_463 then handshakestatepack(ss_69,s_13,m_13,e_21,rs_12,rm_12,re_14,psk_11,initiator_9) else caught-fail) in
        {1340}let (hs_33: handshakestate,plaintext_a: bitstring,valid_18: bool) = (if v_374 then (if v_376 then (if v_379 then (if v_387 then (if v_395 then (if v_412 then (if v_429 then (if v_437 then (if v_445 then (if v_462 then (if undo-catch-fail(v_463) then (hs_32,plaintext_22,true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1341}event RecvMsg(me_2,them_2,stagepack_a(sid_3),plaintext_a);
        {1342}insert statestore(me_2,them_2,sid_3,statepack_b(hs_33))
    ) | (
        {1498}get statestore(=me_2,=them_2,=sid_3,statepack_b(hs_34: handshakestate)) in
        {1344}let payload_4: bitstring = msg_b(me_2,them_2,sid_3) in
        {1345}let v_464: bitstring = catch-fail(handshakestateunpack(hs_34)) in
        {1346}let v_465: bool = (not-caught-fail(v_464) && success?(1-proj-9-tuple(v_464))) in
        {1347}let initiator_10: bool = (if v_465 then 9-proj-9-tuple(v_464) else caught-fail) in
        {1348}let psk_12: key = (if v_465 then 8-proj-9-tuple(v_464) else caught-fail) in
        {1349}let re_15: key = (if v_465 then 7-proj-9-tuple(v_464) else caught-fail) in
        {1350}let rm_13: key = (if v_465 then 6-proj-9-tuple(v_464) else caught-fail) in
        {1351}let rs_13: key = (if v_465 then 5-proj-9-tuple(v_464) else caught-fail) in
        {1352}let e_22: keypair = (if v_465 then 4-proj-9-tuple(v_464) else caught-fail) in
        {1353}let m_14: keypair = (if v_465 then 3-proj-9-tuple(v_464) else caught-fail) in
        {1354}let s_14: keypair = (if v_465 then 2-proj-9-tuple(v_464) else caught-fail) in
        {1355}let ss_70: symmetricstate = (if v_465 then 1-proj-9-tuple(v_464) else caught-fail) in
        {1356}let v_466: bitstring = (if v_465 then catch-fail((empty,empty,empty)) else caught-fail) in
        {1357}let v_467: bool = (not-caught-fail(v_466) && success?(1-proj-3-tuple(v_466))) in
        {1358}let ciphertext_21: bitstring = (if v_467 then 3-proj-3-tuple(v_466) else caught-fail) in
        {1359}let ns_11: bitstring = (if v_467 then 2-proj-3-tuple(v_466) else caught-fail) in
        {1360}let ne_12: bitstring = (if v_467 then 1-proj-3-tuple(v_466) else caught-fail) in
        {1361}let basis_12: key = (if v_467 then key_e(me_2,them_2,sid_3) else caught-fail) in
        {1362}let public_key_12: key = (if v_467 then catch-fail(dhexp(basis_12,validkey(g))) else caught-fail) in
        {1363}let v_468: bool = not-caught-fail(public_key_12) in
        {1364}let e_23: keypair = (if v_467 then catch-fail((if v_468 then keypairpack(validkey(public_key_12),basis_12) else fail-any)) else caught-fail) in
        {1365}let v_469: bool = not-caught-fail(e_23) in
        {1366}let ne_13: bitstring = (if v_469 then catch-fail(getpublickey(e_23)) else caught-fail) in
        {1367}let v_470: bool = not-caught-fail(ne_13) in
        {1368}let v_471: bitstring = (if v_470 then catch-fail(symmetricstateunpack(ss_70)) else caught-fail) in
        {1369}let v_472: bool = (not-caught-fail(v_471) && success?(1-proj-3-tuple(v_471))) in
        {1370}let h_63: bitstring = (if v_472 then 3-proj-3-tuple(v_471) else caught-fail) in
        {1371}let ck_77: key = (if v_472 then 2-proj-3-tuple(v_471) else caught-fail) in
        {1372}let cs_63: cipherstate = (if v_472 then 1-proj-3-tuple(v_471) else caught-fail) in
        {1373}let ss_71: symmetricstate = (if v_470 then catch-fail((if v_472 then symmetricstatepack(cs_63,ck_77,hash(h_63,ne_13)) else fail-any)) else caught-fail) in
        {1374}let v_473: bool = not-caught-fail(ss_71) in
        {1375}let v_474: bitstring = (if v_473 then catch-fail(keypairunpack(e_23)) else caught-fail) in
        {1376}let v_475: bool = (not-caught-fail(v_474) && success?(1-proj-2-tuple(v_474))) in
        {1377}let my_private_key_14: key = (if v_475 then 2-proj-2-tuple(v_474) else caught-fail) in
        {1378}let my_public_key_14: key = (if v_475 then 1-proj-2-tuple(v_474) else caught-fail) in
        {1379}let input_key_material_16: key = (if v_473 then catch-fail((if v_475 then dhexp(my_private_key_14,re_15) else fail-any)) else caught-fail) in
        {1380}let v_476: bool = not-caught-fail(input_key_material_16) in
        {1381}let v_477: bitstring = (if v_476 then catch-fail(symmetricstateunpack(ss_71)) else caught-fail) in
        {1382}let v_478: bool = (not-caught-fail(v_477) && success?(1-proj-3-tuple(v_477))) in
        {1383}let h_64: bitstring = (if v_478 then 3-proj-3-tuple(v_477) else caught-fail) in
        {1384}let ck_78: key = (if v_478 then 2-proj-3-tuple(v_477) else caught-fail) in
        {1385}let cs_64: cipherstate = (if v_478 then 1-proj-3-tuple(v_477) else caught-fail) in
        {1386}let output1_16: key = (if v_478 then hmac_hash1(ck_78,input_key_material_16) else caught-fail) in
        {1387}let output2_16: key = (if v_478 then hmac_hash2(ck_78,input_key_material_16) else caught-fail) in
        {1388}let output3_16: key = (if v_478 then hmac_hash3(ck_78,input_key_material_16) else caught-fail) in
        {1389}let v_479: bitstring = (if v_478 then catch-fail((output1_16,output2_16,output3_16)) else caught-fail) in
        {1390}let v_480: bool = (not-caught-fail(v_479) && success?(1-proj-3-tuple(v_479))) in
        {1391}let output_14: key = (if v_480 then 3-proj-3-tuple(v_479) else caught-fail) in
        {1392}let temp_k_14: key = (if v_480 then 2-proj-3-tuple(v_479) else caught-fail) in
        {1393}let ck_79: key = (if v_480 then 1-proj-3-tuple(v_479) else caught-fail) in
        {1394}let ss_72: symmetricstate = (if v_473 then catch-fail((if v_476 then (if v_478 then (if v_480 then symmetricstatepack(cipherstatepack(temp_k_14,minnonce),ck_79,h_64) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1395}let v_481: bool = not-caught-fail(ss_72) in
        {1396}let v_482: bitstring = (if v_481 then catch-fail(keypairunpack(e_23)) else caught-fail) in
        {1397}let v_483: bool = (not-caught-fail(v_482) && success?(1-proj-2-tuple(v_482))) in
        {1398}let my_private_key_15: key = (if v_483 then 2-proj-2-tuple(v_482) else caught-fail) in
        {1399}let my_public_key_15: key = (if v_483 then 1-proj-2-tuple(v_482) else caught-fail) in
        {1400}let input_key_material_17: key = (if v_481 then catch-fail((if v_483 then dhexp(my_private_key_15,rs_13) else fail-any)) else caught-fail) in
        {1401}let v_484: bool = not-caught-fail(input_key_material_17) in
        {1402}let v_485: bitstring = (if v_484 then catch-fail(symmetricstateunpack(ss_72)) else caught-fail) in
        {1403}let v_486: bool = (not-caught-fail(v_485) && success?(1-proj-3-tuple(v_485))) in
        {1404}let h_65: bitstring = (if v_486 then 3-proj-3-tuple(v_485) else caught-fail) in
        {1405}let ck_80: key = (if v_486 then 2-proj-3-tuple(v_485) else caught-fail) in
        {1406}let cs_65: cipherstate = (if v_486 then 1-proj-3-tuple(v_485) else caught-fail) in
        {1407}let output1_17: key = (if v_486 then hmac_hash1(ck_80,input_key_material_17) else caught-fail) in
        {1408}let output2_17: key = (if v_486 then hmac_hash2(ck_80,input_key_material_17) else caught-fail) in
        {1409}let output3_17: key = (if v_486 then hmac_hash3(ck_80,input_key_material_17) else caught-fail) in
        {1410}let v_487: bitstring = (if v_486 then catch-fail((output1_17,output2_17,output3_17)) else caught-fail) in
        {1411}let v_488: bool = (not-caught-fail(v_487) && success?(1-proj-3-tuple(v_487))) in
        {1412}let output_15: key = (if v_488 then 3-proj-3-tuple(v_487) else caught-fail) in
        {1413}let temp_k_15: key = (if v_488 then 2-proj-3-tuple(v_487) else caught-fail) in
        {1414}let ck_81: key = (if v_488 then 1-proj-3-tuple(v_487) else caught-fail) in
        {1415}let ss_73: symmetricstate = (if v_481 then catch-fail((if v_484 then (if v_486 then (if v_488 then symmetricstatepack(cipherstatepack(temp_k_15,minnonce),ck_81,h_65) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1416}let v_489: bool = not-caught-fail(ss_73) in
        {1417}let v_490: bitstring = (if v_489 then catch-fail(keypairunpack(e_23)) else caught-fail) in
        {1418}let v_491: bool = (not-caught-fail(v_490) && success?(1-proj-2-tuple(v_490))) in
        {1419}let my_private_key_16: key = (if v_491 then 2-proj-2-tuple(v_490) else caught-fail) in
        {1420}let my_public_key_16: key = (if v_491 then 1-proj-2-tuple(v_490) else caught-fail) in
        {1421}let input_key_material_18: key = (if v_489 then catch-fail((if v_491 then dhexp(my_private_key_16,rm_13) else fail-any)) else caught-fail) in
        {1422}let v_492: bool = not-caught-fail(input_key_material_18) in
        {1423}let v_493: bitstring = (if v_492 then catch-fail(symmetricstateunpack(ss_73)) else caught-fail) in
        {1424}let v_494: bool = (not-caught-fail(v_493) && success?(1-proj-3-tuple(v_493))) in
        {1425}let h_66: bitstring = (if v_494 then 3-proj-3-tuple(v_493) else caught-fail) in
        {1426}let ck_82: key = (if v_494 then 2-proj-3-tuple(v_493) else caught-fail) in
        {1427}let cs_66: cipherstate = (if v_494 then 1-proj-3-tuple(v_493) else caught-fail) in
        {1428}let output1_18: key = (if v_494 then hmac_hash1(ck_82,input_key_material_18) else caught-fail) in
        {1429}let output2_18: key = (if v_494 then hmac_hash2(ck_82,input_key_material_18) else caught-fail) in
        {1430}let output3_18: key = (if v_494 then hmac_hash3(ck_82,input_key_material_18) else caught-fail) in
        {1431}let v_495: bitstring = (if v_494 then catch-fail((output1_18,output2_18,output3_18)) else caught-fail) in
        {1432}let v_496: bool = (not-caught-fail(v_495) && success?(1-proj-3-tuple(v_495))) in
        {1433}let output_16: key = (if v_496 then 3-proj-3-tuple(v_495) else caught-fail) in
        {1434}let temp_k_16: key = (if v_496 then 2-proj-3-tuple(v_495) else caught-fail) in
        {1435}let ck_83: key = (if v_496 then 1-proj-3-tuple(v_495) else caught-fail) in
        {1436}let ss_74: symmetricstate = (if v_489 then catch-fail((if v_492 then (if v_494 then (if v_496 then symmetricstatepack(cipherstatepack(temp_k_16,minnonce),ck_83,h_66) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1437}let v_497: bool = not-caught-fail(ss_74) in
        {1438}let v_498: bitstring = (if v_497 then catch-fail(symmetricstateunpack(ss_74)) else caught-fail) in
        {1439}let v_499: bool = (not-caught-fail(v_498) && success?(1-proj-3-tuple(v_498))) in
        {1440}let h_67: bitstring = (if v_499 then 3-proj-3-tuple(v_498) else caught-fail) in
        {1441}let ck_84: key = (if v_499 then 2-proj-3-tuple(v_498) else caught-fail) in
        {1442}let cs_67: cipherstate = (if v_499 then 1-proj-3-tuple(v_498) else caught-fail) in
        {1443}let v_500: bitstring = (if v_499 then catch-fail(cipherstateunpack(cs_67)) else caught-fail) in
        {1444}let v_501: bool = (not-caught-fail(v_500) && success?(1-proj-2-tuple(v_500))) in
        {1445}let n_30: nonce = (if v_501 then 2-proj-2-tuple(v_500) else caught-fail) in
        {1446}let k_33: key = (if v_501 then 1-proj-2-tuple(v_500) else caught-fail) in
        {1447}let e_24: bitstring = (if v_501 then encrypt(k_33,n_30,h_67,payload_4) else caught-fail) in
        {1448}let n_31: nonce = (if v_501 then increment_nonce(n_30) else caught-fail) in
        {1449}let v_502: bitstring = (if v_501 then catch-fail(cipherstateunpack(cs_67)) else caught-fail) in
        {1450}let v_503: bool = (not-caught-fail(v_502) && success?(1-proj-2-tuple(v_502))) in
        {1451}let o_15: nonce = (if v_503 then 2-proj-2-tuple(v_502) else caught-fail) in
        {1452}let k_34: key = (if v_503 then 1-proj-2-tuple(v_502) else caught-fail) in
        {1453}let csi_30: cipherstate = (if v_501 then catch-fail((if v_503 then cipherstatepack(k_34,n_31) else fail-any)) else caught-fail) in
        {1454}let v_504: bool = not-caught-fail(csi_30) in
        {1455}let v_505: bitstring = (if v_499 then catch-fail((if v_501 then (if v_504 then (csi_30,e_24) else fail-any) else fail-any)) else caught-fail) in
        {1456}let v_506: bool = (not-caught-fail(v_505) && success?(1-proj-2-tuple(v_505))) in
        {1457}let ciphertext_22: bitstring = (if v_506 then 2-proj-2-tuple(v_505) else caught-fail) in
        {1458}let csi_31: cipherstate = (if v_506 then 1-proj-2-tuple(v_505) else caught-fail) in
        {1459}let ss_75: symmetricstate = (if v_506 then symmetricstatepack(csi_31,ck_84,h_67) else caught-fail) in
        {1460}let v_507: bitstring = (if v_506 then catch-fail(symmetricstateunpack(ss_75)) else caught-fail) in
        {1461}let v_508: bool = (not-caught-fail(v_507) && success?(1-proj-3-tuple(v_507))) in
        {1462}let h_68: bitstring = (if v_508 then 3-proj-3-tuple(v_507) else caught-fail) in
        {1463}let ck_85: key = (if v_508 then 2-proj-3-tuple(v_507) else caught-fail) in
        {1464}let cs_68: cipherstate = (if v_508 then 1-proj-3-tuple(v_507) else caught-fail) in
        {1465}let ssi_17: symmetricstate = (if v_506 then catch-fail((if v_508 then symmetricstatepack(cs_68,ck_85,hash(h_68,ciphertext_22)) else fail-any)) else caught-fail) in
        {1466}let v_509: bool = not-caught-fail(ssi_17) in
        {1467}let v_510: bitstring = (if v_497 then catch-fail((if v_499 then (if v_506 then (if v_509 then (ssi_17,ciphertext_22) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1468}let v_511: bool = (not-caught-fail(v_510) && success?(1-proj-2-tuple(v_510))) in
        {1469}let ciphertext_23: bitstring = (if v_511 then 2-proj-2-tuple(v_510) else caught-fail) in
        {1470}let ss_76: symmetricstate = (if v_511 then 1-proj-2-tuple(v_510) else caught-fail) in
        {1471}let hs_35: handshakestate = (if v_511 then handshakestatepack(ss_76,s_14,m_14,e_23,rs_13,rm_13,re_15,psk_12,initiator_10) else caught-fail) in
        {1472}let message_buffer_4: bitstring = (if v_511 then concat3(ne_13,ns_11,ciphertext_23) else caught-fail) in
        {1473}let v_512: bitstring = (if v_511 then catch-fail(symmetricstateunpack(ss_76)) else caught-fail) in
        {1474}let v_513: bool = (not-caught-fail(v_512) && success?(1-proj-3-tuple(v_512))) in
        {1475}let h_69: bitstring = (if v_513 then 3-proj-3-tuple(v_512) else caught-fail) in
        {1476}let ck_86: key = (if v_513 then 2-proj-3-tuple(v_512) else caught-fail) in
        {1477}let cs_69: cipherstate = (if v_513 then 1-proj-3-tuple(v_512) else caught-fail) in
        {1478}let input_key_material_19: key = (if v_513 then zero else caught-fail) in
        {1479}let output1_19: key = (if v_513 then hmac_hash1(ck_86,input_key_material_19) else caught-fail) in
        {1480}let output2_19: key = (if v_513 then hmac_hash2(ck_86,input_key_material_19) else caught-fail) in
        {1481}let output3_19: key = (if v_513 then hmac_hash3(ck_86,input_key_material_19) else caught-fail) in
        {1482}let v_514: bitstring = (if v_513 then catch-fail((output1_19,output2_19,output3_19)) else caught-fail) in
        {1483}let v_515: bool = (not-caught-fail(v_514) && success?(1-proj-3-tuple(v_514))) in
        {1484}let temp_k3_2: key = (if v_515 then 3-proj-3-tuple(v_514) else caught-fail) in
        {1485}let temp_k2_2: key = (if v_515 then 2-proj-3-tuple(v_514) else caught-fail) in
        {1486}let temp_k1_2: key = (if v_515 then 1-proj-3-tuple(v_514) else caught-fail) in
        {1487}let cs1_10: cipherstate = (if v_515 then cipherstatepack(temp_k1_2,minnonce) else caught-fail) in
        {1488}let cs2_10: cipherstate = (if v_515 then cipherstatepack(temp_k2_2,minnonce) else caught-fail) in
        {1489}let v_516: bitstring = (if v_511 then catch-fail((if v_513 then (if v_515 then (ss_76,cs1_10,cs2_10) else fail-any) else fail-any)) else caught-fail) in
        {1490}let v_517: bool = (not-caught-fail(v_516) && success?(1-proj-3-tuple(v_516))) in
        {1491}let cs2_11: cipherstate = (if v_517 then 3-proj-3-tuple(v_516) else caught-fail) in
        {1492}let cs1_11: cipherstate = (if v_517 then 2-proj-3-tuple(v_516) else caught-fail) in
        {1493}let ssi_18: symmetricstate = (if v_517 then 1-proj-3-tuple(v_516) else caught-fail) in
        {1494}let (hs_36: handshakestate,message_b_2: bitstring,cs1_12: cipherstate,cs2_12: cipherstate) = (if v_465 then (if v_467 then (if v_469 then (if v_470 then (if v_473 then (if v_481 then (if v_489 then (if v_497 then (if v_511 then (if v_517 then (hs_35,message_buffer_4,cs1_11,cs2_11) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1495}event SendMsg(me_2,them_2,stagepack_b(sid_3),msg_b(me_2,them_2,sid_3));
        {1496}insert statestore(me_2,them_2,sid_3,statepack_c(hs_36,cs1_12,cs2_12));
        {1497}out(pub, message_b_2)
    ) | (
        {1499}!
        {1565}get statestore(=me_2,=them_2,=sid_3,statepack_c(hs_37: handshakestate,cs1_13: cipherstate,cs2_13: cipherstate)) in
        {1500}let hs_38: handshakestate = handshakestatesetcs(hs_37,cs1_13) in
        {1501}in(pub, message_c_2: bitstring);
        {1502}let v_518: bitstring = catch-fail(handshakestateunpack(hs_38)) in
        {1503}let v_519: bool = (not-caught-fail(v_518) && success?(1-proj-9-tuple(v_518))) in
        {1504}let initiator_11: bool = (if v_519 then 9-proj-9-tuple(v_518) else caught-fail) in
        {1505}let psk_13: key = (if v_519 then 8-proj-9-tuple(v_518) else caught-fail) in
        {1506}let re_16: key = (if v_519 then 7-proj-9-tuple(v_518) else caught-fail) in
        {1507}let rm_14: key = (if v_519 then 6-proj-9-tuple(v_518) else caught-fail) in
        {1508}let rs_14: key = (if v_519 then 5-proj-9-tuple(v_518) else caught-fail) in
        {1509}let e_25: keypair = (if v_519 then 4-proj-9-tuple(v_518) else caught-fail) in
        {1510}let m_15: keypair = (if v_519 then 3-proj-9-tuple(v_518) else caught-fail) in
        {1511}let s_15: keypair = (if v_519 then 2-proj-9-tuple(v_518) else caught-fail) in
        {1512}let ss_77: symmetricstate = (if v_519 then 1-proj-9-tuple(v_518) else caught-fail) in
        {1513}let v_520: bitstring = (if v_519 then catch-fail(deconcat3(message_c_2)) else caught-fail) in
        {1514}let v_521: bool = (not-caught-fail(v_520) && success?(1-proj-3-tuple(v_520))) in
        {1515}let ciphertext_24: bitstring = (if v_521 then 3-proj-3-tuple(v_520) else caught-fail) in
        {1516}let ns_12: bitstring = (if v_521 then 2-proj-3-tuple(v_520) else caught-fail) in
        {1517}let ne_14: bitstring = (if v_521 then 1-proj-3-tuple(v_520) else caught-fail) in
        {1518}let valid1_6: bool = (if v_521 then true else caught-fail) in
        {1519}let v_522: bitstring = (if v_521 then catch-fail(symmetricstateunpack(ss_77)) else caught-fail) in
        {1520}let v_523: bool = (not-caught-fail(v_522) && success?(1-proj-3-tuple(v_522))) in
        {1521}let h_70: bitstring = (if v_523 then 3-proj-3-tuple(v_522) else caught-fail) in
        {1522}let ck_87: key = (if v_523 then 2-proj-3-tuple(v_522) else caught-fail) in
        {1523}let cs_70: cipherstate = (if v_523 then 1-proj-3-tuple(v_522) else caught-fail) in
        {1524}let v_524: bitstring = (if v_523 then catch-fail(cipherstateunpack(cs_70)) else caught-fail) in
        {1525}let v_525: bool = (not-caught-fail(v_524) && success?(1-proj-2-tuple(v_524))) in
        {1526}let n_32: nonce = (if v_525 then 2-proj-2-tuple(v_524) else caught-fail) in
        {1527}let k_35: key = (if v_525 then 1-proj-2-tuple(v_524) else caught-fail) in
        {1528}let d_7: aead = (if v_525 then catch-fail(decrypt(k_35,n_32,h_70,ciphertext_24)) else caught-fail) in
        {1529}let v_526: bool = not-caught-fail(d_7) in
        {1530}let v_527: bitstring = (if v_526 then catch-fail(aeadunpack(d_7)) else caught-fail) in
        {1531}let v_528: bool = (not-caught-fail(v_527) && success?(1-proj-3-tuple(v_527))) in
        {1532}let plaintext_23: bitstring = (if v_528 then 3-proj-3-tuple(v_527) else caught-fail) in
        {1533}let adi_7: bitstring = (if v_528 then 2-proj-3-tuple(v_527) else caught-fail) in
        {1534}let valid_19: bool = (if v_528 then 1-proj-3-tuple(v_527) else caught-fail) in
        {1535}let n_33: nonce = (if v_528 then increment_nonce(n_32) else caught-fail) in
        {1536}let v_529: bitstring = (if v_528 then catch-fail(cipherstateunpack(cs_70)) else caught-fail) in
        {1537}let v_530: bool = (not-caught-fail(v_529) && success?(1-proj-2-tuple(v_529))) in
        {1538}let o_16: nonce = (if v_530 then 2-proj-2-tuple(v_529) else caught-fail) in
        {1539}let k_36: key = (if v_530 then 1-proj-2-tuple(v_529) else caught-fail) in
        {1540}let csi_32: cipherstate = (if v_528 then catch-fail((if v_530 then cipherstatepack(k_36,n_33) else fail-any)) else caught-fail) in
        {1541}let v_531: bool = not-caught-fail(csi_32) in
        {1542}let v_532: bitstring = (if v_523 then catch-fail((if v_525 then (if v_526 then (if v_528 then (if v_531 then (csi_32,plaintext_23,valid_19) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1543}let v_533: bool = (not-caught-fail(v_532) && success?(1-proj-3-tuple(v_532))) in
        {1544}let valid_20: bool = (if v_533 then 3-proj-3-tuple(v_532) else caught-fail) in
        {1545}let plaintext_24: bitstring = (if v_533 then 2-proj-3-tuple(v_532) else caught-fail) in
        {1546}let csi_33: cipherstate = (if v_533 then 1-proj-3-tuple(v_532) else caught-fail) in
        {1547}let ss_78: symmetricstate = (if v_533 then symmetricstatepack(csi_33,ck_87,h_70) else caught-fail) in
        {1548}let v_534: bitstring = (if v_533 then catch-fail(symmetricstateunpack(ss_78)) else caught-fail) in
        {1549}let v_535: bool = (not-caught-fail(v_534) && success?(1-proj-3-tuple(v_534))) in
        {1550}let h_71: bitstring = (if v_535 then 3-proj-3-tuple(v_534) else caught-fail) in
        {1551}let ck_88: key = (if v_535 then 2-proj-3-tuple(v_534) else caught-fail) in
        {1552}let cs_71: cipherstate = (if v_535 then 1-proj-3-tuple(v_534) else caught-fail) in
        {1553}let ssi_19: symmetricstate = (if v_533 then catch-fail((if v_535 then symmetricstatepack(cs_71,ck_88,hash(h_71,ciphertext_24)) else fail-any)) else caught-fail) in
        {1554}let v_536: bool = not-caught-fail(ssi_19) in
        {1555}let v_537: bitstring = (if v_521 then catch-fail((if v_523 then (if v_533 then (if v_536 then (ssi_19,plaintext_24,valid_20) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1556}let v_538: bool = (not-caught-fail(v_537) && success?(1-proj-3-tuple(v_537))) in
        {1557}let valid2_6: bool = (if v_538 then 3-proj-3-tuple(v_537) else caught-fail) in
        {1558}let plaintext_25: bitstring = (if v_538 then 2-proj-3-tuple(v_537) else caught-fail) in
        {1559}let ss_79: symmetricstate = (if v_538 then 1-proj-3-tuple(v_537) else caught-fail) in
        {1560}let v_539: bool = (if v_538 then catch-fail((valid1_6 && valid2_6)) else caught-fail) in
        {1561}let hs_39: handshakestate = (if v_539 then handshakestatepack(ss_79,s_15,m_15,e_25,rs_14,rm_14,re_16,psk_13,initiator_11) else caught-fail) in
        {1562}let (hs_40: handshakestate,plaintext_c: bitstring,valid_21: bool) = (if v_519 then (if v_521 then (if v_538 then (if undo-catch-fail(v_539) then (hs_39,plaintext_25,true) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1563}event RecvMsg(me_2,them_2,stagepack_c(sid_3),plaintext_c);
        {1564}insert statestore(me_2,them_2,sid_3,statepack_d(hs_40,handshakestategetcs(hs_40),cs2_13))
    ) | (
        {1566}!
        {1623}get statestore(=me_2,=them_2,=sid_3,statepack_d(hs_41: handshakestate,cs1_14: cipherstate,cs2_14: cipherstate)) in
        {1567}let hs_42: handshakestate = handshakestatesetcs(hs_41,cs2_14) in
        {1568}let payload_5: bitstring = msg_d(me_2,them_2,sid_3) in
        {1569}let v_540: bitstring = catch-fail(handshakestateunpack(hs_42)) in
        {1570}let v_541: bool = (not-caught-fail(v_540) && success?(1-proj-9-tuple(v_540))) in
        {1571}let initiator_12: bool = (if v_541 then 9-proj-9-tuple(v_540) else caught-fail) in
        {1572}let psk_14: key = (if v_541 then 8-proj-9-tuple(v_540) else caught-fail) in
        {1573}let re_17: key = (if v_541 then 7-proj-9-tuple(v_540) else caught-fail) in
        {1574}let rm_15: key = (if v_541 then 6-proj-9-tuple(v_540) else caught-fail) in
        {1575}let rs_15: key = (if v_541 then 5-proj-9-tuple(v_540) else caught-fail) in
        {1576}let e_26: keypair = (if v_541 then 4-proj-9-tuple(v_540) else caught-fail) in
        {1577}let m_16: keypair = (if v_541 then 3-proj-9-tuple(v_540) else caught-fail) in
        {1578}let s_16: keypair = (if v_541 then 2-proj-9-tuple(v_540) else caught-fail) in
        {1579}let ss_80: symmetricstate = (if v_541 then 1-proj-9-tuple(v_540) else caught-fail) in
        {1580}let v_542: bitstring = (if v_541 then catch-fail((empty,empty,empty)) else caught-fail) in
        {1581}let v_543: bool = (not-caught-fail(v_542) && success?(1-proj-3-tuple(v_542))) in
        {1582}let ciphertext_25: bitstring = (if v_543 then 3-proj-3-tuple(v_542) else caught-fail) in
        {1583}let ns_13: bitstring = (if v_543 then 2-proj-3-tuple(v_542) else caught-fail) in
        {1584}let ne_15: bitstring = (if v_543 then 1-proj-3-tuple(v_542) else caught-fail) in
        {1585}let v_544: bitstring = (if v_543 then catch-fail(symmetricstateunpack(ss_80)) else caught-fail) in
        {1586}let v_545: bool = (not-caught-fail(v_544) && success?(1-proj-3-tuple(v_544))) in
        {1587}let h_72: bitstring = (if v_545 then 3-proj-3-tuple(v_544) else caught-fail) in
        {1588}let ck_89: key = (if v_545 then 2-proj-3-tuple(v_544) else caught-fail) in
        {1589}let cs_72: cipherstate = (if v_545 then 1-proj-3-tuple(v_544) else caught-fail) in
        {1590}let v_546: bitstring = (if v_545 then catch-fail(cipherstateunpack(cs_72)) else caught-fail) in
        {1591}let v_547: bool = (not-caught-fail(v_546) && success?(1-proj-2-tuple(v_546))) in
        {1592}let n_34: nonce = (if v_547 then 2-proj-2-tuple(v_546) else caught-fail) in
        {1593}let k_37: key = (if v_547 then 1-proj-2-tuple(v_546) else caught-fail) in
        {1594}let e_27: bitstring = (if v_547 then encrypt(k_37,n_34,h_72,payload_5) else caught-fail) in
        {1595}let n_35: nonce = (if v_547 then increment_nonce(n_34) else caught-fail) in
        {1596}let v_548: bitstring = (if v_547 then catch-fail(cipherstateunpack(cs_72)) else caught-fail) in
        {1597}let v_549: bool = (not-caught-fail(v_548) && success?(1-proj-2-tuple(v_548))) in
        {1598}let o_17: nonce = (if v_549 then 2-proj-2-tuple(v_548) else caught-fail) in
        {1599}let k_38: key = (if v_549 then 1-proj-2-tuple(v_548) else caught-fail) in
        {1600}let csi_34: cipherstate = (if v_547 then catch-fail((if v_549 then cipherstatepack(k_38,n_35) else fail-any)) else caught-fail) in
        {1601}let v_550: bool = not-caught-fail(csi_34) in
        {1602}let v_551: bitstring = (if v_545 then catch-fail((if v_547 then (if v_550 then (csi_34,e_27) else fail-any) else fail-any)) else caught-fail) in
        {1603}let v_552: bool = (not-caught-fail(v_551) && success?(1-proj-2-tuple(v_551))) in
        {1604}let ciphertext_26: bitstring = (if v_552 then 2-proj-2-tuple(v_551) else caught-fail) in
        {1605}let csi_35: cipherstate = (if v_552 then 1-proj-2-tuple(v_551) else caught-fail) in
        {1606}let ss_81: symmetricstate = (if v_552 then symmetricstatepack(csi_35,ck_89,h_72) else caught-fail) in
        {1607}let v_553: bitstring = (if v_552 then catch-fail(symmetricstateunpack(ss_81)) else caught-fail) in
        {1608}let v_554: bool = (not-caught-fail(v_553) && success?(1-proj-3-tuple(v_553))) in
        {1609}let h_73: bitstring = (if v_554 then 3-proj-3-tuple(v_553) else caught-fail) in
        {1610}let ck_90: key = (if v_554 then 2-proj-3-tuple(v_553) else caught-fail) in
        {1611}let cs_73: cipherstate = (if v_554 then 1-proj-3-tuple(v_553) else caught-fail) in
        {1612}let ssi_20: symmetricstate = (if v_552 then catch-fail((if v_554 then symmetricstatepack(cs_73,ck_90,hash(h_73,ciphertext_26)) else fail-any)) else caught-fail) in
        {1613}let v_555: bool = not-caught-fail(ssi_20) in
        {1614}let v_556: bitstring = (if v_543 then catch-fail((if v_545 then (if v_552 then (if v_555 then (ssi_20,ciphertext_26) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1615}let v_557: bool = (not-caught-fail(v_556) && success?(1-proj-2-tuple(v_556))) in
        {1616}let ciphertext_27: bitstring = (if v_557 then 2-proj-2-tuple(v_556) else caught-fail) in
        {1617}let ss_82: symmetricstate = (if v_557 then 1-proj-2-tuple(v_556) else caught-fail) in
        {1618}let hs_43: handshakestate = (if v_557 then handshakestatepack(ss_82,s_16,m_16,e_26,rs_15,rm_15,re_17,psk_14,initiator_12) else caught-fail) in
        {1619}let message_buffer_5: bitstring = (if v_557 then concat3(ne_15,ns_13,ciphertext_27) else caught-fail) in
        {1620}let (hs_44: handshakestate,message_d_2: bitstring) = (if v_541 then (if v_543 then (if v_557 then (hs_43,message_buffer_5) else fail-any) else fail-any) else fail-any) in
        {1621}event SendMsg(me_2,them_2,stagepack_d(sid_3),msg_d(me_2,them_2,sid_3));
        {1622}out(pub, message_d_2)
    ) | (
        {1624}event LeakS(phase0,me_2);
        {1625}event LeakM(phase0,me_2);
        {1626}out(pub, (key_s(me_2),key_m(me_2)))
    ) | (
        {1627}phase 1;
        {1628}event LeakS(phase1,me_2);
        {1629}event LeakM(phase1,me_2);
        {1630}out(pub, (key_s(me_2),key_m(me_2)))
    )
) | (
    {1631}let me_4: principal = bob in
    {1632}let them_3: principal = charlie in
    {1633}let sid_4: sessionid = sid in
    {1634}let basis_13: key = key_s(me_4) in
    {1635}let public_key_13: key = catch-fail(dhexp(basis_13,validkey(g))) in
    {1636}let v_558: bool = not-caught-fail(public_key_13) in
    {1637}let s_17: keypair = (if v_558 then keypairpack(validkey(public_key_13),basis_13) else fail-any) in
    {1638}let basis_14: key = key_m(me_4) in
    {1639}let public_key_14: key = catch-fail(dhexp(basis_14,validkey(g))) in
    {1640}let v_559: bool = not-caught-fail(public_key_14) in
    {1641}let m_17: keypair = (if v_559 then keypairpack(validkey(public_key_14),basis_14) else fail-any) in
    {1642}out(pub, (getpublickey(s_17),getpublickey(m_17)));
    (
        {1643}let e_28: keypair = keypairpack(empty,empty) in
        {1644}let rs_16: key = empty in
        {1645}let rm_16: key = empty in
        {1646}let re_18: key = empty in
        {1647}let prologue_3: bitstring = empty in
        {1648}let psk_15: key = empty in
        {1649}let protocol_name_3: bitstring = somename in
        {1650}let h_74: bitstring = hash(protocol_name_3,empty) in
        {1651}let ck_91: key = h_74 in
        {1652}let k_39: key = empty in
        {1653}let cs_74: cipherstate = cipherstatepack(k_39,minnonce) in
        {1654}let ss_83: symmetricstate = symmetricstatepack(cs_74,ck_91,h_74) in
        {1655}let v_560: bitstring = catch-fail(symmetricstateunpack(ss_83)) in
        {1656}let v_561: bool = (not-caught-fail(v_560) && success?(1-proj-3-tuple(v_560))) in
        {1657}let h_75: bitstring = (if v_561 then 3-proj-3-tuple(v_560) else caught-fail) in
        {1658}let ck_92: key = (if v_561 then 2-proj-3-tuple(v_560) else caught-fail) in
        {1659}let cs_75: cipherstate = (if v_561 then 1-proj-3-tuple(v_560) else caught-fail) in
        {1660}let ss_84: symmetricstate = catch-fail((if v_561 then symmetricstatepack(cs_75,ck_92,hash(h_75,prologue_3)) else fail-any)) in
        {1661}let v_562: bool = not-caught-fail(ss_84) in
        {1662}let data_2: bitstring = (if v_562 then catch-fail(getpublickey(s_17)) else caught-fail) in
        {1663}let v_563: bool = not-caught-fail(data_2) in
        {1664}let v_564: bitstring = (if v_563 then catch-fail(symmetricstateunpack(ss_84)) else caught-fail) in
        {1665}let v_565: bool = (not-caught-fail(v_564) && success?(1-proj-3-tuple(v_564))) in
        {1666}let h_76: bitstring = (if v_565 then 3-proj-3-tuple(v_564) else caught-fail) in
        {1667}let ck_93: key = (if v_565 then 2-proj-3-tuple(v_564) else caught-fail) in
        {1668}let cs_76: cipherstate = (if v_565 then 1-proj-3-tuple(v_564) else caught-fail) in
        {1669}let ss_85: symmetricstate = (if v_562 then catch-fail((if v_563 then (if v_565 then symmetricstatepack(cs_76,ck_93,hash(h_76,data_2)) else fail-any) else fail-any)) else caught-fail) in
        {1670}let v_566: bool = not-caught-fail(ss_85) in
        {1671}let data_3: bitstring = (if v_566 then catch-fail(getpublickey(m_17)) else caught-fail) in
        {1672}let v_567: bool = not-caught-fail(data_3) in
        {1673}let v_568: bitstring = (if v_567 then catch-fail(symmetricstateunpack(ss_85)) else caught-fail) in
        {1674}let v_569: bool = (not-caught-fail(v_568) && success?(1-proj-3-tuple(v_568))) in
        {1675}let h_77: bitstring = (if v_569 then 3-proj-3-tuple(v_568) else caught-fail) in
        {1676}let ck_94: key = (if v_569 then 2-proj-3-tuple(v_568) else caught-fail) in
        {1677}let cs_77: cipherstate = (if v_569 then 1-proj-3-tuple(v_568) else caught-fail) in
        {1678}let ss_86: symmetricstate = (if v_566 then catch-fail((if v_567 then (if v_569 then symmetricstatepack(cs_77,ck_94,hash(h_77,data_3)) else fail-any) else fail-any)) else caught-fail) in
        {1679}let v_570: bool = not-caught-fail(ss_86) in
        {1680}let hs_45: handshakestate = (if v_562 then (if v_566 then (if v_570 then handshakestatepack(ss_86,s_17,m_17,e_28,rs_16,rm_16,re_18,psk_15,false) else fail-any) else fail-any) else fail-any) in
        {1681}insert statestore(me_4,them_3,sid_4,statepack_a(hs_45))
    ) | (
        {1924}get statestore(=me_4,=them_3,=sid_4,statepack_a(hs_46: handshakestate)) in
        {1682}in(pub, message_a_3: bitstring);
        {1683}let v_571: bitstring = catch-fail(handshakestateunpack(hs_46)) in
        {1684}let v_572: bool = (not-caught-fail(v_571) && success?(1-proj-9-tuple(v_571))) in
        {1685}let initiator_13: bool = (if v_572 then 9-proj-9-tuple(v_571) else caught-fail) in
        {1686}let psk_16: key = (if v_572 then 8-proj-9-tuple(v_571) else caught-fail) in
        {1687}let re_19: key = (if v_572 then 7-proj-9-tuple(v_571) else caught-fail) in
        {1688}let rm_17: key = (if v_572 then 6-proj-9-tuple(v_571) else caught-fail) in
        {1689}let rs_17: key = (if v_572 then 5-proj-9-tuple(v_571) else caught-fail) in
        {1690}let e_29: keypair = (if v_572 then 4-proj-9-tuple(v_571) else caught-fail) in
        {1691}let m_18: keypair = (if v_572 then 3-proj-9-tuple(v_571) else caught-fail) in
        {1692}let s_18: keypair = (if v_572 then 2-proj-9-tuple(v_571) else caught-fail) in
        {1693}let ss_87: symmetricstate = (if v_572 then 1-proj-9-tuple(v_571) else caught-fail) in
        {1694}let v_573: bitstring = (if v_572 then catch-fail((empty,empty,empty,empty)) else caught-fail) in
        {1695}let v_574: bool = (not-caught-fail(v_573) && success?(1-proj-4-tuple(v_573))) in
        {1696}let ciphertext_28: bitstring = (if v_574 then 4-proj-4-tuple(v_573) else caught-fail) in
        {1697}let nm_5: bitstring = (if v_574 then 3-proj-4-tuple(v_573) else caught-fail) in
        {1698}let ns_14: bitstring = (if v_574 then 2-proj-4-tuple(v_573) else caught-fail) in
        {1699}let ne_16: bitstring = (if v_574 then 1-proj-4-tuple(v_573) else caught-fail) in
        {1700}let valid1_7: bool = (if v_574 then true else caught-fail) in
        {1701}let valid2_7: bool = (if v_574 then true else caught-fail) in
        {1702}let re_20: key = (if v_574 then ne_16 else caught-fail) in
        {1703}let v_575: bitstring = (if v_574 then catch-fail(symmetricstateunpack(ss_87)) else caught-fail) in
        {1704}let v_576: bool = (not-caught-fail(v_575) && success?(1-proj-3-tuple(v_575))) in
        {1705}let h_78: bitstring = (if v_576 then 3-proj-3-tuple(v_575) else caught-fail) in
        {1706}let ck_95: key = (if v_576 then 2-proj-3-tuple(v_575) else caught-fail) in
        {1707}let cs_78: cipherstate = (if v_576 then 1-proj-3-tuple(v_575) else caught-fail) in
        {1708}let ss_88: symmetricstate = (if v_574 then catch-fail((if v_576 then symmetricstatepack(cs_78,ck_95,hash(h_78,re_20)) else fail-any)) else caught-fail) in
        {1709}let v_577: bool = not-caught-fail(ss_88) in
        {1710}let v_578: bitstring = (if v_577 then catch-fail(keypairunpack(s_18)) else caught-fail) in
        {1711}let v_579: bool = (not-caught-fail(v_578) && success?(1-proj-2-tuple(v_578))) in
        {1712}let my_private_key_17: key = (if v_579 then 2-proj-2-tuple(v_578) else caught-fail) in
        {1713}let my_public_key_17: key = (if v_579 then 1-proj-2-tuple(v_578) else caught-fail) in
        {1714}let input_key_material_20: key = (if v_577 then catch-fail((if v_579 then dhexp(my_private_key_17,re_20) else fail-any)) else caught-fail) in
        {1715}let v_580: bool = not-caught-fail(input_key_material_20) in
        {1716}let v_581: bitstring = (if v_580 then catch-fail(symmetricstateunpack(ss_88)) else caught-fail) in
        {1717}let v_582: bool = (not-caught-fail(v_581) && success?(1-proj-3-tuple(v_581))) in
        {1718}let h_79: bitstring = (if v_582 then 3-proj-3-tuple(v_581) else caught-fail) in
        {1719}let ck_96: key = (if v_582 then 2-proj-3-tuple(v_581) else caught-fail) in
        {1720}let cs_79: cipherstate = (if v_582 then 1-proj-3-tuple(v_581) else caught-fail) in
        {1721}let output1_20: key = (if v_582 then hmac_hash1(ck_96,input_key_material_20) else caught-fail) in
        {1722}let output2_20: key = (if v_582 then hmac_hash2(ck_96,input_key_material_20) else caught-fail) in
        {1723}let output3_20: key = (if v_582 then hmac_hash3(ck_96,input_key_material_20) else caught-fail) in
        {1724}let v_583: bitstring = (if v_582 then catch-fail((output1_20,output2_20,output3_20)) else caught-fail) in
        {1725}let v_584: bool = (not-caught-fail(v_583) && success?(1-proj-3-tuple(v_583))) in
        {1726}let output_17: key = (if v_584 then 3-proj-3-tuple(v_583) else caught-fail) in
        {1727}let temp_k_17: key = (if v_584 then 2-proj-3-tuple(v_583) else caught-fail) in
        {1728}let ck_97: key = (if v_584 then 1-proj-3-tuple(v_583) else caught-fail) in
        {1729}let ss_89: symmetricstate = (if v_577 then catch-fail((if v_580 then (if v_582 then (if v_584 then symmetricstatepack(cipherstatepack(temp_k_17,minnonce),ck_97,h_79) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1730}let v_585: bool = not-caught-fail(ss_89) in
        {1731}let v_586: bitstring = (if v_585 then catch-fail(keypairunpack(m_18)) else caught-fail) in
        {1732}let v_587: bool = (not-caught-fail(v_586) && success?(1-proj-2-tuple(v_586))) in
        {1733}let my_private_key_18: key = (if v_587 then 2-proj-2-tuple(v_586) else caught-fail) in
        {1734}let my_public_key_18: key = (if v_587 then 1-proj-2-tuple(v_586) else caught-fail) in
        {1735}let input_key_material_21: key = (if v_585 then catch-fail((if v_587 then dhexp(my_private_key_18,re_20) else fail-any)) else caught-fail) in
        {1736}let v_588: bool = not-caught-fail(input_key_material_21) in
        {1737}let v_589: bitstring = (if v_588 then catch-fail(symmetricstateunpack(ss_89)) else caught-fail) in
        {1738}let v_590: bool = (not-caught-fail(v_589) && success?(1-proj-3-tuple(v_589))) in
        {1739}let h_80: bitstring = (if v_590 then 3-proj-3-tuple(v_589) else caught-fail) in
        {1740}let ck_98: key = (if v_590 then 2-proj-3-tuple(v_589) else caught-fail) in
        {1741}let cs_80: cipherstate = (if v_590 then 1-proj-3-tuple(v_589) else caught-fail) in
        {1742}let output1_21: key = (if v_590 then hmac_hash1(ck_98,input_key_material_21) else caught-fail) in
        {1743}let output2_21: key = (if v_590 then hmac_hash2(ck_98,input_key_material_21) else caught-fail) in
        {1744}let output3_21: key = (if v_590 then hmac_hash3(ck_98,input_key_material_21) else caught-fail) in
        {1745}let v_591: bitstring = (if v_590 then catch-fail((output1_21,output2_21,output3_21)) else caught-fail) in
        {1746}let v_592: bool = (not-caught-fail(v_591) && success?(1-proj-3-tuple(v_591))) in
        {1747}let output_18: key = (if v_592 then 3-proj-3-tuple(v_591) else caught-fail) in
        {1748}let temp_k_18: key = (if v_592 then 2-proj-3-tuple(v_591) else caught-fail) in
        {1749}let ck_99: key = (if v_592 then 1-proj-3-tuple(v_591) else caught-fail) in
        {1750}let ss_90: symmetricstate = (if v_585 then catch-fail((if v_588 then (if v_590 then (if v_592 then symmetricstatepack(cipherstatepack(temp_k_18,minnonce),ck_99,h_80) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1751}let v_593: bool = not-caught-fail(ss_90) in
        {1752}let v_594: bitstring = (if v_593 then catch-fail(symmetricstateunpack(ss_90)) else caught-fail) in
        {1753}let v_595: bool = (not-caught-fail(v_594) && success?(1-proj-3-tuple(v_594))) in
        {1754}let h_81: bitstring = (if v_595 then 3-proj-3-tuple(v_594) else caught-fail) in
        {1755}let ck_100: key = (if v_595 then 2-proj-3-tuple(v_594) else caught-fail) in
        {1756}let cs_81: cipherstate = (if v_595 then 1-proj-3-tuple(v_594) else caught-fail) in
        {1757}let v_596: bitstring = (if v_595 then catch-fail(cipherstateunpack(cs_81)) else caught-fail) in
        {1758}let v_597: bool = (not-caught-fail(v_596) && success?(1-proj-2-tuple(v_596))) in
        {1759}let n_36: nonce = (if v_597 then 2-proj-2-tuple(v_596) else caught-fail) in
        {1760}let k_40: key = (if v_597 then 1-proj-2-tuple(v_596) else caught-fail) in
        {1761}let d_8: aead = (if v_597 then catch-fail(decrypt(k_40,n_36,h_81,ns_14)) else caught-fail) in
        {1762}let v_598: bool = not-caught-fail(d_8) in
        {1763}let v_599: bitstring = (if v_598 then catch-fail(aeadunpack(d_8)) else caught-fail) in
        {1764}let v_600: bool = (not-caught-fail(v_599) && success?(1-proj-3-tuple(v_599))) in
        {1765}let plaintext_26: bitstring = (if v_600 then 3-proj-3-tuple(v_599) else caught-fail) in
        {1766}let adi_8: bitstring = (if v_600 then 2-proj-3-tuple(v_599) else caught-fail) in
        {1767}let valid_22: bool = (if v_600 then 1-proj-3-tuple(v_599) else caught-fail) in
        {1768}let n_37: nonce = (if v_600 then increment_nonce(n_36) else caught-fail) in
        {1769}let v_601: bitstring = (if v_600 then catch-fail(cipherstateunpack(cs_81)) else caught-fail) in
        {1770}let v_602: bool = (not-caught-fail(v_601) && success?(1-proj-2-tuple(v_601))) in
        {1771}let o_18: nonce = (if v_602 then 2-proj-2-tuple(v_601) else caught-fail) in
        {1772}let k_41: key = (if v_602 then 1-proj-2-tuple(v_601) else caught-fail) in
        {1773}let csi_36: cipherstate = (if v_600 then catch-fail((if v_602 then cipherstatepack(k_41,n_37) else fail-any)) else caught-fail) in
        {1774}let v_603: bool = not-caught-fail(csi_36) in
        {1775}let v_604: bitstring = (if v_595 then catch-fail((if v_597 then (if v_598 then (if v_600 then (if v_603 then (csi_36,plaintext_26,valid_22) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1776}let v_605: bool = (not-caught-fail(v_604) && success?(1-proj-3-tuple(v_604))) in
        {1777}let valid_23: bool = (if v_605 then 3-proj-3-tuple(v_604) else caught-fail) in
        {1778}let plaintext_27: bitstring = (if v_605 then 2-proj-3-tuple(v_604) else caught-fail) in
        {1779}let csi_37: cipherstate = (if v_605 then 1-proj-3-tuple(v_604) else caught-fail) in
        {1780}let ss_91: symmetricstate = (if v_605 then symmetricstatepack(csi_37,ck_100,h_81) else caught-fail) in
        {1781}let v_606: bitstring = (if v_605 then catch-fail(symmetricstateunpack(ss_91)) else caught-fail) in
        {1782}let v_607: bool = (not-caught-fail(v_606) && success?(1-proj-3-tuple(v_606))) in
        {1783}let h_82: bitstring = (if v_607 then 3-proj-3-tuple(v_606) else caught-fail) in
        {1784}let ck_101: key = (if v_607 then 2-proj-3-tuple(v_606) else caught-fail) in
        {1785}let cs_82: cipherstate = (if v_607 then 1-proj-3-tuple(v_606) else caught-fail) in
        {1786}let ssi_21: symmetricstate = (if v_605 then catch-fail((if v_607 then symmetricstatepack(cs_82,ck_101,hash(h_82,ns_14)) else fail-any)) else caught-fail) in
        {1787}let v_608: bool = not-caught-fail(ssi_21) in
        {1788}let v_609: bitstring = (if v_593 then catch-fail((if v_595 then (if v_605 then (if v_608 then (ssi_21,plaintext_27,valid_23) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1789}let v_610: bool = (not-caught-fail(v_609) && success?(1-proj-3-tuple(v_609))) in
        {1790}let valid1_8: bool = (if v_610 then 3-proj-3-tuple(v_609) else caught-fail) in
        {1791}let ne_17: bitstring = (if v_610 then 2-proj-3-tuple(v_609) else caught-fail) in
        {1792}let ss_92: symmetricstate = (if v_610 then 1-proj-3-tuple(v_609) else caught-fail) in
        {1793}let rs_18: key = (if v_610 then ne_17 else caught-fail) in
        {1794}let v_611: bitstring = (if v_610 then catch-fail(symmetricstateunpack(ss_92)) else caught-fail) in
        {1795}let v_612: bool = (not-caught-fail(v_611) && success?(1-proj-3-tuple(v_611))) in
        {1796}let h_83: bitstring = (if v_612 then 3-proj-3-tuple(v_611) else caught-fail) in
        {1797}let ck_102: key = (if v_612 then 2-proj-3-tuple(v_611) else caught-fail) in
        {1798}let cs_83: cipherstate = (if v_612 then 1-proj-3-tuple(v_611) else caught-fail) in
        {1799}let v_613: bitstring = (if v_612 then catch-fail(cipherstateunpack(cs_83)) else caught-fail) in
        {1800}let v_614: bool = (not-caught-fail(v_613) && success?(1-proj-2-tuple(v_613))) in
        {1801}let n_38: nonce = (if v_614 then 2-proj-2-tuple(v_613) else caught-fail) in
        {1802}let k_42: key = (if v_614 then 1-proj-2-tuple(v_613) else caught-fail) in
        {1803}let d_9: aead = (if v_614 then catch-fail(decrypt(k_42,n_38,h_83,nm_5)) else caught-fail) in
        {1804}let v_615: bool = not-caught-fail(d_9) in
        {1805}let v_616: bitstring = (if v_615 then catch-fail(aeadunpack(d_9)) else caught-fail) in
        {1806}let v_617: bool = (not-caught-fail(v_616) && success?(1-proj-3-tuple(v_616))) in
        {1807}let plaintext_28: bitstring = (if v_617 then 3-proj-3-tuple(v_616) else caught-fail) in
        {1808}let adi_9: bitstring = (if v_617 then 2-proj-3-tuple(v_616) else caught-fail) in
        {1809}let valid_24: bool = (if v_617 then 1-proj-3-tuple(v_616) else caught-fail) in
        {1810}let n_39: nonce = (if v_617 then increment_nonce(n_38) else caught-fail) in
        {1811}let v_618: bitstring = (if v_617 then catch-fail(cipherstateunpack(cs_83)) else caught-fail) in
        {1812}let v_619: bool = (not-caught-fail(v_618) && success?(1-proj-2-tuple(v_618))) in
        {1813}let o_19: nonce = (if v_619 then 2-proj-2-tuple(v_618) else caught-fail) in
        {1814}let k_43: key = (if v_619 then 1-proj-2-tuple(v_618) else caught-fail) in
        {1815}let csi_38: cipherstate = (if v_617 then catch-fail((if v_619 then cipherstatepack(k_43,n_39) else fail-any)) else caught-fail) in
        {1816}let v_620: bool = not-caught-fail(csi_38) in
        {1817}let v_621: bitstring = (if v_612 then catch-fail((if v_614 then (if v_615 then (if v_617 then (if v_620 then (csi_38,plaintext_28,valid_24) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1818}let v_622: bool = (not-caught-fail(v_621) && success?(1-proj-3-tuple(v_621))) in
        {1819}let valid_25: bool = (if v_622 then 3-proj-3-tuple(v_621) else caught-fail) in
        {1820}let plaintext_29: bitstring = (if v_622 then 2-proj-3-tuple(v_621) else caught-fail) in
        {1821}let csi_39: cipherstate = (if v_622 then 1-proj-3-tuple(v_621) else caught-fail) in
        {1822}let ss_93: symmetricstate = (if v_622 then symmetricstatepack(csi_39,ck_102,h_83) else caught-fail) in
        {1823}let v_623: bitstring = (if v_622 then catch-fail(symmetricstateunpack(ss_93)) else caught-fail) in
        {1824}let v_624: bool = (not-caught-fail(v_623) && success?(1-proj-3-tuple(v_623))) in
        {1825}let h_84: bitstring = (if v_624 then 3-proj-3-tuple(v_623) else caught-fail) in
        {1826}let ck_103: key = (if v_624 then 2-proj-3-tuple(v_623) else caught-fail) in
        {1827}let cs_84: cipherstate = (if v_624 then 1-proj-3-tuple(v_623) else caught-fail) in
        {1828}let ssi_22: symmetricstate = (if v_622 then catch-fail((if v_624 then symmetricstatepack(cs_84,ck_103,hash(h_84,nm_5)) else fail-any)) else caught-fail) in
        {1829}let v_625: bool = not-caught-fail(ssi_22) in
        {1830}let v_626: bitstring = (if v_610 then catch-fail((if v_612 then (if v_622 then (if v_625 then (ssi_22,plaintext_29,valid_25) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1831}let v_627: bool = (not-caught-fail(v_626) && success?(1-proj-3-tuple(v_626))) in
        {1832}let valid2_8: bool = (if v_627 then 3-proj-3-tuple(v_626) else caught-fail) in
        {1833}let me_5: bitstring = (if v_627 then 2-proj-3-tuple(v_626) else caught-fail) in
        {1834}let ss_94: symmetricstate = (if v_627 then 1-proj-3-tuple(v_626) else caught-fail) in
        {1835}let rm_18: key = (if v_627 then me_5 else caught-fail) in
        {1836}let v_628: bitstring = (if v_627 then catch-fail(keypairunpack(s_18)) else caught-fail) in
        {1837}let v_629: bool = (not-caught-fail(v_628) && success?(1-proj-2-tuple(v_628))) in
        {1838}let my_private_key_19: key = (if v_629 then 2-proj-2-tuple(v_628) else caught-fail) in
        {1839}let my_public_key_19: key = (if v_629 then 1-proj-2-tuple(v_628) else caught-fail) in
        {1840}let input_key_material_22: key = (if v_627 then catch-fail((if v_629 then dhexp(my_private_key_19,rm_18) else fail-any)) else caught-fail) in
        {1841}let v_630: bool = not-caught-fail(input_key_material_22) in
        {1842}let v_631: bitstring = (if v_630 then catch-fail(symmetricstateunpack(ss_94)) else caught-fail) in
        {1843}let v_632: bool = (not-caught-fail(v_631) && success?(1-proj-3-tuple(v_631))) in
        {1844}let h_85: bitstring = (if v_632 then 3-proj-3-tuple(v_631) else caught-fail) in
        {1845}let ck_104: key = (if v_632 then 2-proj-3-tuple(v_631) else caught-fail) in
        {1846}let cs_85: cipherstate = (if v_632 then 1-proj-3-tuple(v_631) else caught-fail) in
        {1847}let output1_22: key = (if v_632 then hmac_hash1(ck_104,input_key_material_22) else caught-fail) in
        {1848}let output2_22: key = (if v_632 then hmac_hash2(ck_104,input_key_material_22) else caught-fail) in
        {1849}let output3_22: key = (if v_632 then hmac_hash3(ck_104,input_key_material_22) else caught-fail) in
        {1850}let v_633: bitstring = (if v_632 then catch-fail((output1_22,output2_22,output3_22)) else caught-fail) in
        {1851}let v_634: bool = (not-caught-fail(v_633) && success?(1-proj-3-tuple(v_633))) in
        {1852}let output_19: key = (if v_634 then 3-proj-3-tuple(v_633) else caught-fail) in
        {1853}let temp_k_19: key = (if v_634 then 2-proj-3-tuple(v_633) else caught-fail) in
        {1854}let ck_105: key = (if v_634 then 1-proj-3-tuple(v_633) else caught-fail) in
        {1855}let ss_95: symmetricstate = (if v_627 then catch-fail((if v_630 then (if v_632 then (if v_634 then symmetricstatepack(cipherstatepack(temp_k_19,minnonce),ck_105,h_85) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1856}let v_635: bool = not-caught-fail(ss_95) in
        {1857}let v_636: bitstring = (if v_635 then catch-fail(keypairunpack(m_18)) else caught-fail) in
        {1858}let v_637: bool = (not-caught-fail(v_636) && success?(1-proj-2-tuple(v_636))) in
        {1859}let my_private_key_20: key = (if v_637 then 2-proj-2-tuple(v_636) else caught-fail) in
        {1860}let my_public_key_20: key = (if v_637 then 1-proj-2-tuple(v_636) else caught-fail) in
        {1861}let input_key_material_23: key = (if v_635 then catch-fail((if v_637 then dhexp(my_private_key_20,rs_18) else fail-any)) else caught-fail) in
        {1862}let v_638: bool = not-caught-fail(input_key_material_23) in
        {1863}let v_639: bitstring = (if v_638 then catch-fail(symmetricstateunpack(ss_95)) else caught-fail) in
        {1864}let v_640: bool = (not-caught-fail(v_639) && success?(1-proj-3-tuple(v_639))) in
        {1865}let h_86: bitstring = (if v_640 then 3-proj-3-tuple(v_639) else caught-fail) in
        {1866}let ck_106: key = (if v_640 then 2-proj-3-tuple(v_639) else caught-fail) in
        {1867}let cs_86: cipherstate = (if v_640 then 1-proj-3-tuple(v_639) else caught-fail) in
        {1868}let output1_23: key = (if v_640 then hmac_hash1(ck_106,input_key_material_23) else caught-fail) in
        {1869}let output2_23: key = (if v_640 then hmac_hash2(ck_106,input_key_material_23) else caught-fail) in
        {1870}let output3_23: key = (if v_640 then hmac_hash3(ck_106,input_key_material_23) else caught-fail) in
        {1871}let v_641: bitstring = (if v_640 then catch-fail((output1_23,output2_23,output3_23)) else caught-fail) in
        {1872}let v_642: bool = (not-caught-fail(v_641) && success?(1-proj-3-tuple(v_641))) in
        {1873}let output_20: key = (if v_642 then 3-proj-3-tuple(v_641) else caught-fail) in
        {1874}let temp_k_20: key = (if v_642 then 2-proj-3-tuple(v_641) else caught-fail) in
        {1875}let ck_107: key = (if v_642 then 1-proj-3-tuple(v_641) else caught-fail) in
        {1876}let ss_96: symmetricstate = (if v_635 then catch-fail((if v_638 then (if v_640 then (if v_642 then symmetricstatepack(cipherstatepack(temp_k_20,minnonce),ck_107,h_86) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1877}let v_643: bool = not-caught-fail(ss_96) in
        {1878}let v_644: bitstring = (if v_643 then catch-fail(symmetricstateunpack(ss_96)) else caught-fail) in
        {1879}let v_645: bool = (not-caught-fail(v_644) && success?(1-proj-3-tuple(v_644))) in
        {1880}let h_87: bitstring = (if v_645 then 3-proj-3-tuple(v_644) else caught-fail) in
        {1881}let ck_108: key = (if v_645 then 2-proj-3-tuple(v_644) else caught-fail) in
        {1882}let cs_87: cipherstate = (if v_645 then 1-proj-3-tuple(v_644) else caught-fail) in
        {1883}let v_646: bitstring = (if v_645 then catch-fail(cipherstateunpack(cs_87)) else caught-fail) in
        {1884}let v_647: bool = (not-caught-fail(v_646) && success?(1-proj-2-tuple(v_646))) in
        {1885}let n_40: nonce = (if v_647 then 2-proj-2-tuple(v_646) else caught-fail) in
        {1886}let k_44: key = (if v_647 then 1-proj-2-tuple(v_646) else caught-fail) in
        {1887}let d_10: aead = (if v_647 then catch-fail(decrypt(k_44,n_40,h_87,ciphertext_28)) else caught-fail) in
        {1888}let v_648: bool = not-caught-fail(d_10) in
        {1889}let v_649: bitstring = (if v_648 then catch-fail(aeadunpack(d_10)) else caught-fail) in
        {1890}let v_650: bool = (not-caught-fail(v_649) && success?(1-proj-3-tuple(v_649))) in
        {1891}let plaintext_30: bitstring = (if v_650 then 3-proj-3-tuple(v_649) else caught-fail) in
        {1892}let adi_10: bitstring = (if v_650 then 2-proj-3-tuple(v_649) else caught-fail) in
        {1893}let valid_26: bool = (if v_650 then 1-proj-3-tuple(v_649) else caught-fail) in
        {1894}let n_41: nonce = (if v_650 then increment_nonce(n_40) else caught-fail) in
        {1895}let v_651: bitstring = (if v_650 then catch-fail(cipherstateunpack(cs_87)) else caught-fail) in
        {1896}let v_652: bool = (not-caught-fail(v_651) && success?(1-proj-2-tuple(v_651))) in
        {1897}let o_20: nonce = (if v_652 then 2-proj-2-tuple(v_651) else caught-fail) in
        {1898}let k_45: key = (if v_652 then 1-proj-2-tuple(v_651) else caught-fail) in
        {1899}let csi_40: cipherstate = (if v_650 then catch-fail((if v_652 then cipherstatepack(k_45,n_41) else fail-any)) else caught-fail) in
        {1900}let v_653: bool = not-caught-fail(csi_40) in
        {1901}let v_654: bitstring = (if v_645 then catch-fail((if v_647 then (if v_648 then (if v_650 then (if v_653 then (csi_40,plaintext_30,valid_26) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1902}let v_655: bool = (not-caught-fail(v_654) && success?(1-proj-3-tuple(v_654))) in
        {1903}let valid_27: bool = (if v_655 then 3-proj-3-tuple(v_654) else caught-fail) in
        {1904}let plaintext_31: bitstring = (if v_655 then 2-proj-3-tuple(v_654) else caught-fail) in
        {1905}let csi_41: cipherstate = (if v_655 then 1-proj-3-tuple(v_654) else caught-fail) in
        {1906}let ss_97: symmetricstate = (if v_655 then symmetricstatepack(csi_41,ck_108,h_87) else caught-fail) in
        {1907}let v_656: bitstring = (if v_655 then catch-fail(symmetricstateunpack(ss_97)) else caught-fail) in
        {1908}let v_657: bool = (not-caught-fail(v_656) && success?(1-proj-3-tuple(v_656))) in
        {1909}let h_88: bitstring = (if v_657 then 3-proj-3-tuple(v_656) else caught-fail) in
        {1910}let ck_109: key = (if v_657 then 2-proj-3-tuple(v_656) else caught-fail) in
        {1911}let cs_88: cipherstate = (if v_657 then 1-proj-3-tuple(v_656) else caught-fail) in
        {1912}let ssi_23: symmetricstate = (if v_655 then catch-fail((if v_657 then symmetricstatepack(cs_88,ck_109,hash(h_88,ciphertext_28)) else fail-any)) else caught-fail) in
        {1913}let v_658: bool = not-caught-fail(ssi_23) in
        {1914}let v_659: bitstring = (if v_643 then catch-fail((if v_645 then (if v_655 then (if v_658 then (ssi_23,plaintext_31,valid_27) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1915}let v_660: bool = (not-caught-fail(v_659) && success?(1-proj-3-tuple(v_659))) in
        {1916}let valid3_1: bool = (if v_660 then 3-proj-3-tuple(v_659) else caught-fail) in
        {1917}let plaintext_32: bitstring = (if v_660 then 2-proj-3-tuple(v_659) else caught-fail) in
        {1918}let ss_98: symmetricstate = (if v_660 then 1-proj-3-tuple(v_659) else caught-fail) in
        {1919}let v_661: bool = (if v_660 then catch-fail((valid1_8 && (valid2_8 && valid3_1))) else caught-fail) in
        {1920}let hs_47: handshakestate = (if v_661 then handshakestatepack(ss_98,s_18,m_18,e_29,rs_18,rm_18,re_20,psk_16,initiator_13) else caught-fail) in
        {1921}let (hs_48: handshakestate,plaintext_a_1: bitstring,valid_28: bool) = (if v_572 then (if v_574 then (if v_577 then (if v_585 then (if v_593 then (if v_610 then (if v_627 then (if v_635 then (if v_643 then (if v_660 then (if undo-catch-fail(v_661) then (hs_47,plaintext_32,true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1922}event RecvMsg(me_4,them_3,stagepack_a(sid_4),plaintext_a_1);
        {1923}insert statestore(me_4,them_3,sid_4,statepack_b(hs_48))
    ) | (
        {2079}get statestore(=me_4,=them_3,=sid_4,statepack_b(hs_49: handshakestate)) in
        {1925}let payload_6: bitstring = msg_b(me_4,them_3,sid_4) in
        {1926}let v_662: bitstring = catch-fail(handshakestateunpack(hs_49)) in
        {1927}let v_663: bool = (not-caught-fail(v_662) && success?(1-proj-9-tuple(v_662))) in
        {1928}let initiator_14: bool = (if v_663 then 9-proj-9-tuple(v_662) else caught-fail) in
        {1929}let psk_17: key = (if v_663 then 8-proj-9-tuple(v_662) else caught-fail) in
        {1930}let re_21: key = (if v_663 then 7-proj-9-tuple(v_662) else caught-fail) in
        {1931}let rm_19: key = (if v_663 then 6-proj-9-tuple(v_662) else caught-fail) in
        {1932}let rs_19: key = (if v_663 then 5-proj-9-tuple(v_662) else caught-fail) in
        {1933}let e_30: keypair = (if v_663 then 4-proj-9-tuple(v_662) else caught-fail) in
        {1934}let m_19: keypair = (if v_663 then 3-proj-9-tuple(v_662) else caught-fail) in
        {1935}let s_19: keypair = (if v_663 then 2-proj-9-tuple(v_662) else caught-fail) in
        {1936}let ss_99: symmetricstate = (if v_663 then 1-proj-9-tuple(v_662) else caught-fail) in
        {1937}let v_664: bitstring = (if v_663 then catch-fail((empty,empty,empty)) else caught-fail) in
        {1938}let v_665: bool = (not-caught-fail(v_664) && success?(1-proj-3-tuple(v_664))) in
        {1939}let ciphertext_29: bitstring = (if v_665 then 3-proj-3-tuple(v_664) else caught-fail) in
        {1940}let ns_15: bitstring = (if v_665 then 2-proj-3-tuple(v_664) else caught-fail) in
        {1941}let ne_18: bitstring = (if v_665 then 1-proj-3-tuple(v_664) else caught-fail) in
        {1942}let basis_15: key = (if v_665 then key_e(me_4,them_3,sid_4) else caught-fail) in
        {1943}let public_key_15: key = (if v_665 then catch-fail(dhexp(basis_15,validkey(g))) else caught-fail) in
        {1944}let v_666: bool = not-caught-fail(public_key_15) in
        {1945}let e_31: keypair = (if v_665 then catch-fail((if v_666 then keypairpack(validkey(public_key_15),basis_15) else fail-any)) else caught-fail) in
        {1946}let v_667: bool = not-caught-fail(e_31) in
        {1947}let ne_19: bitstring = (if v_667 then catch-fail(getpublickey(e_31)) else caught-fail) in
        {1948}let v_668: bool = not-caught-fail(ne_19) in
        {1949}let v_669: bitstring = (if v_668 then catch-fail(symmetricstateunpack(ss_99)) else caught-fail) in
        {1950}let v_670: bool = (not-caught-fail(v_669) && success?(1-proj-3-tuple(v_669))) in
        {1951}let h_89: bitstring = (if v_670 then 3-proj-3-tuple(v_669) else caught-fail) in
        {1952}let ck_110: key = (if v_670 then 2-proj-3-tuple(v_669) else caught-fail) in
        {1953}let cs_89: cipherstate = (if v_670 then 1-proj-3-tuple(v_669) else caught-fail) in
        {1954}let ss_100: symmetricstate = (if v_668 then catch-fail((if v_670 then symmetricstatepack(cs_89,ck_110,hash(h_89,ne_19)) else fail-any)) else caught-fail) in
        {1955}let v_671: bool = not-caught-fail(ss_100) in
        {1956}let v_672: bitstring = (if v_671 then catch-fail(keypairunpack(e_31)) else caught-fail) in
        {1957}let v_673: bool = (not-caught-fail(v_672) && success?(1-proj-2-tuple(v_672))) in
        {1958}let my_private_key_21: key = (if v_673 then 2-proj-2-tuple(v_672) else caught-fail) in
        {1959}let my_public_key_21: key = (if v_673 then 1-proj-2-tuple(v_672) else caught-fail) in
        {1960}let input_key_material_24: key = (if v_671 then catch-fail((if v_673 then dhexp(my_private_key_21,re_21) else fail-any)) else caught-fail) in
        {1961}let v_674: bool = not-caught-fail(input_key_material_24) in
        {1962}let v_675: bitstring = (if v_674 then catch-fail(symmetricstateunpack(ss_100)) else caught-fail) in
        {1963}let v_676: bool = (not-caught-fail(v_675) && success?(1-proj-3-tuple(v_675))) in
        {1964}let h_90: bitstring = (if v_676 then 3-proj-3-tuple(v_675) else caught-fail) in
        {1965}let ck_111: key = (if v_676 then 2-proj-3-tuple(v_675) else caught-fail) in
        {1966}let cs_90: cipherstate = (if v_676 then 1-proj-3-tuple(v_675) else caught-fail) in
        {1967}let output1_24: key = (if v_676 then hmac_hash1(ck_111,input_key_material_24) else caught-fail) in
        {1968}let output2_24: key = (if v_676 then hmac_hash2(ck_111,input_key_material_24) else caught-fail) in
        {1969}let output3_24: key = (if v_676 then hmac_hash3(ck_111,input_key_material_24) else caught-fail) in
        {1970}let v_677: bitstring = (if v_676 then catch-fail((output1_24,output2_24,output3_24)) else caught-fail) in
        {1971}let v_678: bool = (not-caught-fail(v_677) && success?(1-proj-3-tuple(v_677))) in
        {1972}let output_21: key = (if v_678 then 3-proj-3-tuple(v_677) else caught-fail) in
        {1973}let temp_k_21: key = (if v_678 then 2-proj-3-tuple(v_677) else caught-fail) in
        {1974}let ck_112: key = (if v_678 then 1-proj-3-tuple(v_677) else caught-fail) in
        {1975}let ss_101: symmetricstate = (if v_671 then catch-fail((if v_674 then (if v_676 then (if v_678 then symmetricstatepack(cipherstatepack(temp_k_21,minnonce),ck_112,h_90) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1976}let v_679: bool = not-caught-fail(ss_101) in
        {1977}let v_680: bitstring = (if v_679 then catch-fail(keypairunpack(e_31)) else caught-fail) in
        {1978}let v_681: bool = (not-caught-fail(v_680) && success?(1-proj-2-tuple(v_680))) in
        {1979}let my_private_key_22: key = (if v_681 then 2-proj-2-tuple(v_680) else caught-fail) in
        {1980}let my_public_key_22: key = (if v_681 then 1-proj-2-tuple(v_680) else caught-fail) in
        {1981}let input_key_material_25: key = (if v_679 then catch-fail((if v_681 then dhexp(my_private_key_22,rs_19) else fail-any)) else caught-fail) in
        {1982}let v_682: bool = not-caught-fail(input_key_material_25) in
        {1983}let v_683: bitstring = (if v_682 then catch-fail(symmetricstateunpack(ss_101)) else caught-fail) in
        {1984}let v_684: bool = (not-caught-fail(v_683) && success?(1-proj-3-tuple(v_683))) in
        {1985}let h_91: bitstring = (if v_684 then 3-proj-3-tuple(v_683) else caught-fail) in
        {1986}let ck_113: key = (if v_684 then 2-proj-3-tuple(v_683) else caught-fail) in
        {1987}let cs_91: cipherstate = (if v_684 then 1-proj-3-tuple(v_683) else caught-fail) in
        {1988}let output1_25: key = (if v_684 then hmac_hash1(ck_113,input_key_material_25) else caught-fail) in
        {1989}let output2_25: key = (if v_684 then hmac_hash2(ck_113,input_key_material_25) else caught-fail) in
        {1990}let output3_25: key = (if v_684 then hmac_hash3(ck_113,input_key_material_25) else caught-fail) in
        {1991}let v_685: bitstring = (if v_684 then catch-fail((output1_25,output2_25,output3_25)) else caught-fail) in
        {1992}let v_686: bool = (not-caught-fail(v_685) && success?(1-proj-3-tuple(v_685))) in
        {1993}let output_22: key = (if v_686 then 3-proj-3-tuple(v_685) else caught-fail) in
        {1994}let temp_k_22: key = (if v_686 then 2-proj-3-tuple(v_685) else caught-fail) in
        {1995}let ck_114: key = (if v_686 then 1-proj-3-tuple(v_685) else caught-fail) in
        {1996}let ss_102: symmetricstate = (if v_679 then catch-fail((if v_682 then (if v_684 then (if v_686 then symmetricstatepack(cipherstatepack(temp_k_22,minnonce),ck_114,h_91) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1997}let v_687: bool = not-caught-fail(ss_102) in
        {1998}let v_688: bitstring = (if v_687 then catch-fail(keypairunpack(e_31)) else caught-fail) in
        {1999}let v_689: bool = (not-caught-fail(v_688) && success?(1-proj-2-tuple(v_688))) in
        {2000}let my_private_key_23: key = (if v_689 then 2-proj-2-tuple(v_688) else caught-fail) in
        {2001}let my_public_key_23: key = (if v_689 then 1-proj-2-tuple(v_688) else caught-fail) in
        {2002}let input_key_material_26: key = (if v_687 then catch-fail((if v_689 then dhexp(my_private_key_23,rm_19) else fail-any)) else caught-fail) in
        {2003}let v_690: bool = not-caught-fail(input_key_material_26) in
        {2004}let v_691: bitstring = (if v_690 then catch-fail(symmetricstateunpack(ss_102)) else caught-fail) in
        {2005}let v_692: bool = (not-caught-fail(v_691) && success?(1-proj-3-tuple(v_691))) in
        {2006}let h_92: bitstring = (if v_692 then 3-proj-3-tuple(v_691) else caught-fail) in
        {2007}let ck_115: key = (if v_692 then 2-proj-3-tuple(v_691) else caught-fail) in
        {2008}let cs_92: cipherstate = (if v_692 then 1-proj-3-tuple(v_691) else caught-fail) in
        {2009}let output1_26: key = (if v_692 then hmac_hash1(ck_115,input_key_material_26) else caught-fail) in
        {2010}let output2_26: key = (if v_692 then hmac_hash2(ck_115,input_key_material_26) else caught-fail) in
        {2011}let output3_26: key = (if v_692 then hmac_hash3(ck_115,input_key_material_26) else caught-fail) in
        {2012}let v_693: bitstring = (if v_692 then catch-fail((output1_26,output2_26,output3_26)) else caught-fail) in
        {2013}let v_694: bool = (not-caught-fail(v_693) && success?(1-proj-3-tuple(v_693))) in
        {2014}let output_23: key = (if v_694 then 3-proj-3-tuple(v_693) else caught-fail) in
        {2015}let temp_k_23: key = (if v_694 then 2-proj-3-tuple(v_693) else caught-fail) in
        {2016}let ck_116: key = (if v_694 then 1-proj-3-tuple(v_693) else caught-fail) in
        {2017}let ss_103: symmetricstate = (if v_687 then catch-fail((if v_690 then (if v_692 then (if v_694 then symmetricstatepack(cipherstatepack(temp_k_23,minnonce),ck_116,h_92) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {2018}let v_695: bool = not-caught-fail(ss_103) in
        {2019}let v_696: bitstring = (if v_695 then catch-fail(symmetricstateunpack(ss_103)) else caught-fail) in
        {2020}let v_697: bool = (not-caught-fail(v_696) && success?(1-proj-3-tuple(v_696))) in
        {2021}let h_93: bitstring = (if v_697 then 3-proj-3-tuple(v_696) else caught-fail) in
        {2022}let ck_117: key = (if v_697 then 2-proj-3-tuple(v_696) else caught-fail) in
        {2023}let cs_93: cipherstate = (if v_697 then 1-proj-3-tuple(v_696) else caught-fail) in
        {2024}let v_698: bitstring = (if v_697 then catch-fail(cipherstateunpack(cs_93)) else caught-fail) in
        {2025}let v_699: bool = (not-caught-fail(v_698) && success?(1-proj-2-tuple(v_698))) in
        {2026}let n_42: nonce = (if v_699 then 2-proj-2-tuple(v_698) else caught-fail) in
        {2027}let k_46: key = (if v_699 then 1-proj-2-tuple(v_698) else caught-fail) in
        {2028}let e_32: bitstring = (if v_699 then encrypt(k_46,n_42,h_93,payload_6) else caught-fail) in
        {2029}let n_43: nonce = (if v_699 then increment_nonce(n_42) else caught-fail) in
        {2030}let v_700: bitstring = (if v_699 then catch-fail(cipherstateunpack(cs_93)) else caught-fail) in
        {2031}let v_701: bool = (not-caught-fail(v_700) && success?(1-proj-2-tuple(v_700))) in
        {2032}let o_21: nonce = (if v_701 then 2-proj-2-tuple(v_700) else caught-fail) in
        {2033}let k_47: key = (if v_701 then 1-proj-2-tuple(v_700) else caught-fail) in
        {2034}let csi_42: cipherstate = (if v_699 then catch-fail((if v_701 then cipherstatepack(k_47,n_43) else fail-any)) else caught-fail) in
        {2035}let v_702: bool = not-caught-fail(csi_42) in
        {2036}let v_703: bitstring = (if v_697 then catch-fail((if v_699 then (if v_702 then (csi_42,e_32) else fail-any) else fail-any)) else caught-fail) in
        {2037}let v_704: bool = (not-caught-fail(v_703) && success?(1-proj-2-tuple(v_703))) in
        {2038}let ciphertext_30: bitstring = (if v_704 then 2-proj-2-tuple(v_703) else caught-fail) in
        {2039}let csi_43: cipherstate = (if v_704 then 1-proj-2-tuple(v_703) else caught-fail) in
        {2040}let ss_104: symmetricstate = (if v_704 then symmetricstatepack(csi_43,ck_117,h_93) else caught-fail) in
        {2041}let v_705: bitstring = (if v_704 then catch-fail(symmetricstateunpack(ss_104)) else caught-fail) in
        {2042}let v_706: bool = (not-caught-fail(v_705) && success?(1-proj-3-tuple(v_705))) in
        {2043}let h_94: bitstring = (if v_706 then 3-proj-3-tuple(v_705) else caught-fail) in
        {2044}let ck_118: key = (if v_706 then 2-proj-3-tuple(v_705) else caught-fail) in
        {2045}let cs_94: cipherstate = (if v_706 then 1-proj-3-tuple(v_705) else caught-fail) in
        {2046}let ssi_24: symmetricstate = (if v_704 then catch-fail((if v_706 then symmetricstatepack(cs_94,ck_118,hash(h_94,ciphertext_30)) else fail-any)) else caught-fail) in
        {2047}let v_707: bool = not-caught-fail(ssi_24) in
        {2048}let v_708: bitstring = (if v_695 then catch-fail((if v_697 then (if v_704 then (if v_707 then (ssi_24,ciphertext_30) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {2049}let v_709: bool = (not-caught-fail(v_708) && success?(1-proj-2-tuple(v_708))) in
        {2050}let ciphertext_31: bitstring = (if v_709 then 2-proj-2-tuple(v_708) else caught-fail) in
        {2051}let ss_105: symmetricstate = (if v_709 then 1-proj-2-tuple(v_708) else caught-fail) in
        {2052}let hs_50: handshakestate = (if v_709 then handshakestatepack(ss_105,s_19,m_19,e_31,rs_19,rm_19,re_21,psk_17,initiator_14) else caught-fail) in
        {2053}let message_buffer_6: bitstring = (if v_709 then concat3(ne_19,ns_15,ciphertext_31) else caught-fail) in
        {2054}let v_710: bitstring = (if v_709 then catch-fail(symmetricstateunpack(ss_105)) else caught-fail) in
        {2055}let v_711: bool = (not-caught-fail(v_710) && success?(1-proj-3-tuple(v_710))) in
        {2056}let h_95: bitstring = (if v_711 then 3-proj-3-tuple(v_710) else caught-fail) in
        {2057}let ck_119: key = (if v_711 then 2-proj-3-tuple(v_710) else caught-fail) in
        {2058}let cs_95: cipherstate = (if v_711 then 1-proj-3-tuple(v_710) else caught-fail) in
        {2059}let input_key_material_27: key = (if v_711 then zero else caught-fail) in
        {2060}let output1_27: key = (if v_711 then hmac_hash1(ck_119,input_key_material_27) else caught-fail) in
        {2061}let output2_27: key = (if v_711 then hmac_hash2(ck_119,input_key_material_27) else caught-fail) in
        {2062}let output3_27: key = (if v_711 then hmac_hash3(ck_119,input_key_material_27) else caught-fail) in
        {2063}let v_712: bitstring = (if v_711 then catch-fail((output1_27,output2_27,output3_27)) else caught-fail) in
        {2064}let v_713: bool = (not-caught-fail(v_712) && success?(1-proj-3-tuple(v_712))) in
        {2065}let temp_k3_3: key = (if v_713 then 3-proj-3-tuple(v_712) else caught-fail) in
        {2066}let temp_k2_3: key = (if v_713 then 2-proj-3-tuple(v_712) else caught-fail) in
        {2067}let temp_k1_3: key = (if v_713 then 1-proj-3-tuple(v_712) else caught-fail) in
        {2068}let cs1_15: cipherstate = (if v_713 then cipherstatepack(temp_k1_3,minnonce) else caught-fail) in
        {2069}let cs2_15: cipherstate = (if v_713 then cipherstatepack(temp_k2_3,minnonce) else caught-fail) in
        {2070}let v_714: bitstring = (if v_709 then catch-fail((if v_711 then (if v_713 then (ss_105,cs1_15,cs2_15) else fail-any) else fail-any)) else caught-fail) in
        {2071}let v_715: bool = (not-caught-fail(v_714) && success?(1-proj-3-tuple(v_714))) in
        {2072}let cs2_16: cipherstate = (if v_715 then 3-proj-3-tuple(v_714) else caught-fail) in
        {2073}let cs1_16: cipherstate = (if v_715 then 2-proj-3-tuple(v_714) else caught-fail) in
        {2074}let ssi_25: symmetricstate = (if v_715 then 1-proj-3-tuple(v_714) else caught-fail) in
        {2075}let (hs_51: handshakestate,message_b_3: bitstring,cs1_17: cipherstate,cs2_17: cipherstate) = (if v_663 then (if v_665 then (if v_667 then (if v_668 then (if v_671 then (if v_679 then (if v_687 then (if v_695 then (if v_709 then (if v_715 then (hs_50,message_buffer_6,cs1_16,cs2_16) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {2076}event SendMsg(me_4,them_3,stagepack_b(sid_4),msg_b(me_4,them_3,sid_4));
        {2077}insert statestore(me_4,them_3,sid_4,statepack_c(hs_51,cs1_17,cs2_17));
        {2078}out(pub, message_b_3)
    ) | (
        {2080}!
        {2146}get statestore(=me_4,=them_3,=sid_4,statepack_c(hs_52: handshakestate,cs1_18: cipherstate,cs2_18: cipherstate)) in
        {2081}let hs_53: handshakestate = handshakestatesetcs(hs_52,cs1_18) in
        {2082}in(pub, message_c_3: bitstring);
        {2083}let v_716: bitstring = catch-fail(handshakestateunpack(hs_53)) in
        {2084}let v_717: bool = (not-caught-fail(v_716) && success?(1-proj-9-tuple(v_716))) in
        {2085}let initiator_15: bool = (if v_717 then 9-proj-9-tuple(v_716) else caught-fail) in
        {2086}let psk_18: key = (if v_717 then 8-proj-9-tuple(v_716) else caught-fail) in
        {2087}let re_22: key = (if v_717 then 7-proj-9-tuple(v_716) else caught-fail) in
        {2088}let rm_20: key = (if v_717 then 6-proj-9-tuple(v_716) else caught-fail) in
        {2089}let rs_20: key = (if v_717 then 5-proj-9-tuple(v_716) else caught-fail) in
        {2090}let e_33: keypair = (if v_717 then 4-proj-9-tuple(v_716) else caught-fail) in
        {2091}let m_20: keypair = (if v_717 then 3-proj-9-tuple(v_716) else caught-fail) in
        {2092}let s_20: keypair = (if v_717 then 2-proj-9-tuple(v_716) else caught-fail) in
        {2093}let ss_106: symmetricstate = (if v_717 then 1-proj-9-tuple(v_716) else caught-fail) in
        {2094}let v_718: bitstring = (if v_717 then catch-fail(deconcat3(message_c_3)) else caught-fail) in
        {2095}let v_719: bool = (not-caught-fail(v_718) && success?(1-proj-3-tuple(v_718))) in
        {2096}let ciphertext_32: bitstring = (if v_719 then 3-proj-3-tuple(v_718) else caught-fail) in
        {2097}let ns_16: bitstring = (if v_719 then 2-proj-3-tuple(v_718) else caught-fail) in
        {2098}let ne_20: bitstring = (if v_719 then 1-proj-3-tuple(v_718) else caught-fail) in
        {2099}let valid1_9: bool = (if v_719 then true else caught-fail) in
        {2100}let v_720: bitstring = (if v_719 then catch-fail(symmetricstateunpack(ss_106)) else caught-fail) in
        {2101}let v_721: bool = (not-caught-fail(v_720) && success?(1-proj-3-tuple(v_720))) in
        {2102}let h_96: bitstring = (if v_721 then 3-proj-3-tuple(v_720) else caught-fail) in
        {2103}let ck_120: key = (if v_721 then 2-proj-3-tuple(v_720) else caught-fail) in
        {2104}let cs_96: cipherstate = (if v_721 then 1-proj-3-tuple(v_720) else caught-fail) in
        {2105}let v_722: bitstring = (if v_721 then catch-fail(cipherstateunpack(cs_96)) else caught-fail) in
        {2106}let v_723: bool = (not-caught-fail(v_722) && success?(1-proj-2-tuple(v_722))) in
        {2107}let n_44: nonce = (if v_723 then 2-proj-2-tuple(v_722) else caught-fail) in
        {2108}let k_48: key = (if v_723 then 1-proj-2-tuple(v_722) else caught-fail) in
        {2109}let d_11: aead = (if v_723 then catch-fail(decrypt(k_48,n_44,h_96,ciphertext_32)) else caught-fail) in
        {2110}let v_724: bool = not-caught-fail(d_11) in
        {2111}let v_725: bitstring = (if v_724 then catch-fail(aeadunpack(d_11)) else caught-fail) in
        {2112}let v_726: bool = (not-caught-fail(v_725) && success?(1-proj-3-tuple(v_725))) in
        {2113}let plaintext_33: bitstring = (if v_726 then 3-proj-3-tuple(v_725) else caught-fail) in
        {2114}let adi_11: bitstring = (if v_726 then 2-proj-3-tuple(v_725) else caught-fail) in
        {2115}let valid_29: bool = (if v_726 then 1-proj-3-tuple(v_725) else caught-fail) in
        {2116}let n_45: nonce = (if v_726 then increment_nonce(n_44) else caught-fail) in
        {2117}let v_727: bitstring = (if v_726 then catch-fail(cipherstateunpack(cs_96)) else caught-fail) in
        {2118}let v_728: bool = (not-caught-fail(v_727) && success?(1-proj-2-tuple(v_727))) in
        {2119}let o_22: nonce = (if v_728 then 2-proj-2-tuple(v_727) else caught-fail) in
        {2120}let k_49: key = (if v_728 then 1-proj-2-tuple(v_727) else caught-fail) in
        {2121}let csi_44: cipherstate = (if v_726 then catch-fail((if v_728 then cipherstatepack(k_49,n_45) else fail-any)) else caught-fail) in
        {2122}let v_729: bool = not-caught-fail(csi_44) in
        {2123}let v_730: bitstring = (if v_721 then catch-fail((if v_723 then (if v_724 then (if v_726 then (if v_729 then (csi_44,plaintext_33,valid_29) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {2124}let v_731: bool = (not-caught-fail(v_730) && success?(1-proj-3-tuple(v_730))) in
        {2125}let valid_30: bool = (if v_731 then 3-proj-3-tuple(v_730) else caught-fail) in
        {2126}let plaintext_34: bitstring = (if v_731 then 2-proj-3-tuple(v_730) else caught-fail) in
        {2127}let csi_45: cipherstate = (if v_731 then 1-proj-3-tuple(v_730) else caught-fail) in
        {2128}let ss_107: symmetricstate = (if v_731 then symmetricstatepack(csi_45,ck_120,h_96) else caught-fail) in
        {2129}let v_732: bitstring = (if v_731 then catch-fail(symmetricstateunpack(ss_107)) else caught-fail) in
        {2130}let v_733: bool = (not-caught-fail(v_732) && success?(1-proj-3-tuple(v_732))) in
        {2131}let h_97: bitstring = (if v_733 then 3-proj-3-tuple(v_732) else caught-fail) in
        {2132}let ck_121: key = (if v_733 then 2-proj-3-tuple(v_732) else caught-fail) in
        {2133}let cs_97: cipherstate = (if v_733 then 1-proj-3-tuple(v_732) else caught-fail) in
        {2134}let ssi_26: symmetricstate = (if v_731 then catch-fail((if v_733 then symmetricstatepack(cs_97,ck_121,hash(h_97,ciphertext_32)) else fail-any)) else caught-fail) in
        {2135}let v_734: bool = not-caught-fail(ssi_26) in
        {2136}let v_735: bitstring = (if v_719 then catch-fail((if v_721 then (if v_731 then (if v_734 then (ssi_26,plaintext_34,valid_30) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {2137}let v_736: bool = (not-caught-fail(v_735) && success?(1-proj-3-tuple(v_735))) in
        {2138}let valid2_9: bool = (if v_736 then 3-proj-3-tuple(v_735) else caught-fail) in
        {2139}let plaintext_35: bitstring = (if v_736 then 2-proj-3-tuple(v_735) else caught-fail) in
        {2140}let ss_108: symmetricstate = (if v_736 then 1-proj-3-tuple(v_735) else caught-fail) in
        {2141}let v_737: bool = (if v_736 then catch-fail((valid1_9 && valid2_9)) else caught-fail) in
        {2142}let hs_54: handshakestate = (if v_737 then handshakestatepack(ss_108,s_20,m_20,e_33,rs_20,rm_20,re_22,psk_18,initiator_15) else caught-fail) in
        {2143}let (hs_55: handshakestate,plaintext_c_1: bitstring,valid_31: bool) = (if v_717 then (if v_719 then (if v_736 then (if undo-catch-fail(v_737) then (hs_54,plaintext_35,true) else fail-any) else fail-any) else fail-any) else fail-any) in
        {2144}event RecvMsg(me_4,them_3,stagepack_c(sid_4),plaintext_c_1);
        {2145}insert statestore(me_4,them_3,sid_4,statepack_d(hs_55,handshakestategetcs(hs_55),cs2_18))
    ) | (
        {2147}!
        {2204}get statestore(=me_4,=them_3,=sid_4,statepack_d(hs_56: handshakestate,cs1_19: cipherstate,cs2_19: cipherstate)) in
        {2148}let hs_57: handshakestate = handshakestatesetcs(hs_56,cs2_19) in
        {2149}let payload_7: bitstring = msg_d(me_4,them_3,sid_4) in
        {2150}let v_738: bitstring = catch-fail(handshakestateunpack(hs_57)) in
        {2151}let v_739: bool = (not-caught-fail(v_738) && success?(1-proj-9-tuple(v_738))) in
        {2152}let initiator_16: bool = (if v_739 then 9-proj-9-tuple(v_738) else caught-fail) in
        {2153}let psk_19: key = (if v_739 then 8-proj-9-tuple(v_738) else caught-fail) in
        {2154}let re_23: key = (if v_739 then 7-proj-9-tuple(v_738) else caught-fail) in
        {2155}let rm_21: key = (if v_739 then 6-proj-9-tuple(v_738) else caught-fail) in
        {2156}let rs_21: key = (if v_739 then 5-proj-9-tuple(v_738) else caught-fail) in
        {2157}let e_34: keypair = (if v_739 then 4-proj-9-tuple(v_738) else caught-fail) in
        {2158}let m_21: keypair = (if v_739 then 3-proj-9-tuple(v_738) else caught-fail) in
        {2159}let s_21: keypair = (if v_739 then 2-proj-9-tuple(v_738) else caught-fail) in
        {2160}let ss_109: symmetricstate = (if v_739 then 1-proj-9-tuple(v_738) else caught-fail) in
        {2161}let v_740: bitstring = (if v_739 then catch-fail((empty,empty,empty)) else caught-fail) in
        {2162}let v_741: bool = (not-caught-fail(v_740) && success?(1-proj-3-tuple(v_740))) in
        {2163}let ciphertext_33: bitstring = (if v_741 then 3-proj-3-tuple(v_740) else caught-fail) in
        {2164}let ns_17: bitstring = (if v_741 then 2-proj-3-tuple(v_740) else caught-fail) in
        {2165}let ne_21: bitstring = (if v_741 then 1-proj-3-tuple(v_740) else caught-fail) in
        {2166}let v_742: bitstring = (if v_741 then catch-fail(symmetricstateunpack(ss_109)) else caught-fail) in
        {2167}let v_743: bool = (not-caught-fail(v_742) && success?(1-proj-3-tuple(v_742))) in
        {2168}let h_98: bitstring = (if v_743 then 3-proj-3-tuple(v_742) else caught-fail) in
        {2169}let ck_122: key = (if v_743 then 2-proj-3-tuple(v_742) else caught-fail) in
        {2170}let cs_98: cipherstate = (if v_743 then 1-proj-3-tuple(v_742) else caught-fail) in
        {2171}let v_744: bitstring = (if v_743 then catch-fail(cipherstateunpack(cs_98)) else caught-fail) in
        {2172}let v_745: bool = (not-caught-fail(v_744) && success?(1-proj-2-tuple(v_744))) in
        {2173}let n_46: nonce = (if v_745 then 2-proj-2-tuple(v_744) else caught-fail) in
        {2174}let k_50: key = (if v_745 then 1-proj-2-tuple(v_744) else caught-fail) in
        {2175}let e_35: bitstring = (if v_745 then encrypt(k_50,n_46,h_98,payload_7) else caught-fail) in
        {2176}let n_47: nonce = (if v_745 then increment_nonce(n_46) else caught-fail) in
        {2177}let v_746: bitstring = (if v_745 then catch-fail(cipherstateunpack(cs_98)) else caught-fail) in
        {2178}let v_747: bool = (not-caught-fail(v_746) && success?(1-proj-2-tuple(v_746))) in
        {2179}let o_23: nonce = (if v_747 then 2-proj-2-tuple(v_746) else caught-fail) in
        {2180}let k_51: key = (if v_747 then 1-proj-2-tuple(v_746) else caught-fail) in
        {2181}let csi_46: cipherstate = (if v_745 then catch-fail((if v_747 then cipherstatepack(k_51,n_47) else fail-any)) else caught-fail) in
        {2182}let v_748: bool = not-caught-fail(csi_46) in
        {2183}let v_749: bitstring = (if v_743 then catch-fail((if v_745 then (if v_748 then (csi_46,e_35) else fail-any) else fail-any)) else caught-fail) in
        {2184}let v_750: bool = (not-caught-fail(v_749) && success?(1-proj-2-tuple(v_749))) in
        {2185}let ciphertext_34: bitstring = (if v_750 then 2-proj-2-tuple(v_749) else caught-fail) in
        {2186}let csi_47: cipherstate = (if v_750 then 1-proj-2-tuple(v_749) else caught-fail) in
        {2187}let ss_110: symmetricstate = (if v_750 then symmetricstatepack(csi_47,ck_122,h_98) else caught-fail) in
        {2188}let v_751: bitstring = (if v_750 then catch-fail(symmetricstateunpack(ss_110)) else caught-fail) in
        {2189}let v_752: bool = (not-caught-fail(v_751) && success?(1-proj-3-tuple(v_751))) in
        {2190}let h_99: bitstring = (if v_752 then 3-proj-3-tuple(v_751) else caught-fail) in
        {2191}let ck_123: key = (if v_752 then 2-proj-3-tuple(v_751) else caught-fail) in
        {2192}let cs_99: cipherstate = (if v_752 then 1-proj-3-tuple(v_751) else caught-fail) in
        {2193}let ssi_27: symmetricstate = (if v_750 then catch-fail((if v_752 then symmetricstatepack(cs_99,ck_123,hash(h_99,ciphertext_34)) else fail-any)) else caught-fail) in
        {2194}let v_753: bool = not-caught-fail(ssi_27) in
        {2195}let v_754: bitstring = (if v_741 then catch-fail((if v_743 then (if v_750 then (if v_753 then (ssi_27,ciphertext_34) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {2196}let v_755: bool = (not-caught-fail(v_754) && success?(1-proj-2-tuple(v_754))) in
        {2197}let ciphertext_35: bitstring = (if v_755 then 2-proj-2-tuple(v_754) else caught-fail) in
        {2198}let ss_111: symmetricstate = (if v_755 then 1-proj-2-tuple(v_754) else caught-fail) in
        {2199}let hs_58: handshakestate = (if v_755 then handshakestatepack(ss_111,s_21,m_21,e_34,rs_21,rm_21,re_23,psk_19,initiator_16) else caught-fail) in
        {2200}let message_buffer_7: bitstring = (if v_755 then concat3(ne_21,ns_17,ciphertext_35) else caught-fail) in
        {2201}let (hs_59: handshakestate,message_d_3: bitstring) = (if v_739 then (if v_741 then (if v_755 then (hs_58,message_buffer_7) else fail-any) else fail-any) else fail-any) in
        {2202}event SendMsg(me_4,them_3,stagepack_d(sid_4),msg_d(me_4,them_3,sid_4));
        {2203}out(pub, message_d_3)
    ) | (
        {2205}event LeakS(phase0,me_4);
        {2206}event LeakM(phase0,me_4);
        {2207}out(pub, (key_s(me_4),key_m(me_4)))
    ) | (
        {2208}phase 1;
        {2209}event LeakS(phase1,me_4);
        {2210}event LeakM(phase1,me_4);
        {2211}out(pub, (key_s(me_4),key_m(me_4)))
    )
)

--  Process 1 (that is, process 0, with let moved downwards):
{1}out(pub, (key_s(charlie),key_m(charlie)));
{2}!
{3}new sid: sessionid;
(
    {6}let sid_1: sessionid = sid in
    {5}let them: principal = bob in
    {4}let me: principal = alice in
    (
        {10}let basis: key = key_s(them) in
        {11}let public_key: key = catch-fail(dhexp(basis,validkey(g))) in
        {12}let v: bool = not-caught-fail(public_key) in
        {13}let rs: key = getpublickey((if v then keypairpack(validkey(public_key),basis) else fail-any)) in
        {14}let basis_1: key = key_m(them) in
        {15}let public_key_1: key = catch-fail(dhexp(basis_1,validkey(g))) in
        {16}let v_1: bool = not-caught-fail(public_key_1) in
        {17}let rm: key = getpublickey((if v_1 then keypairpack(validkey(public_key_1),basis_1) else fail-any)) in
        {24}let k: key = empty in
        {25}let cs: cipherstate = cipherstatepack(k,minnonce) in
        {21}let protocol_name: bitstring = somename in
        {22}let h: bitstring = hash(protocol_name,empty) in
        {23}let ck: key = h in
        {26}let ss: symmetricstate = symmetricstatepack(cs,ck,h) in
        {27}let v_2: bitstring = catch-fail(symmetricstateunpack(ss)) in
        {28}let v_3: bool = (not-caught-fail(v_2) && success?(1-proj-3-tuple(v_2))) in
        {29}let h_1: bitstring = (if v_3 then 3-proj-3-tuple(v_2) else caught-fail) in
        {30}let ck_1: key = (if v_3 then 2-proj-3-tuple(v_2) else caught-fail) in
        {31}let cs_1: cipherstate = (if v_3 then 1-proj-3-tuple(v_2) else caught-fail) in
        {19}let prologue: bitstring = empty in
        {32}let ss_1: symmetricstate = catch-fail((if v_3 then symmetricstatepack(cs_1,ck_1,hash(h_1,prologue)) else fail-any)) in
        {33}let v_4: bool = not-caught-fail(ss_1) in
        {34}let v_5: bitstring = (if v_4 then catch-fail(symmetricstateunpack(ss_1)) else caught-fail) in
        {35}let v_6: bool = (not-caught-fail(v_5) && success?(1-proj-3-tuple(v_5))) in
        {36}let h_2: bitstring = (if v_6 then 3-proj-3-tuple(v_5) else caught-fail) in
        {37}let ck_2: key = (if v_6 then 2-proj-3-tuple(v_5) else caught-fail) in
        {38}let cs_2: cipherstate = (if v_6 then 1-proj-3-tuple(v_5) else caught-fail) in
        {39}let ss_2: symmetricstate = (if v_4 then catch-fail((if v_6 then symmetricstatepack(cs_2,ck_2,hash(h_2,rs)) else fail-any)) else caught-fail) in
        {40}let v_7: bool = not-caught-fail(ss_2) in
        {41}let v_8: bitstring = (if v_7 then catch-fail(symmetricstateunpack(ss_2)) else caught-fail) in
        {42}let v_9: bool = (not-caught-fail(v_8) && success?(1-proj-3-tuple(v_8))) in
        {43}let h_3: bitstring = (if v_9 then 3-proj-3-tuple(v_8) else caught-fail) in
        {44}let ck_3: key = (if v_9 then 2-proj-3-tuple(v_8) else caught-fail) in
        {45}let cs_3: cipherstate = (if v_9 then 1-proj-3-tuple(v_8) else caught-fail) in
        {46}let ss_3: symmetricstate = (if v_7 then catch-fail((if v_9 then symmetricstatepack(cs_3,ck_3,hash(h_3,rm)) else fail-any)) else caught-fail) in
        {47}let v_10: bool = not-caught-fail(ss_3) in
        {20}let psk: key = empty in
        {18}let re: key = empty in
        {9}let e: keypair = keypairpack(empty,empty) in
        {8}let m: keypair = keypairpack(empty,empty) in
        {7}let s: keypair = keypairpack(empty,empty) in
        {48}let hs: handshakestate = (if v_4 then (if v_7 then (if v_10 then handshakestatepack(ss_3,s,m,e,rs,rm,re,psk,true) else fail-any) else fail-any) else fail-any) in
        {49}insert statestore(me,them,sid_1,statepack_a(hs))
    ) | (
        {243}get statestore(=me,=them,=sid_1,statepack_a(hs_1: handshakestate)) in
        {51}let v_11: bitstring = catch-fail(handshakestateunpack(hs_1)) in
        {52}let v_12: bool = (not-caught-fail(v_11) && success?(1-proj-9-tuple(v_11))) in
        {53}let initiator_1: bool = (if v_12 then 9-proj-9-tuple(v_11) else caught-fail) in
        {54}let psk_1: key = (if v_12 then 8-proj-9-tuple(v_11) else caught-fail) in
        {55}let re_1: key = (if v_12 then 7-proj-9-tuple(v_11) else caught-fail) in
        {56}let rm_1: key = (if v_12 then 6-proj-9-tuple(v_11) else caught-fail) in
        {57}let rs_1: key = (if v_12 then 5-proj-9-tuple(v_11) else caught-fail) in
        {58}let e_1: keypair = (if v_12 then 4-proj-9-tuple(v_11) else caught-fail) in
        {59}let m_1: keypair = (if v_12 then 3-proj-9-tuple(v_11) else caught-fail) in
        {60}let s_1: keypair = (if v_12 then 2-proj-9-tuple(v_11) else caught-fail) in
        {61}let ss_4: symmetricstate = (if v_12 then 1-proj-9-tuple(v_11) else caught-fail) in
        {62}let v_13: bitstring = (if v_12 then catch-fail((empty,empty,empty,empty)) else caught-fail) in
        {63}let v_14: bool = (not-caught-fail(v_13) && success?(1-proj-4-tuple(v_13))) in
        {64}let ciphertext: bitstring = (if v_14 then 4-proj-4-tuple(v_13) else caught-fail) in
        {65}let nm: bitstring = (if v_14 then 3-proj-4-tuple(v_13) else caught-fail) in
        {66}let ns: bitstring = (if v_14 then 2-proj-4-tuple(v_13) else caught-fail) in
        {67}let ne: bitstring = (if v_14 then 1-proj-4-tuple(v_13) else caught-fail) in
        {68}let basis_2: key = (if v_14 then key_e(me,them,sid_1) else caught-fail) in
        {69}let public_key_2: key = (if v_14 then catch-fail(dhexp(basis_2,validkey(g))) else caught-fail) in
        {70}let v_15: bool = not-caught-fail(public_key_2) in
        {71}let e_2: keypair = (if v_14 then catch-fail((if v_15 then keypairpack(validkey(public_key_2),basis_2) else fail-any)) else caught-fail) in
        {72}let v_16: bool = not-caught-fail(e_2) in
        {73}let ne_1: bitstring = (if v_16 then catch-fail(getpublickey(e_2)) else caught-fail) in
        {74}let v_17: bool = not-caught-fail(ne_1) in
        {75}let v_18: bitstring = (if v_17 then catch-fail(symmetricstateunpack(ss_4)) else caught-fail) in
        {76}let v_19: bool = (not-caught-fail(v_18) && success?(1-proj-3-tuple(v_18))) in
        {77}let h_4: bitstring = (if v_19 then 3-proj-3-tuple(v_18) else caught-fail) in
        {78}let ck_4: key = (if v_19 then 2-proj-3-tuple(v_18) else caught-fail) in
        {79}let cs_4: cipherstate = (if v_19 then 1-proj-3-tuple(v_18) else caught-fail) in
        {80}let ss_5: symmetricstate = (if v_17 then catch-fail((if v_19 then symmetricstatepack(cs_4,ck_4,hash(h_4,ne_1)) else fail-any)) else caught-fail) in
        {81}let v_20: bool = not-caught-fail(ss_5) in
        {82}let v_21: bitstring = (if v_20 then catch-fail(keypairunpack(e_2)) else caught-fail) in
        {83}let v_22: bool = (not-caught-fail(v_21) && success?(1-proj-2-tuple(v_21))) in
        {84}let my_private_key: key = (if v_22 then 2-proj-2-tuple(v_21) else caught-fail) in
        {85}let my_public_key: key = (if v_22 then 1-proj-2-tuple(v_21) else caught-fail) in
        {86}let input_key_material: key = (if v_20 then catch-fail((if v_22 then dhexp(my_private_key,rs_1) else fail-any)) else caught-fail) in
        {87}let v_23: bool = not-caught-fail(input_key_material) in
        {88}let v_24: bitstring = (if v_23 then catch-fail(symmetricstateunpack(ss_5)) else caught-fail) in
        {89}let v_25: bool = (not-caught-fail(v_24) && success?(1-proj-3-tuple(v_24))) in
        {90}let h_5: bitstring = (if v_25 then 3-proj-3-tuple(v_24) else caught-fail) in
        {91}let ck_5: key = (if v_25 then 2-proj-3-tuple(v_24) else caught-fail) in
        {92}let cs_5: cipherstate = (if v_25 then 1-proj-3-tuple(v_24) else caught-fail) in
        {95}let output3: key = (if v_25 then hmac_hash3(ck_5,input_key_material) else caught-fail) in
        {94}let output2: key = (if v_25 then hmac_hash2(ck_5,input_key_material) else caught-fail) in
        {93}let output1: key = (if v_25 then hmac_hash1(ck_5,input_key_material) else caught-fail) in
        {96}let v_26: bitstring = (if v_25 then catch-fail((output1,output2,output3)) else caught-fail) in
        {97}let v_27: bool = (not-caught-fail(v_26) && success?(1-proj-3-tuple(v_26))) in
        {98}let output_3: key = (if v_27 then 3-proj-3-tuple(v_26) else caught-fail) in
        {99}let temp_k: key = (if v_27 then 2-proj-3-tuple(v_26) else caught-fail) in
        {100}let ck_6: key = (if v_27 then 1-proj-3-tuple(v_26) else caught-fail) in
        {101}let ss_6: symmetricstate = (if v_20 then catch-fail((if v_23 then (if v_25 then (if v_27 then symmetricstatepack(cipherstatepack(temp_k,minnonce),ck_6,h_5) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {102}let v_28: bool = not-caught-fail(ss_6) in
        {103}let v_29: bitstring = (if v_28 then catch-fail(keypairunpack(e_2)) else caught-fail) in
        {104}let v_30: bool = (not-caught-fail(v_29) && success?(1-proj-2-tuple(v_29))) in
        {105}let my_private_key_1: key = (if v_30 then 2-proj-2-tuple(v_29) else caught-fail) in
        {106}let my_public_key_1: key = (if v_30 then 1-proj-2-tuple(v_29) else caught-fail) in
        {107}let input_key_material_1: key = (if v_28 then catch-fail((if v_30 then dhexp(my_private_key_1,rm_1) else fail-any)) else caught-fail) in
        {108}let v_31: bool = not-caught-fail(input_key_material_1) in
        {109}let v_32: bitstring = (if v_31 then catch-fail(symmetricstateunpack(ss_6)) else caught-fail) in
        {110}let v_33: bool = (not-caught-fail(v_32) && success?(1-proj-3-tuple(v_32))) in
        {111}let h_6: bitstring = (if v_33 then 3-proj-3-tuple(v_32) else caught-fail) in
        {112}let ck_7: key = (if v_33 then 2-proj-3-tuple(v_32) else caught-fail) in
        {113}let cs_6: cipherstate = (if v_33 then 1-proj-3-tuple(v_32) else caught-fail) in
        {116}let output3_1: key = (if v_33 then hmac_hash3(ck_7,input_key_material_1) else caught-fail) in
        {115}let output2_1: key = (if v_33 then hmac_hash2(ck_7,input_key_material_1) else caught-fail) in
        {114}let output1_1: key = (if v_33 then hmac_hash1(ck_7,input_key_material_1) else caught-fail) in
        {117}let v_34: bitstring = (if v_33 then catch-fail((output1_1,output2_1,output3_1)) else caught-fail) in
        {118}let v_35: bool = (not-caught-fail(v_34) && success?(1-proj-3-tuple(v_34))) in
        {119}let output: key = (if v_35 then 3-proj-3-tuple(v_34) else caught-fail) in
        {120}let temp_k_1: key = (if v_35 then 2-proj-3-tuple(v_34) else caught-fail) in
        {121}let ck_8: key = (if v_35 then 1-proj-3-tuple(v_34) else caught-fail) in
        {122}let ss_7: symmetricstate = (if v_28 then catch-fail((if v_31 then (if v_33 then (if v_35 then symmetricstatepack(cipherstatepack(temp_k_1,minnonce),ck_8,h_6) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {123}let v_36: bool = not-caught-fail(ss_7) in
        {124}let basis_3: key = (if v_36 then key_s(me) else caught-fail) in
        {125}let public_key_3: key = (if v_36 then catch-fail(dhexp(basis_3,validkey(g))) else caught-fail) in
        {126}let v_37: bool = not-caught-fail(public_key_3) in
        {127}let s_2: keypair = (if v_36 then catch-fail((if v_37 then keypairpack(validkey(public_key_3),basis_3) else fail-any)) else caught-fail) in
        {128}let v_38: bool = not-caught-fail(s_2) in
        {129}let plaintext: bitstring = (if v_38 then catch-fail(getpublickey(s_2)) else caught-fail) in
        {130}let v_39: bool = not-caught-fail(plaintext) in
        {131}let v_40: bitstring = (if v_39 then catch-fail(symmetricstateunpack(ss_7)) else caught-fail) in
        {132}let v_41: bool = (not-caught-fail(v_40) && success?(1-proj-3-tuple(v_40))) in
        {133}let h_7: bitstring = (if v_41 then 3-proj-3-tuple(v_40) else caught-fail) in
        {134}let ck_9: key = (if v_41 then 2-proj-3-tuple(v_40) else caught-fail) in
        {135}let cs_7: cipherstate = (if v_41 then 1-proj-3-tuple(v_40) else caught-fail) in
        {136}let v_42: bitstring = (if v_41 then catch-fail(cipherstateunpack(cs_7)) else caught-fail) in
        {137}let v_43: bool = (not-caught-fail(v_42) && success?(1-proj-2-tuple(v_42))) in
        {138}let n: nonce = (if v_43 then 2-proj-2-tuple(v_42) else caught-fail) in
        {139}let k_1: key = (if v_43 then 1-proj-2-tuple(v_42) else caught-fail) in
        {142}let v_44: bitstring = (if v_43 then catch-fail(cipherstateunpack(cs_7)) else caught-fail) in
        {143}let v_45: bool = (not-caught-fail(v_44) && success?(1-proj-2-tuple(v_44))) in
        {144}let o: nonce = (if v_45 then 2-proj-2-tuple(v_44) else caught-fail) in
        {145}let k_2: key = (if v_45 then 1-proj-2-tuple(v_44) else caught-fail) in
        {141}let n_1: nonce = (if v_43 then increment_nonce(n) else caught-fail) in
        {146}let csi: cipherstate = (if v_43 then catch-fail((if v_45 then cipherstatepack(k_2,n_1) else fail-any)) else caught-fail) in
        {147}let v_46: bool = not-caught-fail(csi) in
        {140}let e_3: bitstring = (if v_43 then encrypt(k_1,n,h_7,plaintext) else caught-fail) in
        {148}let v_47: bitstring = (if v_41 then catch-fail((if v_43 then (if v_46 then (csi,e_3) else fail-any) else fail-any)) else caught-fail) in
        {149}let v_48: bool = (not-caught-fail(v_47) && success?(1-proj-2-tuple(v_47))) in
        {150}let ciphertext_1: bitstring = (if v_48 then 2-proj-2-tuple(v_47) else caught-fail) in
        {151}let csi_1: cipherstate = (if v_48 then 1-proj-2-tuple(v_47) else caught-fail) in
        {152}let ss_8: symmetricstate = (if v_48 then symmetricstatepack(csi_1,ck_9,h_7) else caught-fail) in
        {153}let v_49: bitstring = (if v_48 then catch-fail(symmetricstateunpack(ss_8)) else caught-fail) in
        {154}let v_50: bool = (not-caught-fail(v_49) && success?(1-proj-3-tuple(v_49))) in
        {155}let h_8: bitstring = (if v_50 then 3-proj-3-tuple(v_49) else caught-fail) in
        {156}let ck_10: key = (if v_50 then 2-proj-3-tuple(v_49) else caught-fail) in
        {157}let cs_8: cipherstate = (if v_50 then 1-proj-3-tuple(v_49) else caught-fail) in
        {158}let ssi: symmetricstate = (if v_48 then catch-fail((if v_50 then symmetricstatepack(cs_8,ck_10,hash(h_8,ciphertext_1)) else fail-any)) else caught-fail) in
        {159}let v_51: bool = not-caught-fail(ssi) in
        {160}let v_52: bitstring = (if v_38 then catch-fail((if v_39 then (if v_41 then (if v_48 then (if v_51 then (ssi,ciphertext_1) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {161}let v_53: bool = (not-caught-fail(v_52) && success?(1-proj-2-tuple(v_52))) in
        {162}let ns_1: bitstring = (if v_53 then 2-proj-2-tuple(v_52) else caught-fail) in
        {163}let ss_9: symmetricstate = (if v_53 then 1-proj-2-tuple(v_52) else caught-fail) in
        {164}let basis_4: key = (if v_53 then key_m(me) else caught-fail) in
        {165}let public_key_4: key = (if v_53 then catch-fail(dhexp(basis_4,validkey(g))) else caught-fail) in
        {166}let v_54: bool = not-caught-fail(public_key_4) in
        {167}let m_2: keypair = (if v_53 then catch-fail((if v_54 then keypairpack(validkey(public_key_4),basis_4) else fail-any)) else caught-fail) in
        {168}let v_55: bool = not-caught-fail(m_2) in
        {169}let plaintext_1: bitstring = (if v_55 then catch-fail(getpublickey(m_2)) else caught-fail) in
        {170}let v_56: bool = not-caught-fail(plaintext_1) in
        {171}let v_57: bitstring = (if v_56 then catch-fail(symmetricstateunpack(ss_9)) else caught-fail) in
        {172}let v_58: bool = (not-caught-fail(v_57) && success?(1-proj-3-tuple(v_57))) in
        {173}let h_9: bitstring = (if v_58 then 3-proj-3-tuple(v_57) else caught-fail) in
        {174}let ck_11: key = (if v_58 then 2-proj-3-tuple(v_57) else caught-fail) in
        {175}let cs_9: cipherstate = (if v_58 then 1-proj-3-tuple(v_57) else caught-fail) in
        {176}let v_59: bitstring = (if v_58 then catch-fail(cipherstateunpack(cs_9)) else caught-fail) in
        {177}let v_60: bool = (not-caught-fail(v_59) && success?(1-proj-2-tuple(v_59))) in
        {178}let n_2: nonce = (if v_60 then 2-proj-2-tuple(v_59) else caught-fail) in
        {179}let k_3: key = (if v_60 then 1-proj-2-tuple(v_59) else caught-fail) in
        {182}let v_61: bitstring = (if v_60 then catch-fail(cipherstateunpack(cs_9)) else caught-fail) in
        {183}let v_62: bool = (not-caught-fail(v_61) && success?(1-proj-2-tuple(v_61))) in
        {184}let o_1: nonce = (if v_62 then 2-proj-2-tuple(v_61) else caught-fail) in
        {185}let k_4: key = (if v_62 then 1-proj-2-tuple(v_61) else caught-fail) in
        {181}let n_3: nonce = (if v_60 then increment_nonce(n_2) else caught-fail) in
        {186}let csi_2: cipherstate = (if v_60 then catch-fail((if v_62 then cipherstatepack(k_4,n_3) else fail-any)) else caught-fail) in
        {187}let v_63: bool = not-caught-fail(csi_2) in
        {180}let e_4: bitstring = (if v_60 then encrypt(k_3,n_2,h_9,plaintext_1) else caught-fail) in
        {188}let v_64: bitstring = (if v_58 then catch-fail((if v_60 then (if v_63 then (csi_2,e_4) else fail-any) else fail-any)) else caught-fail) in
        {189}let v_65: bool = (not-caught-fail(v_64) && success?(1-proj-2-tuple(v_64))) in
        {190}let ciphertext_2: bitstring = (if v_65 then 2-proj-2-tuple(v_64) else caught-fail) in
        {191}let csi_3: cipherstate = (if v_65 then 1-proj-2-tuple(v_64) else caught-fail) in
        {192}let ss_10: symmetricstate = (if v_65 then symmetricstatepack(csi_3,ck_11,h_9) else caught-fail) in
        {193}let v_66: bitstring = (if v_65 then catch-fail(symmetricstateunpack(ss_10)) else caught-fail) in
        {194}let v_67: bool = (not-caught-fail(v_66) && success?(1-proj-3-tuple(v_66))) in
        {195}let h_10: bitstring = (if v_67 then 3-proj-3-tuple(v_66) else caught-fail) in
        {196}let ck_12: key = (if v_67 then 2-proj-3-tuple(v_66) else caught-fail) in
        {197}let cs_10: cipherstate = (if v_67 then 1-proj-3-tuple(v_66) else caught-fail) in
        {198}let ssi_1: symmetricstate = (if v_65 then catch-fail((if v_67 then symmetricstatepack(cs_10,ck_12,hash(h_10,ciphertext_2)) else fail-any)) else caught-fail) in
        {199}let v_68: bool = not-caught-fail(ssi_1) in
        {200}let v_69: bitstring = (if v_55 then catch-fail((if v_56 then (if v_58 then (if v_65 then (if v_68 then (ssi_1,ciphertext_2) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {201}let v_70: bool = (not-caught-fail(v_69) && success?(1-proj-2-tuple(v_69))) in
        {202}let nm_1: bitstring = (if v_70 then 2-proj-2-tuple(v_69) else caught-fail) in
        {203}let ss_11: symmetricstate = (if v_70 then 1-proj-2-tuple(v_69) else caught-fail) in
        {204}let v_71: bitstring = (if v_70 then catch-fail(symmetricstateunpack(ss_11)) else caught-fail) in
        {205}let v_72: bool = (not-caught-fail(v_71) && success?(1-proj-3-tuple(v_71))) in
        {206}let h_11: bitstring = (if v_72 then 3-proj-3-tuple(v_71) else caught-fail) in
        {207}let ck_13: key = (if v_72 then 2-proj-3-tuple(v_71) else caught-fail) in
        {208}let cs_11: cipherstate = (if v_72 then 1-proj-3-tuple(v_71) else caught-fail) in
        {209}let v_73: bitstring = (if v_72 then catch-fail(cipherstateunpack(cs_11)) else caught-fail) in
        {210}let v_74: bool = (not-caught-fail(v_73) && success?(1-proj-2-tuple(v_73))) in
        {211}let n_4: nonce = (if v_74 then 2-proj-2-tuple(v_73) else caught-fail) in
        {212}let k_5: key = (if v_74 then 1-proj-2-tuple(v_73) else caught-fail) in
        {215}let v_75: bitstring = (if v_74 then catch-fail(cipherstateunpack(cs_11)) else caught-fail) in
        {216}let v_76: bool = (not-caught-fail(v_75) && success?(1-proj-2-tuple(v_75))) in
        {217}let o_2: nonce = (if v_76 then 2-proj-2-tuple(v_75) else caught-fail) in
        {218}let k_6: key = (if v_76 then 1-proj-2-tuple(v_75) else caught-fail) in
        {214}let n_5: nonce = (if v_74 then increment_nonce(n_4) else caught-fail) in
        {219}let csi_4: cipherstate = (if v_74 then catch-fail((if v_76 then cipherstatepack(k_6,n_5) else fail-any)) else caught-fail) in
        {220}let v_77: bool = not-caught-fail(csi_4) in
        {50}let payload: bitstring = msg_a(me,them,sid_1) in
        {213}let e_5: bitstring = (if v_74 then encrypt(k_5,n_4,h_11,payload) else caught-fail) in
        {221}let v_78: bitstring = (if v_72 then catch-fail((if v_74 then (if v_77 then (csi_4,e_5) else fail-any) else fail-any)) else caught-fail) in
        {222}let v_79: bool = (not-caught-fail(v_78) && success?(1-proj-2-tuple(v_78))) in
        {223}let ciphertext_3: bitstring = (if v_79 then 2-proj-2-tuple(v_78) else caught-fail) in
        {224}let csi_5: cipherstate = (if v_79 then 1-proj-2-tuple(v_78) else caught-fail) in
        {225}let ss_12: symmetricstate = (if v_79 then symmetricstatepack(csi_5,ck_13,h_11) else caught-fail) in
        {226}let v_80: bitstring = (if v_79 then catch-fail(symmetricstateunpack(ss_12)) else caught-fail) in
        {227}let v_81: bool = (not-caught-fail(v_80) && success?(1-proj-3-tuple(v_80))) in
        {228}let h_12: bitstring = (if v_81 then 3-proj-3-tuple(v_80) else caught-fail) in
        {229}let ck_14: key = (if v_81 then 2-proj-3-tuple(v_80) else caught-fail) in
        {230}let cs_12: cipherstate = (if v_81 then 1-proj-3-tuple(v_80) else caught-fail) in
        {231}let ssi_2: symmetricstate = (if v_79 then catch-fail((if v_81 then symmetricstatepack(cs_12,ck_14,hash(h_12,ciphertext_3)) else fail-any)) else caught-fail) in
        {232}let v_82: bool = not-caught-fail(ssi_2) in
        {233}let v_83: bitstring = (if v_70 then catch-fail((if v_72 then (if v_79 then (if v_82 then (ssi_2,ciphertext_3) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {234}let v_84: bool = (not-caught-fail(v_83) && success?(1-proj-2-tuple(v_83))) in
        {235}let ciphertext_4: bitstring = (if v_84 then 2-proj-2-tuple(v_83) else caught-fail) in
        {236}let ss_13: symmetricstate = (if v_84 then 1-proj-2-tuple(v_83) else caught-fail) in
        {238}let message_buffer: bitstring = (if v_84 then concat4(ne_1,ns_1,nm_1,ciphertext_4) else caught-fail) in
        {237}let hs_2: handshakestate = (if v_84 then handshakestatepack(ss_13,s_2,m_2,e_2,rs_1,rm_1,re_1,psk_1,initiator_1) else caught-fail) in
        {239}let (hs_3: handshakestate,message_a: bitstring) = (if v_12 then (if v_14 then (if v_16 then (if v_17 then (if v_20 then (if v_28 then (if v_36 then (if v_38 then (if v_53 then (if v_55 then (if v_70 then (if v_84 then (hs_2,message_buffer) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {240}event SendMsg(me,them,stagepack_a(sid_1),msg_a(me,them,sid_1));
        {241}insert statestore(me,them,sid_1,statepack_b(hs_3));
        {242}out(pub, message_a)
    ) | (
        {400}get statestore(=me,=them,=sid_1,statepack_b(hs_4: handshakestate)) in
        {244}in(pub, message_b: bitstring);
        {245}let v_85: bitstring = catch-fail(handshakestateunpack(hs_4)) in
        {246}let v_86: bool = (not-caught-fail(v_85) && success?(1-proj-9-tuple(v_85))) in
        {247}let initiator_2: bool = (if v_86 then 9-proj-9-tuple(v_85) else caught-fail) in
        {248}let psk_2: key = (if v_86 then 8-proj-9-tuple(v_85) else caught-fail) in
        {249}let re_2: key = (if v_86 then 7-proj-9-tuple(v_85) else caught-fail) in
        {250}let rm_2: key = (if v_86 then 6-proj-9-tuple(v_85) else caught-fail) in
        {251}let rs_2: key = (if v_86 then 5-proj-9-tuple(v_85) else caught-fail) in
        {252}let e_6: keypair = (if v_86 then 4-proj-9-tuple(v_85) else caught-fail) in
        {253}let m_3: keypair = (if v_86 then 3-proj-9-tuple(v_85) else caught-fail) in
        {254}let s_3: keypair = (if v_86 then 2-proj-9-tuple(v_85) else caught-fail) in
        {255}let ss_14: symmetricstate = (if v_86 then 1-proj-9-tuple(v_85) else caught-fail) in
        {256}let v_87: bitstring = (if v_86 then catch-fail(deconcat3(message_b)) else caught-fail) in
        {257}let v_88: bool = (not-caught-fail(v_87) && success?(1-proj-3-tuple(v_87))) in
        {258}let ciphertext_5: bitstring = (if v_88 then 3-proj-3-tuple(v_87) else caught-fail) in
        {259}let ns_2: bitstring = (if v_88 then 2-proj-3-tuple(v_87) else caught-fail) in
        {260}let ne_2: bitstring = (if v_88 then 1-proj-3-tuple(v_87) else caught-fail) in
        {263}let v_89: bitstring = (if v_88 then catch-fail(symmetricstateunpack(ss_14)) else caught-fail) in
        {264}let v_90: bool = (not-caught-fail(v_89) && success?(1-proj-3-tuple(v_89))) in
        {265}let h_13: bitstring = (if v_90 then 3-proj-3-tuple(v_89) else caught-fail) in
        {266}let ck_15: key = (if v_90 then 2-proj-3-tuple(v_89) else caught-fail) in
        {267}let cs_13: cipherstate = (if v_90 then 1-proj-3-tuple(v_89) else caught-fail) in
        {262}let re_3: key = (if v_88 then ne_2 else caught-fail) in
        {268}let ss_15: symmetricstate = (if v_88 then catch-fail((if v_90 then symmetricstatepack(cs_13,ck_15,hash(h_13,re_3)) else fail-any)) else caught-fail) in
        {269}let v_91: bool = not-caught-fail(ss_15) in
        {270}let v_92: bitstring = (if v_91 then catch-fail(keypairunpack(e_6)) else caught-fail) in
        {271}let v_93: bool = (not-caught-fail(v_92) && success?(1-proj-2-tuple(v_92))) in
        {272}let my_private_key_2: key = (if v_93 then 2-proj-2-tuple(v_92) else caught-fail) in
        {273}let my_public_key_2: key = (if v_93 then 1-proj-2-tuple(v_92) else caught-fail) in
        {274}let input_key_material_2: key = (if v_91 then catch-fail((if v_93 then dhexp(my_private_key_2,re_3) else fail-any)) else caught-fail) in
        {275}let v_94: bool = not-caught-fail(input_key_material_2) in
        {276}let v_95: bitstring = (if v_94 then catch-fail(symmetricstateunpack(ss_15)) else caught-fail) in
        {277}let v_96: bool = (not-caught-fail(v_95) && success?(1-proj-3-tuple(v_95))) in
        {278}let h_14: bitstring = (if v_96 then 3-proj-3-tuple(v_95) else caught-fail) in
        {279}let ck_16: key = (if v_96 then 2-proj-3-tuple(v_95) else caught-fail) in
        {280}let cs_14: cipherstate = (if v_96 then 1-proj-3-tuple(v_95) else caught-fail) in
        {283}let output3_2: key = (if v_96 then hmac_hash3(ck_16,input_key_material_2) else caught-fail) in
        {282}let output2_2: key = (if v_96 then hmac_hash2(ck_16,input_key_material_2) else caught-fail) in
        {281}let output1_2: key = (if v_96 then hmac_hash1(ck_16,input_key_material_2) else caught-fail) in
        {284}let v_97: bitstring = (if v_96 then catch-fail((output1_2,output2_2,output3_2)) else caught-fail) in
        {285}let v_98: bool = (not-caught-fail(v_97) && success?(1-proj-3-tuple(v_97))) in
        {286}let output_1: key = (if v_98 then 3-proj-3-tuple(v_97) else caught-fail) in
        {287}let temp_k_2: key = (if v_98 then 2-proj-3-tuple(v_97) else caught-fail) in
        {288}let ck_17: key = (if v_98 then 1-proj-3-tuple(v_97) else caught-fail) in
        {289}let ss_16: symmetricstate = (if v_91 then catch-fail((if v_94 then (if v_96 then (if v_98 then symmetricstatepack(cipherstatepack(temp_k_2,minnonce),ck_17,h_14) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {290}let v_99: bool = not-caught-fail(ss_16) in
        {291}let v_100: bitstring = (if v_99 then catch-fail(keypairunpack(s_3)) else caught-fail) in
        {292}let v_101: bool = (not-caught-fail(v_100) && success?(1-proj-2-tuple(v_100))) in
        {293}let my_private_key_3: key = (if v_101 then 2-proj-2-tuple(v_100) else caught-fail) in
        {294}let my_public_key_3: key = (if v_101 then 1-proj-2-tuple(v_100) else caught-fail) in
        {295}let input_key_material_3: key = (if v_99 then catch-fail((if v_101 then dhexp(my_private_key_3,re_3) else fail-any)) else caught-fail) in
        {296}let v_102: bool = not-caught-fail(input_key_material_3) in
        {297}let v_103: bitstring = (if v_102 then catch-fail(symmetricstateunpack(ss_16)) else caught-fail) in
        {298}let v_104: bool = (not-caught-fail(v_103) && success?(1-proj-3-tuple(v_103))) in
        {299}let h_15: bitstring = (if v_104 then 3-proj-3-tuple(v_103) else caught-fail) in
        {300}let ck_18: key = (if v_104 then 2-proj-3-tuple(v_103) else caught-fail) in
        {301}let cs_15: cipherstate = (if v_104 then 1-proj-3-tuple(v_103) else caught-fail) in
        {304}let output3_3: key = (if v_104 then hmac_hash3(ck_18,input_key_material_3) else caught-fail) in
        {303}let output2_3: key = (if v_104 then hmac_hash2(ck_18,input_key_material_3) else caught-fail) in
        {302}let output1_3: key = (if v_104 then hmac_hash1(ck_18,input_key_material_3) else caught-fail) in
        {305}let v_105: bitstring = (if v_104 then catch-fail((output1_3,output2_3,output3_3)) else caught-fail) in
        {306}let v_106: bool = (not-caught-fail(v_105) && success?(1-proj-3-tuple(v_105))) in
        {307}let output_2: key = (if v_106 then 3-proj-3-tuple(v_105) else caught-fail) in
        {308}let temp_k_3: key = (if v_106 then 2-proj-3-tuple(v_105) else caught-fail) in
        {309}let ck_19: key = (if v_106 then 1-proj-3-tuple(v_105) else caught-fail) in
        {310}let ss_17: symmetricstate = (if v_99 then catch-fail((if v_102 then (if v_104 then (if v_106 then symmetricstatepack(cipherstatepack(temp_k_3,minnonce),ck_19,h_15) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {311}let v_107: bool = not-caught-fail(ss_17) in
        {312}let v_108: bitstring = (if v_107 then catch-fail(keypairunpack(m_3)) else caught-fail) in
        {313}let v_109: bool = (not-caught-fail(v_108) && success?(1-proj-2-tuple(v_108))) in
        {314}let my_private_key_4: key = (if v_109 then 2-proj-2-tuple(v_108) else caught-fail) in
        {315}let my_public_key_4: key = (if v_109 then 1-proj-2-tuple(v_108) else caught-fail) in
        {316}let input_key_material_4: key = (if v_107 then catch-fail((if v_109 then dhexp(my_private_key_4,re_3) else fail-any)) else caught-fail) in
        {317}let v_110: bool = not-caught-fail(input_key_material_4) in
        {318}let v_111: bitstring = (if v_110 then catch-fail(symmetricstateunpack(ss_17)) else caught-fail) in
        {319}let v_112: bool = (not-caught-fail(v_111) && success?(1-proj-3-tuple(v_111))) in
        {320}let h_16: bitstring = (if v_112 then 3-proj-3-tuple(v_111) else caught-fail) in
        {321}let ck_20: key = (if v_112 then 2-proj-3-tuple(v_111) else caught-fail) in
        {322}let cs_16: cipherstate = (if v_112 then 1-proj-3-tuple(v_111) else caught-fail) in
        {325}let output3_4: key = (if v_112 then hmac_hash3(ck_20,input_key_material_4) else caught-fail) in
        {324}let output2_4: key = (if v_112 then hmac_hash2(ck_20,input_key_material_4) else caught-fail) in
        {323}let output1_4: key = (if v_112 then hmac_hash1(ck_20,input_key_material_4) else caught-fail) in
        {326}let v_113: bitstring = (if v_112 then catch-fail((output1_4,output2_4,output3_4)) else caught-fail) in
        {327}let v_114: bool = (not-caught-fail(v_113) && success?(1-proj-3-tuple(v_113))) in
        {328}let output_4: key = (if v_114 then 3-proj-3-tuple(v_113) else caught-fail) in
        {329}let temp_k_4: key = (if v_114 then 2-proj-3-tuple(v_113) else caught-fail) in
        {330}let ck_21: key = (if v_114 then 1-proj-3-tuple(v_113) else caught-fail) in
        {331}let ss_18: symmetricstate = (if v_107 then catch-fail((if v_110 then (if v_112 then (if v_114 then symmetricstatepack(cipherstatepack(temp_k_4,minnonce),ck_21,h_16) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {332}let v_115: bool = not-caught-fail(ss_18) in
        {333}let v_116: bitstring = (if v_115 then catch-fail(symmetricstateunpack(ss_18)) else caught-fail) in
        {334}let v_117: bool = (not-caught-fail(v_116) && success?(1-proj-3-tuple(v_116))) in
        {335}let h_17: bitstring = (if v_117 then 3-proj-3-tuple(v_116) else caught-fail) in
        {336}let ck_22: key = (if v_117 then 2-proj-3-tuple(v_116) else caught-fail) in
        {337}let cs_17: cipherstate = (if v_117 then 1-proj-3-tuple(v_116) else caught-fail) in
        {338}let v_118: bitstring = (if v_117 then catch-fail(cipherstateunpack(cs_17)) else caught-fail) in
        {339}let v_119: bool = (not-caught-fail(v_118) && success?(1-proj-2-tuple(v_118))) in
        {340}let n_6: nonce = (if v_119 then 2-proj-2-tuple(v_118) else caught-fail) in
        {341}let k_7: key = (if v_119 then 1-proj-2-tuple(v_118) else caught-fail) in
        {342}let d: aead = (if v_119 then catch-fail(decrypt(k_7,n_6,h_17,ciphertext_5)) else caught-fail) in
        {343}let v_120: bool = not-caught-fail(d) in
        {344}let v_121: bitstring = (if v_120 then catch-fail(aeadunpack(d)) else caught-fail) in
        {345}let v_122: bool = (not-caught-fail(v_121) && success?(1-proj-3-tuple(v_121))) in
        {346}let plaintext_2: bitstring = (if v_122 then 3-proj-3-tuple(v_121) else caught-fail) in
        {347}let adi: bitstring = (if v_122 then 2-proj-3-tuple(v_121) else caught-fail) in
        {348}let valid: bool = (if v_122 then 1-proj-3-tuple(v_121) else caught-fail) in
        {350}let v_123: bitstring = (if v_122 then catch-fail(cipherstateunpack(cs_17)) else caught-fail) in
        {351}let v_124: bool = (not-caught-fail(v_123) && success?(1-proj-2-tuple(v_123))) in
        {352}let o_3: nonce = (if v_124 then 2-proj-2-tuple(v_123) else caught-fail) in
        {353}let k_8: key = (if v_124 then 1-proj-2-tuple(v_123) else caught-fail) in
        {349}let n_7: nonce = (if v_122 then increment_nonce(n_6) else caught-fail) in
        {354}let csi_6: cipherstate = (if v_122 then catch-fail((if v_124 then cipherstatepack(k_8,n_7) else fail-any)) else caught-fail) in
        {355}let v_125: bool = not-caught-fail(csi_6) in
        {356}let v_126: bitstring = (if v_117 then catch-fail((if v_119 then (if v_120 then (if v_122 then (if v_125 then (csi_6,plaintext_2,valid) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {357}let v_127: bool = (not-caught-fail(v_126) && success?(1-proj-3-tuple(v_126))) in
        {358}let valid_1: bool = (if v_127 then 3-proj-3-tuple(v_126) else caught-fail) in
        {359}let plaintext_3: bitstring = (if v_127 then 2-proj-3-tuple(v_126) else caught-fail) in
        {360}let csi_7: cipherstate = (if v_127 then 1-proj-3-tuple(v_126) else caught-fail) in
        {361}let ss_19: symmetricstate = (if v_127 then symmetricstatepack(csi_7,ck_22,h_17) else caught-fail) in
        {362}let v_128: bitstring = (if v_127 then catch-fail(symmetricstateunpack(ss_19)) else caught-fail) in
        {363}let v_129: bool = (not-caught-fail(v_128) && success?(1-proj-3-tuple(v_128))) in
        {364}let h_18: bitstring = (if v_129 then 3-proj-3-tuple(v_128) else caught-fail) in
        {365}let ck_23: key = (if v_129 then 2-proj-3-tuple(v_128) else caught-fail) in
        {366}let cs_18: cipherstate = (if v_129 then 1-proj-3-tuple(v_128) else caught-fail) in
        {367}let ssi_3: symmetricstate = (if v_127 then catch-fail((if v_129 then symmetricstatepack(cs_18,ck_23,hash(h_18,ciphertext_5)) else fail-any)) else caught-fail) in
        {368}let v_130: bool = not-caught-fail(ssi_3) in
        {369}let v_131: bitstring = (if v_115 then catch-fail((if v_117 then (if v_127 then (if v_130 then (ssi_3,plaintext_3,valid_1) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {370}let v_132: bool = (not-caught-fail(v_131) && success?(1-proj-3-tuple(v_131))) in
        {371}let valid2: bool = (if v_132 then 3-proj-3-tuple(v_131) else caught-fail) in
        {372}let plaintext_4: bitstring = (if v_132 then 2-proj-3-tuple(v_131) else caught-fail) in
        {373}let ss_20: symmetricstate = (if v_132 then 1-proj-3-tuple(v_131) else caught-fail) in
        {261}let valid1: bool = (if v_88 then true else caught-fail) in
        {374}let v_133: bool = (if v_132 then catch-fail((valid1 && valid2)) else caught-fail) in
        {376}let v_134: bitstring = (if v_133 then catch-fail(symmetricstateunpack(ss_20)) else caught-fail) in
        {377}let v_135: bool = (not-caught-fail(v_134) && success?(1-proj-3-tuple(v_134))) in
        {378}let h_19: bitstring = (if v_135 then 3-proj-3-tuple(v_134) else caught-fail) in
        {379}let ck_24: key = (if v_135 then 2-proj-3-tuple(v_134) else caught-fail) in
        {380}let cs_19: cipherstate = (if v_135 then 1-proj-3-tuple(v_134) else caught-fail) in
        {381}let input_key_material_5: key = (if v_135 then zero else caught-fail) in
        {384}let output3_5: key = (if v_135 then hmac_hash3(ck_24,input_key_material_5) else caught-fail) in
        {383}let output2_5: key = (if v_135 then hmac_hash2(ck_24,input_key_material_5) else caught-fail) in
        {382}let output1_5: key = (if v_135 then hmac_hash1(ck_24,input_key_material_5) else caught-fail) in
        {385}let v_136: bitstring = (if v_135 then catch-fail((output1_5,output2_5,output3_5)) else caught-fail) in
        {386}let v_137: bool = (not-caught-fail(v_136) && success?(1-proj-3-tuple(v_136))) in
        {387}let temp_k3: key = (if v_137 then 3-proj-3-tuple(v_136) else caught-fail) in
        {388}let temp_k2: key = (if v_137 then 2-proj-3-tuple(v_136) else caught-fail) in
        {389}let temp_k1: key = (if v_137 then 1-proj-3-tuple(v_136) else caught-fail) in
        {391}let cs2: cipherstate = (if v_137 then cipherstatepack(temp_k2,minnonce) else caught-fail) in
        {390}let cs1: cipherstate = (if v_137 then cipherstatepack(temp_k1,minnonce) else caught-fail) in
        {392}let v_138: bitstring = (if v_133 then catch-fail((if v_135 then (if v_137 then (ss_20,cs1,cs2) else fail-any) else fail-any)) else caught-fail) in
        {393}let v_139: bool = (not-caught-fail(v_138) && success?(1-proj-3-tuple(v_138))) in
        {394}let cs2_1: cipherstate = (if v_139 then 3-proj-3-tuple(v_138) else caught-fail) in
        {395}let cs1_1: cipherstate = (if v_139 then 2-proj-3-tuple(v_138) else caught-fail) in
        {396}let ssi_4: symmetricstate = (if v_139 then 1-proj-3-tuple(v_138) else caught-fail) in
        {375}let hs_5: handshakestate = (if v_133 then handshakestatepack(ss_20,s_3,m_3,e_6,rs_2,rm_2,re_3,psk_2,initiator_2) else caught-fail) in
        {397}let (hs_6: handshakestate,plaintext_b: bitstring,valid_2: bool,cs1_2: cipherstate,cs2_2: cipherstate) = (if v_86 then (if v_88 then (if v_91 then (if v_99 then (if v_107 then (if v_115 then (if v_132 then (if undo-catch-fail(v_133) then (if v_139 then (hs_5,plaintext_4,true,cs1_1,cs2_1) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {398}event RecvMsg(me,them,stagepack_b(sid_1),plaintext_b);
        {399}insert statestore(me,them,sid_1,statepack_c(hs_6,cs1_2,cs2_2))
    ) | (
        {401}!
        {459}get statestore(=me,=them,=sid_1,statepack_c(hs_7: handshakestate,cs1_3: cipherstate,cs2_3: cipherstate)) in
        {402}let hs_8: handshakestate = handshakestatesetcs(hs_7,cs1_3) in
        {404}let v_140: bitstring = catch-fail(handshakestateunpack(hs_8)) in
        {405}let v_141: bool = (not-caught-fail(v_140) && success?(1-proj-9-tuple(v_140))) in
        {406}let initiator_3: bool = (if v_141 then 9-proj-9-tuple(v_140) else caught-fail) in
        {407}let psk_3: key = (if v_141 then 8-proj-9-tuple(v_140) else caught-fail) in
        {408}let re_4: key = (if v_141 then 7-proj-9-tuple(v_140) else caught-fail) in
        {409}let rm_3: key = (if v_141 then 6-proj-9-tuple(v_140) else caught-fail) in
        {410}let rs_3: key = (if v_141 then 5-proj-9-tuple(v_140) else caught-fail) in
        {411}let e_7: keypair = (if v_141 then 4-proj-9-tuple(v_140) else caught-fail) in
        {412}let m_4: keypair = (if v_141 then 3-proj-9-tuple(v_140) else caught-fail) in
        {413}let s_4: keypair = (if v_141 then 2-proj-9-tuple(v_140) else caught-fail) in
        {414}let ss_21: symmetricstate = (if v_141 then 1-proj-9-tuple(v_140) else caught-fail) in
        {415}let v_142: bitstring = (if v_141 then catch-fail((empty,empty,empty)) else caught-fail) in
        {416}let v_143: bool = (not-caught-fail(v_142) && success?(1-proj-3-tuple(v_142))) in
        {417}let ciphertext_6: bitstring = (if v_143 then 3-proj-3-tuple(v_142) else caught-fail) in
        {418}let ns_3: bitstring = (if v_143 then 2-proj-3-tuple(v_142) else caught-fail) in
        {419}let ne_3: bitstring = (if v_143 then 1-proj-3-tuple(v_142) else caught-fail) in
        {420}let v_144: bitstring = (if v_143 then catch-fail(symmetricstateunpack(ss_21)) else caught-fail) in
        {421}let v_145: bool = (not-caught-fail(v_144) && success?(1-proj-3-tuple(v_144))) in
        {422}let h_20: bitstring = (if v_145 then 3-proj-3-tuple(v_144) else caught-fail) in
        {423}let ck_25: key = (if v_145 then 2-proj-3-tuple(v_144) else caught-fail) in
        {424}let cs_20: cipherstate = (if v_145 then 1-proj-3-tuple(v_144) else caught-fail) in
        {425}let v_146: bitstring = (if v_145 then catch-fail(cipherstateunpack(cs_20)) else caught-fail) in
        {426}let v_147: bool = (not-caught-fail(v_146) && success?(1-proj-2-tuple(v_146))) in
        {427}let n_8: nonce = (if v_147 then 2-proj-2-tuple(v_146) else caught-fail) in
        {428}let k_9: key = (if v_147 then 1-proj-2-tuple(v_146) else caught-fail) in
        {431}let v_148: bitstring = (if v_147 then catch-fail(cipherstateunpack(cs_20)) else caught-fail) in
        {432}let v_149: bool = (not-caught-fail(v_148) && success?(1-proj-2-tuple(v_148))) in
        {433}let o_4: nonce = (if v_149 then 2-proj-2-tuple(v_148) else caught-fail) in
        {434}let k_10: key = (if v_149 then 1-proj-2-tuple(v_148) else caught-fail) in
        {430}let n_9: nonce = (if v_147 then increment_nonce(n_8) else caught-fail) in
        {435}let csi_8: cipherstate = (if v_147 then catch-fail((if v_149 then cipherstatepack(k_10,n_9) else fail-any)) else caught-fail) in
        {436}let v_150: bool = not-caught-fail(csi_8) in
        {403}let payload_1: bitstring = msg_c(me,them,sid_1) in
        {429}let e_8: bitstring = (if v_147 then encrypt(k_9,n_8,h_20,payload_1) else caught-fail) in
        {437}let v_151: bitstring = (if v_145 then catch-fail((if v_147 then (if v_150 then (csi_8,e_8) else fail-any) else fail-any)) else caught-fail) in
        {438}let v_152: bool = (not-caught-fail(v_151) && success?(1-proj-2-tuple(v_151))) in
        {439}let ciphertext_7: bitstring = (if v_152 then 2-proj-2-tuple(v_151) else caught-fail) in
        {440}let csi_9: cipherstate = (if v_152 then 1-proj-2-tuple(v_151) else caught-fail) in
        {441}let ss_22: symmetricstate = (if v_152 then symmetricstatepack(csi_9,ck_25,h_20) else caught-fail) in
        {442}let v_153: bitstring = (if v_152 then catch-fail(symmetricstateunpack(ss_22)) else caught-fail) in
        {443}let v_154: bool = (not-caught-fail(v_153) && success?(1-proj-3-tuple(v_153))) in
        {444}let h_21: bitstring = (if v_154 then 3-proj-3-tuple(v_153) else caught-fail) in
        {445}let ck_26: key = (if v_154 then 2-proj-3-tuple(v_153) else caught-fail) in
        {446}let cs_21: cipherstate = (if v_154 then 1-proj-3-tuple(v_153) else caught-fail) in
        {447}let ssi_5: symmetricstate = (if v_152 then catch-fail((if v_154 then symmetricstatepack(cs_21,ck_26,hash(h_21,ciphertext_7)) else fail-any)) else caught-fail) in
        {448}let v_155: bool = not-caught-fail(ssi_5) in
        {449}let v_156: bitstring = (if v_143 then catch-fail((if v_145 then (if v_152 then (if v_155 then (ssi_5,ciphertext_7) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {450}let v_157: bool = (not-caught-fail(v_156) && success?(1-proj-2-tuple(v_156))) in
        {451}let ciphertext_8: bitstring = (if v_157 then 2-proj-2-tuple(v_156) else caught-fail) in
        {452}let ss_23: symmetricstate = (if v_157 then 1-proj-2-tuple(v_156) else caught-fail) in
        {454}let message_buffer_1: bitstring = (if v_157 then concat3(ne_3,ns_3,ciphertext_8) else caught-fail) in
        {453}let hs_9: handshakestate = (if v_157 then handshakestatepack(ss_23,s_4,m_4,e_7,rs_3,rm_3,re_4,psk_3,initiator_3) else caught-fail) in
        {455}let (hs_10: handshakestate,message_c: bitstring) = (if v_141 then (if v_143 then (if v_157 then (hs_9,message_buffer_1) else fail-any) else fail-any) else fail-any) in
        {456}event SendMsg(me,them,stagepack_c(sid_1),msg_c(me,them,sid_1));
        {457}insert statestore(me,them,sid_1,statepack_d(hs_10,handshakestategetcs(hs_10),cs2_3));
        {458}out(pub, message_c)
    ) | (
        {460}!
        {526}get statestore(=me,=them,=sid_1,statepack_d(hs_11: handshakestate,cs1_4: cipherstate,cs2_4: cipherstate)) in
        {461}let hs_12: handshakestate = handshakestatesetcs(hs_11,cs2_4) in
        {462}in(pub, message_d: bitstring);
        {463}let v_158: bitstring = catch-fail(handshakestateunpack(hs_12)) in
        {464}let v_159: bool = (not-caught-fail(v_158) && success?(1-proj-9-tuple(v_158))) in
        {465}let initiator_4: bool = (if v_159 then 9-proj-9-tuple(v_158) else caught-fail) in
        {466}let psk_4: key = (if v_159 then 8-proj-9-tuple(v_158) else caught-fail) in
        {467}let re_5: key = (if v_159 then 7-proj-9-tuple(v_158) else caught-fail) in
        {468}let rm_4: key = (if v_159 then 6-proj-9-tuple(v_158) else caught-fail) in
        {469}let rs_4: key = (if v_159 then 5-proj-9-tuple(v_158) else caught-fail) in
        {470}let e_9: keypair = (if v_159 then 4-proj-9-tuple(v_158) else caught-fail) in
        {471}let m_5: keypair = (if v_159 then 3-proj-9-tuple(v_158) else caught-fail) in
        {472}let s_5: keypair = (if v_159 then 2-proj-9-tuple(v_158) else caught-fail) in
        {473}let ss_24: symmetricstate = (if v_159 then 1-proj-9-tuple(v_158) else caught-fail) in
        {474}let v_160: bitstring = (if v_159 then catch-fail(deconcat3(message_d)) else caught-fail) in
        {475}let v_161: bool = (not-caught-fail(v_160) && success?(1-proj-3-tuple(v_160))) in
        {476}let ciphertext_9: bitstring = (if v_161 then 3-proj-3-tuple(v_160) else caught-fail) in
        {477}let ns_4: bitstring = (if v_161 then 2-proj-3-tuple(v_160) else caught-fail) in
        {478}let ne_4: bitstring = (if v_161 then 1-proj-3-tuple(v_160) else caught-fail) in
        {480}let v_162: bitstring = (if v_161 then catch-fail(symmetricstateunpack(ss_24)) else caught-fail) in
        {481}let v_163: bool = (not-caught-fail(v_162) && success?(1-proj-3-tuple(v_162))) in
        {482}let h_22: bitstring = (if v_163 then 3-proj-3-tuple(v_162) else caught-fail) in
        {483}let ck_27: key = (if v_163 then 2-proj-3-tuple(v_162) else caught-fail) in
        {484}let cs_22: cipherstate = (if v_163 then 1-proj-3-tuple(v_162) else caught-fail) in
        {485}let v_164: bitstring = (if v_163 then catch-fail(cipherstateunpack(cs_22)) else caught-fail) in
        {486}let v_165: bool = (not-caught-fail(v_164) && success?(1-proj-2-tuple(v_164))) in
        {487}let n_10: nonce = (if v_165 then 2-proj-2-tuple(v_164) else caught-fail) in
        {488}let k_11: key = (if v_165 then 1-proj-2-tuple(v_164) else caught-fail) in
        {489}let d_1: aead = (if v_165 then catch-fail(decrypt(k_11,n_10,h_22,ciphertext_9)) else caught-fail) in
        {490}let v_166: bool = not-caught-fail(d_1) in
        {491}let v_167: bitstring = (if v_166 then catch-fail(aeadunpack(d_1)) else caught-fail) in
        {492}let v_168: bool = (not-caught-fail(v_167) && success?(1-proj-3-tuple(v_167))) in
        {493}let plaintext_5: bitstring = (if v_168 then 3-proj-3-tuple(v_167) else caught-fail) in
        {494}let adi_1: bitstring = (if v_168 then 2-proj-3-tuple(v_167) else caught-fail) in
        {495}let valid_3: bool = (if v_168 then 1-proj-3-tuple(v_167) else caught-fail) in
        {497}let v_169: bitstring = (if v_168 then catch-fail(cipherstateunpack(cs_22)) else caught-fail) in
        {498}let v_170: bool = (not-caught-fail(v_169) && success?(1-proj-2-tuple(v_169))) in
        {499}let o_5: nonce = (if v_170 then 2-proj-2-tuple(v_169) else caught-fail) in
        {500}let k_12: key = (if v_170 then 1-proj-2-tuple(v_169) else caught-fail) in
        {496}let n_11: nonce = (if v_168 then increment_nonce(n_10) else caught-fail) in
        {501}let csi_10: cipherstate = (if v_168 then catch-fail((if v_170 then cipherstatepack(k_12,n_11) else fail-any)) else caught-fail) in
        {502}let v_171: bool = not-caught-fail(csi_10) in
        {503}let v_172: bitstring = (if v_163 then catch-fail((if v_165 then (if v_166 then (if v_168 then (if v_171 then (csi_10,plaintext_5,valid_3) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {504}let v_173: bool = (not-caught-fail(v_172) && success?(1-proj-3-tuple(v_172))) in
        {505}let valid_4: bool = (if v_173 then 3-proj-3-tuple(v_172) else caught-fail) in
        {506}let plaintext_6: bitstring = (if v_173 then 2-proj-3-tuple(v_172) else caught-fail) in
        {507}let csi_11: cipherstate = (if v_173 then 1-proj-3-tuple(v_172) else caught-fail) in
        {508}let ss_25: symmetricstate = (if v_173 then symmetricstatepack(csi_11,ck_27,h_22) else caught-fail) in
        {509}let v_174: bitstring = (if v_173 then catch-fail(symmetricstateunpack(ss_25)) else caught-fail) in
        {510}let v_175: bool = (not-caught-fail(v_174) && success?(1-proj-3-tuple(v_174))) in
        {511}let h_23: bitstring = (if v_175 then 3-proj-3-tuple(v_174) else caught-fail) in
        {512}let ck_28: key = (if v_175 then 2-proj-3-tuple(v_174) else caught-fail) in
        {513}let cs_23: cipherstate = (if v_175 then 1-proj-3-tuple(v_174) else caught-fail) in
        {514}let ssi_6: symmetricstate = (if v_173 then catch-fail((if v_175 then symmetricstatepack(cs_23,ck_28,hash(h_23,ciphertext_9)) else fail-any)) else caught-fail) in
        {515}let v_176: bool = not-caught-fail(ssi_6) in
        {516}let v_177: bitstring = (if v_161 then catch-fail((if v_163 then (if v_173 then (if v_176 then (ssi_6,plaintext_6,valid_4) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {517}let v_178: bool = (not-caught-fail(v_177) && success?(1-proj-3-tuple(v_177))) in
        {518}let valid2_1: bool = (if v_178 then 3-proj-3-tuple(v_177) else caught-fail) in
        {519}let plaintext_7: bitstring = (if v_178 then 2-proj-3-tuple(v_177) else caught-fail) in
        {520}let ss_26: symmetricstate = (if v_178 then 1-proj-3-tuple(v_177) else caught-fail) in
        {479}let valid1_1: bool = (if v_161 then true else caught-fail) in
        {521}let v_179: bool = (if v_178 then catch-fail((valid1_1 && valid2_1)) else caught-fail) in
        {522}let hs_13: handshakestate = (if v_179 then handshakestatepack(ss_26,s_5,m_5,e_9,rs_4,rm_4,re_5,psk_4,initiator_4) else caught-fail) in
        {523}let (hs_14: handshakestate,plaintext_d: bitstring,valid_5: bool) = (if v_159 then (if v_161 then (if v_178 then (if undo-catch-fail(v_179) then (hs_13,plaintext_7,true) else fail-any) else fail-any) else fail-any) else fail-any) in
        {524}event RecvMsg(me,them,stagepack_d(sid_1),plaintext_d);
        {525}event RecvEnd(valid_5)
    ) | (
        0
    )
) | (
    {529}let sid_2: sessionid = sid in
    {528}let them_1: principal = charlie in
    {527}let me_1: principal = alice in
    (
        {533}let basis_5: key = key_s(them_1) in
        {534}let public_key_5: key = catch-fail(dhexp(basis_5,validkey(g))) in
        {535}let v_180: bool = not-caught-fail(public_key_5) in
        {536}let rs_5: key = getpublickey((if v_180 then keypairpack(validkey(public_key_5),basis_5) else fail-any)) in
        {537}let basis_6: key = key_m(them_1) in
        {538}let public_key_6: key = catch-fail(dhexp(basis_6,validkey(g))) in
        {539}let v_181: bool = not-caught-fail(public_key_6) in
        {540}let rm_5: key = getpublickey((if v_181 then keypairpack(validkey(public_key_6),basis_6) else fail-any)) in
        {547}let k_13: key = empty in
        {548}let cs_24: cipherstate = cipherstatepack(k_13,minnonce) in
        {544}let protocol_name_1: bitstring = somename in
        {545}let h_24: bitstring = hash(protocol_name_1,empty) in
        {546}let ck_29: key = h_24 in
        {549}let ss_27: symmetricstate = symmetricstatepack(cs_24,ck_29,h_24) in
        {550}let v_182: bitstring = catch-fail(symmetricstateunpack(ss_27)) in
        {551}let v_183: bool = (not-caught-fail(v_182) && success?(1-proj-3-tuple(v_182))) in
        {552}let h_25: bitstring = (if v_183 then 3-proj-3-tuple(v_182) else caught-fail) in
        {553}let ck_30: key = (if v_183 then 2-proj-3-tuple(v_182) else caught-fail) in
        {554}let cs_25: cipherstate = (if v_183 then 1-proj-3-tuple(v_182) else caught-fail) in
        {542}let prologue_1: bitstring = empty in
        {555}let ss_28: symmetricstate = catch-fail((if v_183 then symmetricstatepack(cs_25,ck_30,hash(h_25,prologue_1)) else fail-any)) in
        {556}let v_184: bool = not-caught-fail(ss_28) in
        {557}let v_185: bitstring = (if v_184 then catch-fail(symmetricstateunpack(ss_28)) else caught-fail) in
        {558}let v_186: bool = (not-caught-fail(v_185) && success?(1-proj-3-tuple(v_185))) in
        {559}let h_26: bitstring = (if v_186 then 3-proj-3-tuple(v_185) else caught-fail) in
        {560}let ck_31: key = (if v_186 then 2-proj-3-tuple(v_185) else caught-fail) in
        {561}let cs_26: cipherstate = (if v_186 then 1-proj-3-tuple(v_185) else caught-fail) in
        {562}let ss_29: symmetricstate = (if v_184 then catch-fail((if v_186 then symmetricstatepack(cs_26,ck_31,hash(h_26,rs_5)) else fail-any)) else caught-fail) in
        {563}let v_187: bool = not-caught-fail(ss_29) in
        {564}let v_188: bitstring = (if v_187 then catch-fail(symmetricstateunpack(ss_29)) else caught-fail) in
        {565}let v_189: bool = (not-caught-fail(v_188) && success?(1-proj-3-tuple(v_188))) in
        {566}let h_27: bitstring = (if v_189 then 3-proj-3-tuple(v_188) else caught-fail) in
        {567}let ck_32: key = (if v_189 then 2-proj-3-tuple(v_188) else caught-fail) in
        {568}let cs_27: cipherstate = (if v_189 then 1-proj-3-tuple(v_188) else caught-fail) in
        {569}let ss_30: symmetricstate = (if v_187 then catch-fail((if v_189 then symmetricstatepack(cs_27,ck_32,hash(h_27,rm_5)) else fail-any)) else caught-fail) in
        {570}let v_190: bool = not-caught-fail(ss_30) in
        {543}let psk_5: key = empty in
        {541}let re_6: key = empty in
        {532}let e_10: keypair = keypairpack(empty,empty) in
        {531}let m_6: keypair = keypairpack(empty,empty) in
        {530}let s_6: keypair = keypairpack(empty,empty) in
        {571}let hs_15: handshakestate = (if v_184 then (if v_187 then (if v_190 then handshakestatepack(ss_30,s_6,m_6,e_10,rs_5,rm_5,re_6,psk_5,true) else fail-any) else fail-any) else fail-any) in
        {572}insert statestore(me_1,them_1,sid_2,statepack_a(hs_15))
    ) | (
        {766}get statestore(=me_1,=them_1,=sid_2,statepack_a(hs_16: handshakestate)) in
        {574}let v_191: bitstring = catch-fail(handshakestateunpack(hs_16)) in
        {575}let v_192: bool = (not-caught-fail(v_191) && success?(1-proj-9-tuple(v_191))) in
        {576}let initiator_5: bool = (if v_192 then 9-proj-9-tuple(v_191) else caught-fail) in
        {577}let psk_6: key = (if v_192 then 8-proj-9-tuple(v_191) else caught-fail) in
        {578}let re_7: key = (if v_192 then 7-proj-9-tuple(v_191) else caught-fail) in
        {579}let rm_6: key = (if v_192 then 6-proj-9-tuple(v_191) else caught-fail) in
        {580}let rs_6: key = (if v_192 then 5-proj-9-tuple(v_191) else caught-fail) in
        {581}let e_11: keypair = (if v_192 then 4-proj-9-tuple(v_191) else caught-fail) in
        {582}let m_7: keypair = (if v_192 then 3-proj-9-tuple(v_191) else caught-fail) in
        {583}let s_7: keypair = (if v_192 then 2-proj-9-tuple(v_191) else caught-fail) in
        {584}let ss_31: symmetricstate = (if v_192 then 1-proj-9-tuple(v_191) else caught-fail) in
        {585}let v_193: bitstring = (if v_192 then catch-fail((empty,empty,empty,empty)) else caught-fail) in
        {586}let v_194: bool = (not-caught-fail(v_193) && success?(1-proj-4-tuple(v_193))) in
        {587}let ciphertext_10: bitstring = (if v_194 then 4-proj-4-tuple(v_193) else caught-fail) in
        {588}let nm_2: bitstring = (if v_194 then 3-proj-4-tuple(v_193) else caught-fail) in
        {589}let ns_5: bitstring = (if v_194 then 2-proj-4-tuple(v_193) else caught-fail) in
        {590}let ne_5: bitstring = (if v_194 then 1-proj-4-tuple(v_193) else caught-fail) in
        {591}let basis_7: key = (if v_194 then key_e(me_1,them_1,sid_2) else caught-fail) in
        {592}let public_key_7: key = (if v_194 then catch-fail(dhexp(basis_7,validkey(g))) else caught-fail) in
        {593}let v_195: bool = not-caught-fail(public_key_7) in
        {594}let e_12: keypair = (if v_194 then catch-fail((if v_195 then keypairpack(validkey(public_key_7),basis_7) else fail-any)) else caught-fail) in
        {595}let v_196: bool = not-caught-fail(e_12) in
        {596}let ne_6: bitstring = (if v_196 then catch-fail(getpublickey(e_12)) else caught-fail) in
        {597}let v_197: bool = not-caught-fail(ne_6) in
        {598}let v_198: bitstring = (if v_197 then catch-fail(symmetricstateunpack(ss_31)) else caught-fail) in
        {599}let v_199: bool = (not-caught-fail(v_198) && success?(1-proj-3-tuple(v_198))) in
        {600}let h_28: bitstring = (if v_199 then 3-proj-3-tuple(v_198) else caught-fail) in
        {601}let ck_33: key = (if v_199 then 2-proj-3-tuple(v_198) else caught-fail) in
        {602}let cs_28: cipherstate = (if v_199 then 1-proj-3-tuple(v_198) else caught-fail) in
        {603}let ss_32: symmetricstate = (if v_197 then catch-fail((if v_199 then symmetricstatepack(cs_28,ck_33,hash(h_28,ne_6)) else fail-any)) else caught-fail) in
        {604}let v_200: bool = not-caught-fail(ss_32) in
        {605}let v_201: bitstring = (if v_200 then catch-fail(keypairunpack(e_12)) else caught-fail) in
        {606}let v_202: bool = (not-caught-fail(v_201) && success?(1-proj-2-tuple(v_201))) in
        {607}let my_private_key_5: key = (if v_202 then 2-proj-2-tuple(v_201) else caught-fail) in
        {608}let my_public_key_5: key = (if v_202 then 1-proj-2-tuple(v_201) else caught-fail) in
        {609}let input_key_material_6: key = (if v_200 then catch-fail((if v_202 then dhexp(my_private_key_5,rs_6) else fail-any)) else caught-fail) in
        {610}let v_203: bool = not-caught-fail(input_key_material_6) in
        {611}let v_204: bitstring = (if v_203 then catch-fail(symmetricstateunpack(ss_32)) else caught-fail) in
        {612}let v_205: bool = (not-caught-fail(v_204) && success?(1-proj-3-tuple(v_204))) in
        {613}let h_29: bitstring = (if v_205 then 3-proj-3-tuple(v_204) else caught-fail) in
        {614}let ck_34: key = (if v_205 then 2-proj-3-tuple(v_204) else caught-fail) in
        {615}let cs_29: cipherstate = (if v_205 then 1-proj-3-tuple(v_204) else caught-fail) in
        {618}let output3_6: key = (if v_205 then hmac_hash3(ck_34,input_key_material_6) else caught-fail) in
        {617}let output2_6: key = (if v_205 then hmac_hash2(ck_34,input_key_material_6) else caught-fail) in
        {616}let output1_6: key = (if v_205 then hmac_hash1(ck_34,input_key_material_6) else caught-fail) in
        {619}let v_206: bitstring = (if v_205 then catch-fail((output1_6,output2_6,output3_6)) else caught-fail) in
        {620}let v_207: bool = (not-caught-fail(v_206) && success?(1-proj-3-tuple(v_206))) in
        {621}let output_5: key = (if v_207 then 3-proj-3-tuple(v_206) else caught-fail) in
        {622}let temp_k_5: key = (if v_207 then 2-proj-3-tuple(v_206) else caught-fail) in
        {623}let ck_35: key = (if v_207 then 1-proj-3-tuple(v_206) else caught-fail) in
        {624}let ss_33: symmetricstate = (if v_200 then catch-fail((if v_203 then (if v_205 then (if v_207 then symmetricstatepack(cipherstatepack(temp_k_5,minnonce),ck_35,h_29) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {625}let v_208: bool = not-caught-fail(ss_33) in
        {626}let v_209: bitstring = (if v_208 then catch-fail(keypairunpack(e_12)) else caught-fail) in
        {627}let v_210: bool = (not-caught-fail(v_209) && success?(1-proj-2-tuple(v_209))) in
        {628}let my_private_key_6: key = (if v_210 then 2-proj-2-tuple(v_209) else caught-fail) in
        {629}let my_public_key_6: key = (if v_210 then 1-proj-2-tuple(v_209) else caught-fail) in
        {630}let input_key_material_7: key = (if v_208 then catch-fail((if v_210 then dhexp(my_private_key_6,rm_6) else fail-any)) else caught-fail) in
        {631}let v_211: bool = not-caught-fail(input_key_material_7) in
        {632}let v_212: bitstring = (if v_211 then catch-fail(symmetricstateunpack(ss_33)) else caught-fail) in
        {633}let v_213: bool = (not-caught-fail(v_212) && success?(1-proj-3-tuple(v_212))) in
        {634}let h_30: bitstring = (if v_213 then 3-proj-3-tuple(v_212) else caught-fail) in
        {635}let ck_36: key = (if v_213 then 2-proj-3-tuple(v_212) else caught-fail) in
        {636}let cs_30: cipherstate = (if v_213 then 1-proj-3-tuple(v_212) else caught-fail) in
        {639}let output3_7: key = (if v_213 then hmac_hash3(ck_36,input_key_material_7) else caught-fail) in
        {638}let output2_7: key = (if v_213 then hmac_hash2(ck_36,input_key_material_7) else caught-fail) in
        {637}let output1_7: key = (if v_213 then hmac_hash1(ck_36,input_key_material_7) else caught-fail) in
        {640}let v_214: bitstring = (if v_213 then catch-fail((output1_7,output2_7,output3_7)) else caught-fail) in
        {641}let v_215: bool = (not-caught-fail(v_214) && success?(1-proj-3-tuple(v_214))) in
        {642}let output_6: key = (if v_215 then 3-proj-3-tuple(v_214) else caught-fail) in
        {643}let temp_k_6: key = (if v_215 then 2-proj-3-tuple(v_214) else caught-fail) in
        {644}let ck_37: key = (if v_215 then 1-proj-3-tuple(v_214) else caught-fail) in
        {645}let ss_34: symmetricstate = (if v_208 then catch-fail((if v_211 then (if v_213 then (if v_215 then symmetricstatepack(cipherstatepack(temp_k_6,minnonce),ck_37,h_30) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {646}let v_216: bool = not-caught-fail(ss_34) in
        {647}let basis_8: key = (if v_216 then key_s(me_1) else caught-fail) in
        {648}let public_key_8: key = (if v_216 then catch-fail(dhexp(basis_8,validkey(g))) else caught-fail) in
        {649}let v_217: bool = not-caught-fail(public_key_8) in
        {650}let s_8: keypair = (if v_216 then catch-fail((if v_217 then keypairpack(validkey(public_key_8),basis_8) else fail-any)) else caught-fail) in
        {651}let v_218: bool = not-caught-fail(s_8) in
        {652}let plaintext_8: bitstring = (if v_218 then catch-fail(getpublickey(s_8)) else caught-fail) in
        {653}let v_219: bool = not-caught-fail(plaintext_8) in
        {654}let v_220: bitstring = (if v_219 then catch-fail(symmetricstateunpack(ss_34)) else caught-fail) in
        {655}let v_221: bool = (not-caught-fail(v_220) && success?(1-proj-3-tuple(v_220))) in
        {656}let h_31: bitstring = (if v_221 then 3-proj-3-tuple(v_220) else caught-fail) in
        {657}let ck_38: key = (if v_221 then 2-proj-3-tuple(v_220) else caught-fail) in
        {658}let cs_31: cipherstate = (if v_221 then 1-proj-3-tuple(v_220) else caught-fail) in
        {659}let v_222: bitstring = (if v_221 then catch-fail(cipherstateunpack(cs_31)) else caught-fail) in
        {660}let v_223: bool = (not-caught-fail(v_222) && success?(1-proj-2-tuple(v_222))) in
        {661}let n_12: nonce = (if v_223 then 2-proj-2-tuple(v_222) else caught-fail) in
        {662}let k_14: key = (if v_223 then 1-proj-2-tuple(v_222) else caught-fail) in
        {665}let v_224: bitstring = (if v_223 then catch-fail(cipherstateunpack(cs_31)) else caught-fail) in
        {666}let v_225: bool = (not-caught-fail(v_224) && success?(1-proj-2-tuple(v_224))) in
        {667}let o_6: nonce = (if v_225 then 2-proj-2-tuple(v_224) else caught-fail) in
        {668}let k_15: key = (if v_225 then 1-proj-2-tuple(v_224) else caught-fail) in
        {664}let n_13: nonce = (if v_223 then increment_nonce(n_12) else caught-fail) in
        {669}let csi_12: cipherstate = (if v_223 then catch-fail((if v_225 then cipherstatepack(k_15,n_13) else fail-any)) else caught-fail) in
        {670}let v_226: bool = not-caught-fail(csi_12) in
        {663}let e_13: bitstring = (if v_223 then encrypt(k_14,n_12,h_31,plaintext_8) else caught-fail) in
        {671}let v_227: bitstring = (if v_221 then catch-fail((if v_223 then (if v_226 then (csi_12,e_13) else fail-any) else fail-any)) else caught-fail) in
        {672}let v_228: bool = (not-caught-fail(v_227) && success?(1-proj-2-tuple(v_227))) in
        {673}let ciphertext_11: bitstring = (if v_228 then 2-proj-2-tuple(v_227) else caught-fail) in
        {674}let csi_13: cipherstate = (if v_228 then 1-proj-2-tuple(v_227) else caught-fail) in
        {675}let ss_35: symmetricstate = (if v_228 then symmetricstatepack(csi_13,ck_38,h_31) else caught-fail) in
        {676}let v_229: bitstring = (if v_228 then catch-fail(symmetricstateunpack(ss_35)) else caught-fail) in
        {677}let v_230: bool = (not-caught-fail(v_229) && success?(1-proj-3-tuple(v_229))) in
        {678}let h_32: bitstring = (if v_230 then 3-proj-3-tuple(v_229) else caught-fail) in
        {679}let ck_39: key = (if v_230 then 2-proj-3-tuple(v_229) else caught-fail) in
        {680}let cs_32: cipherstate = (if v_230 then 1-proj-3-tuple(v_229) else caught-fail) in
        {681}let ssi_7: symmetricstate = (if v_228 then catch-fail((if v_230 then symmetricstatepack(cs_32,ck_39,hash(h_32,ciphertext_11)) else fail-any)) else caught-fail) in
        {682}let v_231: bool = not-caught-fail(ssi_7) in
        {683}let v_232: bitstring = (if v_218 then catch-fail((if v_219 then (if v_221 then (if v_228 then (if v_231 then (ssi_7,ciphertext_11) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {684}let v_233: bool = (not-caught-fail(v_232) && success?(1-proj-2-tuple(v_232))) in
        {685}let ns_6: bitstring = (if v_233 then 2-proj-2-tuple(v_232) else caught-fail) in
        {686}let ss_36: symmetricstate = (if v_233 then 1-proj-2-tuple(v_232) else caught-fail) in
        {687}let basis_9: key = (if v_233 then key_m(me_1) else caught-fail) in
        {688}let public_key_9: key = (if v_233 then catch-fail(dhexp(basis_9,validkey(g))) else caught-fail) in
        {689}let v_234: bool = not-caught-fail(public_key_9) in
        {690}let m_8: keypair = (if v_233 then catch-fail((if v_234 then keypairpack(validkey(public_key_9),basis_9) else fail-any)) else caught-fail) in
        {691}let v_235: bool = not-caught-fail(m_8) in
        {692}let plaintext_9: bitstring = (if v_235 then catch-fail(getpublickey(m_8)) else caught-fail) in
        {693}let v_236: bool = not-caught-fail(plaintext_9) in
        {694}let v_237: bitstring = (if v_236 then catch-fail(symmetricstateunpack(ss_36)) else caught-fail) in
        {695}let v_238: bool = (not-caught-fail(v_237) && success?(1-proj-3-tuple(v_237))) in
        {696}let h_33: bitstring = (if v_238 then 3-proj-3-tuple(v_237) else caught-fail) in
        {697}let ck_40: key = (if v_238 then 2-proj-3-tuple(v_237) else caught-fail) in
        {698}let cs_33: cipherstate = (if v_238 then 1-proj-3-tuple(v_237) else caught-fail) in
        {699}let v_239: bitstring = (if v_238 then catch-fail(cipherstateunpack(cs_33)) else caught-fail) in
        {700}let v_240: bool = (not-caught-fail(v_239) && success?(1-proj-2-tuple(v_239))) in
        {701}let n_14: nonce = (if v_240 then 2-proj-2-tuple(v_239) else caught-fail) in
        {702}let k_16: key = (if v_240 then 1-proj-2-tuple(v_239) else caught-fail) in
        {705}let v_241: bitstring = (if v_240 then catch-fail(cipherstateunpack(cs_33)) else caught-fail) in
        {706}let v_242: bool = (not-caught-fail(v_241) && success?(1-proj-2-tuple(v_241))) in
        {707}let o_7: nonce = (if v_242 then 2-proj-2-tuple(v_241) else caught-fail) in
        {708}let k_17: key = (if v_242 then 1-proj-2-tuple(v_241) else caught-fail) in
        {704}let n_15: nonce = (if v_240 then increment_nonce(n_14) else caught-fail) in
        {709}let csi_14: cipherstate = (if v_240 then catch-fail((if v_242 then cipherstatepack(k_17,n_15) else fail-any)) else caught-fail) in
        {710}let v_243: bool = not-caught-fail(csi_14) in
        {703}let e_14: bitstring = (if v_240 then encrypt(k_16,n_14,h_33,plaintext_9) else caught-fail) in
        {711}let v_244: bitstring = (if v_238 then catch-fail((if v_240 then (if v_243 then (csi_14,e_14) else fail-any) else fail-any)) else caught-fail) in
        {712}let v_245: bool = (not-caught-fail(v_244) && success?(1-proj-2-tuple(v_244))) in
        {713}let ciphertext_12: bitstring = (if v_245 then 2-proj-2-tuple(v_244) else caught-fail) in
        {714}let csi_15: cipherstate = (if v_245 then 1-proj-2-tuple(v_244) else caught-fail) in
        {715}let ss_37: symmetricstate = (if v_245 then symmetricstatepack(csi_15,ck_40,h_33) else caught-fail) in
        {716}let v_246: bitstring = (if v_245 then catch-fail(symmetricstateunpack(ss_37)) else caught-fail) in
        {717}let v_247: bool = (not-caught-fail(v_246) && success?(1-proj-3-tuple(v_246))) in
        {718}let h_34: bitstring = (if v_247 then 3-proj-3-tuple(v_246) else caught-fail) in
        {719}let ck_41: key = (if v_247 then 2-proj-3-tuple(v_246) else caught-fail) in
        {720}let cs_34: cipherstate = (if v_247 then 1-proj-3-tuple(v_246) else caught-fail) in
        {721}let ssi_8: symmetricstate = (if v_245 then catch-fail((if v_247 then symmetricstatepack(cs_34,ck_41,hash(h_34,ciphertext_12)) else fail-any)) else caught-fail) in
        {722}let v_248: bool = not-caught-fail(ssi_8) in
        {723}let v_249: bitstring = (if v_235 then catch-fail((if v_236 then (if v_238 then (if v_245 then (if v_248 then (ssi_8,ciphertext_12) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {724}let v_250: bool = (not-caught-fail(v_249) && success?(1-proj-2-tuple(v_249))) in
        {725}let nm_3: bitstring = (if v_250 then 2-proj-2-tuple(v_249) else caught-fail) in
        {726}let ss_38: symmetricstate = (if v_250 then 1-proj-2-tuple(v_249) else caught-fail) in
        {727}let v_251: bitstring = (if v_250 then catch-fail(symmetricstateunpack(ss_38)) else caught-fail) in
        {728}let v_252: bool = (not-caught-fail(v_251) && success?(1-proj-3-tuple(v_251))) in
        {729}let h_35: bitstring = (if v_252 then 3-proj-3-tuple(v_251) else caught-fail) in
        {730}let ck_42: key = (if v_252 then 2-proj-3-tuple(v_251) else caught-fail) in
        {731}let cs_35: cipherstate = (if v_252 then 1-proj-3-tuple(v_251) else caught-fail) in
        {732}let v_253: bitstring = (if v_252 then catch-fail(cipherstateunpack(cs_35)) else caught-fail) in
        {733}let v_254: bool = (not-caught-fail(v_253) && success?(1-proj-2-tuple(v_253))) in
        {734}let n_16: nonce = (if v_254 then 2-proj-2-tuple(v_253) else caught-fail) in
        {735}let k_18: key = (if v_254 then 1-proj-2-tuple(v_253) else caught-fail) in
        {738}let v_255: bitstring = (if v_254 then catch-fail(cipherstateunpack(cs_35)) else caught-fail) in
        {739}let v_256: bool = (not-caught-fail(v_255) && success?(1-proj-2-tuple(v_255))) in
        {740}let o_8: nonce = (if v_256 then 2-proj-2-tuple(v_255) else caught-fail) in
        {741}let k_19: key = (if v_256 then 1-proj-2-tuple(v_255) else caught-fail) in
        {737}let n_17: nonce = (if v_254 then increment_nonce(n_16) else caught-fail) in
        {742}let csi_16: cipherstate = (if v_254 then catch-fail((if v_256 then cipherstatepack(k_19,n_17) else fail-any)) else caught-fail) in
        {743}let v_257: bool = not-caught-fail(csi_16) in
        {573}let payload_2: bitstring = msg_a(me_1,them_1,sid_2) in
        {736}let e_15: bitstring = (if v_254 then encrypt(k_18,n_16,h_35,payload_2) else caught-fail) in
        {744}let v_258: bitstring = (if v_252 then catch-fail((if v_254 then (if v_257 then (csi_16,e_15) else fail-any) else fail-any)) else caught-fail) in
        {745}let v_259: bool = (not-caught-fail(v_258) && success?(1-proj-2-tuple(v_258))) in
        {746}let ciphertext_13: bitstring = (if v_259 then 2-proj-2-tuple(v_258) else caught-fail) in
        {747}let csi_17: cipherstate = (if v_259 then 1-proj-2-tuple(v_258) else caught-fail) in
        {748}let ss_39: symmetricstate = (if v_259 then symmetricstatepack(csi_17,ck_42,h_35) else caught-fail) in
        {749}let v_260: bitstring = (if v_259 then catch-fail(symmetricstateunpack(ss_39)) else caught-fail) in
        {750}let v_261: bool = (not-caught-fail(v_260) && success?(1-proj-3-tuple(v_260))) in
        {751}let h_36: bitstring = (if v_261 then 3-proj-3-tuple(v_260) else caught-fail) in
        {752}let ck_43: key = (if v_261 then 2-proj-3-tuple(v_260) else caught-fail) in
        {753}let cs_36: cipherstate = (if v_261 then 1-proj-3-tuple(v_260) else caught-fail) in
        {754}let ssi_9: symmetricstate = (if v_259 then catch-fail((if v_261 then symmetricstatepack(cs_36,ck_43,hash(h_36,ciphertext_13)) else fail-any)) else caught-fail) in
        {755}let v_262: bool = not-caught-fail(ssi_9) in
        {756}let v_263: bitstring = (if v_250 then catch-fail((if v_252 then (if v_259 then (if v_262 then (ssi_9,ciphertext_13) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {757}let v_264: bool = (not-caught-fail(v_263) && success?(1-proj-2-tuple(v_263))) in
        {758}let ciphertext_14: bitstring = (if v_264 then 2-proj-2-tuple(v_263) else caught-fail) in
        {759}let ss_40: symmetricstate = (if v_264 then 1-proj-2-tuple(v_263) else caught-fail) in
        {761}let message_buffer_2: bitstring = (if v_264 then concat4(ne_6,ns_6,nm_3,ciphertext_14) else caught-fail) in
        {760}let hs_17: handshakestate = (if v_264 then handshakestatepack(ss_40,s_8,m_8,e_12,rs_6,rm_6,re_7,psk_6,initiator_5) else caught-fail) in
        {762}let (hs_18: handshakestate,message_a_1: bitstring) = (if v_192 then (if v_194 then (if v_196 then (if v_197 then (if v_200 then (if v_208 then (if v_216 then (if v_218 then (if v_233 then (if v_235 then (if v_250 then (if v_264 then (hs_17,message_buffer_2) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {763}event SendMsg(me_1,them_1,stagepack_a(sid_2),msg_a(me_1,them_1,sid_2));
        {764}insert statestore(me_1,them_1,sid_2,statepack_b(hs_18));
        {765}out(pub, message_a_1)
    ) | (
        {923}get statestore(=me_1,=them_1,=sid_2,statepack_b(hs_19: handshakestate)) in
        {767}in(pub, message_b_1: bitstring);
        {768}let v_265: bitstring = catch-fail(handshakestateunpack(hs_19)) in
        {769}let v_266: bool = (not-caught-fail(v_265) && success?(1-proj-9-tuple(v_265))) in
        {770}let initiator_6: bool = (if v_266 then 9-proj-9-tuple(v_265) else caught-fail) in
        {771}let psk_7: key = (if v_266 then 8-proj-9-tuple(v_265) else caught-fail) in
        {772}let re_8: key = (if v_266 then 7-proj-9-tuple(v_265) else caught-fail) in
        {773}let rm_7: key = (if v_266 then 6-proj-9-tuple(v_265) else caught-fail) in
        {774}let rs_7: key = (if v_266 then 5-proj-9-tuple(v_265) else caught-fail) in
        {775}let e_16: keypair = (if v_266 then 4-proj-9-tuple(v_265) else caught-fail) in
        {776}let m_9: keypair = (if v_266 then 3-proj-9-tuple(v_265) else caught-fail) in
        {777}let s_9: keypair = (if v_266 then 2-proj-9-tuple(v_265) else caught-fail) in
        {778}let ss_41: symmetricstate = (if v_266 then 1-proj-9-tuple(v_265) else caught-fail) in
        {779}let v_267: bitstring = (if v_266 then catch-fail(deconcat3(message_b_1)) else caught-fail) in
        {780}let v_268: bool = (not-caught-fail(v_267) && success?(1-proj-3-tuple(v_267))) in
        {781}let ciphertext_15: bitstring = (if v_268 then 3-proj-3-tuple(v_267) else caught-fail) in
        {782}let ns_7: bitstring = (if v_268 then 2-proj-3-tuple(v_267) else caught-fail) in
        {783}let ne_7: bitstring = (if v_268 then 1-proj-3-tuple(v_267) else caught-fail) in
        {786}let v_269: bitstring = (if v_268 then catch-fail(symmetricstateunpack(ss_41)) else caught-fail) in
        {787}let v_270: bool = (not-caught-fail(v_269) && success?(1-proj-3-tuple(v_269))) in
        {788}let h_37: bitstring = (if v_270 then 3-proj-3-tuple(v_269) else caught-fail) in
        {789}let ck_44: key = (if v_270 then 2-proj-3-tuple(v_269) else caught-fail) in
        {790}let cs_37: cipherstate = (if v_270 then 1-proj-3-tuple(v_269) else caught-fail) in
        {785}let re_9: key = (if v_268 then ne_7 else caught-fail) in
        {791}let ss_42: symmetricstate = (if v_268 then catch-fail((if v_270 then symmetricstatepack(cs_37,ck_44,hash(h_37,re_9)) else fail-any)) else caught-fail) in
        {792}let v_271: bool = not-caught-fail(ss_42) in
        {793}let v_272: bitstring = (if v_271 then catch-fail(keypairunpack(e_16)) else caught-fail) in
        {794}let v_273: bool = (not-caught-fail(v_272) && success?(1-proj-2-tuple(v_272))) in
        {795}let my_private_key_7: key = (if v_273 then 2-proj-2-tuple(v_272) else caught-fail) in
        {796}let my_public_key_7: key = (if v_273 then 1-proj-2-tuple(v_272) else caught-fail) in
        {797}let input_key_material_8: key = (if v_271 then catch-fail((if v_273 then dhexp(my_private_key_7,re_9) else fail-any)) else caught-fail) in
        {798}let v_274: bool = not-caught-fail(input_key_material_8) in
        {799}let v_275: bitstring = (if v_274 then catch-fail(symmetricstateunpack(ss_42)) else caught-fail) in
        {800}let v_276: bool = (not-caught-fail(v_275) && success?(1-proj-3-tuple(v_275))) in
        {801}let h_38: bitstring = (if v_276 then 3-proj-3-tuple(v_275) else caught-fail) in
        {802}let ck_45: key = (if v_276 then 2-proj-3-tuple(v_275) else caught-fail) in
        {803}let cs_38: cipherstate = (if v_276 then 1-proj-3-tuple(v_275) else caught-fail) in
        {806}let output3_8: key = (if v_276 then hmac_hash3(ck_45,input_key_material_8) else caught-fail) in
        {805}let output2_8: key = (if v_276 then hmac_hash2(ck_45,input_key_material_8) else caught-fail) in
        {804}let output1_8: key = (if v_276 then hmac_hash1(ck_45,input_key_material_8) else caught-fail) in
        {807}let v_277: bitstring = (if v_276 then catch-fail((output1_8,output2_8,output3_8)) else caught-fail) in
        {808}let v_278: bool = (not-caught-fail(v_277) && success?(1-proj-3-tuple(v_277))) in
        {809}let output_7: key = (if v_278 then 3-proj-3-tuple(v_277) else caught-fail) in
        {810}let temp_k_7: key = (if v_278 then 2-proj-3-tuple(v_277) else caught-fail) in
        {811}let ck_46: key = (if v_278 then 1-proj-3-tuple(v_277) else caught-fail) in
        {812}let ss_43: symmetricstate = (if v_271 then catch-fail((if v_274 then (if v_276 then (if v_278 then symmetricstatepack(cipherstatepack(temp_k_7,minnonce),ck_46,h_38) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {813}let v_279: bool = not-caught-fail(ss_43) in
        {814}let v_280: bitstring = (if v_279 then catch-fail(keypairunpack(s_9)) else caught-fail) in
        {815}let v_281: bool = (not-caught-fail(v_280) && success?(1-proj-2-tuple(v_280))) in
        {816}let my_private_key_8: key = (if v_281 then 2-proj-2-tuple(v_280) else caught-fail) in
        {817}let my_public_key_8: key = (if v_281 then 1-proj-2-tuple(v_280) else caught-fail) in
        {818}let input_key_material_9: key = (if v_279 then catch-fail((if v_281 then dhexp(my_private_key_8,re_9) else fail-any)) else caught-fail) in
        {819}let v_282: bool = not-caught-fail(input_key_material_9) in
        {820}let v_283: bitstring = (if v_282 then catch-fail(symmetricstateunpack(ss_43)) else caught-fail) in
        {821}let v_284: bool = (not-caught-fail(v_283) && success?(1-proj-3-tuple(v_283))) in
        {822}let h_39: bitstring = (if v_284 then 3-proj-3-tuple(v_283) else caught-fail) in
        {823}let ck_47: key = (if v_284 then 2-proj-3-tuple(v_283) else caught-fail) in
        {824}let cs_39: cipherstate = (if v_284 then 1-proj-3-tuple(v_283) else caught-fail) in
        {827}let output3_9: key = (if v_284 then hmac_hash3(ck_47,input_key_material_9) else caught-fail) in
        {826}let output2_9: key = (if v_284 then hmac_hash2(ck_47,input_key_material_9) else caught-fail) in
        {825}let output1_9: key = (if v_284 then hmac_hash1(ck_47,input_key_material_9) else caught-fail) in
        {828}let v_285: bitstring = (if v_284 then catch-fail((output1_9,output2_9,output3_9)) else caught-fail) in
        {829}let v_286: bool = (not-caught-fail(v_285) && success?(1-proj-3-tuple(v_285))) in
        {830}let output_8: key = (if v_286 then 3-proj-3-tuple(v_285) else caught-fail) in
        {831}let temp_k_8: key = (if v_286 then 2-proj-3-tuple(v_285) else caught-fail) in
        {832}let ck_48: key = (if v_286 then 1-proj-3-tuple(v_285) else caught-fail) in
        {833}let ss_44: symmetricstate = (if v_279 then catch-fail((if v_282 then (if v_284 then (if v_286 then symmetricstatepack(cipherstatepack(temp_k_8,minnonce),ck_48,h_39) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {834}let v_287: bool = not-caught-fail(ss_44) in
        {835}let v_288: bitstring = (if v_287 then catch-fail(keypairunpack(m_9)) else caught-fail) in
        {836}let v_289: bool = (not-caught-fail(v_288) && success?(1-proj-2-tuple(v_288))) in
        {837}let my_private_key_9: key = (if v_289 then 2-proj-2-tuple(v_288) else caught-fail) in
        {838}let my_public_key_9: key = (if v_289 then 1-proj-2-tuple(v_288) else caught-fail) in
        {839}let input_key_material_10: key = (if v_287 then catch-fail((if v_289 then dhexp(my_private_key_9,re_9) else fail-any)) else caught-fail) in
        {840}let v_290: bool = not-caught-fail(input_key_material_10) in
        {841}let v_291: bitstring = (if v_290 then catch-fail(symmetricstateunpack(ss_44)) else caught-fail) in
        {842}let v_292: bool = (not-caught-fail(v_291) && success?(1-proj-3-tuple(v_291))) in
        {843}let h_40: bitstring = (if v_292 then 3-proj-3-tuple(v_291) else caught-fail) in
        {844}let ck_49: key = (if v_292 then 2-proj-3-tuple(v_291) else caught-fail) in
        {845}let cs_40: cipherstate = (if v_292 then 1-proj-3-tuple(v_291) else caught-fail) in
        {848}let output3_10: key = (if v_292 then hmac_hash3(ck_49,input_key_material_10) else caught-fail) in
        {847}let output2_10: key = (if v_292 then hmac_hash2(ck_49,input_key_material_10) else caught-fail) in
        {846}let output1_10: key = (if v_292 then hmac_hash1(ck_49,input_key_material_10) else caught-fail) in
        {849}let v_293: bitstring = (if v_292 then catch-fail((output1_10,output2_10,output3_10)) else caught-fail) in
        {850}let v_294: bool = (not-caught-fail(v_293) && success?(1-proj-3-tuple(v_293))) in
        {851}let output_9: key = (if v_294 then 3-proj-3-tuple(v_293) else caught-fail) in
        {852}let temp_k_9: key = (if v_294 then 2-proj-3-tuple(v_293) else caught-fail) in
        {853}let ck_50: key = (if v_294 then 1-proj-3-tuple(v_293) else caught-fail) in
        {854}let ss_45: symmetricstate = (if v_287 then catch-fail((if v_290 then (if v_292 then (if v_294 then symmetricstatepack(cipherstatepack(temp_k_9,minnonce),ck_50,h_40) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {855}let v_295: bool = not-caught-fail(ss_45) in
        {856}let v_296: bitstring = (if v_295 then catch-fail(symmetricstateunpack(ss_45)) else caught-fail) in
        {857}let v_297: bool = (not-caught-fail(v_296) && success?(1-proj-3-tuple(v_296))) in
        {858}let h_41: bitstring = (if v_297 then 3-proj-3-tuple(v_296) else caught-fail) in
        {859}let ck_51: key = (if v_297 then 2-proj-3-tuple(v_296) else caught-fail) in
        {860}let cs_41: cipherstate = (if v_297 then 1-proj-3-tuple(v_296) else caught-fail) in
        {861}let v_298: bitstring = (if v_297 then catch-fail(cipherstateunpack(cs_41)) else caught-fail) in
        {862}let v_299: bool = (not-caught-fail(v_298) && success?(1-proj-2-tuple(v_298))) in
        {863}let n_18: nonce = (if v_299 then 2-proj-2-tuple(v_298) else caught-fail) in
        {864}let k_20: key = (if v_299 then 1-proj-2-tuple(v_298) else caught-fail) in
        {865}let d_2: aead = (if v_299 then catch-fail(decrypt(k_20,n_18,h_41,ciphertext_15)) else caught-fail) in
        {866}let v_300: bool = not-caught-fail(d_2) in
        {867}let v_301: bitstring = (if v_300 then catch-fail(aeadunpack(d_2)) else caught-fail) in
        {868}let v_302: bool = (not-caught-fail(v_301) && success?(1-proj-3-tuple(v_301))) in
        {869}let plaintext_10: bitstring = (if v_302 then 3-proj-3-tuple(v_301) else caught-fail) in
        {870}let adi_2: bitstring = (if v_302 then 2-proj-3-tuple(v_301) else caught-fail) in
        {871}let valid_6: bool = (if v_302 then 1-proj-3-tuple(v_301) else caught-fail) in
        {873}let v_303: bitstring = (if v_302 then catch-fail(cipherstateunpack(cs_41)) else caught-fail) in
        {874}let v_304: bool = (not-caught-fail(v_303) && success?(1-proj-2-tuple(v_303))) in
        {875}let o_9: nonce = (if v_304 then 2-proj-2-tuple(v_303) else caught-fail) in
        {876}let k_21: key = (if v_304 then 1-proj-2-tuple(v_303) else caught-fail) in
        {872}let n_19: nonce = (if v_302 then increment_nonce(n_18) else caught-fail) in
        {877}let csi_18: cipherstate = (if v_302 then catch-fail((if v_304 then cipherstatepack(k_21,n_19) else fail-any)) else caught-fail) in
        {878}let v_305: bool = not-caught-fail(csi_18) in
        {879}let v_306: bitstring = (if v_297 then catch-fail((if v_299 then (if v_300 then (if v_302 then (if v_305 then (csi_18,plaintext_10,valid_6) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {880}let v_307: bool = (not-caught-fail(v_306) && success?(1-proj-3-tuple(v_306))) in
        {881}let valid_7: bool = (if v_307 then 3-proj-3-tuple(v_306) else caught-fail) in
        {882}let plaintext_11: bitstring = (if v_307 then 2-proj-3-tuple(v_306) else caught-fail) in
        {883}let csi_19: cipherstate = (if v_307 then 1-proj-3-tuple(v_306) else caught-fail) in
        {884}let ss_46: symmetricstate = (if v_307 then symmetricstatepack(csi_19,ck_51,h_41) else caught-fail) in
        {885}let v_308: bitstring = (if v_307 then catch-fail(symmetricstateunpack(ss_46)) else caught-fail) in
        {886}let v_309: bool = (not-caught-fail(v_308) && success?(1-proj-3-tuple(v_308))) in
        {887}let h_42: bitstring = (if v_309 then 3-proj-3-tuple(v_308) else caught-fail) in
        {888}let ck_52: key = (if v_309 then 2-proj-3-tuple(v_308) else caught-fail) in
        {889}let cs_42: cipherstate = (if v_309 then 1-proj-3-tuple(v_308) else caught-fail) in
        {890}let ssi_10: symmetricstate = (if v_307 then catch-fail((if v_309 then symmetricstatepack(cs_42,ck_52,hash(h_42,ciphertext_15)) else fail-any)) else caught-fail) in
        {891}let v_310: bool = not-caught-fail(ssi_10) in
        {892}let v_311: bitstring = (if v_295 then catch-fail((if v_297 then (if v_307 then (if v_310 then (ssi_10,plaintext_11,valid_7) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {893}let v_312: bool = (not-caught-fail(v_311) && success?(1-proj-3-tuple(v_311))) in
        {894}let valid2_2: bool = (if v_312 then 3-proj-3-tuple(v_311) else caught-fail) in
        {895}let plaintext_12: bitstring = (if v_312 then 2-proj-3-tuple(v_311) else caught-fail) in
        {896}let ss_47: symmetricstate = (if v_312 then 1-proj-3-tuple(v_311) else caught-fail) in
        {784}let valid1_2: bool = (if v_268 then true else caught-fail) in
        {897}let v_313: bool = (if v_312 then catch-fail((valid1_2 && valid2_2)) else caught-fail) in
        {899}let v_314: bitstring = (if v_313 then catch-fail(symmetricstateunpack(ss_47)) else caught-fail) in
        {900}let v_315: bool = (not-caught-fail(v_314) && success?(1-proj-3-tuple(v_314))) in
        {901}let h_43: bitstring = (if v_315 then 3-proj-3-tuple(v_314) else caught-fail) in
        {902}let ck_53: key = (if v_315 then 2-proj-3-tuple(v_314) else caught-fail) in
        {903}let cs_43: cipherstate = (if v_315 then 1-proj-3-tuple(v_314) else caught-fail) in
        {904}let input_key_material_11: key = (if v_315 then zero else caught-fail) in
        {907}let output3_11: key = (if v_315 then hmac_hash3(ck_53,input_key_material_11) else caught-fail) in
        {906}let output2_11: key = (if v_315 then hmac_hash2(ck_53,input_key_material_11) else caught-fail) in
        {905}let output1_11: key = (if v_315 then hmac_hash1(ck_53,input_key_material_11) else caught-fail) in
        {908}let v_316: bitstring = (if v_315 then catch-fail((output1_11,output2_11,output3_11)) else caught-fail) in
        {909}let v_317: bool = (not-caught-fail(v_316) && success?(1-proj-3-tuple(v_316))) in
        {910}let temp_k3_1: key = (if v_317 then 3-proj-3-tuple(v_316) else caught-fail) in
        {911}let temp_k2_1: key = (if v_317 then 2-proj-3-tuple(v_316) else caught-fail) in
        {912}let temp_k1_1: key = (if v_317 then 1-proj-3-tuple(v_316) else caught-fail) in
        {914}let cs2_5: cipherstate = (if v_317 then cipherstatepack(temp_k2_1,minnonce) else caught-fail) in
        {913}let cs1_5: cipherstate = (if v_317 then cipherstatepack(temp_k1_1,minnonce) else caught-fail) in
        {915}let v_318: bitstring = (if v_313 then catch-fail((if v_315 then (if v_317 then (ss_47,cs1_5,cs2_5) else fail-any) else fail-any)) else caught-fail) in
        {916}let v_319: bool = (not-caught-fail(v_318) && success?(1-proj-3-tuple(v_318))) in
        {917}let cs2_6: cipherstate = (if v_319 then 3-proj-3-tuple(v_318) else caught-fail) in
        {918}let cs1_6: cipherstate = (if v_319 then 2-proj-3-tuple(v_318) else caught-fail) in
        {919}let ssi_11: symmetricstate = (if v_319 then 1-proj-3-tuple(v_318) else caught-fail) in
        {898}let hs_20: handshakestate = (if v_313 then handshakestatepack(ss_47,s_9,m_9,e_16,rs_7,rm_7,re_9,psk_7,initiator_6) else caught-fail) in
        {920}let (hs_21: handshakestate,plaintext_b_1: bitstring,valid_8: bool,cs1_7: cipherstate,cs2_7: cipherstate) = (if v_266 then (if v_268 then (if v_271 then (if v_279 then (if v_287 then (if v_295 then (if v_312 then (if undo-catch-fail(v_313) then (if v_319 then (hs_20,plaintext_12,true,cs1_6,cs2_6) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {921}event RecvMsg(me_1,them_1,stagepack_b(sid_2),plaintext_b_1);
        {922}insert statestore(me_1,them_1,sid_2,statepack_c(hs_21,cs1_7,cs2_7))
    ) | (
        {924}!
        {982}get statestore(=me_1,=them_1,=sid_2,statepack_c(hs_22: handshakestate,cs1_8: cipherstate,cs2_8: cipherstate)) in
        {925}let hs_23: handshakestate = handshakestatesetcs(hs_22,cs1_8) in
        {927}let v_320: bitstring = catch-fail(handshakestateunpack(hs_23)) in
        {928}let v_321: bool = (not-caught-fail(v_320) && success?(1-proj-9-tuple(v_320))) in
        {929}let initiator_7: bool = (if v_321 then 9-proj-9-tuple(v_320) else caught-fail) in
        {930}let psk_8: key = (if v_321 then 8-proj-9-tuple(v_320) else caught-fail) in
        {931}let re_10: key = (if v_321 then 7-proj-9-tuple(v_320) else caught-fail) in
        {932}let rm_8: key = (if v_321 then 6-proj-9-tuple(v_320) else caught-fail) in
        {933}let rs_8: key = (if v_321 then 5-proj-9-tuple(v_320) else caught-fail) in
        {934}let e_17: keypair = (if v_321 then 4-proj-9-tuple(v_320) else caught-fail) in
        {935}let m_10: keypair = (if v_321 then 3-proj-9-tuple(v_320) else caught-fail) in
        {936}let s_10: keypair = (if v_321 then 2-proj-9-tuple(v_320) else caught-fail) in
        {937}let ss_48: symmetricstate = (if v_321 then 1-proj-9-tuple(v_320) else caught-fail) in
        {938}let v_322: bitstring = (if v_321 then catch-fail((empty,empty,empty)) else caught-fail) in
        {939}let v_323: bool = (not-caught-fail(v_322) && success?(1-proj-3-tuple(v_322))) in
        {940}let ciphertext_16: bitstring = (if v_323 then 3-proj-3-tuple(v_322) else caught-fail) in
        {941}let ns_8: bitstring = (if v_323 then 2-proj-3-tuple(v_322) else caught-fail) in
        {942}let ne_8: bitstring = (if v_323 then 1-proj-3-tuple(v_322) else caught-fail) in
        {943}let v_324: bitstring = (if v_323 then catch-fail(symmetricstateunpack(ss_48)) else caught-fail) in
        {944}let v_325: bool = (not-caught-fail(v_324) && success?(1-proj-3-tuple(v_324))) in
        {945}let h_44: bitstring = (if v_325 then 3-proj-3-tuple(v_324) else caught-fail) in
        {946}let ck_54: key = (if v_325 then 2-proj-3-tuple(v_324) else caught-fail) in
        {947}let cs_44: cipherstate = (if v_325 then 1-proj-3-tuple(v_324) else caught-fail) in
        {948}let v_326: bitstring = (if v_325 then catch-fail(cipherstateunpack(cs_44)) else caught-fail) in
        {949}let v_327: bool = (not-caught-fail(v_326) && success?(1-proj-2-tuple(v_326))) in
        {950}let n_20: nonce = (if v_327 then 2-proj-2-tuple(v_326) else caught-fail) in
        {951}let k_22: key = (if v_327 then 1-proj-2-tuple(v_326) else caught-fail) in
        {954}let v_328: bitstring = (if v_327 then catch-fail(cipherstateunpack(cs_44)) else caught-fail) in
        {955}let v_329: bool = (not-caught-fail(v_328) && success?(1-proj-2-tuple(v_328))) in
        {956}let o_10: nonce = (if v_329 then 2-proj-2-tuple(v_328) else caught-fail) in
        {957}let k_23: key = (if v_329 then 1-proj-2-tuple(v_328) else caught-fail) in
        {953}let n_21: nonce = (if v_327 then increment_nonce(n_20) else caught-fail) in
        {958}let csi_20: cipherstate = (if v_327 then catch-fail((if v_329 then cipherstatepack(k_23,n_21) else fail-any)) else caught-fail) in
        {959}let v_330: bool = not-caught-fail(csi_20) in
        {926}let payload_3: bitstring = msg_c(me_1,them_1,sid_2) in
        {952}let e_18: bitstring = (if v_327 then encrypt(k_22,n_20,h_44,payload_3) else caught-fail) in
        {960}let v_331: bitstring = (if v_325 then catch-fail((if v_327 then (if v_330 then (csi_20,e_18) else fail-any) else fail-any)) else caught-fail) in
        {961}let v_332: bool = (not-caught-fail(v_331) && success?(1-proj-2-tuple(v_331))) in
        {962}let ciphertext_17: bitstring = (if v_332 then 2-proj-2-tuple(v_331) else caught-fail) in
        {963}let csi_21: cipherstate = (if v_332 then 1-proj-2-tuple(v_331) else caught-fail) in
        {964}let ss_49: symmetricstate = (if v_332 then symmetricstatepack(csi_21,ck_54,h_44) else caught-fail) in
        {965}let v_333: bitstring = (if v_332 then catch-fail(symmetricstateunpack(ss_49)) else caught-fail) in
        {966}let v_334: bool = (not-caught-fail(v_333) && success?(1-proj-3-tuple(v_333))) in
        {967}let h_45: bitstring = (if v_334 then 3-proj-3-tuple(v_333) else caught-fail) in
        {968}let ck_55: key = (if v_334 then 2-proj-3-tuple(v_333) else caught-fail) in
        {969}let cs_45: cipherstate = (if v_334 then 1-proj-3-tuple(v_333) else caught-fail) in
        {970}let ssi_12: symmetricstate = (if v_332 then catch-fail((if v_334 then symmetricstatepack(cs_45,ck_55,hash(h_45,ciphertext_17)) else fail-any)) else caught-fail) in
        {971}let v_335: bool = not-caught-fail(ssi_12) in
        {972}let v_336: bitstring = (if v_323 then catch-fail((if v_325 then (if v_332 then (if v_335 then (ssi_12,ciphertext_17) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {973}let v_337: bool = (not-caught-fail(v_336) && success?(1-proj-2-tuple(v_336))) in
        {974}let ciphertext_18: bitstring = (if v_337 then 2-proj-2-tuple(v_336) else caught-fail) in
        {975}let ss_50: symmetricstate = (if v_337 then 1-proj-2-tuple(v_336) else caught-fail) in
        {977}let message_buffer_3: bitstring = (if v_337 then concat3(ne_8,ns_8,ciphertext_18) else caught-fail) in
        {976}let hs_24: handshakestate = (if v_337 then handshakestatepack(ss_50,s_10,m_10,e_17,rs_8,rm_8,re_10,psk_8,initiator_7) else caught-fail) in
        {978}let (hs_25: handshakestate,message_c_1: bitstring) = (if v_321 then (if v_323 then (if v_337 then (hs_24,message_buffer_3) else fail-any) else fail-any) else fail-any) in
        {979}event SendMsg(me_1,them_1,stagepack_c(sid_2),msg_c(me_1,them_1,sid_2));
        {980}insert statestore(me_1,them_1,sid_2,statepack_d(hs_25,handshakestategetcs(hs_25),cs2_8));
        {981}out(pub, message_c_1)
    ) | (
        {983}!
        {1049}get statestore(=me_1,=them_1,=sid_2,statepack_d(hs_26: handshakestate,cs1_9: cipherstate,cs2_9: cipherstate)) in
        {984}let hs_27: handshakestate = handshakestatesetcs(hs_26,cs2_9) in
        {985}in(pub, message_d_1: bitstring);
        {986}let v_338: bitstring = catch-fail(handshakestateunpack(hs_27)) in
        {987}let v_339: bool = (not-caught-fail(v_338) && success?(1-proj-9-tuple(v_338))) in
        {988}let initiator_8: bool = (if v_339 then 9-proj-9-tuple(v_338) else caught-fail) in
        {989}let psk_9: key = (if v_339 then 8-proj-9-tuple(v_338) else caught-fail) in
        {990}let re_11: key = (if v_339 then 7-proj-9-tuple(v_338) else caught-fail) in
        {991}let rm_9: key = (if v_339 then 6-proj-9-tuple(v_338) else caught-fail) in
        {992}let rs_9: key = (if v_339 then 5-proj-9-tuple(v_338) else caught-fail) in
        {993}let e_19: keypair = (if v_339 then 4-proj-9-tuple(v_338) else caught-fail) in
        {994}let m_11: keypair = (if v_339 then 3-proj-9-tuple(v_338) else caught-fail) in
        {995}let s_11: keypair = (if v_339 then 2-proj-9-tuple(v_338) else caught-fail) in
        {996}let ss_51: symmetricstate = (if v_339 then 1-proj-9-tuple(v_338) else caught-fail) in
        {997}let v_340: bitstring = (if v_339 then catch-fail(deconcat3(message_d_1)) else caught-fail) in
        {998}let v_341: bool = (not-caught-fail(v_340) && success?(1-proj-3-tuple(v_340))) in
        {999}let ciphertext_19: bitstring = (if v_341 then 3-proj-3-tuple(v_340) else caught-fail) in
        {1000}let ns_9: bitstring = (if v_341 then 2-proj-3-tuple(v_340) else caught-fail) in
        {1001}let ne_9: bitstring = (if v_341 then 1-proj-3-tuple(v_340) else caught-fail) in
        {1003}let v_342: bitstring = (if v_341 then catch-fail(symmetricstateunpack(ss_51)) else caught-fail) in
        {1004}let v_343: bool = (not-caught-fail(v_342) && success?(1-proj-3-tuple(v_342))) in
        {1005}let h_46: bitstring = (if v_343 then 3-proj-3-tuple(v_342) else caught-fail) in
        {1006}let ck_56: key = (if v_343 then 2-proj-3-tuple(v_342) else caught-fail) in
        {1007}let cs_46: cipherstate = (if v_343 then 1-proj-3-tuple(v_342) else caught-fail) in
        {1008}let v_344: bitstring = (if v_343 then catch-fail(cipherstateunpack(cs_46)) else caught-fail) in
        {1009}let v_345: bool = (not-caught-fail(v_344) && success?(1-proj-2-tuple(v_344))) in
        {1010}let n_22: nonce = (if v_345 then 2-proj-2-tuple(v_344) else caught-fail) in
        {1011}let k_24: key = (if v_345 then 1-proj-2-tuple(v_344) else caught-fail) in
        {1012}let d_3: aead = (if v_345 then catch-fail(decrypt(k_24,n_22,h_46,ciphertext_19)) else caught-fail) in
        {1013}let v_346: bool = not-caught-fail(d_3) in
        {1014}let v_347: bitstring = (if v_346 then catch-fail(aeadunpack(d_3)) else caught-fail) in
        {1015}let v_348: bool = (not-caught-fail(v_347) && success?(1-proj-3-tuple(v_347))) in
        {1016}let plaintext_13: bitstring = (if v_348 then 3-proj-3-tuple(v_347) else caught-fail) in
        {1017}let adi_3: bitstring = (if v_348 then 2-proj-3-tuple(v_347) else caught-fail) in
        {1018}let valid_9: bool = (if v_348 then 1-proj-3-tuple(v_347) else caught-fail) in
        {1020}let v_349: bitstring = (if v_348 then catch-fail(cipherstateunpack(cs_46)) else caught-fail) in
        {1021}let v_350: bool = (not-caught-fail(v_349) && success?(1-proj-2-tuple(v_349))) in
        {1022}let o_11: nonce = (if v_350 then 2-proj-2-tuple(v_349) else caught-fail) in
        {1023}let k_25: key = (if v_350 then 1-proj-2-tuple(v_349) else caught-fail) in
        {1019}let n_23: nonce = (if v_348 then increment_nonce(n_22) else caught-fail) in
        {1024}let csi_22: cipherstate = (if v_348 then catch-fail((if v_350 then cipherstatepack(k_25,n_23) else fail-any)) else caught-fail) in
        {1025}let v_351: bool = not-caught-fail(csi_22) in
        {1026}let v_352: bitstring = (if v_343 then catch-fail((if v_345 then (if v_346 then (if v_348 then (if v_351 then (csi_22,plaintext_13,valid_9) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1027}let v_353: bool = (not-caught-fail(v_352) && success?(1-proj-3-tuple(v_352))) in
        {1028}let valid_10: bool = (if v_353 then 3-proj-3-tuple(v_352) else caught-fail) in
        {1029}let plaintext_14: bitstring = (if v_353 then 2-proj-3-tuple(v_352) else caught-fail) in
        {1030}let csi_23: cipherstate = (if v_353 then 1-proj-3-tuple(v_352) else caught-fail) in
        {1031}let ss_52: symmetricstate = (if v_353 then symmetricstatepack(csi_23,ck_56,h_46) else caught-fail) in
        {1032}let v_354: bitstring = (if v_353 then catch-fail(symmetricstateunpack(ss_52)) else caught-fail) in
        {1033}let v_355: bool = (not-caught-fail(v_354) && success?(1-proj-3-tuple(v_354))) in
        {1034}let h_47: bitstring = (if v_355 then 3-proj-3-tuple(v_354) else caught-fail) in
        {1035}let ck_57: key = (if v_355 then 2-proj-3-tuple(v_354) else caught-fail) in
        {1036}let cs_47: cipherstate = (if v_355 then 1-proj-3-tuple(v_354) else caught-fail) in
        {1037}let ssi_13: symmetricstate = (if v_353 then catch-fail((if v_355 then symmetricstatepack(cs_47,ck_57,hash(h_47,ciphertext_19)) else fail-any)) else caught-fail) in
        {1038}let v_356: bool = not-caught-fail(ssi_13) in
        {1039}let v_357: bitstring = (if v_341 then catch-fail((if v_343 then (if v_353 then (if v_356 then (ssi_13,plaintext_14,valid_10) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1040}let v_358: bool = (not-caught-fail(v_357) && success?(1-proj-3-tuple(v_357))) in
        {1041}let valid2_3: bool = (if v_358 then 3-proj-3-tuple(v_357) else caught-fail) in
        {1042}let plaintext_15: bitstring = (if v_358 then 2-proj-3-tuple(v_357) else caught-fail) in
        {1043}let ss_53: symmetricstate = (if v_358 then 1-proj-3-tuple(v_357) else caught-fail) in
        {1002}let valid1_3: bool = (if v_341 then true else caught-fail) in
        {1044}let v_359: bool = (if v_358 then catch-fail((valid1_3 && valid2_3)) else caught-fail) in
        {1045}let hs_28: handshakestate = (if v_359 then handshakestatepack(ss_53,s_11,m_11,e_19,rs_9,rm_9,re_11,psk_9,initiator_8) else caught-fail) in
        {1046}let (hs_29: handshakestate,plaintext_d_1: bitstring,valid_11: bool) = (if v_339 then (if v_341 then (if v_358 then (if undo-catch-fail(v_359) then (hs_28,plaintext_15,true) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1047}event RecvMsg(me_1,them_1,stagepack_d(sid_2),plaintext_d_1);
        {1048}event RecvEnd(valid_11)
    ) | (
        0
    )
) | (
    {1050}let me_2: principal = bob in
    {1053}let basis_10: key = key_s(me_2) in
    {1054}let public_key_10: key = catch-fail(dhexp(basis_10,validkey(g))) in
    {1055}let v_360: bool = not-caught-fail(public_key_10) in
    {1056}let s_12: keypair = (if v_360 then keypairpack(validkey(public_key_10),basis_10) else fail-any) in
    {1057}let basis_11: key = key_m(me_2) in
    {1058}let public_key_11: key = catch-fail(dhexp(basis_11,validkey(g))) in
    {1059}let v_361: bool = not-caught-fail(public_key_11) in
    {1060}let m_12: keypair = (if v_361 then keypairpack(validkey(public_key_11),basis_11) else fail-any) in
    {1061}out(pub, (getpublickey(s_12),getpublickey(m_12)));
    {1052}let sid_3: sessionid = sid in
    {1051}let them_2: principal = alice in
    (
        {1071}let k_26: key = empty in
        {1072}let cs_48: cipherstate = cipherstatepack(k_26,minnonce) in
        {1068}let protocol_name_2: bitstring = somename in
        {1069}let h_48: bitstring = hash(protocol_name_2,empty) in
        {1070}let ck_58: key = h_48 in
        {1073}let ss_54: symmetricstate = symmetricstatepack(cs_48,ck_58,h_48) in
        {1074}let v_362: bitstring = catch-fail(symmetricstateunpack(ss_54)) in
        {1075}let v_363: bool = (not-caught-fail(v_362) && success?(1-proj-3-tuple(v_362))) in
        {1076}let h_49: bitstring = (if v_363 then 3-proj-3-tuple(v_362) else caught-fail) in
        {1077}let ck_59: key = (if v_363 then 2-proj-3-tuple(v_362) else caught-fail) in
        {1078}let cs_49: cipherstate = (if v_363 then 1-proj-3-tuple(v_362) else caught-fail) in
        {1066}let prologue_2: bitstring = empty in
        {1079}let ss_55: symmetricstate = catch-fail((if v_363 then symmetricstatepack(cs_49,ck_59,hash(h_49,prologue_2)) else fail-any)) in
        {1080}let v_364: bool = not-caught-fail(ss_55) in
        {1081}let data: bitstring = (if v_364 then catch-fail(getpublickey(s_12)) else caught-fail) in
        {1082}let v_365: bool = not-caught-fail(data) in
        {1083}let v_366: bitstring = (if v_365 then catch-fail(symmetricstateunpack(ss_55)) else caught-fail) in
        {1084}let v_367: bool = (not-caught-fail(v_366) && success?(1-proj-3-tuple(v_366))) in
        {1085}let h_50: bitstring = (if v_367 then 3-proj-3-tuple(v_366) else caught-fail) in
        {1086}let ck_60: key = (if v_367 then 2-proj-3-tuple(v_366) else caught-fail) in
        {1087}let cs_50: cipherstate = (if v_367 then 1-proj-3-tuple(v_366) else caught-fail) in
        {1088}let ss_56: symmetricstate = (if v_364 then catch-fail((if v_365 then (if v_367 then symmetricstatepack(cs_50,ck_60,hash(h_50,data)) else fail-any) else fail-any)) else caught-fail) in
        {1089}let v_368: bool = not-caught-fail(ss_56) in
        {1090}let data_1: bitstring = (if v_368 then catch-fail(getpublickey(m_12)) else caught-fail) in
        {1091}let v_369: bool = not-caught-fail(data_1) in
        {1092}let v_370: bitstring = (if v_369 then catch-fail(symmetricstateunpack(ss_56)) else caught-fail) in
        {1093}let v_371: bool = (not-caught-fail(v_370) && success?(1-proj-3-tuple(v_370))) in
        {1094}let h_51: bitstring = (if v_371 then 3-proj-3-tuple(v_370) else caught-fail) in
        {1095}let ck_61: key = (if v_371 then 2-proj-3-tuple(v_370) else caught-fail) in
        {1096}let cs_51: cipherstate = (if v_371 then 1-proj-3-tuple(v_370) else caught-fail) in
        {1097}let ss_57: symmetricstate = (if v_368 then catch-fail((if v_369 then (if v_371 then symmetricstatepack(cs_51,ck_61,hash(h_51,data_1)) else fail-any) else fail-any)) else caught-fail) in
        {1098}let v_372: bool = not-caught-fail(ss_57) in
        {1067}let psk_10: key = empty in
        {1065}let re_12: key = empty in
        {1064}let rm_10: key = empty in
        {1063}let rs_10: key = empty in
        {1062}let e_20: keypair = keypairpack(empty,empty) in
        {1099}let hs_30: handshakestate = (if v_364 then (if v_368 then (if v_372 then handshakestatepack(ss_57,s_12,m_12,e_20,rs_10,rm_10,re_12,psk_10,false) else fail-any) else fail-any) else fail-any) in
        {1100}insert statestore(me_2,them_2,sid_3,statepack_a(hs_30))
    ) | (
        {1343}get statestore(=me_2,=them_2,=sid_3,statepack_a(hs_31: handshakestate)) in
        {1101}in(pub, message_a_2: bitstring);
        {1102}let v_373: bitstring = catch-fail(handshakestateunpack(hs_31)) in
        {1103}let v_374: bool = (not-caught-fail(v_373) && success?(1-proj-9-tuple(v_373))) in
        {1104}let initiator_9: bool = (if v_374 then 9-proj-9-tuple(v_373) else caught-fail) in
        {1105}let psk_11: key = (if v_374 then 8-proj-9-tuple(v_373) else caught-fail) in
        {1106}let re_13: key = (if v_374 then 7-proj-9-tuple(v_373) else caught-fail) in
        {1107}let rm_11: key = (if v_374 then 6-proj-9-tuple(v_373) else caught-fail) in
        {1108}let rs_11: key = (if v_374 then 5-proj-9-tuple(v_373) else caught-fail) in
        {1109}let e_21: keypair = (if v_374 then 4-proj-9-tuple(v_373) else caught-fail) in
        {1110}let m_13: keypair = (if v_374 then 3-proj-9-tuple(v_373) else caught-fail) in
        {1111}let s_13: keypair = (if v_374 then 2-proj-9-tuple(v_373) else caught-fail) in
        {1112}let ss_58: symmetricstate = (if v_374 then 1-proj-9-tuple(v_373) else caught-fail) in
        {1113}let v_375: bitstring = (if v_374 then catch-fail((empty,empty,empty,empty)) else caught-fail) in
        {1114}let v_376: bool = (not-caught-fail(v_375) && success?(1-proj-4-tuple(v_375))) in
        {1115}let ciphertext_20: bitstring = (if v_376 then 4-proj-4-tuple(v_375) else caught-fail) in
        {1116}let nm_4: bitstring = (if v_376 then 3-proj-4-tuple(v_375) else caught-fail) in
        {1117}let ns_10: bitstring = (if v_376 then 2-proj-4-tuple(v_375) else caught-fail) in
        {1118}let ne_10: bitstring = (if v_376 then 1-proj-4-tuple(v_375) else caught-fail) in
        {1122}let v_377: bitstring = (if v_376 then catch-fail(symmetricstateunpack(ss_58)) else caught-fail) in
        {1123}let v_378: bool = (not-caught-fail(v_377) && success?(1-proj-3-tuple(v_377))) in
        {1124}let h_52: bitstring = (if v_378 then 3-proj-3-tuple(v_377) else caught-fail) in
        {1125}let ck_62: key = (if v_378 then 2-proj-3-tuple(v_377) else caught-fail) in
        {1126}let cs_52: cipherstate = (if v_378 then 1-proj-3-tuple(v_377) else caught-fail) in
        {1121}let re_14: key = (if v_376 then ne_10 else caught-fail) in
        {1127}let ss_59: symmetricstate = (if v_376 then catch-fail((if v_378 then symmetricstatepack(cs_52,ck_62,hash(h_52,re_14)) else fail-any)) else caught-fail) in
        {1128}let v_379: bool = not-caught-fail(ss_59) in
        {1129}let v_380: bitstring = (if v_379 then catch-fail(keypairunpack(s_13)) else caught-fail) in
        {1130}let v_381: bool = (not-caught-fail(v_380) && success?(1-proj-2-tuple(v_380))) in
        {1131}let my_private_key_10: key = (if v_381 then 2-proj-2-tuple(v_380) else caught-fail) in
        {1132}let my_public_key_10: key = (if v_381 then 1-proj-2-tuple(v_380) else caught-fail) in
        {1133}let input_key_material_12: key = (if v_379 then catch-fail((if v_381 then dhexp(my_private_key_10,re_14) else fail-any)) else caught-fail) in
        {1134}let v_382: bool = not-caught-fail(input_key_material_12) in
        {1135}let v_383: bitstring = (if v_382 then catch-fail(symmetricstateunpack(ss_59)) else caught-fail) in
        {1136}let v_384: bool = (not-caught-fail(v_383) && success?(1-proj-3-tuple(v_383))) in
        {1137}let h_53: bitstring = (if v_384 then 3-proj-3-tuple(v_383) else caught-fail) in
        {1138}let ck_63: key = (if v_384 then 2-proj-3-tuple(v_383) else caught-fail) in
        {1139}let cs_53: cipherstate = (if v_384 then 1-proj-3-tuple(v_383) else caught-fail) in
        {1142}let output3_12: key = (if v_384 then hmac_hash3(ck_63,input_key_material_12) else caught-fail) in
        {1141}let output2_12: key = (if v_384 then hmac_hash2(ck_63,input_key_material_12) else caught-fail) in
        {1140}let output1_12: key = (if v_384 then hmac_hash1(ck_63,input_key_material_12) else caught-fail) in
        {1143}let v_385: bitstring = (if v_384 then catch-fail((output1_12,output2_12,output3_12)) else caught-fail) in
        {1144}let v_386: bool = (not-caught-fail(v_385) && success?(1-proj-3-tuple(v_385))) in
        {1145}let output_10: key = (if v_386 then 3-proj-3-tuple(v_385) else caught-fail) in
        {1146}let temp_k_10: key = (if v_386 then 2-proj-3-tuple(v_385) else caught-fail) in
        {1147}let ck_64: key = (if v_386 then 1-proj-3-tuple(v_385) else caught-fail) in
        {1148}let ss_60: symmetricstate = (if v_379 then catch-fail((if v_382 then (if v_384 then (if v_386 then symmetricstatepack(cipherstatepack(temp_k_10,minnonce),ck_64,h_53) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1149}let v_387: bool = not-caught-fail(ss_60) in
        {1150}let v_388: bitstring = (if v_387 then catch-fail(keypairunpack(m_13)) else caught-fail) in
        {1151}let v_389: bool = (not-caught-fail(v_388) && success?(1-proj-2-tuple(v_388))) in
        {1152}let my_private_key_11: key = (if v_389 then 2-proj-2-tuple(v_388) else caught-fail) in
        {1153}let my_public_key_11: key = (if v_389 then 1-proj-2-tuple(v_388) else caught-fail) in
        {1154}let input_key_material_13: key = (if v_387 then catch-fail((if v_389 then dhexp(my_private_key_11,re_14) else fail-any)) else caught-fail) in
        {1155}let v_390: bool = not-caught-fail(input_key_material_13) in
        {1156}let v_391: bitstring = (if v_390 then catch-fail(symmetricstateunpack(ss_60)) else caught-fail) in
        {1157}let v_392: bool = (not-caught-fail(v_391) && success?(1-proj-3-tuple(v_391))) in
        {1158}let h_54: bitstring = (if v_392 then 3-proj-3-tuple(v_391) else caught-fail) in
        {1159}let ck_65: key = (if v_392 then 2-proj-3-tuple(v_391) else caught-fail) in
        {1160}let cs_54: cipherstate = (if v_392 then 1-proj-3-tuple(v_391) else caught-fail) in
        {1163}let output3_13: key = (if v_392 then hmac_hash3(ck_65,input_key_material_13) else caught-fail) in
        {1162}let output2_13: key = (if v_392 then hmac_hash2(ck_65,input_key_material_13) else caught-fail) in
        {1161}let output1_13: key = (if v_392 then hmac_hash1(ck_65,input_key_material_13) else caught-fail) in
        {1164}let v_393: bitstring = (if v_392 then catch-fail((output1_13,output2_13,output3_13)) else caught-fail) in
        {1165}let v_394: bool = (not-caught-fail(v_393) && success?(1-proj-3-tuple(v_393))) in
        {1166}let output_11: key = (if v_394 then 3-proj-3-tuple(v_393) else caught-fail) in
        {1167}let temp_k_11: key = (if v_394 then 2-proj-3-tuple(v_393) else caught-fail) in
        {1168}let ck_66: key = (if v_394 then 1-proj-3-tuple(v_393) else caught-fail) in
        {1169}let ss_61: symmetricstate = (if v_387 then catch-fail((if v_390 then (if v_392 then (if v_394 then symmetricstatepack(cipherstatepack(temp_k_11,minnonce),ck_66,h_54) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1170}let v_395: bool = not-caught-fail(ss_61) in
        {1171}let v_396: bitstring = (if v_395 then catch-fail(symmetricstateunpack(ss_61)) else caught-fail) in
        {1172}let v_397: bool = (not-caught-fail(v_396) && success?(1-proj-3-tuple(v_396))) in
        {1173}let h_55: bitstring = (if v_397 then 3-proj-3-tuple(v_396) else caught-fail) in
        {1174}let ck_67: key = (if v_397 then 2-proj-3-tuple(v_396) else caught-fail) in
        {1175}let cs_55: cipherstate = (if v_397 then 1-proj-3-tuple(v_396) else caught-fail) in
        {1176}let v_398: bitstring = (if v_397 then catch-fail(cipherstateunpack(cs_55)) else caught-fail) in
        {1177}let v_399: bool = (not-caught-fail(v_398) && success?(1-proj-2-tuple(v_398))) in
        {1178}let n_24: nonce = (if v_399 then 2-proj-2-tuple(v_398) else caught-fail) in
        {1179}let k_27: key = (if v_399 then 1-proj-2-tuple(v_398) else caught-fail) in
        {1180}let d_4: aead = (if v_399 then catch-fail(decrypt(k_27,n_24,h_55,ns_10)) else caught-fail) in
        {1181}let v_400: bool = not-caught-fail(d_4) in
        {1182}let v_401: bitstring = (if v_400 then catch-fail(aeadunpack(d_4)) else caught-fail) in
        {1183}let v_402: bool = (not-caught-fail(v_401) && success?(1-proj-3-tuple(v_401))) in
        {1184}let plaintext_16: bitstring = (if v_402 then 3-proj-3-tuple(v_401) else caught-fail) in
        {1185}let adi_4: bitstring = (if v_402 then 2-proj-3-tuple(v_401) else caught-fail) in
        {1186}let valid_12: bool = (if v_402 then 1-proj-3-tuple(v_401) else caught-fail) in
        {1188}let v_403: bitstring = (if v_402 then catch-fail(cipherstateunpack(cs_55)) else caught-fail) in
        {1189}let v_404: bool = (not-caught-fail(v_403) && success?(1-proj-2-tuple(v_403))) in
        {1190}let o_12: nonce = (if v_404 then 2-proj-2-tuple(v_403) else caught-fail) in
        {1191}let k_28: key = (if v_404 then 1-proj-2-tuple(v_403) else caught-fail) in
        {1187}let n_25: nonce = (if v_402 then increment_nonce(n_24) else caught-fail) in
        {1192}let csi_24: cipherstate = (if v_402 then catch-fail((if v_404 then cipherstatepack(k_28,n_25) else fail-any)) else caught-fail) in
        {1193}let v_405: bool = not-caught-fail(csi_24) in
        {1194}let v_406: bitstring = (if v_397 then catch-fail((if v_399 then (if v_400 then (if v_402 then (if v_405 then (csi_24,plaintext_16,valid_12) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1195}let v_407: bool = (not-caught-fail(v_406) && success?(1-proj-3-tuple(v_406))) in
        {1196}let valid_13: bool = (if v_407 then 3-proj-3-tuple(v_406) else caught-fail) in
        {1197}let plaintext_17: bitstring = (if v_407 then 2-proj-3-tuple(v_406) else caught-fail) in
        {1198}let csi_25: cipherstate = (if v_407 then 1-proj-3-tuple(v_406) else caught-fail) in
        {1199}let ss_62: symmetricstate = (if v_407 then symmetricstatepack(csi_25,ck_67,h_55) else caught-fail) in
        {1200}let v_408: bitstring = (if v_407 then catch-fail(symmetricstateunpack(ss_62)) else caught-fail) in
        {1201}let v_409: bool = (not-caught-fail(v_408) && success?(1-proj-3-tuple(v_408))) in
        {1202}let h_56: bitstring = (if v_409 then 3-proj-3-tuple(v_408) else caught-fail) in
        {1203}let ck_68: key = (if v_409 then 2-proj-3-tuple(v_408) else caught-fail) in
        {1204}let cs_56: cipherstate = (if v_409 then 1-proj-3-tuple(v_408) else caught-fail) in
        {1205}let ssi_14: symmetricstate = (if v_407 then catch-fail((if v_409 then symmetricstatepack(cs_56,ck_68,hash(h_56,ns_10)) else fail-any)) else caught-fail) in
        {1206}let v_410: bool = not-caught-fail(ssi_14) in
        {1207}let v_411: bitstring = (if v_395 then catch-fail((if v_397 then (if v_407 then (if v_410 then (ssi_14,plaintext_17,valid_13) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1208}let v_412: bool = (not-caught-fail(v_411) && success?(1-proj-3-tuple(v_411))) in
        {1209}let valid1_5: bool = (if v_412 then 3-proj-3-tuple(v_411) else caught-fail) in
        {1210}let ne_11: bitstring = (if v_412 then 2-proj-3-tuple(v_411) else caught-fail) in
        {1211}let ss_63: symmetricstate = (if v_412 then 1-proj-3-tuple(v_411) else caught-fail) in
        {1213}let v_413: bitstring = (if v_412 then catch-fail(symmetricstateunpack(ss_63)) else caught-fail) in
        {1214}let v_414: bool = (not-caught-fail(v_413) && success?(1-proj-3-tuple(v_413))) in
        {1215}let h_57: bitstring = (if v_414 then 3-proj-3-tuple(v_413) else caught-fail) in
        {1216}let ck_69: key = (if v_414 then 2-proj-3-tuple(v_413) else caught-fail) in
        {1217}let cs_57: cipherstate = (if v_414 then 1-proj-3-tuple(v_413) else caught-fail) in
        {1218}let v_415: bitstring = (if v_414 then catch-fail(cipherstateunpack(cs_57)) else caught-fail) in
        {1219}let v_416: bool = (not-caught-fail(v_415) && success?(1-proj-2-tuple(v_415))) in
        {1220}let n_26: nonce = (if v_416 then 2-proj-2-tuple(v_415) else caught-fail) in
        {1221}let k_29: key = (if v_416 then 1-proj-2-tuple(v_415) else caught-fail) in
        {1222}let d_5: aead = (if v_416 then catch-fail(decrypt(k_29,n_26,h_57,nm_4)) else caught-fail) in
        {1223}let v_417: bool = not-caught-fail(d_5) in
        {1224}let v_418: bitstring = (if v_417 then catch-fail(aeadunpack(d_5)) else caught-fail) in
        {1225}let v_419: bool = (not-caught-fail(v_418) && success?(1-proj-3-tuple(v_418))) in
        {1226}let plaintext_18: bitstring = (if v_419 then 3-proj-3-tuple(v_418) else caught-fail) in
        {1227}let adi_5: bitstring = (if v_419 then 2-proj-3-tuple(v_418) else caught-fail) in
        {1228}let valid_14: bool = (if v_419 then 1-proj-3-tuple(v_418) else caught-fail) in
        {1230}let v_420: bitstring = (if v_419 then catch-fail(cipherstateunpack(cs_57)) else caught-fail) in
        {1231}let v_421: bool = (not-caught-fail(v_420) && success?(1-proj-2-tuple(v_420))) in
        {1232}let o_13: nonce = (if v_421 then 2-proj-2-tuple(v_420) else caught-fail) in
        {1233}let k_30: key = (if v_421 then 1-proj-2-tuple(v_420) else caught-fail) in
        {1229}let n_27: nonce = (if v_419 then increment_nonce(n_26) else caught-fail) in
        {1234}let csi_26: cipherstate = (if v_419 then catch-fail((if v_421 then cipherstatepack(k_30,n_27) else fail-any)) else caught-fail) in
        {1235}let v_422: bool = not-caught-fail(csi_26) in
        {1236}let v_423: bitstring = (if v_414 then catch-fail((if v_416 then (if v_417 then (if v_419 then (if v_422 then (csi_26,plaintext_18,valid_14) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1237}let v_424: bool = (not-caught-fail(v_423) && success?(1-proj-3-tuple(v_423))) in
        {1238}let valid_15: bool = (if v_424 then 3-proj-3-tuple(v_423) else caught-fail) in
        {1239}let plaintext_19: bitstring = (if v_424 then 2-proj-3-tuple(v_423) else caught-fail) in
        {1240}let csi_27: cipherstate = (if v_424 then 1-proj-3-tuple(v_423) else caught-fail) in
        {1241}let ss_64: symmetricstate = (if v_424 then symmetricstatepack(csi_27,ck_69,h_57) else caught-fail) in
        {1242}let v_425: bitstring = (if v_424 then catch-fail(symmetricstateunpack(ss_64)) else caught-fail) in
        {1243}let v_426: bool = (not-caught-fail(v_425) && success?(1-proj-3-tuple(v_425))) in
        {1244}let h_58: bitstring = (if v_426 then 3-proj-3-tuple(v_425) else caught-fail) in
        {1245}let ck_70: key = (if v_426 then 2-proj-3-tuple(v_425) else caught-fail) in
        {1246}let cs_58: cipherstate = (if v_426 then 1-proj-3-tuple(v_425) else caught-fail) in
        {1247}let ssi_15: symmetricstate = (if v_424 then catch-fail((if v_426 then symmetricstatepack(cs_58,ck_70,hash(h_58,nm_4)) else fail-any)) else caught-fail) in
        {1248}let v_427: bool = not-caught-fail(ssi_15) in
        {1249}let v_428: bitstring = (if v_412 then catch-fail((if v_414 then (if v_424 then (if v_427 then (ssi_15,plaintext_19,valid_15) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1250}let v_429: bool = (not-caught-fail(v_428) && success?(1-proj-3-tuple(v_428))) in
        {1251}let valid2_5: bool = (if v_429 then 3-proj-3-tuple(v_428) else caught-fail) in
        {1252}let me_3: bitstring = (if v_429 then 2-proj-3-tuple(v_428) else caught-fail) in
        {1253}let ss_65: symmetricstate = (if v_429 then 1-proj-3-tuple(v_428) else caught-fail) in
        {1255}let v_430: bitstring = (if v_429 then catch-fail(keypairunpack(s_13)) else caught-fail) in
        {1256}let v_431: bool = (not-caught-fail(v_430) && success?(1-proj-2-tuple(v_430))) in
        {1257}let my_private_key_12: key = (if v_431 then 2-proj-2-tuple(v_430) else caught-fail) in
        {1258}let my_public_key_12: key = (if v_431 then 1-proj-2-tuple(v_430) else caught-fail) in
        {1254}let rm_12: key = (if v_429 then me_3 else caught-fail) in
        {1259}let input_key_material_14: key = (if v_429 then catch-fail((if v_431 then dhexp(my_private_key_12,rm_12) else fail-any)) else caught-fail) in
        {1260}let v_432: bool = not-caught-fail(input_key_material_14) in
        {1261}let v_433: bitstring = (if v_432 then catch-fail(symmetricstateunpack(ss_65)) else caught-fail) in
        {1262}let v_434: bool = (not-caught-fail(v_433) && success?(1-proj-3-tuple(v_433))) in
        {1263}let h_59: bitstring = (if v_434 then 3-proj-3-tuple(v_433) else caught-fail) in
        {1264}let ck_71: key = (if v_434 then 2-proj-3-tuple(v_433) else caught-fail) in
        {1265}let cs_59: cipherstate = (if v_434 then 1-proj-3-tuple(v_433) else caught-fail) in
        {1268}let output3_14: key = (if v_434 then hmac_hash3(ck_71,input_key_material_14) else caught-fail) in
        {1267}let output2_14: key = (if v_434 then hmac_hash2(ck_71,input_key_material_14) else caught-fail) in
        {1266}let output1_14: key = (if v_434 then hmac_hash1(ck_71,input_key_material_14) else caught-fail) in
        {1269}let v_435: bitstring = (if v_434 then catch-fail((output1_14,output2_14,output3_14)) else caught-fail) in
        {1270}let v_436: bool = (not-caught-fail(v_435) && success?(1-proj-3-tuple(v_435))) in
        {1271}let output_12: key = (if v_436 then 3-proj-3-tuple(v_435) else caught-fail) in
        {1272}let temp_k_12: key = (if v_436 then 2-proj-3-tuple(v_435) else caught-fail) in
        {1273}let ck_72: key = (if v_436 then 1-proj-3-tuple(v_435) else caught-fail) in
        {1274}let ss_66: symmetricstate = (if v_429 then catch-fail((if v_432 then (if v_434 then (if v_436 then symmetricstatepack(cipherstatepack(temp_k_12,minnonce),ck_72,h_59) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1275}let v_437: bool = not-caught-fail(ss_66) in
        {1276}let v_438: bitstring = (if v_437 then catch-fail(keypairunpack(m_13)) else caught-fail) in
        {1277}let v_439: bool = (not-caught-fail(v_438) && success?(1-proj-2-tuple(v_438))) in
        {1278}let my_private_key_13: key = (if v_439 then 2-proj-2-tuple(v_438) else caught-fail) in
        {1279}let my_public_key_13: key = (if v_439 then 1-proj-2-tuple(v_438) else caught-fail) in
        {1212}let rs_12: key = (if v_412 then ne_11 else caught-fail) in
        {1280}let input_key_material_15: key = (if v_437 then catch-fail((if v_439 then dhexp(my_private_key_13,rs_12) else fail-any)) else caught-fail) in
        {1281}let v_440: bool = not-caught-fail(input_key_material_15) in
        {1282}let v_441: bitstring = (if v_440 then catch-fail(symmetricstateunpack(ss_66)) else caught-fail) in
        {1283}let v_442: bool = (not-caught-fail(v_441) && success?(1-proj-3-tuple(v_441))) in
        {1284}let h_60: bitstring = (if v_442 then 3-proj-3-tuple(v_441) else caught-fail) in
        {1285}let ck_73: key = (if v_442 then 2-proj-3-tuple(v_441) else caught-fail) in
        {1286}let cs_60: cipherstate = (if v_442 then 1-proj-3-tuple(v_441) else caught-fail) in
        {1289}let output3_15: key = (if v_442 then hmac_hash3(ck_73,input_key_material_15) else caught-fail) in
        {1288}let output2_15: key = (if v_442 then hmac_hash2(ck_73,input_key_material_15) else caught-fail) in
        {1287}let output1_15: key = (if v_442 then hmac_hash1(ck_73,input_key_material_15) else caught-fail) in
        {1290}let v_443: bitstring = (if v_442 then catch-fail((output1_15,output2_15,output3_15)) else caught-fail) in
        {1291}let v_444: bool = (not-caught-fail(v_443) && success?(1-proj-3-tuple(v_443))) in
        {1292}let output_13: key = (if v_444 then 3-proj-3-tuple(v_443) else caught-fail) in
        {1293}let temp_k_13: key = (if v_444 then 2-proj-3-tuple(v_443) else caught-fail) in
        {1294}let ck_74: key = (if v_444 then 1-proj-3-tuple(v_443) else caught-fail) in
        {1295}let ss_67: symmetricstate = (if v_437 then catch-fail((if v_440 then (if v_442 then (if v_444 then symmetricstatepack(cipherstatepack(temp_k_13,minnonce),ck_74,h_60) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1296}let v_445: bool = not-caught-fail(ss_67) in
        {1297}let v_446: bitstring = (if v_445 then catch-fail(symmetricstateunpack(ss_67)) else caught-fail) in
        {1298}let v_447: bool = (not-caught-fail(v_446) && success?(1-proj-3-tuple(v_446))) in
        {1299}let h_61: bitstring = (if v_447 then 3-proj-3-tuple(v_446) else caught-fail) in
        {1300}let ck_75: key = (if v_447 then 2-proj-3-tuple(v_446) else caught-fail) in
        {1301}let cs_61: cipherstate = (if v_447 then 1-proj-3-tuple(v_446) else caught-fail) in
        {1302}let v_448: bitstring = (if v_447 then catch-fail(cipherstateunpack(cs_61)) else caught-fail) in
        {1303}let v_449: bool = (not-caught-fail(v_448) && success?(1-proj-2-tuple(v_448))) in
        {1304}let n_28: nonce = (if v_449 then 2-proj-2-tuple(v_448) else caught-fail) in
        {1305}let k_31: key = (if v_449 then 1-proj-2-tuple(v_448) else caught-fail) in
        {1306}let d_6: aead = (if v_449 then catch-fail(decrypt(k_31,n_28,h_61,ciphertext_20)) else caught-fail) in
        {1307}let v_450: bool = not-caught-fail(d_6) in
        {1308}let v_451: bitstring = (if v_450 then catch-fail(aeadunpack(d_6)) else caught-fail) in
        {1309}let v_452: bool = (not-caught-fail(v_451) && success?(1-proj-3-tuple(v_451))) in
        {1310}let plaintext_20: bitstring = (if v_452 then 3-proj-3-tuple(v_451) else caught-fail) in
        {1311}let adi_6: bitstring = (if v_452 then 2-proj-3-tuple(v_451) else caught-fail) in
        {1312}let valid_16: bool = (if v_452 then 1-proj-3-tuple(v_451) else caught-fail) in
        {1314}let v_453: bitstring = (if v_452 then catch-fail(cipherstateunpack(cs_61)) else caught-fail) in
        {1315}let v_454: bool = (not-caught-fail(v_453) && success?(1-proj-2-tuple(v_453))) in
        {1316}let o_14: nonce = (if v_454 then 2-proj-2-tuple(v_453) else caught-fail) in
        {1317}let k_32: key = (if v_454 then 1-proj-2-tuple(v_453) else caught-fail) in
        {1313}let n_29: nonce = (if v_452 then increment_nonce(n_28) else caught-fail) in
        {1318}let csi_28: cipherstate = (if v_452 then catch-fail((if v_454 then cipherstatepack(k_32,n_29) else fail-any)) else caught-fail) in
        {1319}let v_455: bool = not-caught-fail(csi_28) in
        {1320}let v_456: bitstring = (if v_447 then catch-fail((if v_449 then (if v_450 then (if v_452 then (if v_455 then (csi_28,plaintext_20,valid_16) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1321}let v_457: bool = (not-caught-fail(v_456) && success?(1-proj-3-tuple(v_456))) in
        {1322}let valid_17: bool = (if v_457 then 3-proj-3-tuple(v_456) else caught-fail) in
        {1323}let plaintext_21: bitstring = (if v_457 then 2-proj-3-tuple(v_456) else caught-fail) in
        {1324}let csi_29: cipherstate = (if v_457 then 1-proj-3-tuple(v_456) else caught-fail) in
        {1325}let ss_68: symmetricstate = (if v_457 then symmetricstatepack(csi_29,ck_75,h_61) else caught-fail) in
        {1326}let v_458: bitstring = (if v_457 then catch-fail(symmetricstateunpack(ss_68)) else caught-fail) in
        {1327}let v_459: bool = (not-caught-fail(v_458) && success?(1-proj-3-tuple(v_458))) in
        {1328}let h_62: bitstring = (if v_459 then 3-proj-3-tuple(v_458) else caught-fail) in
        {1329}let ck_76: key = (if v_459 then 2-proj-3-tuple(v_458) else caught-fail) in
        {1330}let cs_62: cipherstate = (if v_459 then 1-proj-3-tuple(v_458) else caught-fail) in
        {1331}let ssi_16: symmetricstate = (if v_457 then catch-fail((if v_459 then symmetricstatepack(cs_62,ck_76,hash(h_62,ciphertext_20)) else fail-any)) else caught-fail) in
        {1332}let v_460: bool = not-caught-fail(ssi_16) in
        {1333}let v_461: bitstring = (if v_445 then catch-fail((if v_447 then (if v_457 then (if v_460 then (ssi_16,plaintext_21,valid_17) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1334}let v_462: bool = (not-caught-fail(v_461) && success?(1-proj-3-tuple(v_461))) in
        {1335}let valid3: bool = (if v_462 then 3-proj-3-tuple(v_461) else caught-fail) in
        {1336}let plaintext_22: bitstring = (if v_462 then 2-proj-3-tuple(v_461) else caught-fail) in
        {1337}let ss_69: symmetricstate = (if v_462 then 1-proj-3-tuple(v_461) else caught-fail) in
        {1338}let v_463: bool = (if v_462 then catch-fail((valid1_5 && (valid2_5 && valid3))) else caught-fail) in
        {1339}let hs_32: handshakestate = (if v_463 then handshakestatepack(ss_69,s_13,m_13,e_21,rs_12,rm_12,re_14,psk_11,initiator_9) else caught-fail) in
        {1340}let (hs_33: handshakestate,plaintext_a: bitstring,valid_18: bool) = (if v_374 then (if v_376 then (if v_379 then (if v_387 then (if v_395 then (if v_412 then (if v_429 then (if v_437 then (if v_445 then (if v_462 then (if undo-catch-fail(v_463) then (hs_32,plaintext_22,true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1341}event RecvMsg(me_2,them_2,stagepack_a(sid_3),plaintext_a);
        {1342}insert statestore(me_2,them_2,sid_3,statepack_b(hs_33))
    ) | (
        {1498}get statestore(=me_2,=them_2,=sid_3,statepack_b(hs_34: handshakestate)) in
        {1345}let v_464: bitstring = catch-fail(handshakestateunpack(hs_34)) in
        {1346}let v_465: bool = (not-caught-fail(v_464) && success?(1-proj-9-tuple(v_464))) in
        {1347}let initiator_10: bool = (if v_465 then 9-proj-9-tuple(v_464) else caught-fail) in
        {1348}let psk_12: key = (if v_465 then 8-proj-9-tuple(v_464) else caught-fail) in
        {1349}let re_15: key = (if v_465 then 7-proj-9-tuple(v_464) else caught-fail) in
        {1350}let rm_13: key = (if v_465 then 6-proj-9-tuple(v_464) else caught-fail) in
        {1351}let rs_13: key = (if v_465 then 5-proj-9-tuple(v_464) else caught-fail) in
        {1352}let e_22: keypair = (if v_465 then 4-proj-9-tuple(v_464) else caught-fail) in
        {1353}let m_14: keypair = (if v_465 then 3-proj-9-tuple(v_464) else caught-fail) in
        {1354}let s_14: keypair = (if v_465 then 2-proj-9-tuple(v_464) else caught-fail) in
        {1355}let ss_70: symmetricstate = (if v_465 then 1-proj-9-tuple(v_464) else caught-fail) in
        {1356}let v_466: bitstring = (if v_465 then catch-fail((empty,empty,empty)) else caught-fail) in
        {1357}let v_467: bool = (not-caught-fail(v_466) && success?(1-proj-3-tuple(v_466))) in
        {1358}let ciphertext_21: bitstring = (if v_467 then 3-proj-3-tuple(v_466) else caught-fail) in
        {1359}let ns_11: bitstring = (if v_467 then 2-proj-3-tuple(v_466) else caught-fail) in
        {1360}let ne_12: bitstring = (if v_467 then 1-proj-3-tuple(v_466) else caught-fail) in
        {1361}let basis_12: key = (if v_467 then key_e(me_2,them_2,sid_3) else caught-fail) in
        {1362}let public_key_12: key = (if v_467 then catch-fail(dhexp(basis_12,validkey(g))) else caught-fail) in
        {1363}let v_468: bool = not-caught-fail(public_key_12) in
        {1364}let e_23: keypair = (if v_467 then catch-fail((if v_468 then keypairpack(validkey(public_key_12),basis_12) else fail-any)) else caught-fail) in
        {1365}let v_469: bool = not-caught-fail(e_23) in
        {1366}let ne_13: bitstring = (if v_469 then catch-fail(getpublickey(e_23)) else caught-fail) in
        {1367}let v_470: bool = not-caught-fail(ne_13) in
        {1368}let v_471: bitstring = (if v_470 then catch-fail(symmetricstateunpack(ss_70)) else caught-fail) in
        {1369}let v_472: bool = (not-caught-fail(v_471) && success?(1-proj-3-tuple(v_471))) in
        {1370}let h_63: bitstring = (if v_472 then 3-proj-3-tuple(v_471) else caught-fail) in
        {1371}let ck_77: key = (if v_472 then 2-proj-3-tuple(v_471) else caught-fail) in
        {1372}let cs_63: cipherstate = (if v_472 then 1-proj-3-tuple(v_471) else caught-fail) in
        {1373}let ss_71: symmetricstate = (if v_470 then catch-fail((if v_472 then symmetricstatepack(cs_63,ck_77,hash(h_63,ne_13)) else fail-any)) else caught-fail) in
        {1374}let v_473: bool = not-caught-fail(ss_71) in
        {1375}let v_474: bitstring = (if v_473 then catch-fail(keypairunpack(e_23)) else caught-fail) in
        {1376}let v_475: bool = (not-caught-fail(v_474) && success?(1-proj-2-tuple(v_474))) in
        {1377}let my_private_key_14: key = (if v_475 then 2-proj-2-tuple(v_474) else caught-fail) in
        {1378}let my_public_key_14: key = (if v_475 then 1-proj-2-tuple(v_474) else caught-fail) in
        {1379}let input_key_material_16: key = (if v_473 then catch-fail((if v_475 then dhexp(my_private_key_14,re_15) else fail-any)) else caught-fail) in
        {1380}let v_476: bool = not-caught-fail(input_key_material_16) in
        {1381}let v_477: bitstring = (if v_476 then catch-fail(symmetricstateunpack(ss_71)) else caught-fail) in
        {1382}let v_478: bool = (not-caught-fail(v_477) && success?(1-proj-3-tuple(v_477))) in
        {1383}let h_64: bitstring = (if v_478 then 3-proj-3-tuple(v_477) else caught-fail) in
        {1384}let ck_78: key = (if v_478 then 2-proj-3-tuple(v_477) else caught-fail) in
        {1385}let cs_64: cipherstate = (if v_478 then 1-proj-3-tuple(v_477) else caught-fail) in
        {1388}let output3_16: key = (if v_478 then hmac_hash3(ck_78,input_key_material_16) else caught-fail) in
        {1387}let output2_16: key = (if v_478 then hmac_hash2(ck_78,input_key_material_16) else caught-fail) in
        {1386}let output1_16: key = (if v_478 then hmac_hash1(ck_78,input_key_material_16) else caught-fail) in
        {1389}let v_479: bitstring = (if v_478 then catch-fail((output1_16,output2_16,output3_16)) else caught-fail) in
        {1390}let v_480: bool = (not-caught-fail(v_479) && success?(1-proj-3-tuple(v_479))) in
        {1391}let output_14: key = (if v_480 then 3-proj-3-tuple(v_479) else caught-fail) in
        {1392}let temp_k_14: key = (if v_480 then 2-proj-3-tuple(v_479) else caught-fail) in
        {1393}let ck_79: key = (if v_480 then 1-proj-3-tuple(v_479) else caught-fail) in
        {1394}let ss_72: symmetricstate = (if v_473 then catch-fail((if v_476 then (if v_478 then (if v_480 then symmetricstatepack(cipherstatepack(temp_k_14,minnonce),ck_79,h_64) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1395}let v_481: bool = not-caught-fail(ss_72) in
        {1396}let v_482: bitstring = (if v_481 then catch-fail(keypairunpack(e_23)) else caught-fail) in
        {1397}let v_483: bool = (not-caught-fail(v_482) && success?(1-proj-2-tuple(v_482))) in
        {1398}let my_private_key_15: key = (if v_483 then 2-proj-2-tuple(v_482) else caught-fail) in
        {1399}let my_public_key_15: key = (if v_483 then 1-proj-2-tuple(v_482) else caught-fail) in
        {1400}let input_key_material_17: key = (if v_481 then catch-fail((if v_483 then dhexp(my_private_key_15,rs_13) else fail-any)) else caught-fail) in
        {1401}let v_484: bool = not-caught-fail(input_key_material_17) in
        {1402}let v_485: bitstring = (if v_484 then catch-fail(symmetricstateunpack(ss_72)) else caught-fail) in
        {1403}let v_486: bool = (not-caught-fail(v_485) && success?(1-proj-3-tuple(v_485))) in
        {1404}let h_65: bitstring = (if v_486 then 3-proj-3-tuple(v_485) else caught-fail) in
        {1405}let ck_80: key = (if v_486 then 2-proj-3-tuple(v_485) else caught-fail) in
        {1406}let cs_65: cipherstate = (if v_486 then 1-proj-3-tuple(v_485) else caught-fail) in
        {1409}let output3_17: key = (if v_486 then hmac_hash3(ck_80,input_key_material_17) else caught-fail) in
        {1408}let output2_17: key = (if v_486 then hmac_hash2(ck_80,input_key_material_17) else caught-fail) in
        {1407}let output1_17: key = (if v_486 then hmac_hash1(ck_80,input_key_material_17) else caught-fail) in
        {1410}let v_487: bitstring = (if v_486 then catch-fail((output1_17,output2_17,output3_17)) else caught-fail) in
        {1411}let v_488: bool = (not-caught-fail(v_487) && success?(1-proj-3-tuple(v_487))) in
        {1412}let output_15: key = (if v_488 then 3-proj-3-tuple(v_487) else caught-fail) in
        {1413}let temp_k_15: key = (if v_488 then 2-proj-3-tuple(v_487) else caught-fail) in
        {1414}let ck_81: key = (if v_488 then 1-proj-3-tuple(v_487) else caught-fail) in
        {1415}let ss_73: symmetricstate = (if v_481 then catch-fail((if v_484 then (if v_486 then (if v_488 then symmetricstatepack(cipherstatepack(temp_k_15,minnonce),ck_81,h_65) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1416}let v_489: bool = not-caught-fail(ss_73) in
        {1417}let v_490: bitstring = (if v_489 then catch-fail(keypairunpack(e_23)) else caught-fail) in
        {1418}let v_491: bool = (not-caught-fail(v_490) && success?(1-proj-2-tuple(v_490))) in
        {1419}let my_private_key_16: key = (if v_491 then 2-proj-2-tuple(v_490) else caught-fail) in
        {1420}let my_public_key_16: key = (if v_491 then 1-proj-2-tuple(v_490) else caught-fail) in
        {1421}let input_key_material_18: key = (if v_489 then catch-fail((if v_491 then dhexp(my_private_key_16,rm_13) else fail-any)) else caught-fail) in
        {1422}let v_492: bool = not-caught-fail(input_key_material_18) in
        {1423}let v_493: bitstring = (if v_492 then catch-fail(symmetricstateunpack(ss_73)) else caught-fail) in
        {1424}let v_494: bool = (not-caught-fail(v_493) && success?(1-proj-3-tuple(v_493))) in
        {1425}let h_66: bitstring = (if v_494 then 3-proj-3-tuple(v_493) else caught-fail) in
        {1426}let ck_82: key = (if v_494 then 2-proj-3-tuple(v_493) else caught-fail) in
        {1427}let cs_66: cipherstate = (if v_494 then 1-proj-3-tuple(v_493) else caught-fail) in
        {1430}let output3_18: key = (if v_494 then hmac_hash3(ck_82,input_key_material_18) else caught-fail) in
        {1429}let output2_18: key = (if v_494 then hmac_hash2(ck_82,input_key_material_18) else caught-fail) in
        {1428}let output1_18: key = (if v_494 then hmac_hash1(ck_82,input_key_material_18) else caught-fail) in
        {1431}let v_495: bitstring = (if v_494 then catch-fail((output1_18,output2_18,output3_18)) else caught-fail) in
        {1432}let v_496: bool = (not-caught-fail(v_495) && success?(1-proj-3-tuple(v_495))) in
        {1433}let output_16: key = (if v_496 then 3-proj-3-tuple(v_495) else caught-fail) in
        {1434}let temp_k_16: key = (if v_496 then 2-proj-3-tuple(v_495) else caught-fail) in
        {1435}let ck_83: key = (if v_496 then 1-proj-3-tuple(v_495) else caught-fail) in
        {1436}let ss_74: symmetricstate = (if v_489 then catch-fail((if v_492 then (if v_494 then (if v_496 then symmetricstatepack(cipherstatepack(temp_k_16,minnonce),ck_83,h_66) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1437}let v_497: bool = not-caught-fail(ss_74) in
        {1438}let v_498: bitstring = (if v_497 then catch-fail(symmetricstateunpack(ss_74)) else caught-fail) in
        {1439}let v_499: bool = (not-caught-fail(v_498) && success?(1-proj-3-tuple(v_498))) in
        {1440}let h_67: bitstring = (if v_499 then 3-proj-3-tuple(v_498) else caught-fail) in
        {1441}let ck_84: key = (if v_499 then 2-proj-3-tuple(v_498) else caught-fail) in
        {1442}let cs_67: cipherstate = (if v_499 then 1-proj-3-tuple(v_498) else caught-fail) in
        {1443}let v_500: bitstring = (if v_499 then catch-fail(cipherstateunpack(cs_67)) else caught-fail) in
        {1444}let v_501: bool = (not-caught-fail(v_500) && success?(1-proj-2-tuple(v_500))) in
        {1445}let n_30: nonce = (if v_501 then 2-proj-2-tuple(v_500) else caught-fail) in
        {1446}let k_33: key = (if v_501 then 1-proj-2-tuple(v_500) else caught-fail) in
        {1449}let v_502: bitstring = (if v_501 then catch-fail(cipherstateunpack(cs_67)) else caught-fail) in
        {1450}let v_503: bool = (not-caught-fail(v_502) && success?(1-proj-2-tuple(v_502))) in
        {1451}let o_15: nonce = (if v_503 then 2-proj-2-tuple(v_502) else caught-fail) in
        {1452}let k_34: key = (if v_503 then 1-proj-2-tuple(v_502) else caught-fail) in
        {1448}let n_31: nonce = (if v_501 then increment_nonce(n_30) else caught-fail) in
        {1453}let csi_30: cipherstate = (if v_501 then catch-fail((if v_503 then cipherstatepack(k_34,n_31) else fail-any)) else caught-fail) in
        {1454}let v_504: bool = not-caught-fail(csi_30) in
        {1344}let payload_4: bitstring = msg_b(me_2,them_2,sid_3) in
        {1447}let e_24: bitstring = (if v_501 then encrypt(k_33,n_30,h_67,payload_4) else caught-fail) in
        {1455}let v_505: bitstring = (if v_499 then catch-fail((if v_501 then (if v_504 then (csi_30,e_24) else fail-any) else fail-any)) else caught-fail) in
        {1456}let v_506: bool = (not-caught-fail(v_505) && success?(1-proj-2-tuple(v_505))) in
        {1457}let ciphertext_22: bitstring = (if v_506 then 2-proj-2-tuple(v_505) else caught-fail) in
        {1458}let csi_31: cipherstate = (if v_506 then 1-proj-2-tuple(v_505) else caught-fail) in
        {1459}let ss_75: symmetricstate = (if v_506 then symmetricstatepack(csi_31,ck_84,h_67) else caught-fail) in
        {1460}let v_507: bitstring = (if v_506 then catch-fail(symmetricstateunpack(ss_75)) else caught-fail) in
        {1461}let v_508: bool = (not-caught-fail(v_507) && success?(1-proj-3-tuple(v_507))) in
        {1462}let h_68: bitstring = (if v_508 then 3-proj-3-tuple(v_507) else caught-fail) in
        {1463}let ck_85: key = (if v_508 then 2-proj-3-tuple(v_507) else caught-fail) in
        {1464}let cs_68: cipherstate = (if v_508 then 1-proj-3-tuple(v_507) else caught-fail) in
        {1465}let ssi_17: symmetricstate = (if v_506 then catch-fail((if v_508 then symmetricstatepack(cs_68,ck_85,hash(h_68,ciphertext_22)) else fail-any)) else caught-fail) in
        {1466}let v_509: bool = not-caught-fail(ssi_17) in
        {1467}let v_510: bitstring = (if v_497 then catch-fail((if v_499 then (if v_506 then (if v_509 then (ssi_17,ciphertext_22) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1468}let v_511: bool = (not-caught-fail(v_510) && success?(1-proj-2-tuple(v_510))) in
        {1469}let ciphertext_23: bitstring = (if v_511 then 2-proj-2-tuple(v_510) else caught-fail) in
        {1470}let ss_76: symmetricstate = (if v_511 then 1-proj-2-tuple(v_510) else caught-fail) in
        {1473}let v_512: bitstring = (if v_511 then catch-fail(symmetricstateunpack(ss_76)) else caught-fail) in
        {1474}let v_513: bool = (not-caught-fail(v_512) && success?(1-proj-3-tuple(v_512))) in
        {1475}let h_69: bitstring = (if v_513 then 3-proj-3-tuple(v_512) else caught-fail) in
        {1476}let ck_86: key = (if v_513 then 2-proj-3-tuple(v_512) else caught-fail) in
        {1477}let cs_69: cipherstate = (if v_513 then 1-proj-3-tuple(v_512) else caught-fail) in
        {1478}let input_key_material_19: key = (if v_513 then zero else caught-fail) in
        {1481}let output3_19: key = (if v_513 then hmac_hash3(ck_86,input_key_material_19) else caught-fail) in
        {1480}let output2_19: key = (if v_513 then hmac_hash2(ck_86,input_key_material_19) else caught-fail) in
        {1479}let output1_19: key = (if v_513 then hmac_hash1(ck_86,input_key_material_19) else caught-fail) in
        {1482}let v_514: bitstring = (if v_513 then catch-fail((output1_19,output2_19,output3_19)) else caught-fail) in
        {1483}let v_515: bool = (not-caught-fail(v_514) && success?(1-proj-3-tuple(v_514))) in
        {1484}let temp_k3_2: key = (if v_515 then 3-proj-3-tuple(v_514) else caught-fail) in
        {1485}let temp_k2_2: key = (if v_515 then 2-proj-3-tuple(v_514) else caught-fail) in
        {1486}let temp_k1_2: key = (if v_515 then 1-proj-3-tuple(v_514) else caught-fail) in
        {1488}let cs2_10: cipherstate = (if v_515 then cipherstatepack(temp_k2_2,minnonce) else caught-fail) in
        {1487}let cs1_10: cipherstate = (if v_515 then cipherstatepack(temp_k1_2,minnonce) else caught-fail) in
        {1489}let v_516: bitstring = (if v_511 then catch-fail((if v_513 then (if v_515 then (ss_76,cs1_10,cs2_10) else fail-any) else fail-any)) else caught-fail) in
        {1490}let v_517: bool = (not-caught-fail(v_516) && success?(1-proj-3-tuple(v_516))) in
        {1491}let cs2_11: cipherstate = (if v_517 then 3-proj-3-tuple(v_516) else caught-fail) in
        {1492}let cs1_11: cipherstate = (if v_517 then 2-proj-3-tuple(v_516) else caught-fail) in
        {1493}let ssi_18: symmetricstate = (if v_517 then 1-proj-3-tuple(v_516) else caught-fail) in
        {1472}let message_buffer_4: bitstring = (if v_511 then concat3(ne_13,ns_11,ciphertext_23) else caught-fail) in
        {1471}let hs_35: handshakestate = (if v_511 then handshakestatepack(ss_76,s_14,m_14,e_23,rs_13,rm_13,re_15,psk_12,initiator_10) else caught-fail) in
        {1494}let (hs_36: handshakestate,message_b_2: bitstring,cs1_12: cipherstate,cs2_12: cipherstate) = (if v_465 then (if v_467 then (if v_469 then (if v_470 then (if v_473 then (if v_481 then (if v_489 then (if v_497 then (if v_511 then (if v_517 then (hs_35,message_buffer_4,cs1_11,cs2_11) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1495}event SendMsg(me_2,them_2,stagepack_b(sid_3),msg_b(me_2,them_2,sid_3));
        {1496}insert statestore(me_2,them_2,sid_3,statepack_c(hs_36,cs1_12,cs2_12));
        {1497}out(pub, message_b_2)
    ) | (
        {1499}!
        {1565}get statestore(=me_2,=them_2,=sid_3,statepack_c(hs_37: handshakestate,cs1_13: cipherstate,cs2_13: cipherstate)) in
        {1500}let hs_38: handshakestate = handshakestatesetcs(hs_37,cs1_13) in
        {1501}in(pub, message_c_2: bitstring);
        {1502}let v_518: bitstring = catch-fail(handshakestateunpack(hs_38)) in
        {1503}let v_519: bool = (not-caught-fail(v_518) && success?(1-proj-9-tuple(v_518))) in
        {1504}let initiator_11: bool = (if v_519 then 9-proj-9-tuple(v_518) else caught-fail) in
        {1505}let psk_13: key = (if v_519 then 8-proj-9-tuple(v_518) else caught-fail) in
        {1506}let re_16: key = (if v_519 then 7-proj-9-tuple(v_518) else caught-fail) in
        {1507}let rm_14: key = (if v_519 then 6-proj-9-tuple(v_518) else caught-fail) in
        {1508}let rs_14: key = (if v_519 then 5-proj-9-tuple(v_518) else caught-fail) in
        {1509}let e_25: keypair = (if v_519 then 4-proj-9-tuple(v_518) else caught-fail) in
        {1510}let m_15: keypair = (if v_519 then 3-proj-9-tuple(v_518) else caught-fail) in
        {1511}let s_15: keypair = (if v_519 then 2-proj-9-tuple(v_518) else caught-fail) in
        {1512}let ss_77: symmetricstate = (if v_519 then 1-proj-9-tuple(v_518) else caught-fail) in
        {1513}let v_520: bitstring = (if v_519 then catch-fail(deconcat3(message_c_2)) else caught-fail) in
        {1514}let v_521: bool = (not-caught-fail(v_520) && success?(1-proj-3-tuple(v_520))) in
        {1515}let ciphertext_24: bitstring = (if v_521 then 3-proj-3-tuple(v_520) else caught-fail) in
        {1516}let ns_12: bitstring = (if v_521 then 2-proj-3-tuple(v_520) else caught-fail) in
        {1517}let ne_14: bitstring = (if v_521 then 1-proj-3-tuple(v_520) else caught-fail) in
        {1519}let v_522: bitstring = (if v_521 then catch-fail(symmetricstateunpack(ss_77)) else caught-fail) in
        {1520}let v_523: bool = (not-caught-fail(v_522) && success?(1-proj-3-tuple(v_522))) in
        {1521}let h_70: bitstring = (if v_523 then 3-proj-3-tuple(v_522) else caught-fail) in
        {1522}let ck_87: key = (if v_523 then 2-proj-3-tuple(v_522) else caught-fail) in
        {1523}let cs_70: cipherstate = (if v_523 then 1-proj-3-tuple(v_522) else caught-fail) in
        {1524}let v_524: bitstring = (if v_523 then catch-fail(cipherstateunpack(cs_70)) else caught-fail) in
        {1525}let v_525: bool = (not-caught-fail(v_524) && success?(1-proj-2-tuple(v_524))) in
        {1526}let n_32: nonce = (if v_525 then 2-proj-2-tuple(v_524) else caught-fail) in
        {1527}let k_35: key = (if v_525 then 1-proj-2-tuple(v_524) else caught-fail) in
        {1528}let d_7: aead = (if v_525 then catch-fail(decrypt(k_35,n_32,h_70,ciphertext_24)) else caught-fail) in
        {1529}let v_526: bool = not-caught-fail(d_7) in
        {1530}let v_527: bitstring = (if v_526 then catch-fail(aeadunpack(d_7)) else caught-fail) in
        {1531}let v_528: bool = (not-caught-fail(v_527) && success?(1-proj-3-tuple(v_527))) in
        {1532}let plaintext_23: bitstring = (if v_528 then 3-proj-3-tuple(v_527) else caught-fail) in
        {1533}let adi_7: bitstring = (if v_528 then 2-proj-3-tuple(v_527) else caught-fail) in
        {1534}let valid_19: bool = (if v_528 then 1-proj-3-tuple(v_527) else caught-fail) in
        {1536}let v_529: bitstring = (if v_528 then catch-fail(cipherstateunpack(cs_70)) else caught-fail) in
        {1537}let v_530: bool = (not-caught-fail(v_529) && success?(1-proj-2-tuple(v_529))) in
        {1538}let o_16: nonce = (if v_530 then 2-proj-2-tuple(v_529) else caught-fail) in
        {1539}let k_36: key = (if v_530 then 1-proj-2-tuple(v_529) else caught-fail) in
        {1535}let n_33: nonce = (if v_528 then increment_nonce(n_32) else caught-fail) in
        {1540}let csi_32: cipherstate = (if v_528 then catch-fail((if v_530 then cipherstatepack(k_36,n_33) else fail-any)) else caught-fail) in
        {1541}let v_531: bool = not-caught-fail(csi_32) in
        {1542}let v_532: bitstring = (if v_523 then catch-fail((if v_525 then (if v_526 then (if v_528 then (if v_531 then (csi_32,plaintext_23,valid_19) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1543}let v_533: bool = (not-caught-fail(v_532) && success?(1-proj-3-tuple(v_532))) in
        {1544}let valid_20: bool = (if v_533 then 3-proj-3-tuple(v_532) else caught-fail) in
        {1545}let plaintext_24: bitstring = (if v_533 then 2-proj-3-tuple(v_532) else caught-fail) in
        {1546}let csi_33: cipherstate = (if v_533 then 1-proj-3-tuple(v_532) else caught-fail) in
        {1547}let ss_78: symmetricstate = (if v_533 then symmetricstatepack(csi_33,ck_87,h_70) else caught-fail) in
        {1548}let v_534: bitstring = (if v_533 then catch-fail(symmetricstateunpack(ss_78)) else caught-fail) in
        {1549}let v_535: bool = (not-caught-fail(v_534) && success?(1-proj-3-tuple(v_534))) in
        {1550}let h_71: bitstring = (if v_535 then 3-proj-3-tuple(v_534) else caught-fail) in
        {1551}let ck_88: key = (if v_535 then 2-proj-3-tuple(v_534) else caught-fail) in
        {1552}let cs_71: cipherstate = (if v_535 then 1-proj-3-tuple(v_534) else caught-fail) in
        {1553}let ssi_19: symmetricstate = (if v_533 then catch-fail((if v_535 then symmetricstatepack(cs_71,ck_88,hash(h_71,ciphertext_24)) else fail-any)) else caught-fail) in
        {1554}let v_536: bool = not-caught-fail(ssi_19) in
        {1555}let v_537: bitstring = (if v_521 then catch-fail((if v_523 then (if v_533 then (if v_536 then (ssi_19,plaintext_24,valid_20) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1556}let v_538: bool = (not-caught-fail(v_537) && success?(1-proj-3-tuple(v_537))) in
        {1557}let valid2_6: bool = (if v_538 then 3-proj-3-tuple(v_537) else caught-fail) in
        {1558}let plaintext_25: bitstring = (if v_538 then 2-proj-3-tuple(v_537) else caught-fail) in
        {1559}let ss_79: symmetricstate = (if v_538 then 1-proj-3-tuple(v_537) else caught-fail) in
        {1518}let valid1_6: bool = (if v_521 then true else caught-fail) in
        {1560}let v_539: bool = (if v_538 then catch-fail((valid1_6 && valid2_6)) else caught-fail) in
        {1561}let hs_39: handshakestate = (if v_539 then handshakestatepack(ss_79,s_15,m_15,e_25,rs_14,rm_14,re_16,psk_13,initiator_11) else caught-fail) in
        {1562}let (hs_40: handshakestate,plaintext_c: bitstring,valid_21: bool) = (if v_519 then (if v_521 then (if v_538 then (if undo-catch-fail(v_539) then (hs_39,plaintext_25,true) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1563}event RecvMsg(me_2,them_2,stagepack_c(sid_3),plaintext_c);
        {1564}insert statestore(me_2,them_2,sid_3,statepack_d(hs_40,handshakestategetcs(hs_40),cs2_13))
    ) | (
        {1566}!
        {1623}get statestore(=me_2,=them_2,=sid_3,statepack_d(hs_41: handshakestate,cs1_14: cipherstate,cs2_14: cipherstate)) in
        {1567}let hs_42: handshakestate = handshakestatesetcs(hs_41,cs2_14) in
        {1569}let v_540: bitstring = catch-fail(handshakestateunpack(hs_42)) in
        {1570}let v_541: bool = (not-caught-fail(v_540) && success?(1-proj-9-tuple(v_540))) in
        {1571}let initiator_12: bool = (if v_541 then 9-proj-9-tuple(v_540) else caught-fail) in
        {1572}let psk_14: key = (if v_541 then 8-proj-9-tuple(v_540) else caught-fail) in
        {1573}let re_17: key = (if v_541 then 7-proj-9-tuple(v_540) else caught-fail) in
        {1574}let rm_15: key = (if v_541 then 6-proj-9-tuple(v_540) else caught-fail) in
        {1575}let rs_15: key = (if v_541 then 5-proj-9-tuple(v_540) else caught-fail) in
        {1576}let e_26: keypair = (if v_541 then 4-proj-9-tuple(v_540) else caught-fail) in
        {1577}let m_16: keypair = (if v_541 then 3-proj-9-tuple(v_540) else caught-fail) in
        {1578}let s_16: keypair = (if v_541 then 2-proj-9-tuple(v_540) else caught-fail) in
        {1579}let ss_80: symmetricstate = (if v_541 then 1-proj-9-tuple(v_540) else caught-fail) in
        {1580}let v_542: bitstring = (if v_541 then catch-fail((empty,empty,empty)) else caught-fail) in
        {1581}let v_543: bool = (not-caught-fail(v_542) && success?(1-proj-3-tuple(v_542))) in
        {1582}let ciphertext_25: bitstring = (if v_543 then 3-proj-3-tuple(v_542) else caught-fail) in
        {1583}let ns_13: bitstring = (if v_543 then 2-proj-3-tuple(v_542) else caught-fail) in
        {1584}let ne_15: bitstring = (if v_543 then 1-proj-3-tuple(v_542) else caught-fail) in
        {1585}let v_544: bitstring = (if v_543 then catch-fail(symmetricstateunpack(ss_80)) else caught-fail) in
        {1586}let v_545: bool = (not-caught-fail(v_544) && success?(1-proj-3-tuple(v_544))) in
        {1587}let h_72: bitstring = (if v_545 then 3-proj-3-tuple(v_544) else caught-fail) in
        {1588}let ck_89: key = (if v_545 then 2-proj-3-tuple(v_544) else caught-fail) in
        {1589}let cs_72: cipherstate = (if v_545 then 1-proj-3-tuple(v_544) else caught-fail) in
        {1590}let v_546: bitstring = (if v_545 then catch-fail(cipherstateunpack(cs_72)) else caught-fail) in
        {1591}let v_547: bool = (not-caught-fail(v_546) && success?(1-proj-2-tuple(v_546))) in
        {1592}let n_34: nonce = (if v_547 then 2-proj-2-tuple(v_546) else caught-fail) in
        {1593}let k_37: key = (if v_547 then 1-proj-2-tuple(v_546) else caught-fail) in
        {1596}let v_548: bitstring = (if v_547 then catch-fail(cipherstateunpack(cs_72)) else caught-fail) in
        {1597}let v_549: bool = (not-caught-fail(v_548) && success?(1-proj-2-tuple(v_548))) in
        {1598}let o_17: nonce = (if v_549 then 2-proj-2-tuple(v_548) else caught-fail) in
        {1599}let k_38: key = (if v_549 then 1-proj-2-tuple(v_548) else caught-fail) in
        {1595}let n_35: nonce = (if v_547 then increment_nonce(n_34) else caught-fail) in
        {1600}let csi_34: cipherstate = (if v_547 then catch-fail((if v_549 then cipherstatepack(k_38,n_35) else fail-any)) else caught-fail) in
        {1601}let v_550: bool = not-caught-fail(csi_34) in
        {1568}let payload_5: bitstring = msg_d(me_2,them_2,sid_3) in
        {1594}let e_27: bitstring = (if v_547 then encrypt(k_37,n_34,h_72,payload_5) else caught-fail) in
        {1602}let v_551: bitstring = (if v_545 then catch-fail((if v_547 then (if v_550 then (csi_34,e_27) else fail-any) else fail-any)) else caught-fail) in
        {1603}let v_552: bool = (not-caught-fail(v_551) && success?(1-proj-2-tuple(v_551))) in
        {1604}let ciphertext_26: bitstring = (if v_552 then 2-proj-2-tuple(v_551) else caught-fail) in
        {1605}let csi_35: cipherstate = (if v_552 then 1-proj-2-tuple(v_551) else caught-fail) in
        {1606}let ss_81: symmetricstate = (if v_552 then symmetricstatepack(csi_35,ck_89,h_72) else caught-fail) in
        {1607}let v_553: bitstring = (if v_552 then catch-fail(symmetricstateunpack(ss_81)) else caught-fail) in
        {1608}let v_554: bool = (not-caught-fail(v_553) && success?(1-proj-3-tuple(v_553))) in
        {1609}let h_73: bitstring = (if v_554 then 3-proj-3-tuple(v_553) else caught-fail) in
        {1610}let ck_90: key = (if v_554 then 2-proj-3-tuple(v_553) else caught-fail) in
        {1611}let cs_73: cipherstate = (if v_554 then 1-proj-3-tuple(v_553) else caught-fail) in
        {1612}let ssi_20: symmetricstate = (if v_552 then catch-fail((if v_554 then symmetricstatepack(cs_73,ck_90,hash(h_73,ciphertext_26)) else fail-any)) else caught-fail) in
        {1613}let v_555: bool = not-caught-fail(ssi_20) in
        {1614}let v_556: bitstring = (if v_543 then catch-fail((if v_545 then (if v_552 then (if v_555 then (ssi_20,ciphertext_26) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1615}let v_557: bool = (not-caught-fail(v_556) && success?(1-proj-2-tuple(v_556))) in
        {1616}let ciphertext_27: bitstring = (if v_557 then 2-proj-2-tuple(v_556) else caught-fail) in
        {1617}let ss_82: symmetricstate = (if v_557 then 1-proj-2-tuple(v_556) else caught-fail) in
        {1619}let message_buffer_5: bitstring = (if v_557 then concat3(ne_15,ns_13,ciphertext_27) else caught-fail) in
        {1618}let hs_43: handshakestate = (if v_557 then handshakestatepack(ss_82,s_16,m_16,e_26,rs_15,rm_15,re_17,psk_14,initiator_12) else caught-fail) in
        {1620}let (hs_44: handshakestate,message_d_2: bitstring) = (if v_541 then (if v_543 then (if v_557 then (hs_43,message_buffer_5) else fail-any) else fail-any) else fail-any) in
        {1621}event SendMsg(me_2,them_2,stagepack_d(sid_3),msg_d(me_2,them_2,sid_3));
        {1622}out(pub, message_d_2)
    ) | (
        {1624}event LeakS(phase0,me_2);
        {1625}event LeakM(phase0,me_2);
        {1626}out(pub, (key_s(me_2),key_m(me_2)))
    ) | (
        {1627}phase 1;
        {1628}event LeakS(phase1,me_2);
        {1629}event LeakM(phase1,me_2);
        {1630}out(pub, (key_s(me_2),key_m(me_2)))
    )
) | (
    {1631}let me_4: principal = bob in
    {1634}let basis_13: key = key_s(me_4) in
    {1635}let public_key_13: key = catch-fail(dhexp(basis_13,validkey(g))) in
    {1636}let v_558: bool = not-caught-fail(public_key_13) in
    {1637}let s_17: keypair = (if v_558 then keypairpack(validkey(public_key_13),basis_13) else fail-any) in
    {1638}let basis_14: key = key_m(me_4) in
    {1639}let public_key_14: key = catch-fail(dhexp(basis_14,validkey(g))) in
    {1640}let v_559: bool = not-caught-fail(public_key_14) in
    {1641}let m_17: keypair = (if v_559 then keypairpack(validkey(public_key_14),basis_14) else fail-any) in
    {1642}out(pub, (getpublickey(s_17),getpublickey(m_17)));
    {1633}let sid_4: sessionid = sid in
    {1632}let them_3: principal = charlie in
    (
        {1652}let k_39: key = empty in
        {1653}let cs_74: cipherstate = cipherstatepack(k_39,minnonce) in
        {1649}let protocol_name_3: bitstring = somename in
        {1650}let h_74: bitstring = hash(protocol_name_3,empty) in
        {1651}let ck_91: key = h_74 in
        {1654}let ss_83: symmetricstate = symmetricstatepack(cs_74,ck_91,h_74) in
        {1655}let v_560: bitstring = catch-fail(symmetricstateunpack(ss_83)) in
        {1656}let v_561: bool = (not-caught-fail(v_560) && success?(1-proj-3-tuple(v_560))) in
        {1657}let h_75: bitstring = (if v_561 then 3-proj-3-tuple(v_560) else caught-fail) in
        {1658}let ck_92: key = (if v_561 then 2-proj-3-tuple(v_560) else caught-fail) in
        {1659}let cs_75: cipherstate = (if v_561 then 1-proj-3-tuple(v_560) else caught-fail) in
        {1647}let prologue_3: bitstring = empty in
        {1660}let ss_84: symmetricstate = catch-fail((if v_561 then symmetricstatepack(cs_75,ck_92,hash(h_75,prologue_3)) else fail-any)) in
        {1661}let v_562: bool = not-caught-fail(ss_84) in
        {1662}let data_2: bitstring = (if v_562 then catch-fail(getpublickey(s_17)) else caught-fail) in
        {1663}let v_563: bool = not-caught-fail(data_2) in
        {1664}let v_564: bitstring = (if v_563 then catch-fail(symmetricstateunpack(ss_84)) else caught-fail) in
        {1665}let v_565: bool = (not-caught-fail(v_564) && success?(1-proj-3-tuple(v_564))) in
        {1666}let h_76: bitstring = (if v_565 then 3-proj-3-tuple(v_564) else caught-fail) in
        {1667}let ck_93: key = (if v_565 then 2-proj-3-tuple(v_564) else caught-fail) in
        {1668}let cs_76: cipherstate = (if v_565 then 1-proj-3-tuple(v_564) else caught-fail) in
        {1669}let ss_85: symmetricstate = (if v_562 then catch-fail((if v_563 then (if v_565 then symmetricstatepack(cs_76,ck_93,hash(h_76,data_2)) else fail-any) else fail-any)) else caught-fail) in
        {1670}let v_566: bool = not-caught-fail(ss_85) in
        {1671}let data_3: bitstring = (if v_566 then catch-fail(getpublickey(m_17)) else caught-fail) in
        {1672}let v_567: bool = not-caught-fail(data_3) in
        {1673}let v_568: bitstring = (if v_567 then catch-fail(symmetricstateunpack(ss_85)) else caught-fail) in
        {1674}let v_569: bool = (not-caught-fail(v_568) && success?(1-proj-3-tuple(v_568))) in
        {1675}let h_77: bitstring = (if v_569 then 3-proj-3-tuple(v_568) else caught-fail) in
        {1676}let ck_94: key = (if v_569 then 2-proj-3-tuple(v_568) else caught-fail) in
        {1677}let cs_77: cipherstate = (if v_569 then 1-proj-3-tuple(v_568) else caught-fail) in
        {1678}let ss_86: symmetricstate = (if v_566 then catch-fail((if v_567 then (if v_569 then symmetricstatepack(cs_77,ck_94,hash(h_77,data_3)) else fail-any) else fail-any)) else caught-fail) in
        {1679}let v_570: bool = not-caught-fail(ss_86) in
        {1648}let psk_15: key = empty in
        {1646}let re_18: key = empty in
        {1645}let rm_16: key = empty in
        {1644}let rs_16: key = empty in
        {1643}let e_28: keypair = keypairpack(empty,empty) in
        {1680}let hs_45: handshakestate = (if v_562 then (if v_566 then (if v_570 then handshakestatepack(ss_86,s_17,m_17,e_28,rs_16,rm_16,re_18,psk_15,false) else fail-any) else fail-any) else fail-any) in
        {1681}insert statestore(me_4,them_3,sid_4,statepack_a(hs_45))
    ) | (
        {1924}get statestore(=me_4,=them_3,=sid_4,statepack_a(hs_46: handshakestate)) in
        {1682}in(pub, message_a_3: bitstring);
        {1683}let v_571: bitstring = catch-fail(handshakestateunpack(hs_46)) in
        {1684}let v_572: bool = (not-caught-fail(v_571) && success?(1-proj-9-tuple(v_571))) in
        {1685}let initiator_13: bool = (if v_572 then 9-proj-9-tuple(v_571) else caught-fail) in
        {1686}let psk_16: key = (if v_572 then 8-proj-9-tuple(v_571) else caught-fail) in
        {1687}let re_19: key = (if v_572 then 7-proj-9-tuple(v_571) else caught-fail) in
        {1688}let rm_17: key = (if v_572 then 6-proj-9-tuple(v_571) else caught-fail) in
        {1689}let rs_17: key = (if v_572 then 5-proj-9-tuple(v_571) else caught-fail) in
        {1690}let e_29: keypair = (if v_572 then 4-proj-9-tuple(v_571) else caught-fail) in
        {1691}let m_18: keypair = (if v_572 then 3-proj-9-tuple(v_571) else caught-fail) in
        {1692}let s_18: keypair = (if v_572 then 2-proj-9-tuple(v_571) else caught-fail) in
        {1693}let ss_87: symmetricstate = (if v_572 then 1-proj-9-tuple(v_571) else caught-fail) in
        {1694}let v_573: bitstring = (if v_572 then catch-fail((empty,empty,empty,empty)) else caught-fail) in
        {1695}let v_574: bool = (not-caught-fail(v_573) && success?(1-proj-4-tuple(v_573))) in
        {1696}let ciphertext_28: bitstring = (if v_574 then 4-proj-4-tuple(v_573) else caught-fail) in
        {1697}let nm_5: bitstring = (if v_574 then 3-proj-4-tuple(v_573) else caught-fail) in
        {1698}let ns_14: bitstring = (if v_574 then 2-proj-4-tuple(v_573) else caught-fail) in
        {1699}let ne_16: bitstring = (if v_574 then 1-proj-4-tuple(v_573) else caught-fail) in
        {1703}let v_575: bitstring = (if v_574 then catch-fail(symmetricstateunpack(ss_87)) else caught-fail) in
        {1704}let v_576: bool = (not-caught-fail(v_575) && success?(1-proj-3-tuple(v_575))) in
        {1705}let h_78: bitstring = (if v_576 then 3-proj-3-tuple(v_575) else caught-fail) in
        {1706}let ck_95: key = (if v_576 then 2-proj-3-tuple(v_575) else caught-fail) in
        {1707}let cs_78: cipherstate = (if v_576 then 1-proj-3-tuple(v_575) else caught-fail) in
        {1702}let re_20: key = (if v_574 then ne_16 else caught-fail) in
        {1708}let ss_88: symmetricstate = (if v_574 then catch-fail((if v_576 then symmetricstatepack(cs_78,ck_95,hash(h_78,re_20)) else fail-any)) else caught-fail) in
        {1709}let v_577: bool = not-caught-fail(ss_88) in
        {1710}let v_578: bitstring = (if v_577 then catch-fail(keypairunpack(s_18)) else caught-fail) in
        {1711}let v_579: bool = (not-caught-fail(v_578) && success?(1-proj-2-tuple(v_578))) in
        {1712}let my_private_key_17: key = (if v_579 then 2-proj-2-tuple(v_578) else caught-fail) in
        {1713}let my_public_key_17: key = (if v_579 then 1-proj-2-tuple(v_578) else caught-fail) in
        {1714}let input_key_material_20: key = (if v_577 then catch-fail((if v_579 then dhexp(my_private_key_17,re_20) else fail-any)) else caught-fail) in
        {1715}let v_580: bool = not-caught-fail(input_key_material_20) in
        {1716}let v_581: bitstring = (if v_580 then catch-fail(symmetricstateunpack(ss_88)) else caught-fail) in
        {1717}let v_582: bool = (not-caught-fail(v_581) && success?(1-proj-3-tuple(v_581))) in
        {1718}let h_79: bitstring = (if v_582 then 3-proj-3-tuple(v_581) else caught-fail) in
        {1719}let ck_96: key = (if v_582 then 2-proj-3-tuple(v_581) else caught-fail) in
        {1720}let cs_79: cipherstate = (if v_582 then 1-proj-3-tuple(v_581) else caught-fail) in
        {1723}let output3_20: key = (if v_582 then hmac_hash3(ck_96,input_key_material_20) else caught-fail) in
        {1722}let output2_20: key = (if v_582 then hmac_hash2(ck_96,input_key_material_20) else caught-fail) in
        {1721}let output1_20: key = (if v_582 then hmac_hash1(ck_96,input_key_material_20) else caught-fail) in
        {1724}let v_583: bitstring = (if v_582 then catch-fail((output1_20,output2_20,output3_20)) else caught-fail) in
        {1725}let v_584: bool = (not-caught-fail(v_583) && success?(1-proj-3-tuple(v_583))) in
        {1726}let output_17: key = (if v_584 then 3-proj-3-tuple(v_583) else caught-fail) in
        {1727}let temp_k_17: key = (if v_584 then 2-proj-3-tuple(v_583) else caught-fail) in
        {1728}let ck_97: key = (if v_584 then 1-proj-3-tuple(v_583) else caught-fail) in
        {1729}let ss_89: symmetricstate = (if v_577 then catch-fail((if v_580 then (if v_582 then (if v_584 then symmetricstatepack(cipherstatepack(temp_k_17,minnonce),ck_97,h_79) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1730}let v_585: bool = not-caught-fail(ss_89) in
        {1731}let v_586: bitstring = (if v_585 then catch-fail(keypairunpack(m_18)) else caught-fail) in
        {1732}let v_587: bool = (not-caught-fail(v_586) && success?(1-proj-2-tuple(v_586))) in
        {1733}let my_private_key_18: key = (if v_587 then 2-proj-2-tuple(v_586) else caught-fail) in
        {1734}let my_public_key_18: key = (if v_587 then 1-proj-2-tuple(v_586) else caught-fail) in
        {1735}let input_key_material_21: key = (if v_585 then catch-fail((if v_587 then dhexp(my_private_key_18,re_20) else fail-any)) else caught-fail) in
        {1736}let v_588: bool = not-caught-fail(input_key_material_21) in
        {1737}let v_589: bitstring = (if v_588 then catch-fail(symmetricstateunpack(ss_89)) else caught-fail) in
        {1738}let v_590: bool = (not-caught-fail(v_589) && success?(1-proj-3-tuple(v_589))) in
        {1739}let h_80: bitstring = (if v_590 then 3-proj-3-tuple(v_589) else caught-fail) in
        {1740}let ck_98: key = (if v_590 then 2-proj-3-tuple(v_589) else caught-fail) in
        {1741}let cs_80: cipherstate = (if v_590 then 1-proj-3-tuple(v_589) else caught-fail) in
        {1744}let output3_21: key = (if v_590 then hmac_hash3(ck_98,input_key_material_21) else caught-fail) in
        {1743}let output2_21: key = (if v_590 then hmac_hash2(ck_98,input_key_material_21) else caught-fail) in
        {1742}let output1_21: key = (if v_590 then hmac_hash1(ck_98,input_key_material_21) else caught-fail) in
        {1745}let v_591: bitstring = (if v_590 then catch-fail((output1_21,output2_21,output3_21)) else caught-fail) in
        {1746}let v_592: bool = (not-caught-fail(v_591) && success?(1-proj-3-tuple(v_591))) in
        {1747}let output_18: key = (if v_592 then 3-proj-3-tuple(v_591) else caught-fail) in
        {1748}let temp_k_18: key = (if v_592 then 2-proj-3-tuple(v_591) else caught-fail) in
        {1749}let ck_99: key = (if v_592 then 1-proj-3-tuple(v_591) else caught-fail) in
        {1750}let ss_90: symmetricstate = (if v_585 then catch-fail((if v_588 then (if v_590 then (if v_592 then symmetricstatepack(cipherstatepack(temp_k_18,minnonce),ck_99,h_80) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1751}let v_593: bool = not-caught-fail(ss_90) in
        {1752}let v_594: bitstring = (if v_593 then catch-fail(symmetricstateunpack(ss_90)) else caught-fail) in
        {1753}let v_595: bool = (not-caught-fail(v_594) && success?(1-proj-3-tuple(v_594))) in
        {1754}let h_81: bitstring = (if v_595 then 3-proj-3-tuple(v_594) else caught-fail) in
        {1755}let ck_100: key = (if v_595 then 2-proj-3-tuple(v_594) else caught-fail) in
        {1756}let cs_81: cipherstate = (if v_595 then 1-proj-3-tuple(v_594) else caught-fail) in
        {1757}let v_596: bitstring = (if v_595 then catch-fail(cipherstateunpack(cs_81)) else caught-fail) in
        {1758}let v_597: bool = (not-caught-fail(v_596) && success?(1-proj-2-tuple(v_596))) in
        {1759}let n_36: nonce = (if v_597 then 2-proj-2-tuple(v_596) else caught-fail) in
        {1760}let k_40: key = (if v_597 then 1-proj-2-tuple(v_596) else caught-fail) in
        {1761}let d_8: aead = (if v_597 then catch-fail(decrypt(k_40,n_36,h_81,ns_14)) else caught-fail) in
        {1762}let v_598: bool = not-caught-fail(d_8) in
        {1763}let v_599: bitstring = (if v_598 then catch-fail(aeadunpack(d_8)) else caught-fail) in
        {1764}let v_600: bool = (not-caught-fail(v_599) && success?(1-proj-3-tuple(v_599))) in
        {1765}let plaintext_26: bitstring = (if v_600 then 3-proj-3-tuple(v_599) else caught-fail) in
        {1766}let adi_8: bitstring = (if v_600 then 2-proj-3-tuple(v_599) else caught-fail) in
        {1767}let valid_22: bool = (if v_600 then 1-proj-3-tuple(v_599) else caught-fail) in
        {1769}let v_601: bitstring = (if v_600 then catch-fail(cipherstateunpack(cs_81)) else caught-fail) in
        {1770}let v_602: bool = (not-caught-fail(v_601) && success?(1-proj-2-tuple(v_601))) in
        {1771}let o_18: nonce = (if v_602 then 2-proj-2-tuple(v_601) else caught-fail) in
        {1772}let k_41: key = (if v_602 then 1-proj-2-tuple(v_601) else caught-fail) in
        {1768}let n_37: nonce = (if v_600 then increment_nonce(n_36) else caught-fail) in
        {1773}let csi_36: cipherstate = (if v_600 then catch-fail((if v_602 then cipherstatepack(k_41,n_37) else fail-any)) else caught-fail) in
        {1774}let v_603: bool = not-caught-fail(csi_36) in
        {1775}let v_604: bitstring = (if v_595 then catch-fail((if v_597 then (if v_598 then (if v_600 then (if v_603 then (csi_36,plaintext_26,valid_22) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1776}let v_605: bool = (not-caught-fail(v_604) && success?(1-proj-3-tuple(v_604))) in
        {1777}let valid_23: bool = (if v_605 then 3-proj-3-tuple(v_604) else caught-fail) in
        {1778}let plaintext_27: bitstring = (if v_605 then 2-proj-3-tuple(v_604) else caught-fail) in
        {1779}let csi_37: cipherstate = (if v_605 then 1-proj-3-tuple(v_604) else caught-fail) in
        {1780}let ss_91: symmetricstate = (if v_605 then symmetricstatepack(csi_37,ck_100,h_81) else caught-fail) in
        {1781}let v_606: bitstring = (if v_605 then catch-fail(symmetricstateunpack(ss_91)) else caught-fail) in
        {1782}let v_607: bool = (not-caught-fail(v_606) && success?(1-proj-3-tuple(v_606))) in
        {1783}let h_82: bitstring = (if v_607 then 3-proj-3-tuple(v_606) else caught-fail) in
        {1784}let ck_101: key = (if v_607 then 2-proj-3-tuple(v_606) else caught-fail) in
        {1785}let cs_82: cipherstate = (if v_607 then 1-proj-3-tuple(v_606) else caught-fail) in
        {1786}let ssi_21: symmetricstate = (if v_605 then catch-fail((if v_607 then symmetricstatepack(cs_82,ck_101,hash(h_82,ns_14)) else fail-any)) else caught-fail) in
        {1787}let v_608: bool = not-caught-fail(ssi_21) in
        {1788}let v_609: bitstring = (if v_593 then catch-fail((if v_595 then (if v_605 then (if v_608 then (ssi_21,plaintext_27,valid_23) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1789}let v_610: bool = (not-caught-fail(v_609) && success?(1-proj-3-tuple(v_609))) in
        {1790}let valid1_8: bool = (if v_610 then 3-proj-3-tuple(v_609) else caught-fail) in
        {1791}let ne_17: bitstring = (if v_610 then 2-proj-3-tuple(v_609) else caught-fail) in
        {1792}let ss_92: symmetricstate = (if v_610 then 1-proj-3-tuple(v_609) else caught-fail) in
        {1794}let v_611: bitstring = (if v_610 then catch-fail(symmetricstateunpack(ss_92)) else caught-fail) in
        {1795}let v_612: bool = (not-caught-fail(v_611) && success?(1-proj-3-tuple(v_611))) in
        {1796}let h_83: bitstring = (if v_612 then 3-proj-3-tuple(v_611) else caught-fail) in
        {1797}let ck_102: key = (if v_612 then 2-proj-3-tuple(v_611) else caught-fail) in
        {1798}let cs_83: cipherstate = (if v_612 then 1-proj-3-tuple(v_611) else caught-fail) in
        {1799}let v_613: bitstring = (if v_612 then catch-fail(cipherstateunpack(cs_83)) else caught-fail) in
        {1800}let v_614: bool = (not-caught-fail(v_613) && success?(1-proj-2-tuple(v_613))) in
        {1801}let n_38: nonce = (if v_614 then 2-proj-2-tuple(v_613) else caught-fail) in
        {1802}let k_42: key = (if v_614 then 1-proj-2-tuple(v_613) else caught-fail) in
        {1803}let d_9: aead = (if v_614 then catch-fail(decrypt(k_42,n_38,h_83,nm_5)) else caught-fail) in
        {1804}let v_615: bool = not-caught-fail(d_9) in
        {1805}let v_616: bitstring = (if v_615 then catch-fail(aeadunpack(d_9)) else caught-fail) in
        {1806}let v_617: bool = (not-caught-fail(v_616) && success?(1-proj-3-tuple(v_616))) in
        {1807}let plaintext_28: bitstring = (if v_617 then 3-proj-3-tuple(v_616) else caught-fail) in
        {1808}let adi_9: bitstring = (if v_617 then 2-proj-3-tuple(v_616) else caught-fail) in
        {1809}let valid_24: bool = (if v_617 then 1-proj-3-tuple(v_616) else caught-fail) in
        {1811}let v_618: bitstring = (if v_617 then catch-fail(cipherstateunpack(cs_83)) else caught-fail) in
        {1812}let v_619: bool = (not-caught-fail(v_618) && success?(1-proj-2-tuple(v_618))) in
        {1813}let o_19: nonce = (if v_619 then 2-proj-2-tuple(v_618) else caught-fail) in
        {1814}let k_43: key = (if v_619 then 1-proj-2-tuple(v_618) else caught-fail) in
        {1810}let n_39: nonce = (if v_617 then increment_nonce(n_38) else caught-fail) in
        {1815}let csi_38: cipherstate = (if v_617 then catch-fail((if v_619 then cipherstatepack(k_43,n_39) else fail-any)) else caught-fail) in
        {1816}let v_620: bool = not-caught-fail(csi_38) in
        {1817}let v_621: bitstring = (if v_612 then catch-fail((if v_614 then (if v_615 then (if v_617 then (if v_620 then (csi_38,plaintext_28,valid_24) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1818}let v_622: bool = (not-caught-fail(v_621) && success?(1-proj-3-tuple(v_621))) in
        {1819}let valid_25: bool = (if v_622 then 3-proj-3-tuple(v_621) else caught-fail) in
        {1820}let plaintext_29: bitstring = (if v_622 then 2-proj-3-tuple(v_621) else caught-fail) in
        {1821}let csi_39: cipherstate = (if v_622 then 1-proj-3-tuple(v_621) else caught-fail) in
        {1822}let ss_93: symmetricstate = (if v_622 then symmetricstatepack(csi_39,ck_102,h_83) else caught-fail) in
        {1823}let v_623: bitstring = (if v_622 then catch-fail(symmetricstateunpack(ss_93)) else caught-fail) in
        {1824}let v_624: bool = (not-caught-fail(v_623) && success?(1-proj-3-tuple(v_623))) in
        {1825}let h_84: bitstring = (if v_624 then 3-proj-3-tuple(v_623) else caught-fail) in
        {1826}let ck_103: key = (if v_624 then 2-proj-3-tuple(v_623) else caught-fail) in
        {1827}let cs_84: cipherstate = (if v_624 then 1-proj-3-tuple(v_623) else caught-fail) in
        {1828}let ssi_22: symmetricstate = (if v_622 then catch-fail((if v_624 then symmetricstatepack(cs_84,ck_103,hash(h_84,nm_5)) else fail-any)) else caught-fail) in
        {1829}let v_625: bool = not-caught-fail(ssi_22) in
        {1830}let v_626: bitstring = (if v_610 then catch-fail((if v_612 then (if v_622 then (if v_625 then (ssi_22,plaintext_29,valid_25) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1831}let v_627: bool = (not-caught-fail(v_626) && success?(1-proj-3-tuple(v_626))) in
        {1832}let valid2_8: bool = (if v_627 then 3-proj-3-tuple(v_626) else caught-fail) in
        {1833}let me_5: bitstring = (if v_627 then 2-proj-3-tuple(v_626) else caught-fail) in
        {1834}let ss_94: symmetricstate = (if v_627 then 1-proj-3-tuple(v_626) else caught-fail) in
        {1836}let v_628: bitstring = (if v_627 then catch-fail(keypairunpack(s_18)) else caught-fail) in
        {1837}let v_629: bool = (not-caught-fail(v_628) && success?(1-proj-2-tuple(v_628))) in
        {1838}let my_private_key_19: key = (if v_629 then 2-proj-2-tuple(v_628) else caught-fail) in
        {1839}let my_public_key_19: key = (if v_629 then 1-proj-2-tuple(v_628) else caught-fail) in
        {1835}let rm_18: key = (if v_627 then me_5 else caught-fail) in
        {1840}let input_key_material_22: key = (if v_627 then catch-fail((if v_629 then dhexp(my_private_key_19,rm_18) else fail-any)) else caught-fail) in
        {1841}let v_630: bool = not-caught-fail(input_key_material_22) in
        {1842}let v_631: bitstring = (if v_630 then catch-fail(symmetricstateunpack(ss_94)) else caught-fail) in
        {1843}let v_632: bool = (not-caught-fail(v_631) && success?(1-proj-3-tuple(v_631))) in
        {1844}let h_85: bitstring = (if v_632 then 3-proj-3-tuple(v_631) else caught-fail) in
        {1845}let ck_104: key = (if v_632 then 2-proj-3-tuple(v_631) else caught-fail) in
        {1846}let cs_85: cipherstate = (if v_632 then 1-proj-3-tuple(v_631) else caught-fail) in
        {1849}let output3_22: key = (if v_632 then hmac_hash3(ck_104,input_key_material_22) else caught-fail) in
        {1848}let output2_22: key = (if v_632 then hmac_hash2(ck_104,input_key_material_22) else caught-fail) in
        {1847}let output1_22: key = (if v_632 then hmac_hash1(ck_104,input_key_material_22) else caught-fail) in
        {1850}let v_633: bitstring = (if v_632 then catch-fail((output1_22,output2_22,output3_22)) else caught-fail) in
        {1851}let v_634: bool = (not-caught-fail(v_633) && success?(1-proj-3-tuple(v_633))) in
        {1852}let output_19: key = (if v_634 then 3-proj-3-tuple(v_633) else caught-fail) in
        {1853}let temp_k_19: key = (if v_634 then 2-proj-3-tuple(v_633) else caught-fail) in
        {1854}let ck_105: key = (if v_634 then 1-proj-3-tuple(v_633) else caught-fail) in
        {1855}let ss_95: symmetricstate = (if v_627 then catch-fail((if v_630 then (if v_632 then (if v_634 then symmetricstatepack(cipherstatepack(temp_k_19,minnonce),ck_105,h_85) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1856}let v_635: bool = not-caught-fail(ss_95) in
        {1857}let v_636: bitstring = (if v_635 then catch-fail(keypairunpack(m_18)) else caught-fail) in
        {1858}let v_637: bool = (not-caught-fail(v_636) && success?(1-proj-2-tuple(v_636))) in
        {1859}let my_private_key_20: key = (if v_637 then 2-proj-2-tuple(v_636) else caught-fail) in
        {1860}let my_public_key_20: key = (if v_637 then 1-proj-2-tuple(v_636) else caught-fail) in
        {1793}let rs_18: key = (if v_610 then ne_17 else caught-fail) in
        {1861}let input_key_material_23: key = (if v_635 then catch-fail((if v_637 then dhexp(my_private_key_20,rs_18) else fail-any)) else caught-fail) in
        {1862}let v_638: bool = not-caught-fail(input_key_material_23) in
        {1863}let v_639: bitstring = (if v_638 then catch-fail(symmetricstateunpack(ss_95)) else caught-fail) in
        {1864}let v_640: bool = (not-caught-fail(v_639) && success?(1-proj-3-tuple(v_639))) in
        {1865}let h_86: bitstring = (if v_640 then 3-proj-3-tuple(v_639) else caught-fail) in
        {1866}let ck_106: key = (if v_640 then 2-proj-3-tuple(v_639) else caught-fail) in
        {1867}let cs_86: cipherstate = (if v_640 then 1-proj-3-tuple(v_639) else caught-fail) in
        {1870}let output3_23: key = (if v_640 then hmac_hash3(ck_106,input_key_material_23) else caught-fail) in
        {1869}let output2_23: key = (if v_640 then hmac_hash2(ck_106,input_key_material_23) else caught-fail) in
        {1868}let output1_23: key = (if v_640 then hmac_hash1(ck_106,input_key_material_23) else caught-fail) in
        {1871}let v_641: bitstring = (if v_640 then catch-fail((output1_23,output2_23,output3_23)) else caught-fail) in
        {1872}let v_642: bool = (not-caught-fail(v_641) && success?(1-proj-3-tuple(v_641))) in
        {1873}let output_20: key = (if v_642 then 3-proj-3-tuple(v_641) else caught-fail) in
        {1874}let temp_k_20: key = (if v_642 then 2-proj-3-tuple(v_641) else caught-fail) in
        {1875}let ck_107: key = (if v_642 then 1-proj-3-tuple(v_641) else caught-fail) in
        {1876}let ss_96: symmetricstate = (if v_635 then catch-fail((if v_638 then (if v_640 then (if v_642 then symmetricstatepack(cipherstatepack(temp_k_20,minnonce),ck_107,h_86) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1877}let v_643: bool = not-caught-fail(ss_96) in
        {1878}let v_644: bitstring = (if v_643 then catch-fail(symmetricstateunpack(ss_96)) else caught-fail) in
        {1879}let v_645: bool = (not-caught-fail(v_644) && success?(1-proj-3-tuple(v_644))) in
        {1880}let h_87: bitstring = (if v_645 then 3-proj-3-tuple(v_644) else caught-fail) in
        {1881}let ck_108: key = (if v_645 then 2-proj-3-tuple(v_644) else caught-fail) in
        {1882}let cs_87: cipherstate = (if v_645 then 1-proj-3-tuple(v_644) else caught-fail) in
        {1883}let v_646: bitstring = (if v_645 then catch-fail(cipherstateunpack(cs_87)) else caught-fail) in
        {1884}let v_647: bool = (not-caught-fail(v_646) && success?(1-proj-2-tuple(v_646))) in
        {1885}let n_40: nonce = (if v_647 then 2-proj-2-tuple(v_646) else caught-fail) in
        {1886}let k_44: key = (if v_647 then 1-proj-2-tuple(v_646) else caught-fail) in
        {1887}let d_10: aead = (if v_647 then catch-fail(decrypt(k_44,n_40,h_87,ciphertext_28)) else caught-fail) in
        {1888}let v_648: bool = not-caught-fail(d_10) in
        {1889}let v_649: bitstring = (if v_648 then catch-fail(aeadunpack(d_10)) else caught-fail) in
        {1890}let v_650: bool = (not-caught-fail(v_649) && success?(1-proj-3-tuple(v_649))) in
        {1891}let plaintext_30: bitstring = (if v_650 then 3-proj-3-tuple(v_649) else caught-fail) in
        {1892}let adi_10: bitstring = (if v_650 then 2-proj-3-tuple(v_649) else caught-fail) in
        {1893}let valid_26: bool = (if v_650 then 1-proj-3-tuple(v_649) else caught-fail) in
        {1895}let v_651: bitstring = (if v_650 then catch-fail(cipherstateunpack(cs_87)) else caught-fail) in
        {1896}let v_652: bool = (not-caught-fail(v_651) && success?(1-proj-2-tuple(v_651))) in
        {1897}let o_20: nonce = (if v_652 then 2-proj-2-tuple(v_651) else caught-fail) in
        {1898}let k_45: key = (if v_652 then 1-proj-2-tuple(v_651) else caught-fail) in
        {1894}let n_41: nonce = (if v_650 then increment_nonce(n_40) else caught-fail) in
        {1899}let csi_40: cipherstate = (if v_650 then catch-fail((if v_652 then cipherstatepack(k_45,n_41) else fail-any)) else caught-fail) in
        {1900}let v_653: bool = not-caught-fail(csi_40) in
        {1901}let v_654: bitstring = (if v_645 then catch-fail((if v_647 then (if v_648 then (if v_650 then (if v_653 then (csi_40,plaintext_30,valid_26) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1902}let v_655: bool = (not-caught-fail(v_654) && success?(1-proj-3-tuple(v_654))) in
        {1903}let valid_27: bool = (if v_655 then 3-proj-3-tuple(v_654) else caught-fail) in
        {1904}let plaintext_31: bitstring = (if v_655 then 2-proj-3-tuple(v_654) else caught-fail) in
        {1905}let csi_41: cipherstate = (if v_655 then 1-proj-3-tuple(v_654) else caught-fail) in
        {1906}let ss_97: symmetricstate = (if v_655 then symmetricstatepack(csi_41,ck_108,h_87) else caught-fail) in
        {1907}let v_656: bitstring = (if v_655 then catch-fail(symmetricstateunpack(ss_97)) else caught-fail) in
        {1908}let v_657: bool = (not-caught-fail(v_656) && success?(1-proj-3-tuple(v_656))) in
        {1909}let h_88: bitstring = (if v_657 then 3-proj-3-tuple(v_656) else caught-fail) in
        {1910}let ck_109: key = (if v_657 then 2-proj-3-tuple(v_656) else caught-fail) in
        {1911}let cs_88: cipherstate = (if v_657 then 1-proj-3-tuple(v_656) else caught-fail) in
        {1912}let ssi_23: symmetricstate = (if v_655 then catch-fail((if v_657 then symmetricstatepack(cs_88,ck_109,hash(h_88,ciphertext_28)) else fail-any)) else caught-fail) in
        {1913}let v_658: bool = not-caught-fail(ssi_23) in
        {1914}let v_659: bitstring = (if v_643 then catch-fail((if v_645 then (if v_655 then (if v_658 then (ssi_23,plaintext_31,valid_27) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1915}let v_660: bool = (not-caught-fail(v_659) && success?(1-proj-3-tuple(v_659))) in
        {1916}let valid3_1: bool = (if v_660 then 3-proj-3-tuple(v_659) else caught-fail) in
        {1917}let plaintext_32: bitstring = (if v_660 then 2-proj-3-tuple(v_659) else caught-fail) in
        {1918}let ss_98: symmetricstate = (if v_660 then 1-proj-3-tuple(v_659) else caught-fail) in
        {1919}let v_661: bool = (if v_660 then catch-fail((valid1_8 && (valid2_8 && valid3_1))) else caught-fail) in
        {1920}let hs_47: handshakestate = (if v_661 then handshakestatepack(ss_98,s_18,m_18,e_29,rs_18,rm_18,re_20,psk_16,initiator_13) else caught-fail) in
        {1921}let (hs_48: handshakestate,plaintext_a_1: bitstring,valid_28: bool) = (if v_572 then (if v_574 then (if v_577 then (if v_585 then (if v_593 then (if v_610 then (if v_627 then (if v_635 then (if v_643 then (if v_660 then (if undo-catch-fail(v_661) then (hs_47,plaintext_32,true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1922}event RecvMsg(me_4,them_3,stagepack_a(sid_4),plaintext_a_1);
        {1923}insert statestore(me_4,them_3,sid_4,statepack_b(hs_48))
    ) | (
        {2079}get statestore(=me_4,=them_3,=sid_4,statepack_b(hs_49: handshakestate)) in
        {1926}let v_662: bitstring = catch-fail(handshakestateunpack(hs_49)) in
        {1927}let v_663: bool = (not-caught-fail(v_662) && success?(1-proj-9-tuple(v_662))) in
        {1928}let initiator_14: bool = (if v_663 then 9-proj-9-tuple(v_662) else caught-fail) in
        {1929}let psk_17: key = (if v_663 then 8-proj-9-tuple(v_662) else caught-fail) in
        {1930}let re_21: key = (if v_663 then 7-proj-9-tuple(v_662) else caught-fail) in
        {1931}let rm_19: key = (if v_663 then 6-proj-9-tuple(v_662) else caught-fail) in
        {1932}let rs_19: key = (if v_663 then 5-proj-9-tuple(v_662) else caught-fail) in
        {1933}let e_30: keypair = (if v_663 then 4-proj-9-tuple(v_662) else caught-fail) in
        {1934}let m_19: keypair = (if v_663 then 3-proj-9-tuple(v_662) else caught-fail) in
        {1935}let s_19: keypair = (if v_663 then 2-proj-9-tuple(v_662) else caught-fail) in
        {1936}let ss_99: symmetricstate = (if v_663 then 1-proj-9-tuple(v_662) else caught-fail) in
        {1937}let v_664: bitstring = (if v_663 then catch-fail((empty,empty,empty)) else caught-fail) in
        {1938}let v_665: bool = (not-caught-fail(v_664) && success?(1-proj-3-tuple(v_664))) in
        {1939}let ciphertext_29: bitstring = (if v_665 then 3-proj-3-tuple(v_664) else caught-fail) in
        {1940}let ns_15: bitstring = (if v_665 then 2-proj-3-tuple(v_664) else caught-fail) in
        {1941}let ne_18: bitstring = (if v_665 then 1-proj-3-tuple(v_664) else caught-fail) in
        {1942}let basis_15: key = (if v_665 then key_e(me_4,them_3,sid_4) else caught-fail) in
        {1943}let public_key_15: key = (if v_665 then catch-fail(dhexp(basis_15,validkey(g))) else caught-fail) in
        {1944}let v_666: bool = not-caught-fail(public_key_15) in
        {1945}let e_31: keypair = (if v_665 then catch-fail((if v_666 then keypairpack(validkey(public_key_15),basis_15) else fail-any)) else caught-fail) in
        {1946}let v_667: bool = not-caught-fail(e_31) in
        {1947}let ne_19: bitstring = (if v_667 then catch-fail(getpublickey(e_31)) else caught-fail) in
        {1948}let v_668: bool = not-caught-fail(ne_19) in
        {1949}let v_669: bitstring = (if v_668 then catch-fail(symmetricstateunpack(ss_99)) else caught-fail) in
        {1950}let v_670: bool = (not-caught-fail(v_669) && success?(1-proj-3-tuple(v_669))) in
        {1951}let h_89: bitstring = (if v_670 then 3-proj-3-tuple(v_669) else caught-fail) in
        {1952}let ck_110: key = (if v_670 then 2-proj-3-tuple(v_669) else caught-fail) in
        {1953}let cs_89: cipherstate = (if v_670 then 1-proj-3-tuple(v_669) else caught-fail) in
        {1954}let ss_100: symmetricstate = (if v_668 then catch-fail((if v_670 then symmetricstatepack(cs_89,ck_110,hash(h_89,ne_19)) else fail-any)) else caught-fail) in
        {1955}let v_671: bool = not-caught-fail(ss_100) in
        {1956}let v_672: bitstring = (if v_671 then catch-fail(keypairunpack(e_31)) else caught-fail) in
        {1957}let v_673: bool = (not-caught-fail(v_672) && success?(1-proj-2-tuple(v_672))) in
        {1958}let my_private_key_21: key = (if v_673 then 2-proj-2-tuple(v_672) else caught-fail) in
        {1959}let my_public_key_21: key = (if v_673 then 1-proj-2-tuple(v_672) else caught-fail) in
        {1960}let input_key_material_24: key = (if v_671 then catch-fail((if v_673 then dhexp(my_private_key_21,re_21) else fail-any)) else caught-fail) in
        {1961}let v_674: bool = not-caught-fail(input_key_material_24) in
        {1962}let v_675: bitstring = (if v_674 then catch-fail(symmetricstateunpack(ss_100)) else caught-fail) in
        {1963}let v_676: bool = (not-caught-fail(v_675) && success?(1-proj-3-tuple(v_675))) in
        {1964}let h_90: bitstring = (if v_676 then 3-proj-3-tuple(v_675) else caught-fail) in
        {1965}let ck_111: key = (if v_676 then 2-proj-3-tuple(v_675) else caught-fail) in
        {1966}let cs_90: cipherstate = (if v_676 then 1-proj-3-tuple(v_675) else caught-fail) in
        {1969}let output3_24: key = (if v_676 then hmac_hash3(ck_111,input_key_material_24) else caught-fail) in
        {1968}let output2_24: key = (if v_676 then hmac_hash2(ck_111,input_key_material_24) else caught-fail) in
        {1967}let output1_24: key = (if v_676 then hmac_hash1(ck_111,input_key_material_24) else caught-fail) in
        {1970}let v_677: bitstring = (if v_676 then catch-fail((output1_24,output2_24,output3_24)) else caught-fail) in
        {1971}let v_678: bool = (not-caught-fail(v_677) && success?(1-proj-3-tuple(v_677))) in
        {1972}let output_21: key = (if v_678 then 3-proj-3-tuple(v_677) else caught-fail) in
        {1973}let temp_k_21: key = (if v_678 then 2-proj-3-tuple(v_677) else caught-fail) in
        {1974}let ck_112: key = (if v_678 then 1-proj-3-tuple(v_677) else caught-fail) in
        {1975}let ss_101: symmetricstate = (if v_671 then catch-fail((if v_674 then (if v_676 then (if v_678 then symmetricstatepack(cipherstatepack(temp_k_21,minnonce),ck_112,h_90) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1976}let v_679: bool = not-caught-fail(ss_101) in
        {1977}let v_680: bitstring = (if v_679 then catch-fail(keypairunpack(e_31)) else caught-fail) in
        {1978}let v_681: bool = (not-caught-fail(v_680) && success?(1-proj-2-tuple(v_680))) in
        {1979}let my_private_key_22: key = (if v_681 then 2-proj-2-tuple(v_680) else caught-fail) in
        {1980}let my_public_key_22: key = (if v_681 then 1-proj-2-tuple(v_680) else caught-fail) in
        {1981}let input_key_material_25: key = (if v_679 then catch-fail((if v_681 then dhexp(my_private_key_22,rs_19) else fail-any)) else caught-fail) in
        {1982}let v_682: bool = not-caught-fail(input_key_material_25) in
        {1983}let v_683: bitstring = (if v_682 then catch-fail(symmetricstateunpack(ss_101)) else caught-fail) in
        {1984}let v_684: bool = (not-caught-fail(v_683) && success?(1-proj-3-tuple(v_683))) in
        {1985}let h_91: bitstring = (if v_684 then 3-proj-3-tuple(v_683) else caught-fail) in
        {1986}let ck_113: key = (if v_684 then 2-proj-3-tuple(v_683) else caught-fail) in
        {1987}let cs_91: cipherstate = (if v_684 then 1-proj-3-tuple(v_683) else caught-fail) in
        {1990}let output3_25: key = (if v_684 then hmac_hash3(ck_113,input_key_material_25) else caught-fail) in
        {1989}let output2_25: key = (if v_684 then hmac_hash2(ck_113,input_key_material_25) else caught-fail) in
        {1988}let output1_25: key = (if v_684 then hmac_hash1(ck_113,input_key_material_25) else caught-fail) in
        {1991}let v_685: bitstring = (if v_684 then catch-fail((output1_25,output2_25,output3_25)) else caught-fail) in
        {1992}let v_686: bool = (not-caught-fail(v_685) && success?(1-proj-3-tuple(v_685))) in
        {1993}let output_22: key = (if v_686 then 3-proj-3-tuple(v_685) else caught-fail) in
        {1994}let temp_k_22: key = (if v_686 then 2-proj-3-tuple(v_685) else caught-fail) in
        {1995}let ck_114: key = (if v_686 then 1-proj-3-tuple(v_685) else caught-fail) in
        {1996}let ss_102: symmetricstate = (if v_679 then catch-fail((if v_682 then (if v_684 then (if v_686 then symmetricstatepack(cipherstatepack(temp_k_22,minnonce),ck_114,h_91) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1997}let v_687: bool = not-caught-fail(ss_102) in
        {1998}let v_688: bitstring = (if v_687 then catch-fail(keypairunpack(e_31)) else caught-fail) in
        {1999}let v_689: bool = (not-caught-fail(v_688) && success?(1-proj-2-tuple(v_688))) in
        {2000}let my_private_key_23: key = (if v_689 then 2-proj-2-tuple(v_688) else caught-fail) in
        {2001}let my_public_key_23: key = (if v_689 then 1-proj-2-tuple(v_688) else caught-fail) in
        {2002}let input_key_material_26: key = (if v_687 then catch-fail((if v_689 then dhexp(my_private_key_23,rm_19) else fail-any)) else caught-fail) in
        {2003}let v_690: bool = not-caught-fail(input_key_material_26) in
        {2004}let v_691: bitstring = (if v_690 then catch-fail(symmetricstateunpack(ss_102)) else caught-fail) in
        {2005}let v_692: bool = (not-caught-fail(v_691) && success?(1-proj-3-tuple(v_691))) in
        {2006}let h_92: bitstring = (if v_692 then 3-proj-3-tuple(v_691) else caught-fail) in
        {2007}let ck_115: key = (if v_692 then 2-proj-3-tuple(v_691) else caught-fail) in
        {2008}let cs_92: cipherstate = (if v_692 then 1-proj-3-tuple(v_691) else caught-fail) in
        {2011}let output3_26: key = (if v_692 then hmac_hash3(ck_115,input_key_material_26) else caught-fail) in
        {2010}let output2_26: key = (if v_692 then hmac_hash2(ck_115,input_key_material_26) else caught-fail) in
        {2009}let output1_26: key = (if v_692 then hmac_hash1(ck_115,input_key_material_26) else caught-fail) in
        {2012}let v_693: bitstring = (if v_692 then catch-fail((output1_26,output2_26,output3_26)) else caught-fail) in
        {2013}let v_694: bool = (not-caught-fail(v_693) && success?(1-proj-3-tuple(v_693))) in
        {2014}let output_23: key = (if v_694 then 3-proj-3-tuple(v_693) else caught-fail) in
        {2015}let temp_k_23: key = (if v_694 then 2-proj-3-tuple(v_693) else caught-fail) in
        {2016}let ck_116: key = (if v_694 then 1-proj-3-tuple(v_693) else caught-fail) in
        {2017}let ss_103: symmetricstate = (if v_687 then catch-fail((if v_690 then (if v_692 then (if v_694 then symmetricstatepack(cipherstatepack(temp_k_23,minnonce),ck_116,h_92) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {2018}let v_695: bool = not-caught-fail(ss_103) in
        {2019}let v_696: bitstring = (if v_695 then catch-fail(symmetricstateunpack(ss_103)) else caught-fail) in
        {2020}let v_697: bool = (not-caught-fail(v_696) && success?(1-proj-3-tuple(v_696))) in
        {2021}let h_93: bitstring = (if v_697 then 3-proj-3-tuple(v_696) else caught-fail) in
        {2022}let ck_117: key = (if v_697 then 2-proj-3-tuple(v_696) else caught-fail) in
        {2023}let cs_93: cipherstate = (if v_697 then 1-proj-3-tuple(v_696) else caught-fail) in
        {2024}let v_698: bitstring = (if v_697 then catch-fail(cipherstateunpack(cs_93)) else caught-fail) in
        {2025}let v_699: bool = (not-caught-fail(v_698) && success?(1-proj-2-tuple(v_698))) in
        {2026}let n_42: nonce = (if v_699 then 2-proj-2-tuple(v_698) else caught-fail) in
        {2027}let k_46: key = (if v_699 then 1-proj-2-tuple(v_698) else caught-fail) in
        {2030}let v_700: bitstring = (if v_699 then catch-fail(cipherstateunpack(cs_93)) else caught-fail) in
        {2031}let v_701: bool = (not-caught-fail(v_700) && success?(1-proj-2-tuple(v_700))) in
        {2032}let o_21: nonce = (if v_701 then 2-proj-2-tuple(v_700) else caught-fail) in
        {2033}let k_47: key = (if v_701 then 1-proj-2-tuple(v_700) else caught-fail) in
        {2029}let n_43: nonce = (if v_699 then increment_nonce(n_42) else caught-fail) in
        {2034}let csi_42: cipherstate = (if v_699 then catch-fail((if v_701 then cipherstatepack(k_47,n_43) else fail-any)) else caught-fail) in
        {2035}let v_702: bool = not-caught-fail(csi_42) in
        {1925}let payload_6: bitstring = msg_b(me_4,them_3,sid_4) in
        {2028}let e_32: bitstring = (if v_699 then encrypt(k_46,n_42,h_93,payload_6) else caught-fail) in
        {2036}let v_703: bitstring = (if v_697 then catch-fail((if v_699 then (if v_702 then (csi_42,e_32) else fail-any) else fail-any)) else caught-fail) in
        {2037}let v_704: bool = (not-caught-fail(v_703) && success?(1-proj-2-tuple(v_703))) in
        {2038}let ciphertext_30: bitstring = (if v_704 then 2-proj-2-tuple(v_703) else caught-fail) in
        {2039}let csi_43: cipherstate = (if v_704 then 1-proj-2-tuple(v_703) else caught-fail) in
        {2040}let ss_104: symmetricstate = (if v_704 then symmetricstatepack(csi_43,ck_117,h_93) else caught-fail) in
        {2041}let v_705: bitstring = (if v_704 then catch-fail(symmetricstateunpack(ss_104)) else caught-fail) in
        {2042}let v_706: bool = (not-caught-fail(v_705) && success?(1-proj-3-tuple(v_705))) in
        {2043}let h_94: bitstring = (if v_706 then 3-proj-3-tuple(v_705) else caught-fail) in
        {2044}let ck_118: key = (if v_706 then 2-proj-3-tuple(v_705) else caught-fail) in
        {2045}let cs_94: cipherstate = (if v_706 then 1-proj-3-tuple(v_705) else caught-fail) in
        {2046}let ssi_24: symmetricstate = (if v_704 then catch-fail((if v_706 then symmetricstatepack(cs_94,ck_118,hash(h_94,ciphertext_30)) else fail-any)) else caught-fail) in
        {2047}let v_707: bool = not-caught-fail(ssi_24) in
        {2048}let v_708: bitstring = (if v_695 then catch-fail((if v_697 then (if v_704 then (if v_707 then (ssi_24,ciphertext_30) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {2049}let v_709: bool = (not-caught-fail(v_708) && success?(1-proj-2-tuple(v_708))) in
        {2050}let ciphertext_31: bitstring = (if v_709 then 2-proj-2-tuple(v_708) else caught-fail) in
        {2051}let ss_105: symmetricstate = (if v_709 then 1-proj-2-tuple(v_708) else caught-fail) in
        {2054}let v_710: bitstring = (if v_709 then catch-fail(symmetricstateunpack(ss_105)) else caught-fail) in
        {2055}let v_711: bool = (not-caught-fail(v_710) && success?(1-proj-3-tuple(v_710))) in
        {2056}let h_95: bitstring = (if v_711 then 3-proj-3-tuple(v_710) else caught-fail) in
        {2057}let ck_119: key = (if v_711 then 2-proj-3-tuple(v_710) else caught-fail) in
        {2058}let cs_95: cipherstate = (if v_711 then 1-proj-3-tuple(v_710) else caught-fail) in
        {2059}let input_key_material_27: key = (if v_711 then zero else caught-fail) in
        {2062}let output3_27: key = (if v_711 then hmac_hash3(ck_119,input_key_material_27) else caught-fail) in
        {2061}let output2_27: key = (if v_711 then hmac_hash2(ck_119,input_key_material_27) else caught-fail) in
        {2060}let output1_27: key = (if v_711 then hmac_hash1(ck_119,input_key_material_27) else caught-fail) in
        {2063}let v_712: bitstring = (if v_711 then catch-fail((output1_27,output2_27,output3_27)) else caught-fail) in
        {2064}let v_713: bool = (not-caught-fail(v_712) && success?(1-proj-3-tuple(v_712))) in
        {2065}let temp_k3_3: key = (if v_713 then 3-proj-3-tuple(v_712) else caught-fail) in
        {2066}let temp_k2_3: key = (if v_713 then 2-proj-3-tuple(v_712) else caught-fail) in
        {2067}let temp_k1_3: key = (if v_713 then 1-proj-3-tuple(v_712) else caught-fail) in
        {2069}let cs2_15: cipherstate = (if v_713 then cipherstatepack(temp_k2_3,minnonce) else caught-fail) in
        {2068}let cs1_15: cipherstate = (if v_713 then cipherstatepack(temp_k1_3,minnonce) else caught-fail) in
        {2070}let v_714: bitstring = (if v_709 then catch-fail((if v_711 then (if v_713 then (ss_105,cs1_15,cs2_15) else fail-any) else fail-any)) else caught-fail) in
        {2071}let v_715: bool = (not-caught-fail(v_714) && success?(1-proj-3-tuple(v_714))) in
        {2072}let cs2_16: cipherstate = (if v_715 then 3-proj-3-tuple(v_714) else caught-fail) in
        {2073}let cs1_16: cipherstate = (if v_715 then 2-proj-3-tuple(v_714) else caught-fail) in
        {2074}let ssi_25: symmetricstate = (if v_715 then 1-proj-3-tuple(v_714) else caught-fail) in
        {2053}let message_buffer_6: bitstring = (if v_709 then concat3(ne_19,ns_15,ciphertext_31) else caught-fail) in
        {2052}let hs_50: handshakestate = (if v_709 then handshakestatepack(ss_105,s_19,m_19,e_31,rs_19,rm_19,re_21,psk_17,initiator_14) else caught-fail) in
        {2075}let (hs_51: handshakestate,message_b_3: bitstring,cs1_17: cipherstate,cs2_17: cipherstate) = (if v_663 then (if v_665 then (if v_667 then (if v_668 then (if v_671 then (if v_679 then (if v_687 then (if v_695 then (if v_709 then (if v_715 then (hs_50,message_buffer_6,cs1_16,cs2_16) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {2076}event SendMsg(me_4,them_3,stagepack_b(sid_4),msg_b(me_4,them_3,sid_4));
        {2077}insert statestore(me_4,them_3,sid_4,statepack_c(hs_51,cs1_17,cs2_17));
        {2078}out(pub, message_b_3)
    ) | (
        {2080}!
        {2146}get statestore(=me_4,=them_3,=sid_4,statepack_c(hs_52: handshakestate,cs1_18: cipherstate,cs2_18: cipherstate)) in
        {2081}let hs_53: handshakestate = handshakestatesetcs(hs_52,cs1_18) in
        {2082}in(pub, message_c_3: bitstring);
        {2083}let v_716: bitstring = catch-fail(handshakestateunpack(hs_53)) in
        {2084}let v_717: bool = (not-caught-fail(v_716) && success?(1-proj-9-tuple(v_716))) in
        {2085}let initiator_15: bool = (if v_717 then 9-proj-9-tuple(v_716) else caught-fail) in
        {2086}let psk_18: key = (if v_717 then 8-proj-9-tuple(v_716) else caught-fail) in
        {2087}let re_22: key = (if v_717 then 7-proj-9-tuple(v_716) else caught-fail) in
        {2088}let rm_20: key = (if v_717 then 6-proj-9-tuple(v_716) else caught-fail) in
        {2089}let rs_20: key = (if v_717 then 5-proj-9-tuple(v_716) else caught-fail) in
        {2090}let e_33: keypair = (if v_717 then 4-proj-9-tuple(v_716) else caught-fail) in
        {2091}let m_20: keypair = (if v_717 then 3-proj-9-tuple(v_716) else caught-fail) in
        {2092}let s_20: keypair = (if v_717 then 2-proj-9-tuple(v_716) else caught-fail) in
        {2093}let ss_106: symmetricstate = (if v_717 then 1-proj-9-tuple(v_716) else caught-fail) in
        {2094}let v_718: bitstring = (if v_717 then catch-fail(deconcat3(message_c_3)) else caught-fail) in
        {2095}let v_719: bool = (not-caught-fail(v_718) && success?(1-proj-3-tuple(v_718))) in
        {2096}let ciphertext_32: bitstring = (if v_719 then 3-proj-3-tuple(v_718) else caught-fail) in
        {2097}let ns_16: bitstring = (if v_719 then 2-proj-3-tuple(v_718) else caught-fail) in
        {2098}let ne_20: bitstring = (if v_719 then 1-proj-3-tuple(v_718) else caught-fail) in
        {2100}let v_720: bitstring = (if v_719 then catch-fail(symmetricstateunpack(ss_106)) else caught-fail) in
        {2101}let v_721: bool = (not-caught-fail(v_720) && success?(1-proj-3-tuple(v_720))) in
        {2102}let h_96: bitstring = (if v_721 then 3-proj-3-tuple(v_720) else caught-fail) in
        {2103}let ck_120: key = (if v_721 then 2-proj-3-tuple(v_720) else caught-fail) in
        {2104}let cs_96: cipherstate = (if v_721 then 1-proj-3-tuple(v_720) else caught-fail) in
        {2105}let v_722: bitstring = (if v_721 then catch-fail(cipherstateunpack(cs_96)) else caught-fail) in
        {2106}let v_723: bool = (not-caught-fail(v_722) && success?(1-proj-2-tuple(v_722))) in
        {2107}let n_44: nonce = (if v_723 then 2-proj-2-tuple(v_722) else caught-fail) in
        {2108}let k_48: key = (if v_723 then 1-proj-2-tuple(v_722) else caught-fail) in
        {2109}let d_11: aead = (if v_723 then catch-fail(decrypt(k_48,n_44,h_96,ciphertext_32)) else caught-fail) in
        {2110}let v_724: bool = not-caught-fail(d_11) in
        {2111}let v_725: bitstring = (if v_724 then catch-fail(aeadunpack(d_11)) else caught-fail) in
        {2112}let v_726: bool = (not-caught-fail(v_725) && success?(1-proj-3-tuple(v_725))) in
        {2113}let plaintext_33: bitstring = (if v_726 then 3-proj-3-tuple(v_725) else caught-fail) in
        {2114}let adi_11: bitstring = (if v_726 then 2-proj-3-tuple(v_725) else caught-fail) in
        {2115}let valid_29: bool = (if v_726 then 1-proj-3-tuple(v_725) else caught-fail) in
        {2117}let v_727: bitstring = (if v_726 then catch-fail(cipherstateunpack(cs_96)) else caught-fail) in
        {2118}let v_728: bool = (not-caught-fail(v_727) && success?(1-proj-2-tuple(v_727))) in
        {2119}let o_22: nonce = (if v_728 then 2-proj-2-tuple(v_727) else caught-fail) in
        {2120}let k_49: key = (if v_728 then 1-proj-2-tuple(v_727) else caught-fail) in
        {2116}let n_45: nonce = (if v_726 then increment_nonce(n_44) else caught-fail) in
        {2121}let csi_44: cipherstate = (if v_726 then catch-fail((if v_728 then cipherstatepack(k_49,n_45) else fail-any)) else caught-fail) in
        {2122}let v_729: bool = not-caught-fail(csi_44) in
        {2123}let v_730: bitstring = (if v_721 then catch-fail((if v_723 then (if v_724 then (if v_726 then (if v_729 then (csi_44,plaintext_33,valid_29) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {2124}let v_731: bool = (not-caught-fail(v_730) && success?(1-proj-3-tuple(v_730))) in
        {2125}let valid_30: bool = (if v_731 then 3-proj-3-tuple(v_730) else caught-fail) in
        {2126}let plaintext_34: bitstring = (if v_731 then 2-proj-3-tuple(v_730) else caught-fail) in
        {2127}let csi_45: cipherstate = (if v_731 then 1-proj-3-tuple(v_730) else caught-fail) in
        {2128}let ss_107: symmetricstate = (if v_731 then symmetricstatepack(csi_45,ck_120,h_96) else caught-fail) in
        {2129}let v_732: bitstring = (if v_731 then catch-fail(symmetricstateunpack(ss_107)) else caught-fail) in
        {2130}let v_733: bool = (not-caught-fail(v_732) && success?(1-proj-3-tuple(v_732))) in
        {2131}let h_97: bitstring = (if v_733 then 3-proj-3-tuple(v_732) else caught-fail) in
        {2132}let ck_121: key = (if v_733 then 2-proj-3-tuple(v_732) else caught-fail) in
        {2133}let cs_97: cipherstate = (if v_733 then 1-proj-3-tuple(v_732) else caught-fail) in
        {2134}let ssi_26: symmetricstate = (if v_731 then catch-fail((if v_733 then symmetricstatepack(cs_97,ck_121,hash(h_97,ciphertext_32)) else fail-any)) else caught-fail) in
        {2135}let v_734: bool = not-caught-fail(ssi_26) in
        {2136}let v_735: bitstring = (if v_719 then catch-fail((if v_721 then (if v_731 then (if v_734 then (ssi_26,plaintext_34,valid_30) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {2137}let v_736: bool = (not-caught-fail(v_735) && success?(1-proj-3-tuple(v_735))) in
        {2138}let valid2_9: bool = (if v_736 then 3-proj-3-tuple(v_735) else caught-fail) in
        {2139}let plaintext_35: bitstring = (if v_736 then 2-proj-3-tuple(v_735) else caught-fail) in
        {2140}let ss_108: symmetricstate = (if v_736 then 1-proj-3-tuple(v_735) else caught-fail) in
        {2099}let valid1_9: bool = (if v_719 then true else caught-fail) in
        {2141}let v_737: bool = (if v_736 then catch-fail((valid1_9 && valid2_9)) else caught-fail) in
        {2142}let hs_54: handshakestate = (if v_737 then handshakestatepack(ss_108,s_20,m_20,e_33,rs_20,rm_20,re_22,psk_18,initiator_15) else caught-fail) in
        {2143}let (hs_55: handshakestate,plaintext_c_1: bitstring,valid_31: bool) = (if v_717 then (if v_719 then (if v_736 then (if undo-catch-fail(v_737) then (hs_54,plaintext_35,true) else fail-any) else fail-any) else fail-any) else fail-any) in
        {2144}event RecvMsg(me_4,them_3,stagepack_c(sid_4),plaintext_c_1);
        {2145}insert statestore(me_4,them_3,sid_4,statepack_d(hs_55,handshakestategetcs(hs_55),cs2_18))
    ) | (
        {2147}!
        {2204}get statestore(=me_4,=them_3,=sid_4,statepack_d(hs_56: handshakestate,cs1_19: cipherstate,cs2_19: cipherstate)) in
        {2148}let hs_57: handshakestate = handshakestatesetcs(hs_56,cs2_19) in
        {2150}let v_738: bitstring = catch-fail(handshakestateunpack(hs_57)) in
        {2151}let v_739: bool = (not-caught-fail(v_738) && success?(1-proj-9-tuple(v_738))) in
        {2152}let initiator_16: bool = (if v_739 then 9-proj-9-tuple(v_738) else caught-fail) in
        {2153}let psk_19: key = (if v_739 then 8-proj-9-tuple(v_738) else caught-fail) in
        {2154}let re_23: key = (if v_739 then 7-proj-9-tuple(v_738) else caught-fail) in
        {2155}let rm_21: key = (if v_739 then 6-proj-9-tuple(v_738) else caught-fail) in
        {2156}let rs_21: key = (if v_739 then 5-proj-9-tuple(v_738) else caught-fail) in
        {2157}let e_34: keypair = (if v_739 then 4-proj-9-tuple(v_738) else caught-fail) in
        {2158}let m_21: keypair = (if v_739 then 3-proj-9-tuple(v_738) else caught-fail) in
        {2159}let s_21: keypair = (if v_739 then 2-proj-9-tuple(v_738) else caught-fail) in
        {2160}let ss_109: symmetricstate = (if v_739 then 1-proj-9-tuple(v_738) else caught-fail) in
        {2161}let v_740: bitstring = (if v_739 then catch-fail((empty,empty,empty)) else caught-fail) in
        {2162}let v_741: bool = (not-caught-fail(v_740) && success?(1-proj-3-tuple(v_740))) in
        {2163}let ciphertext_33: bitstring = (if v_741 then 3-proj-3-tuple(v_740) else caught-fail) in
        {2164}let ns_17: bitstring = (if v_741 then 2-proj-3-tuple(v_740) else caught-fail) in
        {2165}let ne_21: bitstring = (if v_741 then 1-proj-3-tuple(v_740) else caught-fail) in
        {2166}let v_742: bitstring = (if v_741 then catch-fail(symmetricstateunpack(ss_109)) else caught-fail) in
        {2167}let v_743: bool = (not-caught-fail(v_742) && success?(1-proj-3-tuple(v_742))) in
        {2168}let h_98: bitstring = (if v_743 then 3-proj-3-tuple(v_742) else caught-fail) in
        {2169}let ck_122: key = (if v_743 then 2-proj-3-tuple(v_742) else caught-fail) in
        {2170}let cs_98: cipherstate = (if v_743 then 1-proj-3-tuple(v_742) else caught-fail) in
        {2171}let v_744: bitstring = (if v_743 then catch-fail(cipherstateunpack(cs_98)) else caught-fail) in
        {2172}let v_745: bool = (not-caught-fail(v_744) && success?(1-proj-2-tuple(v_744))) in
        {2173}let n_46: nonce = (if v_745 then 2-proj-2-tuple(v_744) else caught-fail) in
        {2174}let k_50: key = (if v_745 then 1-proj-2-tuple(v_744) else caught-fail) in
        {2177}let v_746: bitstring = (if v_745 then catch-fail(cipherstateunpack(cs_98)) else caught-fail) in
        {2178}let v_747: bool = (not-caught-fail(v_746) && success?(1-proj-2-tuple(v_746))) in
        {2179}let o_23: nonce = (if v_747 then 2-proj-2-tuple(v_746) else caught-fail) in
        {2180}let k_51: key = (if v_747 then 1-proj-2-tuple(v_746) else caught-fail) in
        {2176}let n_47: nonce = (if v_745 then increment_nonce(n_46) else caught-fail) in
        {2181}let csi_46: cipherstate = (if v_745 then catch-fail((if v_747 then cipherstatepack(k_51,n_47) else fail-any)) else caught-fail) in
        {2182}let v_748: bool = not-caught-fail(csi_46) in
        {2149}let payload_7: bitstring = msg_d(me_4,them_3,sid_4) in
        {2175}let e_35: bitstring = (if v_745 then encrypt(k_50,n_46,h_98,payload_7) else caught-fail) in
        {2183}let v_749: bitstring = (if v_743 then catch-fail((if v_745 then (if v_748 then (csi_46,e_35) else fail-any) else fail-any)) else caught-fail) in
        {2184}let v_750: bool = (not-caught-fail(v_749) && success?(1-proj-2-tuple(v_749))) in
        {2185}let ciphertext_34: bitstring = (if v_750 then 2-proj-2-tuple(v_749) else caught-fail) in
        {2186}let csi_47: cipherstate = (if v_750 then 1-proj-2-tuple(v_749) else caught-fail) in
        {2187}let ss_110: symmetricstate = (if v_750 then symmetricstatepack(csi_47,ck_122,h_98) else caught-fail) in
        {2188}let v_751: bitstring = (if v_750 then catch-fail(symmetricstateunpack(ss_110)) else caught-fail) in
        {2189}let v_752: bool = (not-caught-fail(v_751) && success?(1-proj-3-tuple(v_751))) in
        {2190}let h_99: bitstring = (if v_752 then 3-proj-3-tuple(v_751) else caught-fail) in
        {2191}let ck_123: key = (if v_752 then 2-proj-3-tuple(v_751) else caught-fail) in
        {2192}let cs_99: cipherstate = (if v_752 then 1-proj-3-tuple(v_751) else caught-fail) in
        {2193}let ssi_27: symmetricstate = (if v_750 then catch-fail((if v_752 then symmetricstatepack(cs_99,ck_123,hash(h_99,ciphertext_34)) else fail-any)) else caught-fail) in
        {2194}let v_753: bool = not-caught-fail(ssi_27) in
        {2195}let v_754: bitstring = (if v_741 then catch-fail((if v_743 then (if v_750 then (if v_753 then (ssi_27,ciphertext_34) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {2196}let v_755: bool = (not-caught-fail(v_754) && success?(1-proj-2-tuple(v_754))) in
        {2197}let ciphertext_35: bitstring = (if v_755 then 2-proj-2-tuple(v_754) else caught-fail) in
        {2198}let ss_111: symmetricstate = (if v_755 then 1-proj-2-tuple(v_754) else caught-fail) in
        {2200}let message_buffer_7: bitstring = (if v_755 then concat3(ne_21,ns_17,ciphertext_35) else caught-fail) in
        {2199}let hs_58: handshakestate = (if v_755 then handshakestatepack(ss_111,s_21,m_21,e_34,rs_21,rm_21,re_23,psk_19,initiator_16) else caught-fail) in
        {2201}let (hs_59: handshakestate,message_d_3: bitstring) = (if v_739 then (if v_741 then (if v_755 then (hs_58,message_buffer_7) else fail-any) else fail-any) else fail-any) in
        {2202}event SendMsg(me_4,them_3,stagepack_d(sid_4),msg_d(me_4,them_3,sid_4));
        {2203}out(pub, message_d_3)
    ) | (
        {2205}event LeakS(phase0,me_4);
        {2206}event LeakM(phase0,me_4);
        {2207}out(pub, (key_s(me_4),key_m(me_4)))
    ) | (
        {2208}phase 1;
        {2209}event LeakS(phase1,me_4);
        {2210}event LeakM(phase1,me_4);
        {2211}out(pub, (key_s(me_4),key_m(me_4)))
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),msg)); event(RecvMsg(bob,alice,stagepack_a(sid_b),msg)) ==> event(SendMsg(alice,c,stagepack_a(sid_a),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))); event(RecvMsg(bob,alice,stagepack_a(sid_b),msg)) ==> event(SendMsg(alice,c,stagepack_a(sid_a),msg)); event(RecvMsg(bob,alice,stagepack_a(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))); event(RecvMsg(bob,alice,stagepack_a(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),msg)); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakM(px,bob)); attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(px,bob)) && event(LeakM(px,bob)) && event(LeakS(pz,alice)) && event(LeakM(pz,alice))); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),msg)); event(RecvMsg(alice,bob,stagepack_b(sid_a),msg)) ==> event(SendMsg(bob,c,stagepack_b(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || false; event(RecvMsg(alice,bob,stagepack_b(sid_a),msg)) ==> event(SendMsg(bob,c,stagepack_b(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))); event(RecvMsg(alice,bob,stagepack_b(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || false; event(RecvMsg(alice,bob,stagepack_b(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))); not attacker_p1(msg_b(bob,alice,sid_b)); not attacker_p1(msg_b(bob,alice,sid_b)); attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(px,alice)) && event(LeakM(px,alice)) && event(LeakS(pz,bob)) && event(LeakM(pz,bob))); not attacker_p1(msg_b(bob,alice,sid_b)); event(RecvMsg(bob,alice,stagepack_c(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),msg)); event(RecvMsg(bob,alice,stagepack_c(sid_b),msg)) ==> event(SendMsg(alice,c,stagepack_c(sid_a),msg)) || false || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))); event(RecvMsg(bob,alice,stagepack_c(sid_b),msg)) ==> event(SendMsg(alice,c,stagepack_c(sid_a),msg)) || false; event(RecvMsg(bob,alice,stagepack_c(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),msg)) || false || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))); event(RecvMsg(bob,alice,stagepack_c(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),msg)) || false; not attacker_p1(msg_c(alice,bob,sid_a)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakM(px,bob)); attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(px,bob)) && event(LeakM(px,bob)) && event(LeakS(pz,alice)) && event(LeakM(pz,alice))); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),msg)); event(RecvMsg(alice,bob,stagepack_d(sid_a),msg)) ==> event(SendMsg(bob,c,stagepack_d(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || false; event(RecvMsg(alice,bob,stagepack_d(sid_a),msg)) ==> event(SendMsg(bob,c,stagepack_d(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))); event(RecvMsg(alice,bob,stagepack_d(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || false; event(RecvMsg(alice,bob,stagepack_d(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))); not attacker_p1(msg_d(bob,alice,sid_b)); not attacker_p1(msg_d(bob,alice,sid_b)); attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(px,alice)) && event(LeakM(px,alice)) && event(LeakS(pz,bob)) && event(LeakM(pz,bob))); not attacker_p1(msg_d(bob,alice,sid_b)); not event(RecvEnd(true)) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 200 rules (87 with conclusion selected). Queue: 300 rules.
400 rules inserted. Base: 392 rules (104 with conclusion selected). Queue: 182 rules.
600 rules inserted. Base: 590 rules (162 with conclusion selected). Queue: 123 rules.
800 rules inserted. Base: 781 rules (173 with conclusion selected). Queue: 228 rules.
1000 rules inserted. Base: 925 rules (173 with conclusion selected). Queue: 248 rules.
1200 rules inserted. Base: 1071 rules (173 with conclusion selected). Queue: 265 rules.
1400 rules inserted. Base: 1167 rules (173 with conclusion selected). Queue: 288 rules.
1600 rules inserted. Base: 1298 rules (173 with conclusion selected). Queue: 329 rules.
1800 rules inserted. Base: 1445 rules (173 with conclusion selected). Queue: 364 rules.
2000 rules inserted. Base: 1549 rules (173 with conclusion selected). Queue: 396 rules.
2200 rules inserted. Base: 1639 rules (173 with conclusion selected). Queue: 430 rules.
2400 rules inserted. Base: 1787 rules (173 with conclusion selected). Queue: 488 rules.
2600 rules inserted. Base: 1924 rules (173 with conclusion selected). Queue: 520 rules.
2800 rules inserted. Base: 2036 rules (173 with conclusion selected). Queue: 588 rules.
3000 rules inserted. Base: 2113 rules (173 with conclusion selected). Queue: 598 rules.
3200 rules inserted. Base: 2236 rules (173 with conclusion selected). Queue: 619 rules.
3400 rules inserted. Base: 2345 rules (173 with conclusion selected). Queue: 657 rules.
3600 rules inserted. Base: 2455 rules (173 with conclusion selected). Queue: 687 rules.
3800 rules inserted. Base: 2568 rules (173 with conclusion selected). Queue: 640 rules.
4000 rules inserted. Base: 2634 rules (173 with conclusion selected). Queue: 707 rules.
4200 rules inserted. Base: 2746 rules (173 with conclusion selected). Queue: 669 rules.
4400 rules inserted. Base: 2837 rules (173 with conclusion selected). Queue: 653 rules.
4600 rules inserted. Base: 2920 rules (173 with conclusion selected). Queue: 686 rules.
4800 rules inserted. Base: 3001 rules (173 with conclusion selected). Queue: 680 rules.
5000 rules inserted. Base: 3088 rules (173 with conclusion selected). Queue: 674 rules.
5200 rules inserted. Base: 3140 rules (173 with conclusion selected). Queue: 705 rules.
5400 rules inserted. Base: 3230 rules (174 with conclusion selected). Queue: 693 rules.
5600 rules inserted. Base: 3307 rules (174 with conclusion selected). Queue: 651 rules.
5800 rules inserted. Base: 3327 rules (174 with conclusion selected). Queue: 689 rules.
6000 rules inserted. Base: 3414 rules (179 with conclusion selected). Queue: 604 rules.
6200 rules inserted. Base: 3440 rules (179 with conclusion selected). Queue: 544 rules.
6400 rules inserted. Base: 3480 rules (179 with conclusion selected). Queue: 525 rules.
6600 rules inserted. Base: 3592 rules (182 with conclusion selected). Queue: 454 rules.
6800 rules inserted. Base: 3621 rules (183 with conclusion selected). Queue: 392 rules.
7000 rules inserted. Base: 3456 rules (192 with conclusion selected). Queue: 329 rules.
7200 rules inserted. Base: 3475 rules (195 with conclusion selected). Queue: 265 rules.
7400 rules inserted. Base: 3522 rules (196 with conclusion selected). Queue: 240 rules.
7600 rules inserted. Base: 3279 rules (201 with conclusion selected). Queue: 384 rules.
7800 rules inserted. Base: 3424 rules (201 with conclusion selected). Queue: 882 rules.
8000 rules inserted. Base: 3528 rules (202 with conclusion selected). Queue: 1053 rules.
8200 rules inserted. Base: 3676 rules (202 with conclusion selected). Queue: 1189 rules.
8400 rules inserted. Base: 3835 rules (202 with conclusion selected). Queue: 1339 rules.
8600 rules inserted. Base: 3975 rules (202 with conclusion selected). Queue: 1531 rules.
8800 rules inserted. Base: 3803 rules (202 with conclusion selected). Queue: 1657 rules.
9000 rules inserted. Base: 3971 rules (202 with conclusion selected). Queue: 1677 rules.
9200 rules inserted. Base: 4135 rules (202 with conclusion selected). Queue: 1653 rules.
9400 rules inserted. Base: 4249 rules (202 with conclusion selected). Queue: 1691 rules.
9600 rules inserted. Base: 4352 rules (202 with conclusion selected). Queue: 1714 rules.
9800 rules inserted. Base: 4432 rules (202 with conclusion selected). Queue: 1727 rules.
10000 rules inserted. Base: 4527 rules (202 with conclusion selected). Queue: 1758 rules.
10200 rules inserted. Base: 4610 rules (202 with conclusion selected). Queue: 1581 rules.
10400 rules inserted. Base: 4627 rules (202 with conclusion selected). Queue: 1398 rules.
10600 rules inserted. Base: 4631 rules (202 with conclusion selected). Queue: 1368 rules.
10800 rules inserted. Base: 4631 rules (202 with conclusion selected). Queue: 1352 rules.
11000 rules inserted. Base: 4631 rules (202 with conclusion selected). Queue: 1336 rules.
11200 rules inserted. Base: 4631 rules (202 with conclusion selected). Queue: 1324 rules.
11400 rules inserted. Base: 4639 rules (202 with conclusion selected). Queue: 1305 rules.
11600 rules inserted. Base: 4718 rules (202 with conclusion selected). Queue: 1271 rules.
11800 rules inserted. Base: 4774 rules (207 with conclusion selected). Queue: 1251 rules.
12000 rules inserted. Base: 4774 rules (207 with conclusion selected). Queue: 1236 rules.
12200 rules inserted. Base: 4774 rules (207 with conclusion selected). Queue: 1217 rules.
12400 rules inserted. Base: 4774 rules (207 with conclusion selected). Queue: 1201 rules.
12600 rules inserted. Base: 4774 rules (207 with conclusion selected). Queue: 1185 rules.
12800 rules inserted. Base: 4905 rules (207 with conclusion selected). Queue: 1130 rules.
13000 rules inserted. Base: 5046 rules (219 with conclusion selected). Queue: 1083 rules.
13200 rules inserted. Base: 5192 rules (219 with conclusion selected). Queue: 991 rules.
13400 rules inserted. Base: 5337 rules (219 with conclusion selected). Queue: 920 rules.
13600 rules inserted. Base: 5141 rules (219 with conclusion selected). Queue: 833 rules.
13800 rules inserted. Base: 5243 rules (223 with conclusion selected). Queue: 769 rules.
14000 rules inserted. Base: 5389 rules (223 with conclusion selected). Queue: 604 rules.
14200 rules inserted. Base: 5535 rules (223 with conclusion selected). Queue: 436 rules.
14400 rules inserted. Base: 5657 rules (228 with conclusion selected). Queue: 280 rules.
14600 rules inserted. Base: 5724 rules (228 with conclusion selected). Queue: 211 rules.
14800 rules inserted. Base: 5784 rules (277 with conclusion selected). Queue: 420 rules.
15000 rules inserted. Base: 5896 rules (308 with conclusion selected). Queue: 395 rules.
15200 rules inserted. Base: 6084 rules (417 with conclusion selected). Queue: 457 rules.
15400 rules inserted. Base: 6219 rules (532 with conclusion selected). Queue: 560 rules.
15600 rules inserted. Base: 6384 rules (587 with conclusion selected). Queue: 587 rules.
15800 rules inserted. Base: 6584 rules (663 with conclusion selected). Queue: 617 rules.
16000 rules inserted. Base: 6424 rules (692 with conclusion selected). Queue: 631 rules.
16200 rules inserted. Base: 6612 rules (704 with conclusion selected). Queue: 657 rules.
16400 rules inserted. Base: 6812 rules (717 with conclusion selected). Queue: 684 rules.
16600 rules inserted. Base: 7012 rules (801 with conclusion selected). Queue: 850 rules.
16800 rules inserted. Base: 7164 rules (820 with conclusion selected). Queue: 901 rules.
17000 rules inserted. Base: 7318 rules (820 with conclusion selected). Queue: 912 rules.
17200 rules inserted. Base: 7471 rules (820 with conclusion selected). Queue: 925 rules.
17400 rules inserted. Base: 7668 rules (1001 with conclusion selected). Queue: 1049 rules.
17600 rules inserted. Base: 7838 rules (1108 with conclusion selected). Queue: 1131 rules.
17800 rules inserted. Base: 8016 rules (1108 with conclusion selected). Queue: 1153 rules.
18000 rules inserted. Base: 8194 rules (1108 with conclusion selected). Queue: 1176 rules.
18200 rules inserted. Base: 8360 rules (1118 with conclusion selected). Queue: 1193 rules.
18400 rules inserted. Base: 8560 rules (1158 with conclusion selected). Queue: 1193 rules.
18600 rules inserted. Base: 8760 rules (1198 with conclusion selected). Queue: 1193 rules.
18800 rules inserted. Base: 8918 rules (1204 with conclusion selected). Queue: 1220 rules.
19000 rules inserted. Base: 9098 rules (1204 with conclusion selected). Queue: 1250 rules.
19200 rules inserted. Base: 9278 rules (1204 with conclusion selected). Queue: 1280 rules.
19400 rules inserted. Base: 9456 rules (1204 with conclusion selected). Queue: 1313 rules.
19600 rules inserted. Base: 9656 rules (1204 with conclusion selected). Queue: 1353 rules.
19800 rules inserted. Base: 9856 rules (1204 with conclusion selected). Queue: 1393 rules.
20000 rules inserted. Base: 9943 rules (1204 with conclusion selected). Queue: 1426 rules.
20200 rules inserted. Base: 10028 rules (1204 with conclusion selected). Queue: 1452 rules.
20400 rules inserted. Base: 10116 rules (1204 with conclusion selected). Queue: 1478 rules.
20600 rules inserted. Base: 10205 rules (1204 with conclusion selected). Queue: 1504 rules.
20800 rules inserted. Base: 10327 rules (1204 with conclusion selected). Queue: 1508 rules.
21000 rules inserted. Base: 10460 rules (1204 with conclusion selected). Queue: 1509 rules.
21200 rules inserted. Base: 10594 rules (1204 with conclusion selected). Queue: 1508 rules.
21400 rules inserted. Base: 10698 rules (1204 with conclusion selected). Queue: 1547 rules.
21600 rules inserted. Base: 10807 rules (1204 with conclusion selected). Queue: 1570 rules.
21800 rules inserted. Base: 10914 rules (1204 with conclusion selected). Queue: 1593 rules.
22000 rules inserted. Base: 11020 rules (1204 with conclusion selected). Queue: 1616 rules.
22200 rules inserted. Base: 11144 rules (1204 with conclusion selected). Queue: 1645 rules.
22400 rules inserted. Base: 11344 rules (1204 with conclusion selected). Queue: 1679 rules.
22600 rules inserted. Base: 11544 rules (1204 with conclusion selected). Queue: 1712 rules.
22800 rules inserted. Base: 11679 rules (1204 with conclusion selected). Queue: 1752 rules.
23000 rules inserted. Base: 11761 rules (1204 with conclusion selected). Queue: 1772 rules.
23200 rules inserted. Base: 11844 rules (1204 with conclusion selected). Queue: 1793 rules.
23400 rules inserted. Base: 11927 rules (1204 with conclusion selected). Queue: 1816 rules.
23600 rules inserted. Base: 12010 rules (1204 with conclusion selected). Queue: 1834 rules.
23800 rules inserted. Base: 12094 rules (1204 with conclusion selected). Queue: 1863 rules.
24000 rules inserted. Base: 12265 rules (1204 with conclusion selected). Queue: 1891 rules.
24200 rules inserted. Base: 12437 rules (1204 with conclusion selected). Queue: 1920 rules.
24400 rules inserted. Base: 12608 rules (1204 with conclusion selected). Queue: 1949 rules.
24600 rules inserted. Base: 12715 rules (1204 with conclusion selected). Queue: 1976 rules.
24800 rules inserted. Base: 12783 rules (1204 with conclusion selected). Queue: 2007 rules.
25000 rules inserted. Base: 12852 rules (1204 with conclusion selected). Queue: 2038 rules.
25200 rules inserted. Base: 12918 rules (1204 with conclusion selected). Queue: 2070 rules.
25400 rules inserted. Base: 12990 rules (1204 with conclusion selected). Queue: 2101 rules.
25600 rules inserted. Base: 13059 rules (1204 with conclusion selected). Queue: 2137 rules.
25800 rules inserted. Base: 13120 rules (1204 with conclusion selected). Queue: 2173 rules.
26000 rules inserted. Base: 13170 rules (1204 with conclusion selected). Queue: 2198 rules.
26200 rules inserted. Base: 13220 rules (1204 with conclusion selected). Queue: 2223 rules.
26400 rules inserted. Base: 13270 rules (1204 with conclusion selected). Queue: 2248 rules.
26600 rules inserted. Base: 13340 rules (1204 with conclusion selected). Queue: 2258 rules.
26800 rules inserted. Base: 13396 rules (1204 with conclusion selected). Queue: 2301 rules.
27000 rules inserted. Base: 13449 rules (1204 with conclusion selected). Queue: 2346 rules.
27200 rules inserted. Base: 13500 rules (1204 with conclusion selected). Queue: 2388 rules.
27400 rules inserted. Base: 13557 rules (1204 with conclusion selected). Queue: 2431 rules.
27600 rules inserted. Base: 13611 rules (1204 with conclusion selected). Queue: 2474 rules.
27800 rules inserted. Base: 13670 rules (1204 with conclusion selected). Queue: 2516 rules.
28000 rules inserted. Base: 13803 rules (1204 with conclusion selected). Queue: 2538 rules.
28200 rules inserted. Base: 13937 rules (1204 with conclusion selected). Queue: 2560 rules.
28400 rules inserted. Base: 14070 rules (1204 with conclusion selected). Queue: 2582 rules.
28600 rules inserted. Base: 14204 rules (1204 with conclusion selected). Queue: 2605 rules.
28800 rules inserted. Base: 14286 rules (1204 with conclusion selected). Queue: 2630 rules.
29000 rules inserted. Base: 14370 rules (1204 with conclusion selected). Queue: 2703 rules.
29200 rules inserted. Base: 14453 rules (1204 with conclusion selected). Queue: 2780 rules.
29400 rules inserted. Base: 14540 rules (1204 with conclusion selected). Queue: 2855 rules.
29600 rules inserted. Base: 14626 rules (1204 with conclusion selected). Queue: 2930 rules.
29800 rules inserted. Base: 14709 rules (1204 with conclusion selected). Queue: 3009 rules.
30000 rules inserted. Base: 14792 rules (1204 with conclusion selected). Queue: 3083 rules.
30200 rules inserted. Base: 14876 rules (1204 with conclusion selected). Queue: 3147 rules.
30400 rules inserted. Base: 14947 rules (1204 with conclusion selected). Queue: 3172 rules.
30600 rules inserted. Base: 15007 rules (1204 with conclusion selected). Queue: 3192 rules.
30800 rules inserted. Base: 15067 rules (1204 with conclusion selected). Queue: 3212 rules.
31000 rules inserted. Base: 15127 rules (1204 with conclusion selected). Queue: 3232 rules.
31200 rules inserted. Base: 15187 rules (1204 with conclusion selected). Queue: 3252 rules.
31400 rules inserted. Base: 15256 rules (1204 with conclusion selected). Queue: 3275 rules.
31600 rules inserted. Base: 15319 rules (1204 with conclusion selected). Queue: 3327 rules.
31800 rules inserted. Base: 15384 rules (1204 with conclusion selected). Queue: 3382 rules.
32000 rules inserted. Base: 15450 rules (1204 with conclusion selected). Queue: 3439 rules.
32200 rules inserted. Base: 15510 rules (1204 with conclusion selected). Queue: 3494 rules.
32400 rules inserted. Base: 15579 rules (1204 with conclusion selected). Queue: 3546 rules.
32600 rules inserted. Base: 15641 rules (1204 with conclusion selected). Queue: 3602 rules.
32800 rules inserted. Base: 15705 rules (1204 with conclusion selected). Queue: 3657 rules.
33000 rules inserted. Base: 15772 rules (1204 with conclusion selected). Queue: 3712 rules.
33200 rules inserted. Base: 15837 rules (1204 with conclusion selected). Queue: 3767 rules.
33400 rules inserted. Base: 15916 rules (1204 with conclusion selected). Queue: 3785 rules.
33600 rules inserted. Base: 15989 rules (1204 with conclusion selected). Queue: 3821 rules.
33800 rules inserted. Base: 16058 rules (1204 with conclusion selected). Queue: 3858 rules.
34000 rules inserted. Base: 16132 rules (1204 with conclusion selected). Queue: 3894 rules.
34200 rules inserted. Base: 16205 rules (1204 with conclusion selected). Queue: 3930 rules.
34400 rules inserted. Base: 16279 rules (1204 with conclusion selected). Queue: 3966 rules.
34600 rules inserted. Base: 16357 rules (1204 with conclusion selected). Queue: 3986 rules.
34800 rules inserted. Base: 16433 rules (1204 with conclusion selected). Queue: 4023 rules.
35000 rules inserted. Base: 16511 rules (1204 with conclusion selected). Queue: 4061 rules.
35200 rules inserted. Base: 16582 rules (1204 with conclusion selected). Queue: 4101 rules.
35400 rules inserted. Base: 16664 rules (1204 with conclusion selected). Queue: 4137 rules.
35600 rules inserted. Base: 16735 rules (1204 with conclusion selected). Queue: 4176 rules.
35800 rules inserted. Base: 16815 rules (1204 with conclusion selected). Queue: 4213 rules.
36000 rules inserted. Base: 16890 rules (1204 with conclusion selected). Queue: 4251 rules.
36200 rules inserted. Base: 16962 rules (1204 with conclusion selected). Queue: 4290 rules.
36400 rules inserted. Base: 17042 rules (1204 with conclusion selected). Queue: 4328 rules.
36600 rules inserted. Base: 17117 rules (1204 with conclusion selected). Queue: 4366 rules.
36800 rules inserted. Base: 17193 rules (1204 with conclusion selected). Queue: 4403 rules.
37000 rules inserted. Base: 17269 rules (1204 with conclusion selected). Queue: 4441 rules.
37200 rules inserted. Base: 17334 rules (1204 with conclusion selected). Queue: 4457 rules.
37400 rules inserted. Base: 17380 rules (1204 with conclusion selected). Queue: 4502 rules.
37600 rules inserted. Base: 17426 rules (1204 with conclusion selected). Queue: 4547 rules.
37800 rules inserted. Base: 17472 rules (1204 with conclusion selected). Queue: 4596 rules.
38000 rules inserted. Base: 17518 rules (1204 with conclusion selected). Queue: 4640 rules.
38200 rules inserted. Base: 17564 rules (1204 with conclusion selected). Queue: 4687 rules.
38400 rules inserted. Base: 17611 rules (1204 with conclusion selected). Queue: 4734 rules.
38600 rules inserted. Base: 17682 rules (1204 with conclusion selected). Queue: 4761 rules.
38800 rules inserted. Base: 17768 rules (1204 with conclusion selected). Queue: 4795 rules.
39000 rules inserted. Base: 17843 rules (1204 with conclusion selected). Queue: 4835 rules.
39200 rules inserted. Base: 17927 rules (1204 with conclusion selected). Queue: 4872 rules.
39400 rules inserted. Base: 18008 rules (1204 with conclusion selected). Queue: 4905 rules.
39600 rules inserted. Base: 18084 rules (1204 with conclusion selected). Queue: 4943 rules.
39800 rules inserted. Base: 18168 rules (1204 with conclusion selected). Queue: 4978 rules.
40000 rules inserted. Base: 18249 rules (1204 with conclusion selected). Queue: 5013 rules.
40200 rules inserted. Base: 18329 rules (1204 with conclusion selected). Queue: 5050 rules.
40400 rules inserted. Base: 18413 rules (1204 with conclusion selected). Queue: 5085 rules.
40600 rules inserted. Base: 18488 rules (1204 with conclusion selected). Queue: 5125 rules.
40800 rules inserted. Base: 18574 rules (1204 with conclusion selected). Queue: 5160 rules.
41000 rules inserted. Base: 18656 rules (1204 with conclusion selected). Queue: 5196 rules.
41200 rules inserted. Base: 18732 rules (1204 with conclusion selected). Queue: 5232 rules.
41400 rules inserted. Base: 18816 rules (1204 with conclusion selected). Queue: 5266 rules.
41600 rules inserted. Base: 18896 rules (1204 with conclusion selected). Queue: 5289 rules.
41800 rules inserted. Base: 18993 rules (1204 with conclusion selected). Queue: 5369 rules.
42000 rules inserted. Base: 19096 rules (1204 with conclusion selected). Queue: 5457 rules.
42200 rules inserted. Base: 19193 rules (1204 with conclusion selected). Queue: 5544 rules.
42400 rules inserted. Base: 19296 rules (1204 with conclusion selected). Queue: 5632 rules.
42600 rules inserted. Base: 19393 rules (1204 with conclusion selected). Queue: 5719 rules.
42800 rules inserted. Base: 19496 rules (1204 with conclusion selected). Queue: 5807 rules.
43000 rules inserted. Base: 19593 rules (1204 with conclusion selected). Queue: 5894 rules.
43200 rules inserted. Base: 19688 rules (1204 with conclusion selected). Queue: 5970 rules.
43400 rules inserted. Base: 19751 rules (1204 with conclusion selected). Queue: 6004 rules.
43600 rules inserted. Base: 19816 rules (1204 with conclusion selected). Queue: 6033 rules.
43800 rules inserted. Base: 19869 rules (1204 with conclusion selected). Queue: 6070 rules.
44000 rules inserted. Base: 19930 rules (1204 with conclusion selected). Queue: 6100 rules.
44200 rules inserted. Base: 19990 rules (1204 with conclusion selected). Queue: 6131 rules.
44400 rules inserted. Base: 20049 rules (1204 with conclusion selected). Queue: 6166 rules.
44600 rules inserted. Base: 20110 rules (1204 with conclusion selected). Queue: 6196 rules.
44800 rules inserted. Base: 20167 rules (1204 with conclusion selected). Queue: 6232 rules.
45000 rules inserted. Base: 20228 rules (1204 with conclusion selected). Queue: 6262 rules.
45200 rules inserted. Base: 20286 rules (1204 with conclusion selected). Queue: 6294 rules.
45400 rules inserted. Base: 20347 rules (1204 with conclusion selected). Queue: 6328 rules.
45600 rules inserted. Base: 20406 rules (1204 with conclusion selected). Queue: 6359 rules.
45800 rules inserted. Base: 20465 rules (1204 with conclusion selected). Queue: 6395 rules.
46000 rules inserted. Base: 20526 rules (1204 with conclusion selected). Queue: 6424 rules.
46200 rules inserted. Base: 20583 rules (1204 with conclusion selected). Queue: 6457 rules.
46400 rules inserted. Base: 20645 rules (1204 with conclusion selected). Queue: 6490 rules.
46600 rules inserted. Base: 20704 rules (1204 with conclusion selected). Queue: 6521 rules.
46800 rules inserted. Base: 20763 rules (1204 with conclusion selected). Queue: 6558 rules.
47000 rules inserted. Base: 20834 rules (1204 with conclusion selected). Queue: 6577 rules.
47200 rules inserted. Base: 20885 rules (1204 with conclusion selected). Queue: 6621 rules.
47400 rules inserted. Base: 20933 rules (1204 with conclusion selected). Queue: 6666 rules.
47600 rules inserted. Base: 20988 rules (1204 with conclusion selected). Queue: 6707 rules.
47800 rules inserted. Base: 21041 rules (1204 with conclusion selected). Queue: 6751 rules.
48000 rules inserted. Base: 21091 rules (1204 with conclusion selected). Queue: 6796 rules.
48200 rules inserted. Base: 21146 rules (1204 with conclusion selected). Queue: 6837 rules.
48400 rules inserted. Base: 21198 rules (1204 with conclusion selected). Queue: 6881 rules.
48600 rules inserted. Base: 21249 rules (1204 with conclusion selected). Queue: 6926 rules.
48800 rules inserted. Base: 21302 rules (1204 with conclusion selected). Queue: 6969 rules.
49000 rules inserted. Base: 21355 rules (1204 with conclusion selected). Queue: 7011 rules.
49200 rules inserted. Base: 21409 rules (1204 with conclusion selected). Queue: 7056 rules.
49400 rules inserted. Base: 21472 rules (1204 with conclusion selected). Queue: 7055 rules.
49600 rules inserted. Base: 21544 rules (1204 with conclusion selected). Queue: 7043 rules.
49800 rules inserted. Base: 21609 rules (1204 with conclusion selected). Queue: 7036 rules.
50000 rules inserted. Base: 21670 rules (1204 with conclusion selected). Queue: 7036 rules.
50200 rules inserted. Base: 21738 rules (1204 with conclusion selected). Queue: 7021 rules.
50400 rules inserted. Base: 21803 rules (1204 with conclusion selected). Queue: 7021 rules.
50600 rules inserted. Base: 21862 rules (1204 with conclusion selected). Queue: 7013 rules.
50800 rules inserted. Base: 21932 rules (1204 with conclusion selected). Queue: 7006 rules.
51000 rules inserted. Base: 21999 rules (1204 with conclusion selected). Queue: 6998 rules.
51200 rules inserted. Base: 22056 rules (1204 with conclusion selected). Queue: 6998 rules.
51400 rules inserted. Base: 22133 rules (1204 with conclusion selected). Queue: 6985 rules.
51600 rules inserted. Base: 22193 rules (1204 with conclusion selected). Queue: 6983 rules.
51800 rules inserted. Base: 22254 rules (1204 with conclusion selected). Queue: 6979 rules.
52000 rules inserted. Base: 22329 rules (1204 with conclusion selected). Queue: 6967 rules.
52200 rules inserted. Base: 22389 rules (1204 with conclusion selected). Queue: 6968 rules.
52400 rules inserted. Base: 22454 rules (1204 with conclusion selected). Queue: 6954 rules.
52600 rules inserted. Base: 22523 rules (1204 with conclusion selected). Queue: 6952 rules.
52800 rules inserted. Base: 22581 rules (1204 with conclusion selected). Queue: 6945 rules.
53000 rules inserted. Base: 22648 rules (1204 with conclusion selected). Queue: 6939 rules.
53200 rules inserted. Base: 22719 rules (1204 with conclusion selected). Queue: 6929 rules.
53400 rules inserted. Base: 22781 rules (1204 with conclusion selected). Queue: 6937 rules.
53600 rules inserted. Base: 22864 rules (1204 with conclusion selected). Queue: 6966 rules.
53800 rules inserted. Base: 22948 rules (1204 with conclusion selected). Queue: 7002 rules.
54000 rules inserted. Base: 23033 rules (1204 with conclusion selected). Queue: 7037 rules.
54200 rules inserted. Base: 23120 rules (1204 with conclusion selected). Queue: 7073 rules.
54400 rules inserted. Base: 23202 rules (1204 with conclusion selected). Queue: 7110 rules.
54600 rules inserted. Base: 23289 rules (1204 with conclusion selected). Queue: 7145 rules.
54800 rules inserted. Base: 23376 rules (1204 with conclusion selected). Queue: 7180 rules.
55000 rules inserted. Base: 23464 rules (1204 with conclusion selected). Queue: 7216 rules.
55200 rules inserted. Base: 23548 rules (1204 with conclusion selected). Queue: 7252 rules.
55400 rules inserted. Base: 23633 rules (1204 with conclusion selected). Queue: 7287 rules.
55600 rules inserted. Base: 23720 rules (1204 with conclusion selected). Queue: 7323 rules.
55800 rules inserted. Base: 23802 rules (1204 with conclusion selected). Queue: 7360 rules.
56000 rules inserted. Base: 23889 rules (1204 with conclusion selected). Queue: 7395 rules.
56200 rules inserted. Base: 23976 rules (1204 with conclusion selected). Queue: 7439 rules.
56400 rules inserted. Base: 24032 rules (1204 with conclusion selected). Queue: 7429 rules.
56600 rules inserted. Base: 24089 rules (1204 with conclusion selected). Queue: 7366 rules.
56800 rules inserted. Base: 24142 rules (1204 with conclusion selected). Queue: 7314 rules.
57000 rules inserted. Base: 24194 rules (1204 with conclusion selected). Queue: 7248 rules.
57200 rules inserted. Base: 24248 rules (1204 with conclusion selected). Queue: 7197 rules.
57400 rules inserted. Base: 24304 rules (1204 with conclusion selected). Queue: 7133 rules.
57600 rules inserted. Base: 24361 rules (1204 with conclusion selected). Queue: 7070 rules.
57800 rules inserted. Base: 24414 rules (1204 with conclusion selected). Queue: 7018 rules.
58000 rules inserted. Base: 24466 rules (1204 with conclusion selected). Queue: 6952 rules.
58200 rules inserted. Base: 24520 rules (1204 with conclusion selected). Queue: 6901 rules.
58400 rules inserted. Base: 24576 rules (1204 with conclusion selected). Queue: 6837 rules.
58600 rules inserted. Base: 24633 rules (1204 with conclusion selected). Queue: 6774 rules.
58800 rules inserted. Base: 24686 rules (1204 with conclusion selected). Queue: 6722 rules.
59000 rules inserted. Base: 24738 rules (1204 with conclusion selected). Queue: 6656 rules.
59200 rules inserted. Base: 24792 rules (1204 with conclusion selected). Queue: 6605 rules.
59400 rules inserted. Base: 24848 rules (1204 with conclusion selected). Queue: 6541 rules.
59600 rules inserted. Base: 24905 rules (1204 with conclusion selected). Queue: 6478 rules.
59800 rules inserted. Base: 24958 rules (1204 with conclusion selected). Queue: 6426 rules.
60000 rules inserted. Base: 25010 rules (1204 with conclusion selected). Queue: 6360 rules.
60200 rules inserted. Base: 25064 rules (1204 with conclusion selected). Queue: 6309 rules.
60400 rules inserted. Base: 25135 rules (1204 with conclusion selected). Queue: 6302 rules.
60600 rules inserted. Base: 25214 rules (1204 with conclusion selected). Queue: 6338 rules.
60800 rules inserted. Base: 25291 rules (1204 with conclusion selected). Queue: 6376 rules.
61000 rules inserted. Base: 25371 rules (1204 with conclusion selected). Queue: 6414 rules.
61200 rules inserted. Base: 25446 rules (1204 with conclusion selected). Queue: 6450 rules.
61400 rules inserted. Base: 25526 rules (1204 with conclusion selected). Queue: 6488 rules.
61600 rules inserted. Base: 25603 rules (1204 with conclusion selected). Queue: 6524 rules.
61800 rules inserted. Base: 25682 rules (1204 with conclusion selected). Queue: 6560 rules.
62000 rules inserted. Base: 25759 rules (1204 with conclusion selected). Queue: 6596 rules.
62200 rules inserted. Base: 25839 rules (1204 with conclusion selected). Queue: 6632 rules.
62400 rules inserted. Base: 25919 rules (1204 with conclusion selected). Queue: 6668 rules.
62600 rules inserted. Base: 25998 rules (1204 with conclusion selected). Queue: 6704 rules.
62800 rules inserted. Base: 26078 rules (1204 with conclusion selected). Queue: 6742 rules.
63000 rules inserted. Base: 26158 rules (1204 with conclusion selected). Queue: 6778 rules.
63200 rules inserted. Base: 26235 rules (1204 with conclusion selected). Queue: 6813 rules.
63400 rules inserted. Base: 26315 rules (1204 with conclusion selected). Queue: 6848 rules.
63600 rules inserted. Base: 26401 rules (1204 with conclusion selected). Queue: 6893 rules.
63800 rules inserted. Base: 26461 rules (1204 with conclusion selected). Queue: 6894 rules.
64000 rules inserted. Base: 26541 rules (1204 with conclusion selected). Queue: 6785 rules.
64200 rules inserted. Base: 26610 rules (1204 with conclusion selected). Queue: 6680 rules.
64400 rules inserted. Base: 26688 rules (1204 with conclusion selected). Queue: 6568 rules.
64600 rules inserted. Base: 26766 rules (1204 with conclusion selected). Queue: 6456 rules.
64800 rules inserted. Base: 26832 rules (1204 with conclusion selected). Queue: 6352 rules.
65000 rules inserted. Base: 26908 rules (1204 with conclusion selected). Queue: 6242 rules.
65200 rules inserted. Base: 26986 rules (1204 with conclusion selected). Queue: 6130 rules.
65400 rules inserted. Base: 27066 rules (1204 with conclusion selected). Queue: 6020 rules.
65600 rules inserted. Base: 27133 rules (1204 with conclusion selected). Queue: 5918 rules.
65800 rules inserted. Base: 27208 rules (1204 with conclusion selected). Queue: 5806 rules.
66000 rules inserted. Base: 27286 rules (1204 with conclusion selected). Queue: 5694 rules.
66200 rules inserted. Base: 27366 rules (1204 with conclusion selected). Queue: 5585 rules.
66400 rules inserted. Base: 27435 rules (1204 with conclusion selected). Queue: 5480 rules.
66600 rules inserted. Base: 27504 rules (1204 with conclusion selected). Queue: 5392 rules.
66800 rules inserted. Base: 27560 rules (1204 with conclusion selected). Queue: 5427 rules.
67000 rules inserted. Base: 27613 rules (1204 with conclusion selected). Queue: 5458 rules.
67200 rules inserted. Base: 27666 rules (1204 with conclusion selected). Queue: 5488 rules.
67400 rules inserted. Base: 27719 rules (1204 with conclusion selected). Queue: 5518 rules.
67600 rules inserted. Base: 27773 rules (1204 with conclusion selected). Queue: 5547 rules.
67800 rules inserted. Base: 27824 rules (1204 with conclusion selected). Queue: 5577 rules.
68000 rules inserted. Base: 27872 rules (1204 with conclusion selected). Queue: 5609 rules.
68200 rules inserted. Base: 27923 rules (1204 with conclusion selected). Queue: 5641 rules.
68400 rules inserted. Base: 27970 rules (1204 with conclusion selected). Queue: 5673 rules.
68600 rules inserted. Base: 28024 rules (1204 with conclusion selected). Queue: 5704 rules.
68800 rules inserted. Base: 28077 rules (1204 with conclusion selected). Queue: 5734 rules.
69000 rules inserted. Base: 28130 rules (1204 with conclusion selected). Queue: 5763 rules.
69200 rules inserted. Base: 28183 rules (1204 with conclusion selected). Queue: 5793 rules.
69400 rules inserted. Base: 28235 rules (1204 with conclusion selected). Queue: 5823 rules.
69600 rules inserted. Base: 28283 rules (1204 with conclusion selected). Queue: 5855 rules.
69800 rules inserted. Base: 28334 rules (1204 with conclusion selected). Queue: 5888 rules.
70000 rules inserted. Base: 28381 rules (1204 with conclusion selected). Queue: 5919 rules.
70200 rules inserted. Base: 28435 rules (1204 with conclusion selected). Queue: 5950 rules.
70400 rules inserted. Base: 28488 rules (1204 with conclusion selected). Queue: 5980 rules.
70600 rules inserted. Base: 28549 rules (1204 with conclusion selected). Queue: 6025 rules.
70800 rules inserted. Base: 28614 rules (1204 with conclusion selected). Queue: 5929 rules.
71000 rules inserted. Base: 28694 rules (1204 with conclusion selected). Queue: 5779 rules.
71200 rules inserted. Base: 28774 rules (1204 with conclusion selected). Queue: 5629 rules.
71400 rules inserted. Base: 28854 rules (1204 with conclusion selected). Queue: 5479 rules.
71600 rules inserted. Base: 28934 rules (1204 with conclusion selected). Queue: 5329 rules.
71800 rules inserted. Base: 29014 rules (1204 with conclusion selected). Queue: 5179 rules.
72000 rules inserted. Base: 29098 rules (1204 with conclusion selected). Queue: 5083 rules.
72200 rules inserted. Base: 29167 rules (1204 with conclusion selected). Queue: 5106 rules.
72400 rules inserted. Base: 29227 rules (1204 with conclusion selected). Queue: 5088 rules.
72600 rules inserted. Base: 29307 rules (1204 with conclusion selected). Queue: 5063 rules.
72800 rules inserted. Base: 29376 rules (1204 with conclusion selected). Queue: 5041 rules.
73000 rules inserted. Base: 29448 rules (1204 with conclusion selected). Queue: 5021 rules.
73200 rules inserted. Base: 29520 rules (1204 with conclusion selected). Queue: 4996 rules.
73400 rules inserted. Base: 29587 rules (1204 with conclusion selected). Queue: 4979 rules.
73600 rules inserted. Base: 29662 rules (1204 with conclusion selected). Queue: 4952 rules.
73800 rules inserted. Base: 29728 rules (1204 with conclusion selected). Queue: 4935 rules.
74000 rules inserted. Base: 29807 rules (1204 with conclusion selected). Queue: 4906 rules.
74200 rules inserted. Base: 29867 rules (1204 with conclusion selected). Queue: 4888 rules.
74400 rules inserted. Base: 29947 rules (1204 with conclusion selected). Queue: 4863 rules.
74600 rules inserted. Base: 30016 rules (1204 with conclusion selected). Queue: 4841 rules.
74800 rules inserted. Base: 30088 rules (1204 with conclusion selected). Queue: 4821 rules.
75000 rules inserted. Base: 30160 rules (1204 with conclusion selected). Queue: 4796 rules.
75200 rules inserted. Base: 30227 rules (1204 with conclusion selected). Queue: 4779 rules.
75400 rules inserted. Base: 30302 rules (1204 with conclusion selected). Queue: 4752 rules.
75600 rules inserted. Base: 30368 rules (1204 with conclusion selected). Queue: 4735 rules.
75800 rules inserted. Base: 30447 rules (1204 with conclusion selected). Queue: 4706 rules.
76000 rules inserted. Base: 30507 rules (1204 with conclusion selected). Queue: 4688 rules.
76200 rules inserted. Base: 30587 rules (1204 with conclusion selected). Queue: 4663 rules.
76400 rules inserted. Base: 30656 rules (1204 with conclusion selected). Queue: 4641 rules.
76600 rules inserted. Base: 30692 rules (1204 with conclusion selected). Queue: 4666 rules.
76800 rules inserted. Base: 30748 rules (1204 with conclusion selected). Queue: 4563 rules.
77000 rules inserted. Base: 30828 rules (1204 with conclusion selected). Queue: 4383 rules.
77200 rules inserted. Base: 30891 rules (1204 with conclusion selected). Queue: 4474 rules.
77400 rules inserted. Base: 30938 rules (1204 with conclusion selected). Queue: 4405 rules.
77600 rules inserted. Base: 30983 rules (1204 with conclusion selected). Queue: 4325 rules.
77800 rules inserted. Base: 31028 rules (1204 with conclusion selected). Queue: 4245 rules.
78000 rules inserted. Base: 31073 rules (1204 with conclusion selected). Queue: 4165 rules.
78200 rules inserted. Base: 31118 rules (1204 with conclusion selected). Queue: 4085 rules.
78400 rules inserted. Base: 31163 rules (1204 with conclusion selected). Queue: 4005 rules.
78600 rules inserted. Base: 31208 rules (1204 with conclusion selected). Queue: 3925 rules.
78800 rules inserted. Base: 31253 rules (1204 with conclusion selected). Queue: 3845 rules.
79000 rules inserted. Base: 31298 rules (1204 with conclusion selected). Queue: 3765 rules.
79200 rules inserted. Base: 31343 rules (1204 with conclusion selected). Queue: 3685 rules.
79400 rules inserted. Base: 31388 rules (1204 with conclusion selected). Queue: 3605 rules.
79600 rules inserted. Base: 31433 rules (1204 with conclusion selected). Queue: 3525 rules.
79800 rules inserted. Base: 31478 rules (1204 with conclusion selected). Queue: 3445 rules.
80000 rules inserted. Base: 31523 rules (1204 with conclusion selected). Queue: 3365 rules.
80200 rules inserted. Base: 31568 rules (1204 with conclusion selected). Queue: 3285 rules.
80400 rules inserted. Base: 31613 rules (1204 with conclusion selected). Queue: 3205 rules.
80600 rules inserted. Base: 31658 rules (1204 with conclusion selected). Queue: 3125 rules.
80800 rules inserted. Base: 31703 rules (1204 with conclusion selected). Queue: 3045 rules.
81000 rules inserted. Base: 31748 rules (1204 with conclusion selected). Queue: 2965 rules.
81200 rules inserted. Base: 31781 rules (1204 with conclusion selected). Queue: 2900 rules.
81400 rules inserted. Base: 31843 rules (1204 with conclusion selected). Queue: 2885 rules.
81600 rules inserted. Base: 31887 rules (1204 with conclusion selected). Queue: 2994 rules.
81800 rules inserted. Base: 31970 rules (1204 with conclusion selected). Queue: 2912 rules.
82000 rules inserted. Base: 32069 rules (1204 with conclusion selected). Queue: 2778 rules.
82200 rules inserted. Base: 32170 rules (1204 with conclusion selected). Queue: 2647 rules.
82400 rules inserted. Base: 32270 rules (1204 with conclusion selected). Queue: 2512 rules.
82600 rules inserted. Base: 32369 rules (1204 with conclusion selected). Queue: 2378 rules.
82800 rules inserted. Base: 32470 rules (1204 with conclusion selected). Queue: 2247 rules.
83000 rules inserted. Base: 32570 rules (1204 with conclusion selected). Queue: 2112 rules.
83200 rules inserted. Base: 32669 rules (1204 with conclusion selected). Queue: 1978 rules.
83400 rules inserted. Base: 32770 rules (1204 with conclusion selected). Queue: 1847 rules.
83600 rules inserted. Base: 32870 rules (1204 with conclusion selected). Queue: 1712 rules.
83800 rules inserted. Base: 32969 rules (1204 with conclusion selected). Queue: 1578 rules.
84000 rules inserted. Base: 33060 rules (1204 with conclusion selected). Queue: 1466 rules.
84200 rules inserted. Base: 32084 rules (1204 with conclusion selected). Queue: 1327 rules.
84400 rules inserted. Base: 32121 rules (1204 with conclusion selected). Queue: 1387 rules.
84600 rules inserted. Base: 32133 rules (1204 with conclusion selected). Queue: 1464 rules.
84800 rules inserted. Base: 32183 rules (1204 with conclusion selected). Queue: 1289 rules.
85000 rules inserted. Base: 32233 rules (1204 with conclusion selected). Queue: 1114 rules.
85200 rules inserted. Base: 32283 rules (1204 with conclusion selected). Queue: 939 rules.
85400 rules inserted. Base: 32328 rules (1205 with conclusion selected). Queue: 776 rules.
85600 rules inserted. Base: 32375 rules (1205 with conclusion selected). Queue: 723 rules.
85800 rules inserted. Base: 32398 rules (1205 with conclusion selected). Queue: 721 rules.
86000 rules inserted. Base: 32474 rules (1205 with conclusion selected). Queue: 649 rules.
86200 rules inserted. Base: 22530 rules (1205 with conclusion selected). Queue: 527 rules.
86400 rules inserted. Base: 22574 rules (1205 with conclusion selected). Queue: 431 rules.
86600 rules inserted. Base: 20249 rules (1205 with conclusion selected). Queue: 343 rules.
86800 rules inserted. Base: 20279 rules (1207 with conclusion selected). Queue: 256 rules.
87000 rules inserted. Base: 19252 rules (1207 with conclusion selected). Queue: 168 rules.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),msg))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),msg)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),msg)) ==> event(SendMsg(alice,c,stagepack_a(sid_a),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),msg)) ==> event(SendMsg(alice,c,stagepack_a(sid_a),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),msg)) ==> event(SendMsg(alice,c,stagepack_a(sid_a),msg))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),msg)) ==> event(SendMsg(alice,c,stagepack_a(sid_a),msg)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),msg))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),msg)) is true.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(LeakM(phase1,bob)) && begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> attacker_p1(msg_a(alice,bob,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {49}.
table(statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

2. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {243}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {240}.
So the message concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))) may be sent to the attacker at output {242}.
attacker(concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)))).

3. By 2, the attacker may know concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).
Using the function 4-proj-concat4 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).

4. By 3, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).

5. By 2, the attacker may know concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).
Using the function 3-proj-concat4 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))).

6. By 2, the attacker may know concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).
Using the function 2-proj-concat4 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))).

7. By 2, the attacker may know concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).
Using the function 1-proj-concat4 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_5),g))).

8. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {1061}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

9. By 8, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

10. By 8, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

11. Using the function empty the attacker may obtain empty.
attacker(empty).

12. Using the function somename the attacker may obtain somename.
attacker(somename).

13. By 12, the attacker may know somename.
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

14. By 13, the attacker may know hash(somename,empty).
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

15. By 14, the attacker may know hash(hash(somename,empty),empty).
By 10, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

16. By 15, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 9, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

17. By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))).
By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))).
attacker(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))))).

20. By 19, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))).
So the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))))).

21. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

22. By 21, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

23. By 22, the attacker may know increment_nonce(minnonce) in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(increment_nonce(minnonce)) in phase 1.
attacker_p1(increment_nonce(increment_nonce(minnonce))).

24. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_5),g))).

25. The event LeakS(phase1,bob) may be executed at {1628}.
The event LeakM(phase1,bob) may be executed at {1629}.
So the message (key_s(bob),key_m(bob)) may be sent to the attacker in phase 1 at output {1630}.
attacker_p1((key_s(bob),key_m(bob))).

26. By 25, the attacker may know (key_s(bob),key_m(bob)) in phase 1.
Using the function 2-proj-2-tuple the attacker may obtain key_m(bob) in phase 1.
attacker_p1(key_m(bob)).

27. By 26, the attacker may know key_m(bob) in phase 1.
By 24, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g)) in phase 1.
attacker_p1(dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))).

28. By 25, the attacker may know (key_s(bob),key_m(bob)) in phase 1.
Using the function 1-proj-2-tuple the attacker may obtain key_s(bob) in phase 1.
attacker_p1(key_s(bob)).

29. By 28, the attacker may know key_s(bob) in phase 1.
By 24, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g)) in phase 1.
attacker_p1(dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))).

30. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

31. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

32. By 31, the attacker may know somename in phase 1.
By 30, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

33. By 32, the attacker may know hash(somename,empty) in phase 1.
By 29, the attacker may know dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g)))).

34. By 33, the attacker may know hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))) in phase 1.
By 27, the attacker may know dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g)))).

35. By 34, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))) in phase 1.
By 23, the attacker may know increment_nonce(increment_nonce(minnonce)) in phase 1.
By 20, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))) in phase 1.
By 4, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).

36. By 35, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_5) in phase 1.
attacker_p1(msg_a(alice,bob,sid_5)).

37. By 36, attacker_p1(msg_a(alice,bob,sid_5)).
The goal is reached, represented in the following fact:
attacker_p1(msg_a(alice,bob,sid_5)).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakM(px,bob))
goal reachable: begin(LeakM(phase1,bob)) && begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> attacker_p1(msg_a(alice,bob,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]
goal reachable: begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> attacker_p1(msg_a(alice,bob,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]
RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakM(px,bob)) is true.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(px,bob)) && event(LeakM(px,bob)) && event(LeakS(pz,alice)) && event(LeakM(pz,alice)))
goal reachable: begin(LeakM(phase1,bob)) && begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> attacker_p1(msg_a(alice,bob,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {49}.
table(statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

2. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {243}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {240}.
So the message concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))) may be sent to the attacker at output {242}.
attacker(concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)))).

3. By 2, the attacker may know concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).
Using the function 4-proj-concat4 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).

4. By 3, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).

5. By 2, the attacker may know concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).
Using the function 3-proj-concat4 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))).

6. By 2, the attacker may know concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).
Using the function 2-proj-concat4 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))).

7. By 2, the attacker may know concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).
Using the function 1-proj-concat4 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_5),g))).

8. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {1061}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

9. By 8, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

10. By 8, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

11. Using the function empty the attacker may obtain empty.
attacker(empty).

12. Using the function somename the attacker may obtain somename.
attacker(somename).

13. By 12, the attacker may know somename.
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

14. By 13, the attacker may know hash(somename,empty).
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

15. By 14, the attacker may know hash(hash(somename,empty),empty).
By 10, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

16. By 15, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 9, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

17. By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))).
By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))).
attacker(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))))).

20. By 19, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))).
So the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))))).

21. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

22. By 21, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

23. By 22, the attacker may know increment_nonce(minnonce) in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(increment_nonce(minnonce)) in phase 1.
attacker_p1(increment_nonce(increment_nonce(minnonce))).

24. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_5),g))).

25. The event LeakS(phase1,bob) may be executed at {1628}.
The event LeakM(phase1,bob) may be executed at {1629}.
So the message (key_s(bob),key_m(bob)) may be sent to the attacker in phase 1 at output {1630}.
attacker_p1((key_s(bob),key_m(bob))).

26. By 25, the attacker may know (key_s(bob),key_m(bob)) in phase 1.
Using the function 2-proj-2-tuple the attacker may obtain key_m(bob) in phase 1.
attacker_p1(key_m(bob)).

27. By 26, the attacker may know key_m(bob) in phase 1.
By 24, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g)) in phase 1.
attacker_p1(dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))).

28. By 25, the attacker may know (key_s(bob),key_m(bob)) in phase 1.
Using the function 1-proj-2-tuple the attacker may obtain key_s(bob) in phase 1.
attacker_p1(key_s(bob)).

29. By 28, the attacker may know key_s(bob) in phase 1.
By 24, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g)) in phase 1.
attacker_p1(dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))).

30. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

31. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

32. By 31, the attacker may know somename in phase 1.
By 30, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

33. By 32, the attacker may know hash(somename,empty) in phase 1.
By 29, the attacker may know dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g)))).

34. By 33, the attacker may know hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))) in phase 1.
By 27, the attacker may know dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g)))).

35. By 34, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))) in phase 1.
By 23, the attacker may know increment_nonce(increment_nonce(minnonce)) in phase 1.
By 20, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))) in phase 1.
By 4, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).

36. By 35, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_5) in phase 1.
attacker_p1(msg_a(alice,bob,sid_5)).

37. By 36, attacker_p1(msg_a(alice,bob,sid_5)).
The goal is reached, represented in the following fact:
attacker_p1(msg_a(alice,bob,sid_5)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(px,bob)) && event(LeakM(px,bob)) && event(LeakS(pz,alice)) && event(LeakM(pz,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))
goal reachable: begin(LeakM(phase1,bob)) && begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> attacker_p1(msg_a(alice,bob,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {49}.
table(statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

2. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {243}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {240}.
So the message concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))) may be sent to the attacker at output {242}.
attacker(concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)))).

3. By 2, the attacker may know concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).
Using the function 4-proj-concat4 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).

4. By 3, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).

5. By 2, the attacker may know concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).
Using the function 3-proj-concat4 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))).

6. By 2, the attacker may know concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).
Using the function 2-proj-concat4 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))).

7. By 2, the attacker may know concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).
Using the function 1-proj-concat4 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_5),g))).

8. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {1061}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

9. By 8, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

10. By 8, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

11. Using the function empty the attacker may obtain empty.
attacker(empty).

12. Using the function somename the attacker may obtain somename.
attacker(somename).

13. By 12, the attacker may know somename.
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

14. By 13, the attacker may know hash(somename,empty).
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

15. By 14, the attacker may know hash(hash(somename,empty),empty).
By 10, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

16. By 15, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 9, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

17. By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))).
By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))).
attacker(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))))).

20. By 19, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))).
So the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))))).

21. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

22. By 21, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

23. By 22, the attacker may know increment_nonce(minnonce) in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(increment_nonce(minnonce)) in phase 1.
attacker_p1(increment_nonce(increment_nonce(minnonce))).

24. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_5),g))).

25. The event LeakS(phase1,bob) may be executed at {1628}.
The event LeakM(phase1,bob) may be executed at {1629}.
So the message (key_s(bob),key_m(bob)) may be sent to the attacker in phase 1 at output {1630}.
attacker_p1((key_s(bob),key_m(bob))).

26. By 25, the attacker may know (key_s(bob),key_m(bob)) in phase 1.
Using the function 2-proj-2-tuple the attacker may obtain key_m(bob) in phase 1.
attacker_p1(key_m(bob)).

27. By 26, the attacker may know key_m(bob) in phase 1.
By 24, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g)) in phase 1.
attacker_p1(dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))).

28. By 25, the attacker may know (key_s(bob),key_m(bob)) in phase 1.
Using the function 1-proj-2-tuple the attacker may obtain key_s(bob) in phase 1.
attacker_p1(key_s(bob)).

29. By 28, the attacker may know key_s(bob) in phase 1.
By 24, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g)) in phase 1.
attacker_p1(dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))).

30. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

31. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

32. By 31, the attacker may know somename in phase 1.
By 30, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

33. By 32, the attacker may know hash(somename,empty) in phase 1.
By 29, the attacker may know dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g)))).

34. By 33, the attacker may know hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))) in phase 1.
By 27, the attacker may know dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g)))).

35. By 34, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))) in phase 1.
By 23, the attacker may know increment_nonce(increment_nonce(minnonce)) in phase 1.
By 20, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))) in phase 1.
By 4, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).

36. By 35, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_5) in phase 1.
attacker_p1(msg_a(alice,bob,sid_5)).

37. By 36, attacker_p1(msg_a(alice,bob,sid_5)).
The goal is reached, represented in the following fact:
attacker_p1(msg_a(alice,bob,sid_5)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),msg))
goal reachable: begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && attacker(msg) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(alice,bob,stagepack_b(sid_5),msg))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {49}.
table(statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

2. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {243}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {240}.
So the entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(increment_nonce(minnonce)))),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {241}.
table(statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(increment_nonce(minnonce)))),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

3. We assume as hypothesis that
attacker(msg).

4. Using the function zero the attacker may obtain zero.
attacker(zero).

5. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {243}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {240}.
So the message concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))) may be sent to the attacker at output {242}.
attacker(concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)))).

6. By 5, the attacker may know concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).
Using the function 4-proj-concat4 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).

7. By 5, the attacker may know concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).
Using the function 3-proj-concat4 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))).

8. By 5, the attacker may know concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).
Using the function 2-proj-concat4 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))).

9. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {243}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {240}.
So the message concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))) may be sent to the attacker at output {242}.
attacker(concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)))).

10. By 9, the attacker may know concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).
Using the function 1-proj-concat4 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_5),g))).

11. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {1061}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

12. By 11, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

13. By 11, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

14. Using the function empty the attacker may obtain empty.
attacker(empty).

15. Using the function somename the attacker may obtain somename.
attacker(somename).

16. By 15, the attacker may know somename.
By 14, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

17. By 16, the attacker may know hash(somename,empty).
By 14, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

18. By 17, the attacker may know hash(hash(somename,empty),empty).
By 13, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

19. By 18, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 12, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

20. By 19, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 10, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g)))).

21. By 20, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
By 8, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))))).

22. By 21, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))).
By 7, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))).
attacker(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))))).

23. By 22, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))).
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)))).

24. By 23, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).
By 4, the attacker may know zero.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero)).

25. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

26. The event LeakS(phase0,bob) may be executed at {1624}.
The event LeakM(phase0,bob) may be executed at {1625}.
So the message (key_s(bob),key_m(bob)) may be sent to the attacker at output {1626}.
attacker((key_s(bob),key_m(bob))).

27. By 26, the attacker may know (key_s(bob),key_m(bob)).
Using the function 2-proj-2-tuple the attacker may obtain key_m(bob).
attacker(key_m(bob)).

28. By 27, the attacker may know key_m(bob).
By 10, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))).

29. By 26, the attacker may know (key_s(bob),key_m(bob)).
Using the function 1-proj-2-tuple the attacker may obtain key_s(bob).
attacker(key_s(bob)).

30. By 29, the attacker may know key_s(bob).
By 10, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))).

31. By 16, the attacker may know hash(somename,empty).
By 30, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))).
attacker(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g)))).

32. By 31, the attacker may know hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))).
By 28, the attacker may know dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))).
attacker(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g)))).

33. By 32, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))).
By 4, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero)).

34. By 33, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero).
By 4, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero)).

35. By 34, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero).
By 4, the attacker may know zero.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero).
attacker(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero)).

36. By 35, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero).
By 25, the attacker may know minnonce.
By 24, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero).
By 3, the attacker may know msg.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),msg).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),msg)).

37. The attacker has some term ns_18.
attacker(ns_18).

38. By 4, the attacker may know zero.
By 37, the attacker may know ns_18.
By 36, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),msg).
Using the function concat3 the attacker may obtain concat3(zero,ns_18,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),msg)).
attacker(concat3(zero,ns_18,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),msg))).

39. The entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(increment_nonce(minnonce)))),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {400}.
The message concat3(zero,ns_18,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),msg)) that the attacker may have by 38 may be received at input {244}.
So event RecvMsg(alice,bob,stagepack_b(sid_5),msg) may be executed at {398}.
end(RecvMsg(alice,bob,stagepack_b(sid_5),msg)).

40. By 39, end(RecvMsg(alice,bob,stagepack_b(sid_5),msg)).
The goal is reached, represented in the following fact:
end(RecvMsg(alice,bob,stagepack_b(sid_5),msg)).


RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),msg)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),msg)) ==> event(SendMsg(bob,c,stagepack_b(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || false
goal reachable: begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && attacker(msg) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(alice,bob,stagepack_b(sid_5),msg))
Abbreviations:
sid_5 = sid[!1 = @sid]
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),msg)) ==> event(SendMsg(bob,c,stagepack_b(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || false is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),msg)) ==> event(SendMsg(bob,c,stagepack_b(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)))
goal reachable: begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && attacker(msg) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(alice,bob,stagepack_b(sid_5),msg))
Abbreviations:
sid_5 = sid[!1 = @sid]
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),msg)) ==> event(SendMsg(bob,c,stagepack_b(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || false
goal reachable: begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && attacker(msg) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(alice,bob,stagepack_b(sid_5),msg))
Abbreviations:
sid_5 = sid[!1 = @sid]
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || false is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)))
goal reachable: begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && attacker(msg) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(alice,bob,stagepack_b(sid_5),msg))
Abbreviations:
sid_5 = sid[!1 = @sid]
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.
Starting query not attacker_p1(msg_b(bob,alice,sid_b))
RESULT not attacker_p1(msg_b(bob,alice,sid_b)) is true.
Starting query not attacker_p1(msg_b(bob,alice,sid_b))
RESULT not attacker_p1(msg_b(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(px,alice)) && event(LeakM(px,alice)) && event(LeakS(pz,bob)) && event(LeakM(pz,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(px,alice)) && event(LeakM(px,alice)) && event(LeakS(pz,bob)) && event(LeakM(pz,bob))) is true.
Starting query not attacker_p1(msg_b(bob,alice,sid_b))
RESULT not attacker_p1(msg_b(bob,alice,sid_b)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),msg))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),msg)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),msg)) ==> event(SendMsg(alice,c,stagepack_c(sid_a),msg)) || false || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),msg)) ==> event(SendMsg(alice,c,stagepack_c(sid_a),msg)) || false || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),msg)) ==> event(SendMsg(alice,c,stagepack_c(sid_a),msg)) || false
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),msg)) ==> event(SendMsg(alice,c,stagepack_c(sid_a),msg)) || false is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),msg)) || false || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),msg)) || false || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),msg)) || false
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),msg)) || false is true.
Starting query not attacker_p1(msg_c(alice,bob,sid_a))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5))) && begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> attacker_p1(msg_c(alice,bob,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {49}.
table(statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

2. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {243}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {240}.
So the entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(increment_nonce(minnonce)))),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {241}.
table(statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(increment_nonce(minnonce)))),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

3. The attacker has some term plaintext_b_2.
attacker(plaintext_b_2).

4. Using the function zero the attacker may obtain zero.
attacker(zero).

5. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {243}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {240}.
So the message concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))) may be sent to the attacker at output {242}.
attacker(concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)))).

6. By 5, the attacker may know concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).
Using the function 4-proj-concat4 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).

7. By 5, the attacker may know concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).
Using the function 3-proj-concat4 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))).

8. By 5, the attacker may know concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).
Using the function 2-proj-concat4 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))).

9. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {243}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {240}.
So the message concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))) may be sent to the attacker at output {242}.
attacker(concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)))).

10. By 9, the attacker may know concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).
Using the function 1-proj-concat4 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_5),g))).

11. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {1061}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

12. By 11, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

13. By 11, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

14. Using the function empty the attacker may obtain empty.
attacker(empty).

15. Using the function somename the attacker may obtain somename.
attacker(somename).

16. By 15, the attacker may know somename.
By 14, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

17. By 16, the attacker may know hash(somename,empty).
By 14, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

18. By 17, the attacker may know hash(hash(somename,empty),empty).
By 13, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

19. By 18, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 12, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

20. By 19, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 10, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g)))).

21. By 20, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
By 8, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))))).

22. By 21, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))).
By 7, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))).
attacker(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))))).

23. By 22, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))).
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)))).

24. By 23, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).
By 4, the attacker may know zero.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero)).

25. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

26. The event LeakS(phase0,bob) may be executed at {1624}.
The event LeakM(phase0,bob) may be executed at {1625}.
So the message (key_s(bob),key_m(bob)) may be sent to the attacker at output {1626}.
attacker((key_s(bob),key_m(bob))).

27. By 26, the attacker may know (key_s(bob),key_m(bob)).
Using the function 2-proj-2-tuple the attacker may obtain key_m(bob).
attacker(key_m(bob)).

28. By 27, the attacker may know key_m(bob).
By 10, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))).

29. By 26, the attacker may know (key_s(bob),key_m(bob)).
Using the function 1-proj-2-tuple the attacker may obtain key_s(bob).
attacker(key_s(bob)).

30. By 29, the attacker may know key_s(bob).
By 10, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))).

31. By 16, the attacker may know hash(somename,empty).
By 30, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))).
attacker(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g)))).

32. By 31, the attacker may know hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))).
By 28, the attacker may know dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))).
attacker(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g)))).

33. By 32, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))).
By 4, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero)).

34. By 33, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero).
By 4, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero)).

35. By 34, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero).
By 4, the attacker may know zero.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero).
attacker(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero)).

36. By 35, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero).
By 25, the attacker may know minnonce.
By 24, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero).
By 3, the attacker may know plaintext_b_2.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)).

37. The attacker has some term ns_18.
attacker(ns_18).

38. By 4, the attacker may know zero.
By 37, the attacker may know ns_18.
By 36, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_18,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)).
attacker(concat3(zero,ns_18,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))).

39. The entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(increment_nonce(minnonce)))),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {400}.
The message concat3(zero,ns_18,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)) that the attacker may have by 38 may be received at input {244}.
So the entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce))) may be inserted in a table at insert {399}.
table(statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce)))).

40. The entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce))) that may be in a table by 39 may be read at get {459}.
The event SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5)) may be executed at {456}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))) may be sent to the attacker at output {458}.
attacker(concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)))).

41. By 40, the attacker may know concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)).
attacker(encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))).

42. By 24, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero).
By 36, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))).

43. By 34, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero).
By 4, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero)).

44. By 43, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero).
By 4, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero)).

45. By 44, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero).
By 25, the attacker may know minnonce.
By 42, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)).
By 41, the attacker may know encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)).
attacker(aeadpack(true,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))).

46. By 45, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)).
Using the function 3-proj-aeadpack the attacker may obtain msg_c(alice,bob,sid_5).
attacker(msg_c(alice,bob,sid_5)).

47. By 46, the attacker may know msg_c(alice,bob,sid_5).
So the attacker may know msg_c(alice,bob,sid_5) in phase 1.
attacker_p1(msg_c(alice,bob,sid_5)).

48. By 47, attacker_p1(msg_c(alice,bob,sid_5)).
The goal is reached, represented in the following fact:
attacker_p1(msg_c(alice,bob,sid_5)).


RESULT not attacker_p1(msg_c(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakM(px,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5))) && begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> attacker_p1(msg_c(alice,bob,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakM(px,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(px,bob)) && event(LeakM(px,bob)) && event(LeakS(pz,alice)) && event(LeakM(pz,alice)))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5))) && begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> attacker_p1(msg_c(alice,bob,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(px,bob)) && event(LeakM(px,bob)) && event(LeakS(pz,alice)) && event(LeakM(pz,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5))) && begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> attacker_p1(msg_c(alice,bob,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),msg))
goal reachable: attacker(msg) && begin(SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5))) && begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(alice,bob,stagepack_d(sid_5),msg))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {49}.
table(statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

2. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {243}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {240}.
So the entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(increment_nonce(minnonce)))),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {241}.
table(statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(increment_nonce(minnonce)))),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

3. The attacker has some term plaintext_b_2.
attacker(plaintext_b_2).

4. Using the function zero the attacker may obtain zero.
attacker(zero).

5. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {243}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {240}.
So the message concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))) may be sent to the attacker at output {242}.
attacker(concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)))).

6. By 5, the attacker may know concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).
Using the function 4-proj-concat4 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).

7. By 5, the attacker may know concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).
Using the function 3-proj-concat4 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))).

8. By 5, the attacker may know concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).
Using the function 2-proj-concat4 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))).

9. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {243}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {240}.
So the message concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))) may be sent to the attacker at output {242}.
attacker(concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)))).

10. By 9, the attacker may know concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).
Using the function 1-proj-concat4 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_5),g))).

11. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {1061}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

12. By 11, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

13. By 11, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

14. Using the function empty the attacker may obtain empty.
attacker(empty).

15. Using the function somename the attacker may obtain somename.
attacker(somename).

16. By 15, the attacker may know somename.
By 14, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

17. By 16, the attacker may know hash(somename,empty).
By 14, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

18. By 17, the attacker may know hash(hash(somename,empty),empty).
By 13, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

19. By 18, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 12, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

20. By 19, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 10, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g)))).

21. By 20, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
By 8, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))))).

22. By 21, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))).
By 7, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))).
attacker(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))))).

23. By 22, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))).
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)))).

24. By 23, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).
By 4, the attacker may know zero.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero)).

25. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

26. The event LeakS(phase0,bob) may be executed at {1624}.
The event LeakM(phase0,bob) may be executed at {1625}.
So the message (key_s(bob),key_m(bob)) may be sent to the attacker at output {1626}.
attacker((key_s(bob),key_m(bob))).

27. By 26, the attacker may know (key_s(bob),key_m(bob)).
Using the function 2-proj-2-tuple the attacker may obtain key_m(bob).
attacker(key_m(bob)).

28. By 27, the attacker may know key_m(bob).
By 10, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))).

29. By 26, the attacker may know (key_s(bob),key_m(bob)).
Using the function 1-proj-2-tuple the attacker may obtain key_s(bob).
attacker(key_s(bob)).

30. By 29, the attacker may know key_s(bob).
By 10, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))).

31. By 16, the attacker may know hash(somename,empty).
By 30, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))).
attacker(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g)))).

32. By 31, the attacker may know hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))).
By 28, the attacker may know dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))).
attacker(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g)))).

33. By 32, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))).
By 4, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero)).

34. By 33, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero).
By 4, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero)).

35. By 34, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero).
By 4, the attacker may know zero.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero).
attacker(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero)).

36. By 35, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero).
By 25, the attacker may know minnonce.
By 24, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero).
By 3, the attacker may know plaintext_b_2.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)).

37. The attacker has some term ns_18.
attacker(ns_18).

38. By 4, the attacker may know zero.
By 37, the attacker may know ns_18.
By 36, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_18,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)).
attacker(concat3(zero,ns_18,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))).

39. The entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(increment_nonce(minnonce)))),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {400}.
The message concat3(zero,ns_18,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)) that the attacker may have by 38 may be received at input {244}.
So the entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce))) may be inserted in a table at insert {399}.
table(statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce)))).

40. The entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce))) that may be in a table by 39 may be read at get {459}.
The event SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5)) may be executed at {456}.
So the entry statestore(alice,bob,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce))) may be inserted in a table at insert {457}.
table(statestore(alice,bob,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce)))).

41. We assume as hypothesis that
attacker(msg).

42. The attacker has some term ns_19.
attacker(ns_19).

43. By 4, the attacker may know zero.
By 42, the attacker may know ns_19.
By 36, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_19,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)).
attacker(concat3(zero,ns_19,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))).

44. The entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(increment_nonce(minnonce)))),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {400}.
The message concat3(zero,ns_19,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)) that the attacker may have by 43 may be received at input {244}.
So the entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce))) may be inserted in a table at insert {399}.
table(statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce)))).

45. The entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce))) that may be in a table by 44 may be read at get {459}.
The event SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5)) may be executed at {456}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))) may be sent to the attacker at output {458}.
attacker(concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)))).

46. By 45, the attacker may know concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)).
attacker(encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))).

47. By 24, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero).
By 36, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))).

48. By 47, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)).
By 46, the attacker may know encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)))).

49. By 34, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero).
By 4, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero)).

50. By 49, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero).
By 4, the attacker may know zero.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero).
attacker(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero)).

51. By 50, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero).
By 25, the attacker may know minnonce.
By 48, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))).
By 41, the attacker may know msg.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))),msg).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))),msg)).

52. The attacker has some term ns_20.
attacker(ns_20).

53. The attacker has some term ne_22.
attacker(ne_22).

54. By 53, the attacker may know ne_22.
By 52, the attacker may know ns_20.
By 51, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))),msg).
Using the function concat3 the attacker may obtain concat3(ne_22,ns_20,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))),msg)).
attacker(concat3(ne_22,ns_20,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))),msg))).

55. The entry statestore(alice,bob,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce))) that may be in a table by 40 may be read at get {526}.
The message concat3(ne_22,ns_20,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))),msg)) that the attacker may have by 54 may be received at input {462}.
So event RecvMsg(alice,bob,stagepack_d(sid_5),msg) may be executed at {524}.
end(RecvMsg(alice,bob,stagepack_d(sid_5),msg)).

56. By 55, end(RecvMsg(alice,bob,stagepack_d(sid_5),msg)).
The goal is reached, represented in the following fact:
end(RecvMsg(alice,bob,stagepack_d(sid_5),msg)).


RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),msg)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),msg)) ==> event(SendMsg(bob,c,stagepack_d(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || false
goal reachable: attacker(msg) && begin(SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5))) && begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(alice,bob,stagepack_d(sid_5),msg))
Abbreviations:
sid_5 = sid[!1 = @sid]
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),msg)) ==> event(SendMsg(bob,c,stagepack_d(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || false is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),msg)) ==> event(SendMsg(bob,c,stagepack_d(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)))
goal reachable: attacker(msg) && begin(SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5))) && begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(alice,bob,stagepack_d(sid_5),msg))
Abbreviations:
sid_5 = sid[!1 = @sid]
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),msg)) ==> event(SendMsg(bob,c,stagepack_d(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || false
goal reachable: attacker(msg) && begin(SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5))) && begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(alice,bob,stagepack_d(sid_5),msg))
Abbreviations:
sid_5 = sid[!1 = @sid]
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || false is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)))
goal reachable: attacker(msg) && begin(SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5))) && begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(alice,bob,stagepack_d(sid_5),msg))
Abbreviations:
sid_5 = sid[!1 = @sid]
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.
Starting query not attacker_p1(msg_d(bob,alice,sid_b))
RESULT not attacker_p1(msg_d(bob,alice,sid_b)) is true.
Starting query not attacker_p1(msg_d(bob,alice,sid_b))
RESULT not attacker_p1(msg_d(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(px,alice)) && event(LeakM(px,alice)) && event(LeakS(pz,bob)) && event(LeakM(pz,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(px,alice)) && event(LeakM(px,alice)) && event(LeakS(pz,bob)) && event(LeakM(pz,bob))) is true.
Starting query not attacker_p1(msg_d(bob,alice,sid_b))
RESULT not attacker_p1(msg_d(bob,alice,sid_b)) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5))) && begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvEnd(true))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {49}.
table(statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

2. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {243}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {240}.
So the entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(increment_nonce(minnonce)))),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {241}.
table(statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(increment_nonce(minnonce)))),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

3. The attacker has some term plaintext_b_2.
attacker(plaintext_b_2).

4. Using the function zero the attacker may obtain zero.
attacker(zero).

5. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {243}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {240}.
So the message concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))) may be sent to the attacker at output {242}.
attacker(concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)))).

6. By 5, the attacker may know concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).
Using the function 4-proj-concat4 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).

7. By 5, the attacker may know concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).
Using the function 3-proj-concat4 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))).

8. By 5, the attacker may know concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).
Using the function 2-proj-concat4 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))).

9. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {243}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {240}.
So the message concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))) may be sent to the attacker at output {242}.
attacker(concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)))).

10. By 9, the attacker may know concat4(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).
Using the function 1-proj-concat4 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_5),g))).

11. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent to the attacker at output {1061}.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

12. By 11, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

13. By 11, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

14. Using the function empty the attacker may obtain empty.
attacker(empty).

15. Using the function somename the attacker may obtain somename.
attacker(somename).

16. By 15, the attacker may know somename.
By 14, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

17. By 16, the attacker may know hash(somename,empty).
By 14, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

18. By 17, the attacker may know hash(hash(somename,empty),empty).
By 13, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

19. By 18, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 12, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

20. By 19, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 10, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g)))).

21. By 20, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
By 8, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g))))).

22. By 21, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))).
By 7, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))).
attacker(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))))).

23. By 22, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))).
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)))).

24. By 23, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))).
By 4, the attacker may know zero.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero)).

25. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

26. The event LeakS(phase0,bob) may be executed at {1624}.
The event LeakM(phase0,bob) may be executed at {1625}.
So the message (key_s(bob),key_m(bob)) may be sent to the attacker at output {1626}.
attacker((key_s(bob),key_m(bob))).

27. By 26, the attacker may know (key_s(bob),key_m(bob)).
Using the function 2-proj-2-tuple the attacker may obtain key_m(bob).
attacker(key_m(bob)).

28. By 27, the attacker may know key_m(bob).
By 10, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))).

29. By 26, the attacker may know (key_s(bob),key_m(bob)).
Using the function 1-proj-2-tuple the attacker may obtain key_s(bob).
attacker(key_s(bob)).

30. By 29, the attacker may know key_s(bob).
By 10, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))).

31. By 16, the attacker may know hash(somename,empty).
By 30, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))).
attacker(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g)))).

32. By 31, the attacker may know hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))).
By 28, the attacker may know dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))).
attacker(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g)))).

33. By 32, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))).
By 4, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero)).

34. By 33, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero).
By 4, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero)).

35. By 34, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero).
By 4, the attacker may know zero.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero).
attacker(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero)).

36. By 35, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero).
By 25, the attacker may know minnonce.
By 24, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero).
By 3, the attacker may know plaintext_b_2.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)).

37. The attacker has some term ns_18.
attacker(ns_18).

38. By 4, the attacker may know zero.
By 37, the attacker may know ns_18.
By 36, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_18,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)).
attacker(concat3(zero,ns_18,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))).

39. The entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(increment_nonce(minnonce)))),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {400}.
The message concat3(zero,ns_18,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)) that the attacker may have by 38 may be received at input {244}.
So the entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce))) may be inserted in a table at insert {399}.
table(statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce)))).

40. The entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce))) that may be in a table by 39 may be read at get {459}.
The event SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5)) may be executed at {456}.
So the entry statestore(alice,bob,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce))) may be inserted in a table at insert {457}.
table(statestore(alice,bob,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce)))).

41. The attacker has some term plaintext_d_2.
attacker(plaintext_d_2).

42. The attacker has some term ns_19.
attacker(ns_19).

43. By 4, the attacker may know zero.
By 42, the attacker may know ns_19.
By 36, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2).
Using the function concat3 the attacker may obtain concat3(zero,ns_19,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)).
attacker(concat3(zero,ns_19,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))).

44. The entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(increment_nonce(minnonce)))),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {400}.
The message concat3(zero,ns_19,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)) that the attacker may have by 43 may be received at input {244}.
So the entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce))) may be inserted in a table at insert {399}.
table(statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce)))).

45. The entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce))) that may be in a table by 44 may be read at get {459}.
The event SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5)) may be executed at {456}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))) may be sent to the attacker at output {458}.
attacker(concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)))).

46. By 45, the attacker may know concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)).
attacker(encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))).

47. By 24, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero).
By 36, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2))).

48. By 47, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)).
By 46, the attacker may know encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))).
attacker(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)))).

49. By 34, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero).
By 4, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero)).

50. By 49, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero).
By 4, the attacker may know zero.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero).
attacker(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero)).

51. By 50, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero).
By 25, the attacker may know minnonce.
By 48, the attacker may know hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))).
By 41, the attacker may know plaintext_d_2.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))),plaintext_d_2).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))),plaintext_d_2)).

52. The attacker has some term ns_20.
attacker(ns_20).

53. The attacker has some term ne_22.
attacker(ne_22).

54. By 53, the attacker may know ne_22.
By 52, the attacker may know ns_20.
By 51, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))),plaintext_d_2).
Using the function concat3 the attacker may obtain concat3(ne_22,ns_20,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))),plaintext_d_2)).
attacker(concat3(ne_22,ns_20,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))),plaintext_d_2))).

55. The entry statestore(alice,bob,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),zero,empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce))) that may be in a table by 40 may be read at get {526}.
The message concat3(ne_22,ns_20,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),zero),zero),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_5),g))),dhexp_real(key_m(bob),dhexp_real(key_e(alice,bob,sid_5),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_a(alice,bob,sid_5))),zero),plaintext_b_2)),msg_c(alice,bob,sid_5))),plaintext_d_2)) that the attacker may have by 54 may be received at input {462}.
So event RecvEnd(true) may be executed at {525}.
end(RecvEnd(true)).

56. By 55, end(RecvEnd(true)).
The goal is reached, represented in the following fact:
end(RecvEnd(true)).


RESULT not event(RecvEnd(true)) cannot be proved.

--------------------------------------------------------------
Verification summary:

Query event(RecvMsg(bob,alice,stagepack_a(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),msg)) is true.

Query event(RecvMsg(bob,alice,stagepack_a(sid_b),msg)) ==> event(SendMsg(alice,c,stagepack_a(sid_a),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.

Query event(RecvMsg(bob,alice,stagepack_a(sid_b),msg)) ==> event(SendMsg(alice,c,stagepack_a(sid_a),msg)) is true.

Query event(RecvMsg(bob,alice,stagepack_a(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.

Query event(RecvMsg(bob,alice,stagepack_a(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),msg)) is true.

Query not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.

Query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakM(px,bob)) is true.

Query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(px,bob)) && event(LeakM(px,bob)) && event(LeakS(pz,alice)) && event(LeakM(pz,alice))) cannot be proved.

Query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)) cannot be proved.

Query event(RecvMsg(alice,bob,stagepack_b(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),msg)) cannot be proved.

Query event(RecvMsg(alice,bob,stagepack_b(sid_a),msg)) ==> event(SendMsg(bob,c,stagepack_b(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || false is true.

Query event(RecvMsg(alice,bob,stagepack_b(sid_a),msg)) ==> event(SendMsg(bob,c,stagepack_b(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.

Query event(RecvMsg(alice,bob,stagepack_b(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || false is true.

Query event(RecvMsg(alice,bob,stagepack_b(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.

Query not attacker_p1(msg_b(bob,alice,sid_b)) is true.

Query not attacker_p1(msg_b(bob,alice,sid_b)) is true.

Query attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(px,alice)) && event(LeakM(px,alice)) && event(LeakS(pz,bob)) && event(LeakM(pz,bob))) is true.

Query not attacker_p1(msg_b(bob,alice,sid_b)) is true.

Query event(RecvMsg(bob,alice,stagepack_c(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),msg)) is true.

Query event(RecvMsg(bob,alice,stagepack_c(sid_b),msg)) ==> event(SendMsg(alice,c,stagepack_c(sid_a),msg)) || false || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.

Query event(RecvMsg(bob,alice,stagepack_c(sid_b),msg)) ==> event(SendMsg(alice,c,stagepack_c(sid_a),msg)) || false is true.

Query event(RecvMsg(bob,alice,stagepack_c(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),msg)) || false || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.

Query event(RecvMsg(bob,alice,stagepack_c(sid_b),msg)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),msg)) || false is true.

Query not attacker_p1(msg_c(alice,bob,sid_a)) cannot be proved.

Query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakM(px,bob)) is true.

Query attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(px,bob)) && event(LeakM(px,bob)) && event(LeakS(pz,alice)) && event(LeakM(pz,alice))) is true.

Query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)) is true.

Query event(RecvMsg(alice,bob,stagepack_d(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),msg)) cannot be proved.

Query event(RecvMsg(alice,bob,stagepack_d(sid_a),msg)) ==> event(SendMsg(bob,c,stagepack_d(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || false is true.

Query event(RecvMsg(alice,bob,stagepack_d(sid_a),msg)) ==> event(SendMsg(bob,c,stagepack_d(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.

Query event(RecvMsg(alice,bob,stagepack_d(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || false is true.

Query event(RecvMsg(alice,bob,stagepack_d(sid_a),msg)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),msg)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.

Query not attacker_p1(msg_d(bob,alice,sid_b)) is true.

Query not attacker_p1(msg_d(bob,alice,sid_b)) is true.

Query attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(px,alice)) && event(LeakM(px,alice)) && event(LeakS(pz,bob)) && event(LeakM(pz,bob))) is true.

Query not attacker_p1(msg_d(bob,alice,sid_b)) is true.

Query not event(RecvEnd(true)) cannot be proved.

--------------------------------------------------------------

