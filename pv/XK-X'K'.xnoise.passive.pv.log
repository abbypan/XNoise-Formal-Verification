File "pv/XK-X'K'.xnoise.passive.pv", line 222, characters 7-8:
Warning: identifier ck rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 231, characters 7-8:
Warning: identifier ck rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 232, characters 7-8:
Warning: identifier cs rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 232, character 36:
Warning: identifier h rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 262, characters 6-7:
Warning: identifier ss rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 263, characters 6-7:
Warning: identifier ss rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 268, characters 6-7:
Warning: identifier ss rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 269, characters 6-7:
Warning: identifier ss rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 275, character 6:
Warning: identifier e rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 276, characters 6-7:
Warning: identifier ne rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 277, characters 6-7:
Warning: identifier ss rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 279, characters 6-7:
Warning: identifier ss rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 280, characters 6-7:
Warning: identifier ss rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 281, characters 7-8:
Warning: identifier ss rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 281, characters 26-35:
Warning: identifier ciphertext rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 282, characters 6-7:
Warning: identifier hs rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 289, character 6:
Warning: identifier e rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 290, characters 6-7:
Warning: identifier ne rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 291, characters 6-7:
Warning: identifier ss rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 293, characters 6-7:
Warning: identifier ss rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 294, characters 7-8:
Warning: identifier ss rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 294, characters 26-35:
Warning: identifier ciphertext rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 295, characters 6-7:
Warning: identifier hs rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 303, character 6:
Warning: identifier s rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 304, characters 7-8:
Warning: identifier ss rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 304, characters 26-27:
Warning: identifier ns rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 306, character 6:
Warning: identifier m rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 307, characters 7-8:
Warning: identifier ss rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 307, characters 26-27:
Warning: identifier nm rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 309, characters 6-7:
Warning: identifier ss rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 310, characters 6-7:
Warning: identifier ss rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 312, characters 7-8:
Warning: identifier ss rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 312, characters 26-35:
Warning: identifier ciphertext rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 313, characters 6-7:
Warning: identifier hs rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 321, characters 7-8:
Warning: identifier ss rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 321, characters 26-35:
Warning: identifier ciphertext rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 322, characters 6-7:
Warning: identifier hs rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 329, characters 7-8:
Warning: identifier ss rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 329, characters 26-35:
Warning: identifier ciphertext rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 330, characters 6-7:
Warning: identifier hs rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 338, characters 6-7:
Warning: identifier re rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 339, characters 6-7:
Warning: identifier ss rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 341, characters 6-7:
Warning: identifier ss rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 342, characters 6-7:
Warning: identifier ss rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 343, characters 7-8:
Warning: identifier ss rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 345, characters 13-14:
Warning: identifier hs rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 353, characters 6-7:
Warning: identifier re rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 354, characters 6-7:
Warning: identifier ss rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 356, characters 6-7:
Warning: identifier ss rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 357, characters 7-8:
Warning: identifier ss rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 359, characters 13-14:
Warning: identifier hs rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 369, characters 7-8:
Warning: identifier ss rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 369, characters 41-46:
Warning: identifier valid1 rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 370, characters 6-7:
Warning: identifier rs rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 372, characters 7-8:
Warning: identifier ss rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 372, characters 41-46:
Warning: identifier valid2 rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 373, characters 6-7:
Warning: identifier rm rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 375, characters 6-7:
Warning: identifier ss rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 376, characters 6-7:
Warning: identifier ss rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 378, characters 7-8:
Warning: identifier ss rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 380, characters 13-14:
Warning: identifier hs rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 389, characters 7-8:
Warning: identifier ss rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 391, characters 13-14:
Warning: identifier hs rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 399, characters 7-8:
Warning: identifier ss rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 401, characters 13-14:
Warning: identifier hs rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 588, characters 7-8:
Warning: identifier hs rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 589, characters 8-9:
Warning: identifier hs rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 580, characters 7-8:
Warning: identifier hs rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 582, characters 8-9:
Warning: identifier hs rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 574, characters 8-9:
Warning: identifier hs rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 568, characters 8-9:
Warning: identifier hs rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 561, characters 8-9:
Warning: identifier hs rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 644, characters 7-8:
Warning: identifier hs rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 646, characters 8-9:
Warning: identifier hs rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 637, characters 7-8:
Warning: identifier hs rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 638, characters 8-9:
Warning: identifier hs rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 631, characters 8-9:
Warning: identifier hs rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 624, characters 8-9:
Warning: identifier hs rebound.
File "pv/XK-X'K'.xnoise.passive.pv", line 618, characters 8-9:
Warning: identifier hs rebound.
Linear part:
dhexp_real(b,dhexp_real(a,g)) = dhexp_real(a,dhexp_real(b,g))
Completing equations...
Completed equations:
dhexp_real(b,dhexp_real(a,g)) = dhexp_real(a,dhexp_real(b,g))
Convergent part: No equation.
Process 0 (that is, the initial process):
{1}out(pub, (key_s(charlie),key_m(charlie)));
{2}!
{3}new sid: sessionid;
(
    {4}let me: principal = alice in
    {5}let them: principal = bob in
    {6}let sid_1: sessionid = sid in
    {7}let s: keypair = keypairpack(empty,empty) in
    {8}let m: keypair = keypairpack(empty,empty) in
    {9}out(pub, (getpublickey(s),getpublickey(m)));
    (
        {10}let e: keypair = keypairpack(empty,empty) in
        {11}let basis: key = key_s(them) in
        {12}let public_key: key = catch-fail(dhexp(basis,validkey(g))) in
        {13}let v: bool = not-caught-fail(public_key) in
        {14}let rs: key = getpublickey((if v then keypairpack(validkey(public_key),basis) else fail-any)) in
        {15}let basis_1: key = key_m(them) in
        {16}let public_key_1: key = catch-fail(dhexp(basis_1,validkey(g))) in
        {17}let v_1: bool = not-caught-fail(public_key_1) in
        {18}let rm: key = getpublickey((if v_1 then keypairpack(validkey(public_key_1),basis_1) else fail-any)) in
        {19}let re: key = empty in
        {20}let prologue: bitstring = empty in
        {21}let psk: key = empty in
        {22}let protocol_name: bitstring = somename in
        {23}let h: bitstring = hash(protocol_name,empty) in
        {24}let ck: key = h in
        {25}let k: key = empty in
        {26}let cs: cipherstate = cipherstatepack(k,minnonce) in
        {27}let ss: symmetricstate = symmetricstatepack(cs,ck,h) in
        {28}let v_2: bitstring = catch-fail(symmetricstateunpack(ss)) in
        {29}let v_3: bool = (not-caught-fail(v_2) && success?(1-proj-3-tuple(v_2))) in
        {30}let h_1: bitstring = (if v_3 then 3-proj-3-tuple(v_2) else caught-fail) in
        {31}let ck_1: key = (if v_3 then 2-proj-3-tuple(v_2) else caught-fail) in
        {32}let cs_1: cipherstate = (if v_3 then 1-proj-3-tuple(v_2) else caught-fail) in
        {33}let ss_1: symmetricstate = catch-fail((if v_3 then symmetricstatepack(cs_1,ck_1,hash(h_1,prologue)) else fail-any)) in
        {34}let v_4: bool = not-caught-fail(ss_1) in
        {35}let v_5: bitstring = (if v_4 then catch-fail(symmetricstateunpack(ss_1)) else caught-fail) in
        {36}let v_6: bool = (not-caught-fail(v_5) && success?(1-proj-3-tuple(v_5))) in
        {37}let h_2: bitstring = (if v_6 then 3-proj-3-tuple(v_5) else caught-fail) in
        {38}let ck_2: key = (if v_6 then 2-proj-3-tuple(v_5) else caught-fail) in
        {39}let cs_2: cipherstate = (if v_6 then 1-proj-3-tuple(v_5) else caught-fail) in
        {40}let ss_2: symmetricstate = (if v_4 then catch-fail((if v_6 then symmetricstatepack(cs_2,ck_2,hash(h_2,rs)) else fail-any)) else caught-fail) in
        {41}let v_7: bool = not-caught-fail(ss_2) in
        {42}let v_8: bitstring = (if v_7 then catch-fail(symmetricstateunpack(ss_2)) else caught-fail) in
        {43}let v_9: bool = (not-caught-fail(v_8) && success?(1-proj-3-tuple(v_8))) in
        {44}let h_3: bitstring = (if v_9 then 3-proj-3-tuple(v_8) else caught-fail) in
        {45}let ck_3: key = (if v_9 then 2-proj-3-tuple(v_8) else caught-fail) in
        {46}let cs_3: cipherstate = (if v_9 then 1-proj-3-tuple(v_8) else caught-fail) in
        {47}let ss_3: symmetricstate = (if v_7 then catch-fail((if v_9 then symmetricstatepack(cs_3,ck_3,hash(h_3,rm)) else fail-any)) else caught-fail) in
        {48}let v_10: bool = not-caught-fail(ss_3) in
        {49}let hs: handshakestate = (if v_4 then (if v_7 then (if v_10 then handshakestatepack(ss_3,s,m,e,rs,rm,re,psk,true) else fail-any) else fail-any) else fail-any) in
        {50}insert statestore(me,them,sid_1,statepack_a(hs))
    ) | (
        {163}get statestore(=me,=them,=sid_1,statepack_a(hs_1: handshakestate)) in
        {51}let payload: bitstring = msg_a(me,them,sid_1) in
        {52}let v_11: bitstring = catch-fail(handshakestateunpack(hs_1)) in
        {53}let v_12: bool = (not-caught-fail(v_11) && success?(1-proj-9-tuple(v_11))) in
        {54}let initiator_1: bool = (if v_12 then 9-proj-9-tuple(v_11) else caught-fail) in
        {55}let psk_1: key = (if v_12 then 8-proj-9-tuple(v_11) else caught-fail) in
        {56}let re_1: key = (if v_12 then 7-proj-9-tuple(v_11) else caught-fail) in
        {57}let rm_1: key = (if v_12 then 6-proj-9-tuple(v_11) else caught-fail) in
        {58}let rs_1: key = (if v_12 then 5-proj-9-tuple(v_11) else caught-fail) in
        {59}let e_1: keypair = (if v_12 then 4-proj-9-tuple(v_11) else caught-fail) in
        {60}let m_1: keypair = (if v_12 then 3-proj-9-tuple(v_11) else caught-fail) in
        {61}let s_1: keypair = (if v_12 then 2-proj-9-tuple(v_11) else caught-fail) in
        {62}let ss_4: symmetricstate = (if v_12 then 1-proj-9-tuple(v_11) else caught-fail) in
        {63}let v_13: bitstring = (if v_12 then catch-fail((empty,empty,empty)) else caught-fail) in
        {64}let v_14: bool = (not-caught-fail(v_13) && success?(1-proj-3-tuple(v_13))) in
        {65}let ciphertext: bitstring = (if v_14 then 3-proj-3-tuple(v_13) else caught-fail) in
        {66}let ns: bitstring = (if v_14 then 2-proj-3-tuple(v_13) else caught-fail) in
        {67}let ne: bitstring = (if v_14 then 1-proj-3-tuple(v_13) else caught-fail) in
        {68}let basis_2: key = (if v_14 then key_e(me,them,sid_1) else caught-fail) in
        {69}let public_key_2: key = (if v_14 then catch-fail(dhexp(basis_2,validkey(g))) else caught-fail) in
        {70}let v_15: bool = not-caught-fail(public_key_2) in
        {71}let e_2: keypair = (if v_14 then catch-fail((if v_15 then keypairpack(validkey(public_key_2),basis_2) else fail-any)) else caught-fail) in
        {72}let v_16: bool = not-caught-fail(e_2) in
        {73}let ne_1: bitstring = (if v_16 then catch-fail(getpublickey(e_2)) else caught-fail) in
        {74}let v_17: bool = not-caught-fail(ne_1) in
        {75}let v_18: bitstring = (if v_17 then catch-fail(symmetricstateunpack(ss_4)) else caught-fail) in
        {76}let v_19: bool = (not-caught-fail(v_18) && success?(1-proj-3-tuple(v_18))) in
        {77}let h_4: bitstring = (if v_19 then 3-proj-3-tuple(v_18) else caught-fail) in
        {78}let ck_4: key = (if v_19 then 2-proj-3-tuple(v_18) else caught-fail) in
        {79}let cs_4: cipherstate = (if v_19 then 1-proj-3-tuple(v_18) else caught-fail) in
        {80}let ss_5: symmetricstate = (if v_17 then catch-fail((if v_19 then symmetricstatepack(cs_4,ck_4,hash(h_4,ne_1)) else fail-any)) else caught-fail) in
        {81}let v_20: bool = not-caught-fail(ss_5) in
        {82}let v_21: bitstring = (if v_20 then catch-fail(keypairunpack(e_2)) else caught-fail) in
        {83}let v_22: bool = (not-caught-fail(v_21) && success?(1-proj-2-tuple(v_21))) in
        {84}let my_private_key: key = (if v_22 then 2-proj-2-tuple(v_21) else caught-fail) in
        {85}let my_public_key: key = (if v_22 then 1-proj-2-tuple(v_21) else caught-fail) in
        {86}let input_key_material: key = (if v_20 then catch-fail((if v_22 then dhexp(my_private_key,rs_1) else fail-any)) else caught-fail) in
        {87}let v_23: bool = not-caught-fail(input_key_material) in
        {88}let v_24: bitstring = (if v_23 then catch-fail(symmetricstateunpack(ss_5)) else caught-fail) in
        {89}let v_25: bool = (not-caught-fail(v_24) && success?(1-proj-3-tuple(v_24))) in
        {90}let h_5: bitstring = (if v_25 then 3-proj-3-tuple(v_24) else caught-fail) in
        {91}let ck_5: key = (if v_25 then 2-proj-3-tuple(v_24) else caught-fail) in
        {92}let cs_5: cipherstate = (if v_25 then 1-proj-3-tuple(v_24) else caught-fail) in
        {93}let output1: key = (if v_25 then hmac_hash1(ck_5,input_key_material) else caught-fail) in
        {94}let output2: key = (if v_25 then hmac_hash2(ck_5,input_key_material) else caught-fail) in
        {95}let output3: key = (if v_25 then hmac_hash3(ck_5,input_key_material) else caught-fail) in
        {96}let v_26: bitstring = (if v_25 then catch-fail((output1,output2,output3)) else caught-fail) in
        {97}let v_27: bool = (not-caught-fail(v_26) && success?(1-proj-3-tuple(v_26))) in
        {98}let output_3: key = (if v_27 then 3-proj-3-tuple(v_26) else caught-fail) in
        {99}let temp_k: key = (if v_27 then 2-proj-3-tuple(v_26) else caught-fail) in
        {100}let ck_6: key = (if v_27 then 1-proj-3-tuple(v_26) else caught-fail) in
        {101}let ss_6: symmetricstate = (if v_20 then catch-fail((if v_23 then (if v_25 then (if v_27 then symmetricstatepack(cipherstatepack(temp_k,minnonce),ck_6,h_5) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {102}let v_28: bool = not-caught-fail(ss_6) in
        {103}let v_29: bitstring = (if v_28 then catch-fail(keypairunpack(e_2)) else caught-fail) in
        {104}let v_30: bool = (not-caught-fail(v_29) && success?(1-proj-2-tuple(v_29))) in
        {105}let my_private_key_1: key = (if v_30 then 2-proj-2-tuple(v_29) else caught-fail) in
        {106}let my_public_key_1: key = (if v_30 then 1-proj-2-tuple(v_29) else caught-fail) in
        {107}let input_key_material_1: key = (if v_28 then catch-fail((if v_30 then dhexp(my_private_key_1,rm_1) else fail-any)) else caught-fail) in
        {108}let v_31: bool = not-caught-fail(input_key_material_1) in
        {109}let v_32: bitstring = (if v_31 then catch-fail(symmetricstateunpack(ss_6)) else caught-fail) in
        {110}let v_33: bool = (not-caught-fail(v_32) && success?(1-proj-3-tuple(v_32))) in
        {111}let h_6: bitstring = (if v_33 then 3-proj-3-tuple(v_32) else caught-fail) in
        {112}let ck_7: key = (if v_33 then 2-proj-3-tuple(v_32) else caught-fail) in
        {113}let cs_6: cipherstate = (if v_33 then 1-proj-3-tuple(v_32) else caught-fail) in
        {114}let output1_1: key = (if v_33 then hmac_hash1(ck_7,input_key_material_1) else caught-fail) in
        {115}let output2_1: key = (if v_33 then hmac_hash2(ck_7,input_key_material_1) else caught-fail) in
        {116}let output3_1: key = (if v_33 then hmac_hash3(ck_7,input_key_material_1) else caught-fail) in
        {117}let v_34: bitstring = (if v_33 then catch-fail((output1_1,output2_1,output3_1)) else caught-fail) in
        {118}let v_35: bool = (not-caught-fail(v_34) && success?(1-proj-3-tuple(v_34))) in
        {119}let output: key = (if v_35 then 3-proj-3-tuple(v_34) else caught-fail) in
        {120}let temp_k_1: key = (if v_35 then 2-proj-3-tuple(v_34) else caught-fail) in
        {121}let ck_8: key = (if v_35 then 1-proj-3-tuple(v_34) else caught-fail) in
        {122}let ss_7: symmetricstate = (if v_28 then catch-fail((if v_31 then (if v_33 then (if v_35 then symmetricstatepack(cipherstatepack(temp_k_1,minnonce),ck_8,h_6) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {123}let v_36: bool = not-caught-fail(ss_7) in
        {124}let v_37: bitstring = (if v_36 then catch-fail(symmetricstateunpack(ss_7)) else caught-fail) in
        {125}let v_38: bool = (not-caught-fail(v_37) && success?(1-proj-3-tuple(v_37))) in
        {126}let h_7: bitstring = (if v_38 then 3-proj-3-tuple(v_37) else caught-fail) in
        {127}let ck_9: key = (if v_38 then 2-proj-3-tuple(v_37) else caught-fail) in
        {128}let cs_7: cipherstate = (if v_38 then 1-proj-3-tuple(v_37) else caught-fail) in
        {129}let v_39: bitstring = (if v_38 then catch-fail(cipherstateunpack(cs_7)) else caught-fail) in
        {130}let v_40: bool = (not-caught-fail(v_39) && success?(1-proj-2-tuple(v_39))) in
        {131}let n: nonce = (if v_40 then 2-proj-2-tuple(v_39) else caught-fail) in
        {132}let k_1: key = (if v_40 then 1-proj-2-tuple(v_39) else caught-fail) in
        {133}let e_3: bitstring = (if v_40 then encrypt(k_1,n,h_7,payload) else caught-fail) in
        {134}let n_1: nonce = (if v_40 then increment_nonce(n) else caught-fail) in
        {135}let v_41: bitstring = (if v_40 then catch-fail(cipherstateunpack(cs_7)) else caught-fail) in
        {136}let v_42: bool = (not-caught-fail(v_41) && success?(1-proj-2-tuple(v_41))) in
        {137}let o: nonce = (if v_42 then 2-proj-2-tuple(v_41) else caught-fail) in
        {138}let k_2: key = (if v_42 then 1-proj-2-tuple(v_41) else caught-fail) in
        {139}let csi: cipherstate = (if v_40 then catch-fail((if v_42 then cipherstatepack(k_2,n_1) else fail-any)) else caught-fail) in
        {140}let v_43: bool = not-caught-fail(csi) in
        {141}let v_44: bitstring = (if v_38 then catch-fail((if v_40 then (if v_43 then (csi,e_3) else fail-any) else fail-any)) else caught-fail) in
        {142}let v_45: bool = (not-caught-fail(v_44) && success?(1-proj-2-tuple(v_44))) in
        {143}let ciphertext_1: bitstring = (if v_45 then 2-proj-2-tuple(v_44) else caught-fail) in
        {144}let csi_1: cipherstate = (if v_45 then 1-proj-2-tuple(v_44) else caught-fail) in
        {145}let ss_8: symmetricstate = (if v_45 then symmetricstatepack(csi_1,ck_9,h_7) else caught-fail) in
        {146}let v_46: bitstring = (if v_45 then catch-fail(symmetricstateunpack(ss_8)) else caught-fail) in
        {147}let v_47: bool = (not-caught-fail(v_46) && success?(1-proj-3-tuple(v_46))) in
        {148}let h_8: bitstring = (if v_47 then 3-proj-3-tuple(v_46) else caught-fail) in
        {149}let ck_10: key = (if v_47 then 2-proj-3-tuple(v_46) else caught-fail) in
        {150}let cs_8: cipherstate = (if v_47 then 1-proj-3-tuple(v_46) else caught-fail) in
        {151}let ssi: symmetricstate = (if v_45 then catch-fail((if v_47 then symmetricstatepack(cs_8,ck_10,hash(h_8,ciphertext_1)) else fail-any)) else caught-fail) in
        {152}let v_48: bool = not-caught-fail(ssi) in
        {153}let v_49: bitstring = (if v_36 then catch-fail((if v_38 then (if v_45 then (if v_48 then (ssi,ciphertext_1) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {154}let v_50: bool = (not-caught-fail(v_49) && success?(1-proj-2-tuple(v_49))) in
        {155}let ciphertext_2: bitstring = (if v_50 then 2-proj-2-tuple(v_49) else caught-fail) in
        {156}let ss_9: symmetricstate = (if v_50 then 1-proj-2-tuple(v_49) else caught-fail) in
        {157}let hs_2: handshakestate = (if v_50 then handshakestatepack(ss_9,s_1,m_1,e_2,rs_1,rm_1,re_1,psk_1,initiator_1) else caught-fail) in
        {158}let message_buffer: bitstring = (if v_50 then concat3(ne_1,ns,ciphertext_2) else caught-fail) in
        {159}let (hs_3: handshakestate,message_a: bitstring) = (if v_12 then (if v_14 then (if v_16 then (if v_17 then (if v_20 then (if v_28 then (if v_36 then (if v_50 then (hs_2,message_buffer) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {160}event SendMsg(me,them,stagepack_a(sid_1),msg_a(me,them,sid_1));
        {161}insert statestore(me,them,sid_1,statepack_b(hs_3));
        {162}out(pub, message_a)
    ) | (
        {257}get statestore(=me,=them,=sid_1,statepack_b(hs_4: handshakestate)) in
        {164}in(pub, message_b: bitstring);
        {165}let v_51: bitstring = catch-fail(handshakestateunpack(hs_4)) in
        {166}let v_52: bool = (not-caught-fail(v_51) && success?(1-proj-9-tuple(v_51))) in
        {167}let initiator_2: bool = (if v_52 then 9-proj-9-tuple(v_51) else caught-fail) in
        {168}let psk_2: key = (if v_52 then 8-proj-9-tuple(v_51) else caught-fail) in
        {169}let re_2: key = (if v_52 then 7-proj-9-tuple(v_51) else caught-fail) in
        {170}let rm_2: key = (if v_52 then 6-proj-9-tuple(v_51) else caught-fail) in
        {171}let rs_2: key = (if v_52 then 5-proj-9-tuple(v_51) else caught-fail) in
        {172}let e_4: keypair = (if v_52 then 4-proj-9-tuple(v_51) else caught-fail) in
        {173}let m_2: keypair = (if v_52 then 3-proj-9-tuple(v_51) else caught-fail) in
        {174}let s_2: keypair = (if v_52 then 2-proj-9-tuple(v_51) else caught-fail) in
        {175}let ss_10: symmetricstate = (if v_52 then 1-proj-9-tuple(v_51) else caught-fail) in
        {176}let v_53: bitstring = (if v_52 then catch-fail(deconcat3(message_b)) else caught-fail) in
        {177}let v_54: bool = (not-caught-fail(v_53) && success?(1-proj-3-tuple(v_53))) in
        {178}let ciphertext_3: bitstring = (if v_54 then 3-proj-3-tuple(v_53) else caught-fail) in
        {179}let ns_1: bitstring = (if v_54 then 2-proj-3-tuple(v_53) else caught-fail) in
        {180}let ne_2: bitstring = (if v_54 then 1-proj-3-tuple(v_53) else caught-fail) in
        {181}let valid1: bool = (if v_54 then true else caught-fail) in
        {182}let re_3: key = (if v_54 then ne_2 else caught-fail) in
        {183}let v_55: bitstring = (if v_54 then catch-fail(symmetricstateunpack(ss_10)) else caught-fail) in
        {184}let v_56: bool = (not-caught-fail(v_55) && success?(1-proj-3-tuple(v_55))) in
        {185}let h_9: bitstring = (if v_56 then 3-proj-3-tuple(v_55) else caught-fail) in
        {186}let ck_11: key = (if v_56 then 2-proj-3-tuple(v_55) else caught-fail) in
        {187}let cs_9: cipherstate = (if v_56 then 1-proj-3-tuple(v_55) else caught-fail) in
        {188}let ss_11: symmetricstate = (if v_54 then catch-fail((if v_56 then symmetricstatepack(cs_9,ck_11,hash(h_9,re_3)) else fail-any)) else caught-fail) in
        {189}let v_57: bool = not-caught-fail(ss_11) in
        {190}let v_58: bitstring = (if v_57 then catch-fail(keypairunpack(e_4)) else caught-fail) in
        {191}let v_59: bool = (not-caught-fail(v_58) && success?(1-proj-2-tuple(v_58))) in
        {192}let my_private_key_2: key = (if v_59 then 2-proj-2-tuple(v_58) else caught-fail) in
        {193}let my_public_key_2: key = (if v_59 then 1-proj-2-tuple(v_58) else caught-fail) in
        {194}let input_key_material_2: key = (if v_57 then catch-fail((if v_59 then dhexp(my_private_key_2,re_3) else fail-any)) else caught-fail) in
        {195}let v_60: bool = not-caught-fail(input_key_material_2) in
        {196}let v_61: bitstring = (if v_60 then catch-fail(symmetricstateunpack(ss_11)) else caught-fail) in
        {197}let v_62: bool = (not-caught-fail(v_61) && success?(1-proj-3-tuple(v_61))) in
        {198}let h_10: bitstring = (if v_62 then 3-proj-3-tuple(v_61) else caught-fail) in
        {199}let ck_12: key = (if v_62 then 2-proj-3-tuple(v_61) else caught-fail) in
        {200}let cs_10: cipherstate = (if v_62 then 1-proj-3-tuple(v_61) else caught-fail) in
        {201}let output1_2: key = (if v_62 then hmac_hash1(ck_12,input_key_material_2) else caught-fail) in
        {202}let output2_2: key = (if v_62 then hmac_hash2(ck_12,input_key_material_2) else caught-fail) in
        {203}let output3_2: key = (if v_62 then hmac_hash3(ck_12,input_key_material_2) else caught-fail) in
        {204}let v_63: bitstring = (if v_62 then catch-fail((output1_2,output2_2,output3_2)) else caught-fail) in
        {205}let v_64: bool = (not-caught-fail(v_63) && success?(1-proj-3-tuple(v_63))) in
        {206}let output_1: key = (if v_64 then 3-proj-3-tuple(v_63) else caught-fail) in
        {207}let temp_k_2: key = (if v_64 then 2-proj-3-tuple(v_63) else caught-fail) in
        {208}let ck_13: key = (if v_64 then 1-proj-3-tuple(v_63) else caught-fail) in
        {209}let ss_12: symmetricstate = (if v_57 then catch-fail((if v_60 then (if v_62 then (if v_64 then symmetricstatepack(cipherstatepack(temp_k_2,minnonce),ck_13,h_10) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {210}let v_65: bool = not-caught-fail(ss_12) in
        {211}let v_66: bitstring = (if v_65 then catch-fail(symmetricstateunpack(ss_12)) else caught-fail) in
        {212}let v_67: bool = (not-caught-fail(v_66) && success?(1-proj-3-tuple(v_66))) in
        {213}let h_11: bitstring = (if v_67 then 3-proj-3-tuple(v_66) else caught-fail) in
        {214}let ck_14: key = (if v_67 then 2-proj-3-tuple(v_66) else caught-fail) in
        {215}let cs_11: cipherstate = (if v_67 then 1-proj-3-tuple(v_66) else caught-fail) in
        {216}let v_68: bitstring = (if v_67 then catch-fail(cipherstateunpack(cs_11)) else caught-fail) in
        {217}let v_69: bool = (not-caught-fail(v_68) && success?(1-proj-2-tuple(v_68))) in
        {218}let n_2: nonce = (if v_69 then 2-proj-2-tuple(v_68) else caught-fail) in
        {219}let k_3: key = (if v_69 then 1-proj-2-tuple(v_68) else caught-fail) in
        {220}let d: aead = (if v_69 then catch-fail(decrypt(k_3,n_2,h_11,ciphertext_3)) else caught-fail) in
        {221}let v_70: bool = not-caught-fail(d) in
        {222}let v_71: bitstring = (if v_70 then catch-fail(aeadunpack(d)) else caught-fail) in
        {223}let v_72: bool = (not-caught-fail(v_71) && success?(1-proj-3-tuple(v_71))) in
        {224}let plaintext: bitstring = (if v_72 then 3-proj-3-tuple(v_71) else caught-fail) in
        {225}let adi: bitstring = (if v_72 then 2-proj-3-tuple(v_71) else caught-fail) in
        {226}let valid: bool = (if v_72 then 1-proj-3-tuple(v_71) else caught-fail) in
        {227}let n_3: nonce = (if v_72 then increment_nonce(n_2) else caught-fail) in
        {228}let v_73: bitstring = (if v_72 then catch-fail(cipherstateunpack(cs_11)) else caught-fail) in
        {229}let v_74: bool = (not-caught-fail(v_73) && success?(1-proj-2-tuple(v_73))) in
        {230}let o_1: nonce = (if v_74 then 2-proj-2-tuple(v_73) else caught-fail) in
        {231}let k_4: key = (if v_74 then 1-proj-2-tuple(v_73) else caught-fail) in
        {232}let csi_2: cipherstate = (if v_72 then catch-fail((if v_74 then cipherstatepack(k_4,n_3) else fail-any)) else caught-fail) in
        {233}let v_75: bool = not-caught-fail(csi_2) in
        {234}let v_76: bitstring = (if v_67 then catch-fail((if v_69 then (if v_70 then (if v_72 then (if v_75 then (csi_2,plaintext,valid) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {235}let v_77: bool = (not-caught-fail(v_76) && success?(1-proj-3-tuple(v_76))) in
        {236}let valid_1: bool = (if v_77 then 3-proj-3-tuple(v_76) else caught-fail) in
        {237}let plaintext_1: bitstring = (if v_77 then 2-proj-3-tuple(v_76) else caught-fail) in
        {238}let csi_3: cipherstate = (if v_77 then 1-proj-3-tuple(v_76) else caught-fail) in
        {239}let ss_13: symmetricstate = (if v_77 then symmetricstatepack(csi_3,ck_14,h_11) else caught-fail) in
        {240}let v_78: bitstring = (if v_77 then catch-fail(symmetricstateunpack(ss_13)) else caught-fail) in
        {241}let v_79: bool = (not-caught-fail(v_78) && success?(1-proj-3-tuple(v_78))) in
        {242}let h_12: bitstring = (if v_79 then 3-proj-3-tuple(v_78) else caught-fail) in
        {243}let ck_15: key = (if v_79 then 2-proj-3-tuple(v_78) else caught-fail) in
        {244}let cs_12: cipherstate = (if v_79 then 1-proj-3-tuple(v_78) else caught-fail) in
        {245}let ssi_1: symmetricstate = (if v_77 then catch-fail((if v_79 then symmetricstatepack(cs_12,ck_15,hash(h_12,ciphertext_3)) else fail-any)) else caught-fail) in
        {246}let v_80: bool = not-caught-fail(ssi_1) in
        {247}let v_81: bitstring = (if v_65 then catch-fail((if v_67 then (if v_77 then (if v_80 then (ssi_1,plaintext_1,valid_1) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {248}let v_82: bool = (not-caught-fail(v_81) && success?(1-proj-3-tuple(v_81))) in
        {249}let valid2: bool = (if v_82 then 3-proj-3-tuple(v_81) else caught-fail) in
        {250}let plaintext_2: bitstring = (if v_82 then 2-proj-3-tuple(v_81) else caught-fail) in
        {251}let ss_14: symmetricstate = (if v_82 then 1-proj-3-tuple(v_81) else caught-fail) in
        {252}let v_83: bool = (if v_82 then catch-fail((valid1 && valid2)) else caught-fail) in
        {253}let hs_5: handshakestate = (if v_83 then handshakestatepack(ss_14,s_2,m_2,e_4,rs_2,rm_2,re_3,psk_2,initiator_2) else caught-fail) in
        {254}let (hs_6: handshakestate,plaintext_b: bitstring,valid_2: bool) = (if v_52 then (if v_54 then (if v_57 then (if v_65 then (if v_82 then (if undo-catch-fail(v_83) then (hs_5,plaintext_2,true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {255}event RecvMsg(me,them,stagepack_b(sid_1),plaintext_b);
        {256}insert statestore(me,them,sid_1,statepack_c(hs_6))
    ) | (
        {457}get statestore(=me,=them,=sid_1,statepack_c(hs_7: handshakestate)) in
        {258}let payload_1: bitstring = msg_c(me,them,sid_1) in
        {259}let v_84: bitstring = catch-fail(handshakestateunpack(hs_7)) in
        {260}let v_85: bool = (not-caught-fail(v_84) && success?(1-proj-9-tuple(v_84))) in
        {261}let initiator_3: bool = (if v_85 then 9-proj-9-tuple(v_84) else caught-fail) in
        {262}let psk_3: key = (if v_85 then 8-proj-9-tuple(v_84) else caught-fail) in
        {263}let re_4: key = (if v_85 then 7-proj-9-tuple(v_84) else caught-fail) in
        {264}let rm_3: key = (if v_85 then 6-proj-9-tuple(v_84) else caught-fail) in
        {265}let rs_3: key = (if v_85 then 5-proj-9-tuple(v_84) else caught-fail) in
        {266}let e_5: keypair = (if v_85 then 4-proj-9-tuple(v_84) else caught-fail) in
        {267}let m_3: keypair = (if v_85 then 3-proj-9-tuple(v_84) else caught-fail) in
        {268}let s_3: keypair = (if v_85 then 2-proj-9-tuple(v_84) else caught-fail) in
        {269}let ss_15: symmetricstate = (if v_85 then 1-proj-9-tuple(v_84) else caught-fail) in
        {270}let v_86: bitstring = (if v_85 then catch-fail((empty,empty,empty)) else caught-fail) in
        {271}let v_87: bool = (not-caught-fail(v_86) && success?(1-proj-3-tuple(v_86))) in
        {272}let ciphertext_4: bitstring = (if v_87 then 3-proj-3-tuple(v_86) else caught-fail) in
        {273}let nm: bitstring = (if v_87 then 2-proj-3-tuple(v_86) else caught-fail) in
        {274}let ns_2: bitstring = (if v_87 then 1-proj-3-tuple(v_86) else caught-fail) in
        {275}let basis_3: key = (if v_87 then key_s(me) else caught-fail) in
        {276}let public_key_3: key = (if v_87 then catch-fail(dhexp(basis_3,validkey(g))) else caught-fail) in
        {277}let v_88: bool = not-caught-fail(public_key_3) in
        {278}let s_4: keypair = (if v_87 then catch-fail((if v_88 then keypairpack(validkey(public_key_3),basis_3) else fail-any)) else caught-fail) in
        {279}let v_89: bool = not-caught-fail(s_4) in
        {280}let plaintext_3: bitstring = (if v_89 then catch-fail(getpublickey(s_4)) else caught-fail) in
        {281}let v_90: bool = not-caught-fail(plaintext_3) in
        {282}let v_91: bitstring = (if v_90 then catch-fail(symmetricstateunpack(ss_15)) else caught-fail) in
        {283}let v_92: bool = (not-caught-fail(v_91) && success?(1-proj-3-tuple(v_91))) in
        {284}let h_13: bitstring = (if v_92 then 3-proj-3-tuple(v_91) else caught-fail) in
        {285}let ck_16: key = (if v_92 then 2-proj-3-tuple(v_91) else caught-fail) in
        {286}let cs_13: cipherstate = (if v_92 then 1-proj-3-tuple(v_91) else caught-fail) in
        {287}let v_93: bitstring = (if v_92 then catch-fail(cipherstateunpack(cs_13)) else caught-fail) in
        {288}let v_94: bool = (not-caught-fail(v_93) && success?(1-proj-2-tuple(v_93))) in
        {289}let n_4: nonce = (if v_94 then 2-proj-2-tuple(v_93) else caught-fail) in
        {290}let k_5: key = (if v_94 then 1-proj-2-tuple(v_93) else caught-fail) in
        {291}let e_6: bitstring = (if v_94 then encrypt(k_5,n_4,h_13,plaintext_3) else caught-fail) in
        {292}let n_5: nonce = (if v_94 then increment_nonce(n_4) else caught-fail) in
        {293}let v_95: bitstring = (if v_94 then catch-fail(cipherstateunpack(cs_13)) else caught-fail) in
        {294}let v_96: bool = (not-caught-fail(v_95) && success?(1-proj-2-tuple(v_95))) in
        {295}let o_2: nonce = (if v_96 then 2-proj-2-tuple(v_95) else caught-fail) in
        {296}let k_6: key = (if v_96 then 1-proj-2-tuple(v_95) else caught-fail) in
        {297}let csi_4: cipherstate = (if v_94 then catch-fail((if v_96 then cipherstatepack(k_6,n_5) else fail-any)) else caught-fail) in
        {298}let v_97: bool = not-caught-fail(csi_4) in
        {299}let v_98: bitstring = (if v_92 then catch-fail((if v_94 then (if v_97 then (csi_4,e_6) else fail-any) else fail-any)) else caught-fail) in
        {300}let v_99: bool = (not-caught-fail(v_98) && success?(1-proj-2-tuple(v_98))) in
        {301}let ciphertext_5: bitstring = (if v_99 then 2-proj-2-tuple(v_98) else caught-fail) in
        {302}let csi_5: cipherstate = (if v_99 then 1-proj-2-tuple(v_98) else caught-fail) in
        {303}let ss_16: symmetricstate = (if v_99 then symmetricstatepack(csi_5,ck_16,h_13) else caught-fail) in
        {304}let v_100: bitstring = (if v_99 then catch-fail(symmetricstateunpack(ss_16)) else caught-fail) in
        {305}let v_101: bool = (not-caught-fail(v_100) && success?(1-proj-3-tuple(v_100))) in
        {306}let h_14: bitstring = (if v_101 then 3-proj-3-tuple(v_100) else caught-fail) in
        {307}let ck_17: key = (if v_101 then 2-proj-3-tuple(v_100) else caught-fail) in
        {308}let cs_14: cipherstate = (if v_101 then 1-proj-3-tuple(v_100) else caught-fail) in
        {309}let ssi_2: symmetricstate = (if v_99 then catch-fail((if v_101 then symmetricstatepack(cs_14,ck_17,hash(h_14,ciphertext_5)) else fail-any)) else caught-fail) in
        {310}let v_102: bool = not-caught-fail(ssi_2) in
        {311}let v_103: bitstring = (if v_89 then catch-fail((if v_90 then (if v_92 then (if v_99 then (if v_102 then (ssi_2,ciphertext_5) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {312}let v_104: bool = (not-caught-fail(v_103) && success?(1-proj-2-tuple(v_103))) in
        {313}let ns_3: bitstring = (if v_104 then 2-proj-2-tuple(v_103) else caught-fail) in
        {314}let ss_17: symmetricstate = (if v_104 then 1-proj-2-tuple(v_103) else caught-fail) in
        {315}let basis_4: key = (if v_104 then key_m(me) else caught-fail) in
        {316}let public_key_4: key = (if v_104 then catch-fail(dhexp(basis_4,validkey(g))) else caught-fail) in
        {317}let v_105: bool = not-caught-fail(public_key_4) in
        {318}let m_4: keypair = (if v_104 then catch-fail((if v_105 then keypairpack(validkey(public_key_4),basis_4) else fail-any)) else caught-fail) in
        {319}let v_106: bool = not-caught-fail(m_4) in
        {320}let plaintext_4: bitstring = (if v_106 then catch-fail(getpublickey(m_4)) else caught-fail) in
        {321}let v_107: bool = not-caught-fail(plaintext_4) in
        {322}let v_108: bitstring = (if v_107 then catch-fail(symmetricstateunpack(ss_17)) else caught-fail) in
        {323}let v_109: bool = (not-caught-fail(v_108) && success?(1-proj-3-tuple(v_108))) in
        {324}let h_15: bitstring = (if v_109 then 3-proj-3-tuple(v_108) else caught-fail) in
        {325}let ck_18: key = (if v_109 then 2-proj-3-tuple(v_108) else caught-fail) in
        {326}let cs_15: cipherstate = (if v_109 then 1-proj-3-tuple(v_108) else caught-fail) in
        {327}let v_110: bitstring = (if v_109 then catch-fail(cipherstateunpack(cs_15)) else caught-fail) in
        {328}let v_111: bool = (not-caught-fail(v_110) && success?(1-proj-2-tuple(v_110))) in
        {329}let n_6: nonce = (if v_111 then 2-proj-2-tuple(v_110) else caught-fail) in
        {330}let k_7: key = (if v_111 then 1-proj-2-tuple(v_110) else caught-fail) in
        {331}let e_7: bitstring = (if v_111 then encrypt(k_7,n_6,h_15,plaintext_4) else caught-fail) in
        {332}let n_7: nonce = (if v_111 then increment_nonce(n_6) else caught-fail) in
        {333}let v_112: bitstring = (if v_111 then catch-fail(cipherstateunpack(cs_15)) else caught-fail) in
        {334}let v_113: bool = (not-caught-fail(v_112) && success?(1-proj-2-tuple(v_112))) in
        {335}let o_3: nonce = (if v_113 then 2-proj-2-tuple(v_112) else caught-fail) in
        {336}let k_8: key = (if v_113 then 1-proj-2-tuple(v_112) else caught-fail) in
        {337}let csi_6: cipherstate = (if v_111 then catch-fail((if v_113 then cipherstatepack(k_8,n_7) else fail-any)) else caught-fail) in
        {338}let v_114: bool = not-caught-fail(csi_6) in
        {339}let v_115: bitstring = (if v_109 then catch-fail((if v_111 then (if v_114 then (csi_6,e_7) else fail-any) else fail-any)) else caught-fail) in
        {340}let v_116: bool = (not-caught-fail(v_115) && success?(1-proj-2-tuple(v_115))) in
        {341}let ciphertext_6: bitstring = (if v_116 then 2-proj-2-tuple(v_115) else caught-fail) in
        {342}let csi_7: cipherstate = (if v_116 then 1-proj-2-tuple(v_115) else caught-fail) in
        {343}let ss_18: symmetricstate = (if v_116 then symmetricstatepack(csi_7,ck_18,h_15) else caught-fail) in
        {344}let v_117: bitstring = (if v_116 then catch-fail(symmetricstateunpack(ss_18)) else caught-fail) in
        {345}let v_118: bool = (not-caught-fail(v_117) && success?(1-proj-3-tuple(v_117))) in
        {346}let h_16: bitstring = (if v_118 then 3-proj-3-tuple(v_117) else caught-fail) in
        {347}let ck_19: key = (if v_118 then 2-proj-3-tuple(v_117) else caught-fail) in
        {348}let cs_16: cipherstate = (if v_118 then 1-proj-3-tuple(v_117) else caught-fail) in
        {349}let ssi_3: symmetricstate = (if v_116 then catch-fail((if v_118 then symmetricstatepack(cs_16,ck_19,hash(h_16,ciphertext_6)) else fail-any)) else caught-fail) in
        {350}let v_119: bool = not-caught-fail(ssi_3) in
        {351}let v_120: bitstring = (if v_106 then catch-fail((if v_107 then (if v_109 then (if v_116 then (if v_119 then (ssi_3,ciphertext_6) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {352}let v_121: bool = (not-caught-fail(v_120) && success?(1-proj-2-tuple(v_120))) in
        {353}let nm_1: bitstring = (if v_121 then 2-proj-2-tuple(v_120) else caught-fail) in
        {354}let ss_19: symmetricstate = (if v_121 then 1-proj-2-tuple(v_120) else caught-fail) in
        {355}let v_122: bitstring = (if v_121 then catch-fail(keypairunpack(s_4)) else caught-fail) in
        {356}let v_123: bool = (not-caught-fail(v_122) && success?(1-proj-2-tuple(v_122))) in
        {357}let my_private_key_3: key = (if v_123 then 2-proj-2-tuple(v_122) else caught-fail) in
        {358}let my_public_key_3: key = (if v_123 then 1-proj-2-tuple(v_122) else caught-fail) in
        {359}let input_key_material_3: key = (if v_121 then catch-fail((if v_123 then dhexp(my_private_key_3,re_4) else fail-any)) else caught-fail) in
        {360}let v_124: bool = not-caught-fail(input_key_material_3) in
        {361}let v_125: bitstring = (if v_124 then catch-fail(symmetricstateunpack(ss_19)) else caught-fail) in
        {362}let v_126: bool = (not-caught-fail(v_125) && success?(1-proj-3-tuple(v_125))) in
        {363}let h_17: bitstring = (if v_126 then 3-proj-3-tuple(v_125) else caught-fail) in
        {364}let ck_20: key = (if v_126 then 2-proj-3-tuple(v_125) else caught-fail) in
        {365}let cs_17: cipherstate = (if v_126 then 1-proj-3-tuple(v_125) else caught-fail) in
        {366}let output1_3: key = (if v_126 then hmac_hash1(ck_20,input_key_material_3) else caught-fail) in
        {367}let output2_3: key = (if v_126 then hmac_hash2(ck_20,input_key_material_3) else caught-fail) in
        {368}let output3_3: key = (if v_126 then hmac_hash3(ck_20,input_key_material_3) else caught-fail) in
        {369}let v_127: bitstring = (if v_126 then catch-fail((output1_3,output2_3,output3_3)) else caught-fail) in
        {370}let v_128: bool = (not-caught-fail(v_127) && success?(1-proj-3-tuple(v_127))) in
        {371}let output_2: key = (if v_128 then 3-proj-3-tuple(v_127) else caught-fail) in
        {372}let temp_k_3: key = (if v_128 then 2-proj-3-tuple(v_127) else caught-fail) in
        {373}let ck_21: key = (if v_128 then 1-proj-3-tuple(v_127) else caught-fail) in
        {374}let ss_20: symmetricstate = (if v_121 then catch-fail((if v_124 then (if v_126 then (if v_128 then symmetricstatepack(cipherstatepack(temp_k_3,minnonce),ck_21,h_17) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {375}let v_129: bool = not-caught-fail(ss_20) in
        {376}let v_130: bitstring = (if v_129 then catch-fail(keypairunpack(m_4)) else caught-fail) in
        {377}let v_131: bool = (not-caught-fail(v_130) && success?(1-proj-2-tuple(v_130))) in
        {378}let my_private_key_4: key = (if v_131 then 2-proj-2-tuple(v_130) else caught-fail) in
        {379}let my_public_key_4: key = (if v_131 then 1-proj-2-tuple(v_130) else caught-fail) in
        {380}let input_key_material_4: key = (if v_129 then catch-fail((if v_131 then dhexp(my_private_key_4,re_4) else fail-any)) else caught-fail) in
        {381}let v_132: bool = not-caught-fail(input_key_material_4) in
        {382}let v_133: bitstring = (if v_132 then catch-fail(symmetricstateunpack(ss_20)) else caught-fail) in
        {383}let v_134: bool = (not-caught-fail(v_133) && success?(1-proj-3-tuple(v_133))) in
        {384}let h_18: bitstring = (if v_134 then 3-proj-3-tuple(v_133) else caught-fail) in
        {385}let ck_22: key = (if v_134 then 2-proj-3-tuple(v_133) else caught-fail) in
        {386}let cs_18: cipherstate = (if v_134 then 1-proj-3-tuple(v_133) else caught-fail) in
        {387}let output1_4: key = (if v_134 then hmac_hash1(ck_22,input_key_material_4) else caught-fail) in
        {388}let output2_4: key = (if v_134 then hmac_hash2(ck_22,input_key_material_4) else caught-fail) in
        {389}let output3_4: key = (if v_134 then hmac_hash3(ck_22,input_key_material_4) else caught-fail) in
        {390}let v_135: bitstring = (if v_134 then catch-fail((output1_4,output2_4,output3_4)) else caught-fail) in
        {391}let v_136: bool = (not-caught-fail(v_135) && success?(1-proj-3-tuple(v_135))) in
        {392}let output_4: key = (if v_136 then 3-proj-3-tuple(v_135) else caught-fail) in
        {393}let temp_k_4: key = (if v_136 then 2-proj-3-tuple(v_135) else caught-fail) in
        {394}let ck_23: key = (if v_136 then 1-proj-3-tuple(v_135) else caught-fail) in
        {395}let ss_21: symmetricstate = (if v_129 then catch-fail((if v_132 then (if v_134 then (if v_136 then symmetricstatepack(cipherstatepack(temp_k_4,minnonce),ck_23,h_18) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {396}let v_137: bool = not-caught-fail(ss_21) in
        {397}let v_138: bitstring = (if v_137 then catch-fail(symmetricstateunpack(ss_21)) else caught-fail) in
        {398}let v_139: bool = (not-caught-fail(v_138) && success?(1-proj-3-tuple(v_138))) in
        {399}let h_19: bitstring = (if v_139 then 3-proj-3-tuple(v_138) else caught-fail) in
        {400}let ck_24: key = (if v_139 then 2-proj-3-tuple(v_138) else caught-fail) in
        {401}let cs_19: cipherstate = (if v_139 then 1-proj-3-tuple(v_138) else caught-fail) in
        {402}let v_140: bitstring = (if v_139 then catch-fail(cipherstateunpack(cs_19)) else caught-fail) in
        {403}let v_141: bool = (not-caught-fail(v_140) && success?(1-proj-2-tuple(v_140))) in
        {404}let n_8: nonce = (if v_141 then 2-proj-2-tuple(v_140) else caught-fail) in
        {405}let k_9: key = (if v_141 then 1-proj-2-tuple(v_140) else caught-fail) in
        {406}let e_8: bitstring = (if v_141 then encrypt(k_9,n_8,h_19,payload_1) else caught-fail) in
        {407}let n_9: nonce = (if v_141 then increment_nonce(n_8) else caught-fail) in
        {408}let v_142: bitstring = (if v_141 then catch-fail(cipherstateunpack(cs_19)) else caught-fail) in
        {409}let v_143: bool = (not-caught-fail(v_142) && success?(1-proj-2-tuple(v_142))) in
        {410}let o_4: nonce = (if v_143 then 2-proj-2-tuple(v_142) else caught-fail) in
        {411}let k_10: key = (if v_143 then 1-proj-2-tuple(v_142) else caught-fail) in
        {412}let csi_8: cipherstate = (if v_141 then catch-fail((if v_143 then cipherstatepack(k_10,n_9) else fail-any)) else caught-fail) in
        {413}let v_144: bool = not-caught-fail(csi_8) in
        {414}let v_145: bitstring = (if v_139 then catch-fail((if v_141 then (if v_144 then (csi_8,e_8) else fail-any) else fail-any)) else caught-fail) in
        {415}let v_146: bool = (not-caught-fail(v_145) && success?(1-proj-2-tuple(v_145))) in
        {416}let ciphertext_7: bitstring = (if v_146 then 2-proj-2-tuple(v_145) else caught-fail) in
        {417}let csi_9: cipherstate = (if v_146 then 1-proj-2-tuple(v_145) else caught-fail) in
        {418}let ss_22: symmetricstate = (if v_146 then symmetricstatepack(csi_9,ck_24,h_19) else caught-fail) in
        {419}let v_147: bitstring = (if v_146 then catch-fail(symmetricstateunpack(ss_22)) else caught-fail) in
        {420}let v_148: bool = (not-caught-fail(v_147) && success?(1-proj-3-tuple(v_147))) in
        {421}let h_20: bitstring = (if v_148 then 3-proj-3-tuple(v_147) else caught-fail) in
        {422}let ck_25: key = (if v_148 then 2-proj-3-tuple(v_147) else caught-fail) in
        {423}let cs_20: cipherstate = (if v_148 then 1-proj-3-tuple(v_147) else caught-fail) in
        {424}let ssi_4: symmetricstate = (if v_146 then catch-fail((if v_148 then symmetricstatepack(cs_20,ck_25,hash(h_20,ciphertext_7)) else fail-any)) else caught-fail) in
        {425}let v_149: bool = not-caught-fail(ssi_4) in
        {426}let v_150: bitstring = (if v_137 then catch-fail((if v_139 then (if v_146 then (if v_149 then (ssi_4,ciphertext_7) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {427}let v_151: bool = (not-caught-fail(v_150) && success?(1-proj-2-tuple(v_150))) in
        {428}let ciphertext_8: bitstring = (if v_151 then 2-proj-2-tuple(v_150) else caught-fail) in
        {429}let ss_23: symmetricstate = (if v_151 then 1-proj-2-tuple(v_150) else caught-fail) in
        {430}let hs_8: handshakestate = (if v_151 then handshakestatepack(ss_23,s_4,m_4,e_5,rs_3,rm_3,re_4,psk_3,initiator_3) else caught-fail) in
        {431}let message_buffer_1: bitstring = (if v_151 then concat3(ns_3,nm_1,ciphertext_8) else caught-fail) in
        {432}let v_152: bitstring = (if v_151 then catch-fail(symmetricstateunpack(ss_23)) else caught-fail) in
        {433}let v_153: bool = (not-caught-fail(v_152) && success?(1-proj-3-tuple(v_152))) in
        {434}let h_21: bitstring = (if v_153 then 3-proj-3-tuple(v_152) else caught-fail) in
        {435}let ck_26: key = (if v_153 then 2-proj-3-tuple(v_152) else caught-fail) in
        {436}let cs_21: cipherstate = (if v_153 then 1-proj-3-tuple(v_152) else caught-fail) in
        {437}let input_key_material_5: key = (if v_153 then zero else caught-fail) in
        {438}let output1_5: key = (if v_153 then hmac_hash1(ck_26,input_key_material_5) else caught-fail) in
        {439}let output2_5: key = (if v_153 then hmac_hash2(ck_26,input_key_material_5) else caught-fail) in
        {440}let output3_5: key = (if v_153 then hmac_hash3(ck_26,input_key_material_5) else caught-fail) in
        {441}let v_154: bitstring = (if v_153 then catch-fail((output1_5,output2_5,output3_5)) else caught-fail) in
        {442}let v_155: bool = (not-caught-fail(v_154) && success?(1-proj-3-tuple(v_154))) in
        {443}let temp_k3: key = (if v_155 then 3-proj-3-tuple(v_154) else caught-fail) in
        {444}let temp_k2: key = (if v_155 then 2-proj-3-tuple(v_154) else caught-fail) in
        {445}let temp_k1: key = (if v_155 then 1-proj-3-tuple(v_154) else caught-fail) in
        {446}let cs1: cipherstate = (if v_155 then cipherstatepack(temp_k1,minnonce) else caught-fail) in
        {447}let cs2: cipherstate = (if v_155 then cipherstatepack(temp_k2,minnonce) else caught-fail) in
        {448}let v_156: bitstring = (if v_151 then catch-fail((if v_153 then (if v_155 then (ss_23,cs1,cs2) else fail-any) else fail-any)) else caught-fail) in
        {449}let v_157: bool = (not-caught-fail(v_156) && success?(1-proj-3-tuple(v_156))) in
        {450}let cs2_1: cipherstate = (if v_157 then 3-proj-3-tuple(v_156) else caught-fail) in
        {451}let cs1_1: cipherstate = (if v_157 then 2-proj-3-tuple(v_156) else caught-fail) in
        {452}let ssi_5: symmetricstate = (if v_157 then 1-proj-3-tuple(v_156) else caught-fail) in
        {453}let (hs_9: handshakestate,message_c: bitstring,cs1_2: cipherstate,cs2_2: cipherstate) = (if v_85 then (if v_87 then (if v_89 then (if v_104 then (if v_106 then (if v_121 then (if v_129 then (if v_137 then (if v_151 then (if v_157 then (hs_8,message_buffer_1,cs1_1,cs2_1) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {454}event SendMsg(me,them,stagepack_c(sid_1),msg_c(me,them,sid_1));
        {455}insert statestore(me,them,sid_1,statepack_d(hs_9,cs1_2,cs2_2));
        {456}out(pub, message_c)
    ) | (
        {458}!
        {524}get statestore(=me,=them,=sid_1,statepack_d(hs_10: handshakestate,cs1_3: cipherstate,cs2_3: cipherstate)) in
        {459}let hs_11: handshakestate = handshakestatesetcs(hs_10,cs2_3) in
        {460}in(pub, message_d: bitstring);
        {461}let v_158: bitstring = catch-fail(handshakestateunpack(hs_11)) in
        {462}let v_159: bool = (not-caught-fail(v_158) && success?(1-proj-9-tuple(v_158))) in
        {463}let initiator_4: bool = (if v_159 then 9-proj-9-tuple(v_158) else caught-fail) in
        {464}let psk_4: key = (if v_159 then 8-proj-9-tuple(v_158) else caught-fail) in
        {465}let re_5: key = (if v_159 then 7-proj-9-tuple(v_158) else caught-fail) in
        {466}let rm_4: key = (if v_159 then 6-proj-9-tuple(v_158) else caught-fail) in
        {467}let rs_4: key = (if v_159 then 5-proj-9-tuple(v_158) else caught-fail) in
        {468}let e_9: keypair = (if v_159 then 4-proj-9-tuple(v_158) else caught-fail) in
        {469}let m_5: keypair = (if v_159 then 3-proj-9-tuple(v_158) else caught-fail) in
        {470}let s_5: keypair = (if v_159 then 2-proj-9-tuple(v_158) else caught-fail) in
        {471}let ss_24: symmetricstate = (if v_159 then 1-proj-9-tuple(v_158) else caught-fail) in
        {472}let v_160: bitstring = (if v_159 then catch-fail(deconcat3(message_d)) else caught-fail) in
        {473}let v_161: bool = (not-caught-fail(v_160) && success?(1-proj-3-tuple(v_160))) in
        {474}let ciphertext_9: bitstring = (if v_161 then 3-proj-3-tuple(v_160) else caught-fail) in
        {475}let ns_4: bitstring = (if v_161 then 2-proj-3-tuple(v_160) else caught-fail) in
        {476}let ne_3: bitstring = (if v_161 then 1-proj-3-tuple(v_160) else caught-fail) in
        {477}let valid1_1: bool = (if v_161 then true else caught-fail) in
        {478}let v_162: bitstring = (if v_161 then catch-fail(symmetricstateunpack(ss_24)) else caught-fail) in
        {479}let v_163: bool = (not-caught-fail(v_162) && success?(1-proj-3-tuple(v_162))) in
        {480}let h_22: bitstring = (if v_163 then 3-proj-3-tuple(v_162) else caught-fail) in
        {481}let ck_27: key = (if v_163 then 2-proj-3-tuple(v_162) else caught-fail) in
        {482}let cs_22: cipherstate = (if v_163 then 1-proj-3-tuple(v_162) else caught-fail) in
        {483}let v_164: bitstring = (if v_163 then catch-fail(cipherstateunpack(cs_22)) else caught-fail) in
        {484}let v_165: bool = (not-caught-fail(v_164) && success?(1-proj-2-tuple(v_164))) in
        {485}let n_10: nonce = (if v_165 then 2-proj-2-tuple(v_164) else caught-fail) in
        {486}let k_11: key = (if v_165 then 1-proj-2-tuple(v_164) else caught-fail) in
        {487}let d_1: aead = (if v_165 then catch-fail(decrypt(k_11,n_10,h_22,ciphertext_9)) else caught-fail) in
        {488}let v_166: bool = not-caught-fail(d_1) in
        {489}let v_167: bitstring = (if v_166 then catch-fail(aeadunpack(d_1)) else caught-fail) in
        {490}let v_168: bool = (not-caught-fail(v_167) && success?(1-proj-3-tuple(v_167))) in
        {491}let plaintext_5: bitstring = (if v_168 then 3-proj-3-tuple(v_167) else caught-fail) in
        {492}let adi_1: bitstring = (if v_168 then 2-proj-3-tuple(v_167) else caught-fail) in
        {493}let valid_3: bool = (if v_168 then 1-proj-3-tuple(v_167) else caught-fail) in
        {494}let n_11: nonce = (if v_168 then increment_nonce(n_10) else caught-fail) in
        {495}let v_169: bitstring = (if v_168 then catch-fail(cipherstateunpack(cs_22)) else caught-fail) in
        {496}let v_170: bool = (not-caught-fail(v_169) && success?(1-proj-2-tuple(v_169))) in
        {497}let o_5: nonce = (if v_170 then 2-proj-2-tuple(v_169) else caught-fail) in
        {498}let k_12: key = (if v_170 then 1-proj-2-tuple(v_169) else caught-fail) in
        {499}let csi_10: cipherstate = (if v_168 then catch-fail((if v_170 then cipherstatepack(k_12,n_11) else fail-any)) else caught-fail) in
        {500}let v_171: bool = not-caught-fail(csi_10) in
        {501}let v_172: bitstring = (if v_163 then catch-fail((if v_165 then (if v_166 then (if v_168 then (if v_171 then (csi_10,plaintext_5,valid_3) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {502}let v_173: bool = (not-caught-fail(v_172) && success?(1-proj-3-tuple(v_172))) in
        {503}let valid_4: bool = (if v_173 then 3-proj-3-tuple(v_172) else caught-fail) in
        {504}let plaintext_6: bitstring = (if v_173 then 2-proj-3-tuple(v_172) else caught-fail) in
        {505}let csi_11: cipherstate = (if v_173 then 1-proj-3-tuple(v_172) else caught-fail) in
        {506}let ss_25: symmetricstate = (if v_173 then symmetricstatepack(csi_11,ck_27,h_22) else caught-fail) in
        {507}let v_174: bitstring = (if v_173 then catch-fail(symmetricstateunpack(ss_25)) else caught-fail) in
        {508}let v_175: bool = (not-caught-fail(v_174) && success?(1-proj-3-tuple(v_174))) in
        {509}let h_23: bitstring = (if v_175 then 3-proj-3-tuple(v_174) else caught-fail) in
        {510}let ck_28: key = (if v_175 then 2-proj-3-tuple(v_174) else caught-fail) in
        {511}let cs_23: cipherstate = (if v_175 then 1-proj-3-tuple(v_174) else caught-fail) in
        {512}let ssi_6: symmetricstate = (if v_173 then catch-fail((if v_175 then symmetricstatepack(cs_23,ck_28,hash(h_23,ciphertext_9)) else fail-any)) else caught-fail) in
        {513}let v_176: bool = not-caught-fail(ssi_6) in
        {514}let v_177: bitstring = (if v_161 then catch-fail((if v_163 then (if v_173 then (if v_176 then (ssi_6,plaintext_6,valid_4) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {515}let v_178: bool = (not-caught-fail(v_177) && success?(1-proj-3-tuple(v_177))) in
        {516}let valid2_1: bool = (if v_178 then 3-proj-3-tuple(v_177) else caught-fail) in
        {517}let plaintext_7: bitstring = (if v_178 then 2-proj-3-tuple(v_177) else caught-fail) in
        {518}let ss_26: symmetricstate = (if v_178 then 1-proj-3-tuple(v_177) else caught-fail) in
        {519}let v_179: bool = (if v_178 then catch-fail((valid1_1 && valid2_1)) else caught-fail) in
        {520}let hs_12: handshakestate = (if v_179 then handshakestatepack(ss_26,s_5,m_5,e_9,rs_4,rm_4,re_5,psk_4,initiator_4) else caught-fail) in
        {521}let (hs_13: handshakestate,plaintext_d: bitstring,valid_5: bool) = (if v_159 then (if v_161 then (if v_178 then (if undo-catch-fail(v_179) then (hs_12,plaintext_7,true) else fail-any) else fail-any) else fail-any) else fail-any) in
        {522}event RecvMsg(me,them,stagepack_d(sid_1),plaintext_d);
        {523}insert statestore(me,them,sid_1,statepack_e(hs_13,cs1_3,handshakestategetcs(hs_13)))
    ) | (
        {525}!
        {582}get statestore(=me,=them,=sid_1,statepack_e(hs_14: handshakestate,cs1_4: cipherstate,cs2_4: cipherstate)) in
        {526}let hs_15: handshakestate = handshakestatesetcs(hs_14,cs1_4) in
        {527}let payload_2: bitstring = msg_e(me,them,sid_1) in
        {528}let v_180: bitstring = catch-fail(handshakestateunpack(hs_15)) in
        {529}let v_181: bool = (not-caught-fail(v_180) && success?(1-proj-9-tuple(v_180))) in
        {530}let initiator_5: bool = (if v_181 then 9-proj-9-tuple(v_180) else caught-fail) in
        {531}let psk_5: key = (if v_181 then 8-proj-9-tuple(v_180) else caught-fail) in
        {532}let re_6: key = (if v_181 then 7-proj-9-tuple(v_180) else caught-fail) in
        {533}let rm_5: key = (if v_181 then 6-proj-9-tuple(v_180) else caught-fail) in
        {534}let rs_5: key = (if v_181 then 5-proj-9-tuple(v_180) else caught-fail) in
        {535}let e_10: keypair = (if v_181 then 4-proj-9-tuple(v_180) else caught-fail) in
        {536}let m_6: keypair = (if v_181 then 3-proj-9-tuple(v_180) else caught-fail) in
        {537}let s_6: keypair = (if v_181 then 2-proj-9-tuple(v_180) else caught-fail) in
        {538}let ss_27: symmetricstate = (if v_181 then 1-proj-9-tuple(v_180) else caught-fail) in
        {539}let v_182: bitstring = (if v_181 then catch-fail((empty,empty,empty)) else caught-fail) in
        {540}let v_183: bool = (not-caught-fail(v_182) && success?(1-proj-3-tuple(v_182))) in
        {541}let ciphertext_10: bitstring = (if v_183 then 3-proj-3-tuple(v_182) else caught-fail) in
        {542}let ns_5: bitstring = (if v_183 then 2-proj-3-tuple(v_182) else caught-fail) in
        {543}let ne_4: bitstring = (if v_183 then 1-proj-3-tuple(v_182) else caught-fail) in
        {544}let v_184: bitstring = (if v_183 then catch-fail(symmetricstateunpack(ss_27)) else caught-fail) in
        {545}let v_185: bool = (not-caught-fail(v_184) && success?(1-proj-3-tuple(v_184))) in
        {546}let h_24: bitstring = (if v_185 then 3-proj-3-tuple(v_184) else caught-fail) in
        {547}let ck_29: key = (if v_185 then 2-proj-3-tuple(v_184) else caught-fail) in
        {548}let cs_24: cipherstate = (if v_185 then 1-proj-3-tuple(v_184) else caught-fail) in
        {549}let v_186: bitstring = (if v_185 then catch-fail(cipherstateunpack(cs_24)) else caught-fail) in
        {550}let v_187: bool = (not-caught-fail(v_186) && success?(1-proj-2-tuple(v_186))) in
        {551}let n_12: nonce = (if v_187 then 2-proj-2-tuple(v_186) else caught-fail) in
        {552}let k_13: key = (if v_187 then 1-proj-2-tuple(v_186) else caught-fail) in
        {553}let e_11: bitstring = (if v_187 then encrypt(k_13,n_12,h_24,payload_2) else caught-fail) in
        {554}let n_13: nonce = (if v_187 then increment_nonce(n_12) else caught-fail) in
        {555}let v_188: bitstring = (if v_187 then catch-fail(cipherstateunpack(cs_24)) else caught-fail) in
        {556}let v_189: bool = (not-caught-fail(v_188) && success?(1-proj-2-tuple(v_188))) in
        {557}let o_6: nonce = (if v_189 then 2-proj-2-tuple(v_188) else caught-fail) in
        {558}let k_14: key = (if v_189 then 1-proj-2-tuple(v_188) else caught-fail) in
        {559}let csi_12: cipherstate = (if v_187 then catch-fail((if v_189 then cipherstatepack(k_14,n_13) else fail-any)) else caught-fail) in
        {560}let v_190: bool = not-caught-fail(csi_12) in
        {561}let v_191: bitstring = (if v_185 then catch-fail((if v_187 then (if v_190 then (csi_12,e_11) else fail-any) else fail-any)) else caught-fail) in
        {562}let v_192: bool = (not-caught-fail(v_191) && success?(1-proj-2-tuple(v_191))) in
        {563}let ciphertext_11: bitstring = (if v_192 then 2-proj-2-tuple(v_191) else caught-fail) in
        {564}let csi_13: cipherstate = (if v_192 then 1-proj-2-tuple(v_191) else caught-fail) in
        {565}let ss_28: symmetricstate = (if v_192 then symmetricstatepack(csi_13,ck_29,h_24) else caught-fail) in
        {566}let v_193: bitstring = (if v_192 then catch-fail(symmetricstateunpack(ss_28)) else caught-fail) in
        {567}let v_194: bool = (not-caught-fail(v_193) && success?(1-proj-3-tuple(v_193))) in
        {568}let h_25: bitstring = (if v_194 then 3-proj-3-tuple(v_193) else caught-fail) in
        {569}let ck_30: key = (if v_194 then 2-proj-3-tuple(v_193) else caught-fail) in
        {570}let cs_25: cipherstate = (if v_194 then 1-proj-3-tuple(v_193) else caught-fail) in
        {571}let ssi_7: symmetricstate = (if v_192 then catch-fail((if v_194 then symmetricstatepack(cs_25,ck_30,hash(h_25,ciphertext_11)) else fail-any)) else caught-fail) in
        {572}let v_195: bool = not-caught-fail(ssi_7) in
        {573}let v_196: bitstring = (if v_183 then catch-fail((if v_185 then (if v_192 then (if v_195 then (ssi_7,ciphertext_11) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {574}let v_197: bool = (not-caught-fail(v_196) && success?(1-proj-2-tuple(v_196))) in
        {575}let ciphertext_12: bitstring = (if v_197 then 2-proj-2-tuple(v_196) else caught-fail) in
        {576}let ss_29: symmetricstate = (if v_197 then 1-proj-2-tuple(v_196) else caught-fail) in
        {577}let hs_16: handshakestate = (if v_197 then handshakestatepack(ss_29,s_6,m_6,e_10,rs_5,rm_5,re_6,psk_5,initiator_5) else caught-fail) in
        {578}let message_buffer_2: bitstring = (if v_197 then concat3(ne_4,ns_5,ciphertext_12) else caught-fail) in
        {579}let (hs_17: handshakestate,message_e: bitstring) = (if v_181 then (if v_183 then (if v_197 then (hs_16,message_buffer_2) else fail-any) else fail-any) else fail-any) in
        {580}event SendMsg(me,them,stagepack_e(sid_1),msg_e(me,them,sid_1));
        {581}out(pub, message_e)
    ) | (
        {583}event LeakS(phase0,me);
        {584}event LeakM(phase0,me);
        {585}out(pub, (key_s(me),key_m(me)))
    ) | (
        {586}phase 1;
        {587}event LeakS(phase1,me);
        {588}event LeakM(phase1,me);
        {589}out(pub, (key_s(me),key_m(me)))
    )
) | (
    {590}let me_1: principal = alice in
    {591}let them_1: principal = charlie in
    {592}let sid_2: sessionid = sid in
    {593}let s_7: keypair = keypairpack(empty,empty) in
    {594}let m_7: keypair = keypairpack(empty,empty) in
    {595}out(pub, (getpublickey(s_7),getpublickey(m_7)));
    (
        {596}let e_12: keypair = keypairpack(empty,empty) in
        {597}let basis_5: key = key_s(them_1) in
        {598}let public_key_5: key = catch-fail(dhexp(basis_5,validkey(g))) in
        {599}let v_198: bool = not-caught-fail(public_key_5) in
        {600}let rs_6: key = getpublickey((if v_198 then keypairpack(validkey(public_key_5),basis_5) else fail-any)) in
        {601}let basis_6: key = key_m(them_1) in
        {602}let public_key_6: key = catch-fail(dhexp(basis_6,validkey(g))) in
        {603}let v_199: bool = not-caught-fail(public_key_6) in
        {604}let rm_6: key = getpublickey((if v_199 then keypairpack(validkey(public_key_6),basis_6) else fail-any)) in
        {605}let re_7: key = empty in
        {606}let prologue_1: bitstring = empty in
        {607}let psk_6: key = empty in
        {608}let protocol_name_1: bitstring = somename in
        {609}let h_26: bitstring = hash(protocol_name_1,empty) in
        {610}let ck_31: key = h_26 in
        {611}let k_15: key = empty in
        {612}let cs_26: cipherstate = cipherstatepack(k_15,minnonce) in
        {613}let ss_30: symmetricstate = symmetricstatepack(cs_26,ck_31,h_26) in
        {614}let v_200: bitstring = catch-fail(symmetricstateunpack(ss_30)) in
        {615}let v_201: bool = (not-caught-fail(v_200) && success?(1-proj-3-tuple(v_200))) in
        {616}let h_27: bitstring = (if v_201 then 3-proj-3-tuple(v_200) else caught-fail) in
        {617}let ck_32: key = (if v_201 then 2-proj-3-tuple(v_200) else caught-fail) in
        {618}let cs_27: cipherstate = (if v_201 then 1-proj-3-tuple(v_200) else caught-fail) in
        {619}let ss_31: symmetricstate = catch-fail((if v_201 then symmetricstatepack(cs_27,ck_32,hash(h_27,prologue_1)) else fail-any)) in
        {620}let v_202: bool = not-caught-fail(ss_31) in
        {621}let v_203: bitstring = (if v_202 then catch-fail(symmetricstateunpack(ss_31)) else caught-fail) in
        {622}let v_204: bool = (not-caught-fail(v_203) && success?(1-proj-3-tuple(v_203))) in
        {623}let h_28: bitstring = (if v_204 then 3-proj-3-tuple(v_203) else caught-fail) in
        {624}let ck_33: key = (if v_204 then 2-proj-3-tuple(v_203) else caught-fail) in
        {625}let cs_28: cipherstate = (if v_204 then 1-proj-3-tuple(v_203) else caught-fail) in
        {626}let ss_32: symmetricstate = (if v_202 then catch-fail((if v_204 then symmetricstatepack(cs_28,ck_33,hash(h_28,rs_6)) else fail-any)) else caught-fail) in
        {627}let v_205: bool = not-caught-fail(ss_32) in
        {628}let v_206: bitstring = (if v_205 then catch-fail(symmetricstateunpack(ss_32)) else caught-fail) in
        {629}let v_207: bool = (not-caught-fail(v_206) && success?(1-proj-3-tuple(v_206))) in
        {630}let h_29: bitstring = (if v_207 then 3-proj-3-tuple(v_206) else caught-fail) in
        {631}let ck_34: key = (if v_207 then 2-proj-3-tuple(v_206) else caught-fail) in
        {632}let cs_29: cipherstate = (if v_207 then 1-proj-3-tuple(v_206) else caught-fail) in
        {633}let ss_33: symmetricstate = (if v_205 then catch-fail((if v_207 then symmetricstatepack(cs_29,ck_34,hash(h_29,rm_6)) else fail-any)) else caught-fail) in
        {634}let v_208: bool = not-caught-fail(ss_33) in
        {635}let hs_18: handshakestate = (if v_202 then (if v_205 then (if v_208 then handshakestatepack(ss_33,s_7,m_7,e_12,rs_6,rm_6,re_7,psk_6,true) else fail-any) else fail-any) else fail-any) in
        {636}insert statestore(me_1,them_1,sid_2,statepack_a(hs_18))
    ) | (
        {749}get statestore(=me_1,=them_1,=sid_2,statepack_a(hs_19: handshakestate)) in
        {637}let payload_3: bitstring = msg_a(me_1,them_1,sid_2) in
        {638}let v_209: bitstring = catch-fail(handshakestateunpack(hs_19)) in
        {639}let v_210: bool = (not-caught-fail(v_209) && success?(1-proj-9-tuple(v_209))) in
        {640}let initiator_6: bool = (if v_210 then 9-proj-9-tuple(v_209) else caught-fail) in
        {641}let psk_7: key = (if v_210 then 8-proj-9-tuple(v_209) else caught-fail) in
        {642}let re_8: key = (if v_210 then 7-proj-9-tuple(v_209) else caught-fail) in
        {643}let rm_7: key = (if v_210 then 6-proj-9-tuple(v_209) else caught-fail) in
        {644}let rs_7: key = (if v_210 then 5-proj-9-tuple(v_209) else caught-fail) in
        {645}let e_13: keypair = (if v_210 then 4-proj-9-tuple(v_209) else caught-fail) in
        {646}let m_8: keypair = (if v_210 then 3-proj-9-tuple(v_209) else caught-fail) in
        {647}let s_8: keypair = (if v_210 then 2-proj-9-tuple(v_209) else caught-fail) in
        {648}let ss_34: symmetricstate = (if v_210 then 1-proj-9-tuple(v_209) else caught-fail) in
        {649}let v_211: bitstring = (if v_210 then catch-fail((empty,empty,empty)) else caught-fail) in
        {650}let v_212: bool = (not-caught-fail(v_211) && success?(1-proj-3-tuple(v_211))) in
        {651}let ciphertext_13: bitstring = (if v_212 then 3-proj-3-tuple(v_211) else caught-fail) in
        {652}let ns_6: bitstring = (if v_212 then 2-proj-3-tuple(v_211) else caught-fail) in
        {653}let ne_5: bitstring = (if v_212 then 1-proj-3-tuple(v_211) else caught-fail) in
        {654}let basis_7: key = (if v_212 then key_e(me_1,them_1,sid_2) else caught-fail) in
        {655}let public_key_7: key = (if v_212 then catch-fail(dhexp(basis_7,validkey(g))) else caught-fail) in
        {656}let v_213: bool = not-caught-fail(public_key_7) in
        {657}let e_14: keypair = (if v_212 then catch-fail((if v_213 then keypairpack(validkey(public_key_7),basis_7) else fail-any)) else caught-fail) in
        {658}let v_214: bool = not-caught-fail(e_14) in
        {659}let ne_6: bitstring = (if v_214 then catch-fail(getpublickey(e_14)) else caught-fail) in
        {660}let v_215: bool = not-caught-fail(ne_6) in
        {661}let v_216: bitstring = (if v_215 then catch-fail(symmetricstateunpack(ss_34)) else caught-fail) in
        {662}let v_217: bool = (not-caught-fail(v_216) && success?(1-proj-3-tuple(v_216))) in
        {663}let h_30: bitstring = (if v_217 then 3-proj-3-tuple(v_216) else caught-fail) in
        {664}let ck_35: key = (if v_217 then 2-proj-3-tuple(v_216) else caught-fail) in
        {665}let cs_30: cipherstate = (if v_217 then 1-proj-3-tuple(v_216) else caught-fail) in
        {666}let ss_35: symmetricstate = (if v_215 then catch-fail((if v_217 then symmetricstatepack(cs_30,ck_35,hash(h_30,ne_6)) else fail-any)) else caught-fail) in
        {667}let v_218: bool = not-caught-fail(ss_35) in
        {668}let v_219: bitstring = (if v_218 then catch-fail(keypairunpack(e_14)) else caught-fail) in
        {669}let v_220: bool = (not-caught-fail(v_219) && success?(1-proj-2-tuple(v_219))) in
        {670}let my_private_key_5: key = (if v_220 then 2-proj-2-tuple(v_219) else caught-fail) in
        {671}let my_public_key_5: key = (if v_220 then 1-proj-2-tuple(v_219) else caught-fail) in
        {672}let input_key_material_6: key = (if v_218 then catch-fail((if v_220 then dhexp(my_private_key_5,rs_7) else fail-any)) else caught-fail) in
        {673}let v_221: bool = not-caught-fail(input_key_material_6) in
        {674}let v_222: bitstring = (if v_221 then catch-fail(symmetricstateunpack(ss_35)) else caught-fail) in
        {675}let v_223: bool = (not-caught-fail(v_222) && success?(1-proj-3-tuple(v_222))) in
        {676}let h_31: bitstring = (if v_223 then 3-proj-3-tuple(v_222) else caught-fail) in
        {677}let ck_36: key = (if v_223 then 2-proj-3-tuple(v_222) else caught-fail) in
        {678}let cs_31: cipherstate = (if v_223 then 1-proj-3-tuple(v_222) else caught-fail) in
        {679}let output1_6: key = (if v_223 then hmac_hash1(ck_36,input_key_material_6) else caught-fail) in
        {680}let output2_6: key = (if v_223 then hmac_hash2(ck_36,input_key_material_6) else caught-fail) in
        {681}let output3_6: key = (if v_223 then hmac_hash3(ck_36,input_key_material_6) else caught-fail) in
        {682}let v_224: bitstring = (if v_223 then catch-fail((output1_6,output2_6,output3_6)) else caught-fail) in
        {683}let v_225: bool = (not-caught-fail(v_224) && success?(1-proj-3-tuple(v_224))) in
        {684}let output_5: key = (if v_225 then 3-proj-3-tuple(v_224) else caught-fail) in
        {685}let temp_k_5: key = (if v_225 then 2-proj-3-tuple(v_224) else caught-fail) in
        {686}let ck_37: key = (if v_225 then 1-proj-3-tuple(v_224) else caught-fail) in
        {687}let ss_36: symmetricstate = (if v_218 then catch-fail((if v_221 then (if v_223 then (if v_225 then symmetricstatepack(cipherstatepack(temp_k_5,minnonce),ck_37,h_31) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {688}let v_226: bool = not-caught-fail(ss_36) in
        {689}let v_227: bitstring = (if v_226 then catch-fail(keypairunpack(e_14)) else caught-fail) in
        {690}let v_228: bool = (not-caught-fail(v_227) && success?(1-proj-2-tuple(v_227))) in
        {691}let my_private_key_6: key = (if v_228 then 2-proj-2-tuple(v_227) else caught-fail) in
        {692}let my_public_key_6: key = (if v_228 then 1-proj-2-tuple(v_227) else caught-fail) in
        {693}let input_key_material_7: key = (if v_226 then catch-fail((if v_228 then dhexp(my_private_key_6,rm_7) else fail-any)) else caught-fail) in
        {694}let v_229: bool = not-caught-fail(input_key_material_7) in
        {695}let v_230: bitstring = (if v_229 then catch-fail(symmetricstateunpack(ss_36)) else caught-fail) in
        {696}let v_231: bool = (not-caught-fail(v_230) && success?(1-proj-3-tuple(v_230))) in
        {697}let h_32: bitstring = (if v_231 then 3-proj-3-tuple(v_230) else caught-fail) in
        {698}let ck_38: key = (if v_231 then 2-proj-3-tuple(v_230) else caught-fail) in
        {699}let cs_32: cipherstate = (if v_231 then 1-proj-3-tuple(v_230) else caught-fail) in
        {700}let output1_7: key = (if v_231 then hmac_hash1(ck_38,input_key_material_7) else caught-fail) in
        {701}let output2_7: key = (if v_231 then hmac_hash2(ck_38,input_key_material_7) else caught-fail) in
        {702}let output3_7: key = (if v_231 then hmac_hash3(ck_38,input_key_material_7) else caught-fail) in
        {703}let v_232: bitstring = (if v_231 then catch-fail((output1_7,output2_7,output3_7)) else caught-fail) in
        {704}let v_233: bool = (not-caught-fail(v_232) && success?(1-proj-3-tuple(v_232))) in
        {705}let output_6: key = (if v_233 then 3-proj-3-tuple(v_232) else caught-fail) in
        {706}let temp_k_6: key = (if v_233 then 2-proj-3-tuple(v_232) else caught-fail) in
        {707}let ck_39: key = (if v_233 then 1-proj-3-tuple(v_232) else caught-fail) in
        {708}let ss_37: symmetricstate = (if v_226 then catch-fail((if v_229 then (if v_231 then (if v_233 then symmetricstatepack(cipherstatepack(temp_k_6,minnonce),ck_39,h_32) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {709}let v_234: bool = not-caught-fail(ss_37) in
        {710}let v_235: bitstring = (if v_234 then catch-fail(symmetricstateunpack(ss_37)) else caught-fail) in
        {711}let v_236: bool = (not-caught-fail(v_235) && success?(1-proj-3-tuple(v_235))) in
        {712}let h_33: bitstring = (if v_236 then 3-proj-3-tuple(v_235) else caught-fail) in
        {713}let ck_40: key = (if v_236 then 2-proj-3-tuple(v_235) else caught-fail) in
        {714}let cs_33: cipherstate = (if v_236 then 1-proj-3-tuple(v_235) else caught-fail) in
        {715}let v_237: bitstring = (if v_236 then catch-fail(cipherstateunpack(cs_33)) else caught-fail) in
        {716}let v_238: bool = (not-caught-fail(v_237) && success?(1-proj-2-tuple(v_237))) in
        {717}let n_14: nonce = (if v_238 then 2-proj-2-tuple(v_237) else caught-fail) in
        {718}let k_16: key = (if v_238 then 1-proj-2-tuple(v_237) else caught-fail) in
        {719}let e_15: bitstring = (if v_238 then encrypt(k_16,n_14,h_33,payload_3) else caught-fail) in
        {720}let n_15: nonce = (if v_238 then increment_nonce(n_14) else caught-fail) in
        {721}let v_239: bitstring = (if v_238 then catch-fail(cipherstateunpack(cs_33)) else caught-fail) in
        {722}let v_240: bool = (not-caught-fail(v_239) && success?(1-proj-2-tuple(v_239))) in
        {723}let o_7: nonce = (if v_240 then 2-proj-2-tuple(v_239) else caught-fail) in
        {724}let k_17: key = (if v_240 then 1-proj-2-tuple(v_239) else caught-fail) in
        {725}let csi_14: cipherstate = (if v_238 then catch-fail((if v_240 then cipherstatepack(k_17,n_15) else fail-any)) else caught-fail) in
        {726}let v_241: bool = not-caught-fail(csi_14) in
        {727}let v_242: bitstring = (if v_236 then catch-fail((if v_238 then (if v_241 then (csi_14,e_15) else fail-any) else fail-any)) else caught-fail) in
        {728}let v_243: bool = (not-caught-fail(v_242) && success?(1-proj-2-tuple(v_242))) in
        {729}let ciphertext_14: bitstring = (if v_243 then 2-proj-2-tuple(v_242) else caught-fail) in
        {730}let csi_15: cipherstate = (if v_243 then 1-proj-2-tuple(v_242) else caught-fail) in
        {731}let ss_38: symmetricstate = (if v_243 then symmetricstatepack(csi_15,ck_40,h_33) else caught-fail) in
        {732}let v_244: bitstring = (if v_243 then catch-fail(symmetricstateunpack(ss_38)) else caught-fail) in
        {733}let v_245: bool = (not-caught-fail(v_244) && success?(1-proj-3-tuple(v_244))) in
        {734}let h_34: bitstring = (if v_245 then 3-proj-3-tuple(v_244) else caught-fail) in
        {735}let ck_41: key = (if v_245 then 2-proj-3-tuple(v_244) else caught-fail) in
        {736}let cs_34: cipherstate = (if v_245 then 1-proj-3-tuple(v_244) else caught-fail) in
        {737}let ssi_8: symmetricstate = (if v_243 then catch-fail((if v_245 then symmetricstatepack(cs_34,ck_41,hash(h_34,ciphertext_14)) else fail-any)) else caught-fail) in
        {738}let v_246: bool = not-caught-fail(ssi_8) in
        {739}let v_247: bitstring = (if v_234 then catch-fail((if v_236 then (if v_243 then (if v_246 then (ssi_8,ciphertext_14) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {740}let v_248: bool = (not-caught-fail(v_247) && success?(1-proj-2-tuple(v_247))) in
        {741}let ciphertext_15: bitstring = (if v_248 then 2-proj-2-tuple(v_247) else caught-fail) in
        {742}let ss_39: symmetricstate = (if v_248 then 1-proj-2-tuple(v_247) else caught-fail) in
        {743}let hs_20: handshakestate = (if v_248 then handshakestatepack(ss_39,s_8,m_8,e_14,rs_7,rm_7,re_8,psk_7,initiator_6) else caught-fail) in
        {744}let message_buffer_3: bitstring = (if v_248 then concat3(ne_6,ns_6,ciphertext_15) else caught-fail) in
        {745}let (hs_21: handshakestate,message_a_1: bitstring) = (if v_210 then (if v_212 then (if v_214 then (if v_215 then (if v_218 then (if v_226 then (if v_234 then (if v_248 then (hs_20,message_buffer_3) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {746}event SendMsg(me_1,them_1,stagepack_a(sid_2),msg_a(me_1,them_1,sid_2));
        {747}insert statestore(me_1,them_1,sid_2,statepack_b(hs_21));
        {748}out(pub, message_a_1)
    ) | (
        {843}get statestore(=me_1,=them_1,=sid_2,statepack_b(hs_22: handshakestate)) in
        {750}in(pub, message_b_1: bitstring);
        {751}let v_249: bitstring = catch-fail(handshakestateunpack(hs_22)) in
        {752}let v_250: bool = (not-caught-fail(v_249) && success?(1-proj-9-tuple(v_249))) in
        {753}let initiator_7: bool = (if v_250 then 9-proj-9-tuple(v_249) else caught-fail) in
        {754}let psk_8: key = (if v_250 then 8-proj-9-tuple(v_249) else caught-fail) in
        {755}let re_9: key = (if v_250 then 7-proj-9-tuple(v_249) else caught-fail) in
        {756}let rm_8: key = (if v_250 then 6-proj-9-tuple(v_249) else caught-fail) in
        {757}let rs_8: key = (if v_250 then 5-proj-9-tuple(v_249) else caught-fail) in
        {758}let e_16: keypair = (if v_250 then 4-proj-9-tuple(v_249) else caught-fail) in
        {759}let m_9: keypair = (if v_250 then 3-proj-9-tuple(v_249) else caught-fail) in
        {760}let s_9: keypair = (if v_250 then 2-proj-9-tuple(v_249) else caught-fail) in
        {761}let ss_40: symmetricstate = (if v_250 then 1-proj-9-tuple(v_249) else caught-fail) in
        {762}let v_251: bitstring = (if v_250 then catch-fail(deconcat3(message_b_1)) else caught-fail) in
        {763}let v_252: bool = (not-caught-fail(v_251) && success?(1-proj-3-tuple(v_251))) in
        {764}let ciphertext_16: bitstring = (if v_252 then 3-proj-3-tuple(v_251) else caught-fail) in
        {765}let ns_7: bitstring = (if v_252 then 2-proj-3-tuple(v_251) else caught-fail) in
        {766}let ne_7: bitstring = (if v_252 then 1-proj-3-tuple(v_251) else caught-fail) in
        {767}let valid1_2: bool = (if v_252 then true else caught-fail) in
        {768}let re_10: key = (if v_252 then ne_7 else caught-fail) in
        {769}let v_253: bitstring = (if v_252 then catch-fail(symmetricstateunpack(ss_40)) else caught-fail) in
        {770}let v_254: bool = (not-caught-fail(v_253) && success?(1-proj-3-tuple(v_253))) in
        {771}let h_35: bitstring = (if v_254 then 3-proj-3-tuple(v_253) else caught-fail) in
        {772}let ck_42: key = (if v_254 then 2-proj-3-tuple(v_253) else caught-fail) in
        {773}let cs_35: cipherstate = (if v_254 then 1-proj-3-tuple(v_253) else caught-fail) in
        {774}let ss_41: symmetricstate = (if v_252 then catch-fail((if v_254 then symmetricstatepack(cs_35,ck_42,hash(h_35,re_10)) else fail-any)) else caught-fail) in
        {775}let v_255: bool = not-caught-fail(ss_41) in
        {776}let v_256: bitstring = (if v_255 then catch-fail(keypairunpack(e_16)) else caught-fail) in
        {777}let v_257: bool = (not-caught-fail(v_256) && success?(1-proj-2-tuple(v_256))) in
        {778}let my_private_key_7: key = (if v_257 then 2-proj-2-tuple(v_256) else caught-fail) in
        {779}let my_public_key_7: key = (if v_257 then 1-proj-2-tuple(v_256) else caught-fail) in
        {780}let input_key_material_8: key = (if v_255 then catch-fail((if v_257 then dhexp(my_private_key_7,re_10) else fail-any)) else caught-fail) in
        {781}let v_258: bool = not-caught-fail(input_key_material_8) in
        {782}let v_259: bitstring = (if v_258 then catch-fail(symmetricstateunpack(ss_41)) else caught-fail) in
        {783}let v_260: bool = (not-caught-fail(v_259) && success?(1-proj-3-tuple(v_259))) in
        {784}let h_36: bitstring = (if v_260 then 3-proj-3-tuple(v_259) else caught-fail) in
        {785}let ck_43: key = (if v_260 then 2-proj-3-tuple(v_259) else caught-fail) in
        {786}let cs_36: cipherstate = (if v_260 then 1-proj-3-tuple(v_259) else caught-fail) in
        {787}let output1_8: key = (if v_260 then hmac_hash1(ck_43,input_key_material_8) else caught-fail) in
        {788}let output2_8: key = (if v_260 then hmac_hash2(ck_43,input_key_material_8) else caught-fail) in
        {789}let output3_8: key = (if v_260 then hmac_hash3(ck_43,input_key_material_8) else caught-fail) in
        {790}let v_261: bitstring = (if v_260 then catch-fail((output1_8,output2_8,output3_8)) else caught-fail) in
        {791}let v_262: bool = (not-caught-fail(v_261) && success?(1-proj-3-tuple(v_261))) in
        {792}let output_7: key = (if v_262 then 3-proj-3-tuple(v_261) else caught-fail) in
        {793}let temp_k_7: key = (if v_262 then 2-proj-3-tuple(v_261) else caught-fail) in
        {794}let ck_44: key = (if v_262 then 1-proj-3-tuple(v_261) else caught-fail) in
        {795}let ss_42: symmetricstate = (if v_255 then catch-fail((if v_258 then (if v_260 then (if v_262 then symmetricstatepack(cipherstatepack(temp_k_7,minnonce),ck_44,h_36) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {796}let v_263: bool = not-caught-fail(ss_42) in
        {797}let v_264: bitstring = (if v_263 then catch-fail(symmetricstateunpack(ss_42)) else caught-fail) in
        {798}let v_265: bool = (not-caught-fail(v_264) && success?(1-proj-3-tuple(v_264))) in
        {799}let h_37: bitstring = (if v_265 then 3-proj-3-tuple(v_264) else caught-fail) in
        {800}let ck_45: key = (if v_265 then 2-proj-3-tuple(v_264) else caught-fail) in
        {801}let cs_37: cipherstate = (if v_265 then 1-proj-3-tuple(v_264) else caught-fail) in
        {802}let v_266: bitstring = (if v_265 then catch-fail(cipherstateunpack(cs_37)) else caught-fail) in
        {803}let v_267: bool = (not-caught-fail(v_266) && success?(1-proj-2-tuple(v_266))) in
        {804}let n_16: nonce = (if v_267 then 2-proj-2-tuple(v_266) else caught-fail) in
        {805}let k_18: key = (if v_267 then 1-proj-2-tuple(v_266) else caught-fail) in
        {806}let d_2: aead = (if v_267 then catch-fail(decrypt(k_18,n_16,h_37,ciphertext_16)) else caught-fail) in
        {807}let v_268: bool = not-caught-fail(d_2) in
        {808}let v_269: bitstring = (if v_268 then catch-fail(aeadunpack(d_2)) else caught-fail) in
        {809}let v_270: bool = (not-caught-fail(v_269) && success?(1-proj-3-tuple(v_269))) in
        {810}let plaintext_8: bitstring = (if v_270 then 3-proj-3-tuple(v_269) else caught-fail) in
        {811}let adi_2: bitstring = (if v_270 then 2-proj-3-tuple(v_269) else caught-fail) in
        {812}let valid_6: bool = (if v_270 then 1-proj-3-tuple(v_269) else caught-fail) in
        {813}let n_17: nonce = (if v_270 then increment_nonce(n_16) else caught-fail) in
        {814}let v_271: bitstring = (if v_270 then catch-fail(cipherstateunpack(cs_37)) else caught-fail) in
        {815}let v_272: bool = (not-caught-fail(v_271) && success?(1-proj-2-tuple(v_271))) in
        {816}let o_8: nonce = (if v_272 then 2-proj-2-tuple(v_271) else caught-fail) in
        {817}let k_19: key = (if v_272 then 1-proj-2-tuple(v_271) else caught-fail) in
        {818}let csi_16: cipherstate = (if v_270 then catch-fail((if v_272 then cipherstatepack(k_19,n_17) else fail-any)) else caught-fail) in
        {819}let v_273: bool = not-caught-fail(csi_16) in
        {820}let v_274: bitstring = (if v_265 then catch-fail((if v_267 then (if v_268 then (if v_270 then (if v_273 then (csi_16,plaintext_8,valid_6) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {821}let v_275: bool = (not-caught-fail(v_274) && success?(1-proj-3-tuple(v_274))) in
        {822}let valid_7: bool = (if v_275 then 3-proj-3-tuple(v_274) else caught-fail) in
        {823}let plaintext_9: bitstring = (if v_275 then 2-proj-3-tuple(v_274) else caught-fail) in
        {824}let csi_17: cipherstate = (if v_275 then 1-proj-3-tuple(v_274) else caught-fail) in
        {825}let ss_43: symmetricstate = (if v_275 then symmetricstatepack(csi_17,ck_45,h_37) else caught-fail) in
        {826}let v_276: bitstring = (if v_275 then catch-fail(symmetricstateunpack(ss_43)) else caught-fail) in
        {827}let v_277: bool = (not-caught-fail(v_276) && success?(1-proj-3-tuple(v_276))) in
        {828}let h_38: bitstring = (if v_277 then 3-proj-3-tuple(v_276) else caught-fail) in
        {829}let ck_46: key = (if v_277 then 2-proj-3-tuple(v_276) else caught-fail) in
        {830}let cs_38: cipherstate = (if v_277 then 1-proj-3-tuple(v_276) else caught-fail) in
        {831}let ssi_9: symmetricstate = (if v_275 then catch-fail((if v_277 then symmetricstatepack(cs_38,ck_46,hash(h_38,ciphertext_16)) else fail-any)) else caught-fail) in
        {832}let v_278: bool = not-caught-fail(ssi_9) in
        {833}let v_279: bitstring = (if v_263 then catch-fail((if v_265 then (if v_275 then (if v_278 then (ssi_9,plaintext_9,valid_7) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {834}let v_280: bool = (not-caught-fail(v_279) && success?(1-proj-3-tuple(v_279))) in
        {835}let valid2_2: bool = (if v_280 then 3-proj-3-tuple(v_279) else caught-fail) in
        {836}let plaintext_10: bitstring = (if v_280 then 2-proj-3-tuple(v_279) else caught-fail) in
        {837}let ss_44: symmetricstate = (if v_280 then 1-proj-3-tuple(v_279) else caught-fail) in
        {838}let v_281: bool = (if v_280 then catch-fail((valid1_2 && valid2_2)) else caught-fail) in
        {839}let hs_23: handshakestate = (if v_281 then handshakestatepack(ss_44,s_9,m_9,e_16,rs_8,rm_8,re_10,psk_8,initiator_7) else caught-fail) in
        {840}let (hs_24: handshakestate,plaintext_b_1: bitstring,valid_8: bool) = (if v_250 then (if v_252 then (if v_255 then (if v_263 then (if v_280 then (if undo-catch-fail(v_281) then (hs_23,plaintext_10,true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {841}event RecvMsg(me_1,them_1,stagepack_b(sid_2),plaintext_b_1);
        {842}insert statestore(me_1,them_1,sid_2,statepack_c(hs_24))
    ) | (
        {1043}get statestore(=me_1,=them_1,=sid_2,statepack_c(hs_25: handshakestate)) in
        {844}let payload_4: bitstring = msg_c(me_1,them_1,sid_2) in
        {845}let v_282: bitstring = catch-fail(handshakestateunpack(hs_25)) in
        {846}let v_283: bool = (not-caught-fail(v_282) && success?(1-proj-9-tuple(v_282))) in
        {847}let initiator_8: bool = (if v_283 then 9-proj-9-tuple(v_282) else caught-fail) in
        {848}let psk_9: key = (if v_283 then 8-proj-9-tuple(v_282) else caught-fail) in
        {849}let re_11: key = (if v_283 then 7-proj-9-tuple(v_282) else caught-fail) in
        {850}let rm_9: key = (if v_283 then 6-proj-9-tuple(v_282) else caught-fail) in
        {851}let rs_9: key = (if v_283 then 5-proj-9-tuple(v_282) else caught-fail) in
        {852}let e_17: keypair = (if v_283 then 4-proj-9-tuple(v_282) else caught-fail) in
        {853}let m_10: keypair = (if v_283 then 3-proj-9-tuple(v_282) else caught-fail) in
        {854}let s_10: keypair = (if v_283 then 2-proj-9-tuple(v_282) else caught-fail) in
        {855}let ss_45: symmetricstate = (if v_283 then 1-proj-9-tuple(v_282) else caught-fail) in
        {856}let v_284: bitstring = (if v_283 then catch-fail((empty,empty,empty)) else caught-fail) in
        {857}let v_285: bool = (not-caught-fail(v_284) && success?(1-proj-3-tuple(v_284))) in
        {858}let ciphertext_17: bitstring = (if v_285 then 3-proj-3-tuple(v_284) else caught-fail) in
        {859}let nm_2: bitstring = (if v_285 then 2-proj-3-tuple(v_284) else caught-fail) in
        {860}let ns_8: bitstring = (if v_285 then 1-proj-3-tuple(v_284) else caught-fail) in
        {861}let basis_8: key = (if v_285 then key_s(me_1) else caught-fail) in
        {862}let public_key_8: key = (if v_285 then catch-fail(dhexp(basis_8,validkey(g))) else caught-fail) in
        {863}let v_286: bool = not-caught-fail(public_key_8) in
        {864}let s_11: keypair = (if v_285 then catch-fail((if v_286 then keypairpack(validkey(public_key_8),basis_8) else fail-any)) else caught-fail) in
        {865}let v_287: bool = not-caught-fail(s_11) in
        {866}let plaintext_11: bitstring = (if v_287 then catch-fail(getpublickey(s_11)) else caught-fail) in
        {867}let v_288: bool = not-caught-fail(plaintext_11) in
        {868}let v_289: bitstring = (if v_288 then catch-fail(symmetricstateunpack(ss_45)) else caught-fail) in
        {869}let v_290: bool = (not-caught-fail(v_289) && success?(1-proj-3-tuple(v_289))) in
        {870}let h_39: bitstring = (if v_290 then 3-proj-3-tuple(v_289) else caught-fail) in
        {871}let ck_47: key = (if v_290 then 2-proj-3-tuple(v_289) else caught-fail) in
        {872}let cs_39: cipherstate = (if v_290 then 1-proj-3-tuple(v_289) else caught-fail) in
        {873}let v_291: bitstring = (if v_290 then catch-fail(cipherstateunpack(cs_39)) else caught-fail) in
        {874}let v_292: bool = (not-caught-fail(v_291) && success?(1-proj-2-tuple(v_291))) in
        {875}let n_18: nonce = (if v_292 then 2-proj-2-tuple(v_291) else caught-fail) in
        {876}let k_20: key = (if v_292 then 1-proj-2-tuple(v_291) else caught-fail) in
        {877}let e_18: bitstring = (if v_292 then encrypt(k_20,n_18,h_39,plaintext_11) else caught-fail) in
        {878}let n_19: nonce = (if v_292 then increment_nonce(n_18) else caught-fail) in
        {879}let v_293: bitstring = (if v_292 then catch-fail(cipherstateunpack(cs_39)) else caught-fail) in
        {880}let v_294: bool = (not-caught-fail(v_293) && success?(1-proj-2-tuple(v_293))) in
        {881}let o_9: nonce = (if v_294 then 2-proj-2-tuple(v_293) else caught-fail) in
        {882}let k_21: key = (if v_294 then 1-proj-2-tuple(v_293) else caught-fail) in
        {883}let csi_18: cipherstate = (if v_292 then catch-fail((if v_294 then cipherstatepack(k_21,n_19) else fail-any)) else caught-fail) in
        {884}let v_295: bool = not-caught-fail(csi_18) in
        {885}let v_296: bitstring = (if v_290 then catch-fail((if v_292 then (if v_295 then (csi_18,e_18) else fail-any) else fail-any)) else caught-fail) in
        {886}let v_297: bool = (not-caught-fail(v_296) && success?(1-proj-2-tuple(v_296))) in
        {887}let ciphertext_18: bitstring = (if v_297 then 2-proj-2-tuple(v_296) else caught-fail) in
        {888}let csi_19: cipherstate = (if v_297 then 1-proj-2-tuple(v_296) else caught-fail) in
        {889}let ss_46: symmetricstate = (if v_297 then symmetricstatepack(csi_19,ck_47,h_39) else caught-fail) in
        {890}let v_298: bitstring = (if v_297 then catch-fail(symmetricstateunpack(ss_46)) else caught-fail) in
        {891}let v_299: bool = (not-caught-fail(v_298) && success?(1-proj-3-tuple(v_298))) in
        {892}let h_40: bitstring = (if v_299 then 3-proj-3-tuple(v_298) else caught-fail) in
        {893}let ck_48: key = (if v_299 then 2-proj-3-tuple(v_298) else caught-fail) in
        {894}let cs_40: cipherstate = (if v_299 then 1-proj-3-tuple(v_298) else caught-fail) in
        {895}let ssi_10: symmetricstate = (if v_297 then catch-fail((if v_299 then symmetricstatepack(cs_40,ck_48,hash(h_40,ciphertext_18)) else fail-any)) else caught-fail) in
        {896}let v_300: bool = not-caught-fail(ssi_10) in
        {897}let v_301: bitstring = (if v_287 then catch-fail((if v_288 then (if v_290 then (if v_297 then (if v_300 then (ssi_10,ciphertext_18) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {898}let v_302: bool = (not-caught-fail(v_301) && success?(1-proj-2-tuple(v_301))) in
        {899}let ns_9: bitstring = (if v_302 then 2-proj-2-tuple(v_301) else caught-fail) in
        {900}let ss_47: symmetricstate = (if v_302 then 1-proj-2-tuple(v_301) else caught-fail) in
        {901}let basis_9: key = (if v_302 then key_m(me_1) else caught-fail) in
        {902}let public_key_9: key = (if v_302 then catch-fail(dhexp(basis_9,validkey(g))) else caught-fail) in
        {903}let v_303: bool = not-caught-fail(public_key_9) in
        {904}let m_11: keypair = (if v_302 then catch-fail((if v_303 then keypairpack(validkey(public_key_9),basis_9) else fail-any)) else caught-fail) in
        {905}let v_304: bool = not-caught-fail(m_11) in
        {906}let plaintext_12: bitstring = (if v_304 then catch-fail(getpublickey(m_11)) else caught-fail) in
        {907}let v_305: bool = not-caught-fail(plaintext_12) in
        {908}let v_306: bitstring = (if v_305 then catch-fail(symmetricstateunpack(ss_47)) else caught-fail) in
        {909}let v_307: bool = (not-caught-fail(v_306) && success?(1-proj-3-tuple(v_306))) in
        {910}let h_41: bitstring = (if v_307 then 3-proj-3-tuple(v_306) else caught-fail) in
        {911}let ck_49: key = (if v_307 then 2-proj-3-tuple(v_306) else caught-fail) in
        {912}let cs_41: cipherstate = (if v_307 then 1-proj-3-tuple(v_306) else caught-fail) in
        {913}let v_308: bitstring = (if v_307 then catch-fail(cipherstateunpack(cs_41)) else caught-fail) in
        {914}let v_309: bool = (not-caught-fail(v_308) && success?(1-proj-2-tuple(v_308))) in
        {915}let n_20: nonce = (if v_309 then 2-proj-2-tuple(v_308) else caught-fail) in
        {916}let k_22: key = (if v_309 then 1-proj-2-tuple(v_308) else caught-fail) in
        {917}let e_19: bitstring = (if v_309 then encrypt(k_22,n_20,h_41,plaintext_12) else caught-fail) in
        {918}let n_21: nonce = (if v_309 then increment_nonce(n_20) else caught-fail) in
        {919}let v_310: bitstring = (if v_309 then catch-fail(cipherstateunpack(cs_41)) else caught-fail) in
        {920}let v_311: bool = (not-caught-fail(v_310) && success?(1-proj-2-tuple(v_310))) in
        {921}let o_10: nonce = (if v_311 then 2-proj-2-tuple(v_310) else caught-fail) in
        {922}let k_23: key = (if v_311 then 1-proj-2-tuple(v_310) else caught-fail) in
        {923}let csi_20: cipherstate = (if v_309 then catch-fail((if v_311 then cipherstatepack(k_23,n_21) else fail-any)) else caught-fail) in
        {924}let v_312: bool = not-caught-fail(csi_20) in
        {925}let v_313: bitstring = (if v_307 then catch-fail((if v_309 then (if v_312 then (csi_20,e_19) else fail-any) else fail-any)) else caught-fail) in
        {926}let v_314: bool = (not-caught-fail(v_313) && success?(1-proj-2-tuple(v_313))) in
        {927}let ciphertext_19: bitstring = (if v_314 then 2-proj-2-tuple(v_313) else caught-fail) in
        {928}let csi_21: cipherstate = (if v_314 then 1-proj-2-tuple(v_313) else caught-fail) in
        {929}let ss_48: symmetricstate = (if v_314 then symmetricstatepack(csi_21,ck_49,h_41) else caught-fail) in
        {930}let v_315: bitstring = (if v_314 then catch-fail(symmetricstateunpack(ss_48)) else caught-fail) in
        {931}let v_316: bool = (not-caught-fail(v_315) && success?(1-proj-3-tuple(v_315))) in
        {932}let h_42: bitstring = (if v_316 then 3-proj-3-tuple(v_315) else caught-fail) in
        {933}let ck_50: key = (if v_316 then 2-proj-3-tuple(v_315) else caught-fail) in
        {934}let cs_42: cipherstate = (if v_316 then 1-proj-3-tuple(v_315) else caught-fail) in
        {935}let ssi_11: symmetricstate = (if v_314 then catch-fail((if v_316 then symmetricstatepack(cs_42,ck_50,hash(h_42,ciphertext_19)) else fail-any)) else caught-fail) in
        {936}let v_317: bool = not-caught-fail(ssi_11) in
        {937}let v_318: bitstring = (if v_304 then catch-fail((if v_305 then (if v_307 then (if v_314 then (if v_317 then (ssi_11,ciphertext_19) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {938}let v_319: bool = (not-caught-fail(v_318) && success?(1-proj-2-tuple(v_318))) in
        {939}let nm_3: bitstring = (if v_319 then 2-proj-2-tuple(v_318) else caught-fail) in
        {940}let ss_49: symmetricstate = (if v_319 then 1-proj-2-tuple(v_318) else caught-fail) in
        {941}let v_320: bitstring = (if v_319 then catch-fail(keypairunpack(s_11)) else caught-fail) in
        {942}let v_321: bool = (not-caught-fail(v_320) && success?(1-proj-2-tuple(v_320))) in
        {943}let my_private_key_8: key = (if v_321 then 2-proj-2-tuple(v_320) else caught-fail) in
        {944}let my_public_key_8: key = (if v_321 then 1-proj-2-tuple(v_320) else caught-fail) in
        {945}let input_key_material_9: key = (if v_319 then catch-fail((if v_321 then dhexp(my_private_key_8,re_11) else fail-any)) else caught-fail) in
        {946}let v_322: bool = not-caught-fail(input_key_material_9) in
        {947}let v_323: bitstring = (if v_322 then catch-fail(symmetricstateunpack(ss_49)) else caught-fail) in
        {948}let v_324: bool = (not-caught-fail(v_323) && success?(1-proj-3-tuple(v_323))) in
        {949}let h_43: bitstring = (if v_324 then 3-proj-3-tuple(v_323) else caught-fail) in
        {950}let ck_51: key = (if v_324 then 2-proj-3-tuple(v_323) else caught-fail) in
        {951}let cs_43: cipherstate = (if v_324 then 1-proj-3-tuple(v_323) else caught-fail) in
        {952}let output1_9: key = (if v_324 then hmac_hash1(ck_51,input_key_material_9) else caught-fail) in
        {953}let output2_9: key = (if v_324 then hmac_hash2(ck_51,input_key_material_9) else caught-fail) in
        {954}let output3_9: key = (if v_324 then hmac_hash3(ck_51,input_key_material_9) else caught-fail) in
        {955}let v_325: bitstring = (if v_324 then catch-fail((output1_9,output2_9,output3_9)) else caught-fail) in
        {956}let v_326: bool = (not-caught-fail(v_325) && success?(1-proj-3-tuple(v_325))) in
        {957}let output_8: key = (if v_326 then 3-proj-3-tuple(v_325) else caught-fail) in
        {958}let temp_k_8: key = (if v_326 then 2-proj-3-tuple(v_325) else caught-fail) in
        {959}let ck_52: key = (if v_326 then 1-proj-3-tuple(v_325) else caught-fail) in
        {960}let ss_50: symmetricstate = (if v_319 then catch-fail((if v_322 then (if v_324 then (if v_326 then symmetricstatepack(cipherstatepack(temp_k_8,minnonce),ck_52,h_43) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {961}let v_327: bool = not-caught-fail(ss_50) in
        {962}let v_328: bitstring = (if v_327 then catch-fail(keypairunpack(m_11)) else caught-fail) in
        {963}let v_329: bool = (not-caught-fail(v_328) && success?(1-proj-2-tuple(v_328))) in
        {964}let my_private_key_9: key = (if v_329 then 2-proj-2-tuple(v_328) else caught-fail) in
        {965}let my_public_key_9: key = (if v_329 then 1-proj-2-tuple(v_328) else caught-fail) in
        {966}let input_key_material_10: key = (if v_327 then catch-fail((if v_329 then dhexp(my_private_key_9,re_11) else fail-any)) else caught-fail) in
        {967}let v_330: bool = not-caught-fail(input_key_material_10) in
        {968}let v_331: bitstring = (if v_330 then catch-fail(symmetricstateunpack(ss_50)) else caught-fail) in
        {969}let v_332: bool = (not-caught-fail(v_331) && success?(1-proj-3-tuple(v_331))) in
        {970}let h_44: bitstring = (if v_332 then 3-proj-3-tuple(v_331) else caught-fail) in
        {971}let ck_53: key = (if v_332 then 2-proj-3-tuple(v_331) else caught-fail) in
        {972}let cs_44: cipherstate = (if v_332 then 1-proj-3-tuple(v_331) else caught-fail) in
        {973}let output1_10: key = (if v_332 then hmac_hash1(ck_53,input_key_material_10) else caught-fail) in
        {974}let output2_10: key = (if v_332 then hmac_hash2(ck_53,input_key_material_10) else caught-fail) in
        {975}let output3_10: key = (if v_332 then hmac_hash3(ck_53,input_key_material_10) else caught-fail) in
        {976}let v_333: bitstring = (if v_332 then catch-fail((output1_10,output2_10,output3_10)) else caught-fail) in
        {977}let v_334: bool = (not-caught-fail(v_333) && success?(1-proj-3-tuple(v_333))) in
        {978}let output_9: key = (if v_334 then 3-proj-3-tuple(v_333) else caught-fail) in
        {979}let temp_k_9: key = (if v_334 then 2-proj-3-tuple(v_333) else caught-fail) in
        {980}let ck_54: key = (if v_334 then 1-proj-3-tuple(v_333) else caught-fail) in
        {981}let ss_51: symmetricstate = (if v_327 then catch-fail((if v_330 then (if v_332 then (if v_334 then symmetricstatepack(cipherstatepack(temp_k_9,minnonce),ck_54,h_44) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {982}let v_335: bool = not-caught-fail(ss_51) in
        {983}let v_336: bitstring = (if v_335 then catch-fail(symmetricstateunpack(ss_51)) else caught-fail) in
        {984}let v_337: bool = (not-caught-fail(v_336) && success?(1-proj-3-tuple(v_336))) in
        {985}let h_45: bitstring = (if v_337 then 3-proj-3-tuple(v_336) else caught-fail) in
        {986}let ck_55: key = (if v_337 then 2-proj-3-tuple(v_336) else caught-fail) in
        {987}let cs_45: cipherstate = (if v_337 then 1-proj-3-tuple(v_336) else caught-fail) in
        {988}let v_338: bitstring = (if v_337 then catch-fail(cipherstateunpack(cs_45)) else caught-fail) in
        {989}let v_339: bool = (not-caught-fail(v_338) && success?(1-proj-2-tuple(v_338))) in
        {990}let n_22: nonce = (if v_339 then 2-proj-2-tuple(v_338) else caught-fail) in
        {991}let k_24: key = (if v_339 then 1-proj-2-tuple(v_338) else caught-fail) in
        {992}let e_20: bitstring = (if v_339 then encrypt(k_24,n_22,h_45,payload_4) else caught-fail) in
        {993}let n_23: nonce = (if v_339 then increment_nonce(n_22) else caught-fail) in
        {994}let v_340: bitstring = (if v_339 then catch-fail(cipherstateunpack(cs_45)) else caught-fail) in
        {995}let v_341: bool = (not-caught-fail(v_340) && success?(1-proj-2-tuple(v_340))) in
        {996}let o_11: nonce = (if v_341 then 2-proj-2-tuple(v_340) else caught-fail) in
        {997}let k_25: key = (if v_341 then 1-proj-2-tuple(v_340) else caught-fail) in
        {998}let csi_22: cipherstate = (if v_339 then catch-fail((if v_341 then cipherstatepack(k_25,n_23) else fail-any)) else caught-fail) in
        {999}let v_342: bool = not-caught-fail(csi_22) in
        {1000}let v_343: bitstring = (if v_337 then catch-fail((if v_339 then (if v_342 then (csi_22,e_20) else fail-any) else fail-any)) else caught-fail) in
        {1001}let v_344: bool = (not-caught-fail(v_343) && success?(1-proj-2-tuple(v_343))) in
        {1002}let ciphertext_20: bitstring = (if v_344 then 2-proj-2-tuple(v_343) else caught-fail) in
        {1003}let csi_23: cipherstate = (if v_344 then 1-proj-2-tuple(v_343) else caught-fail) in
        {1004}let ss_52: symmetricstate = (if v_344 then symmetricstatepack(csi_23,ck_55,h_45) else caught-fail) in
        {1005}let v_345: bitstring = (if v_344 then catch-fail(symmetricstateunpack(ss_52)) else caught-fail) in
        {1006}let v_346: bool = (not-caught-fail(v_345) && success?(1-proj-3-tuple(v_345))) in
        {1007}let h_46: bitstring = (if v_346 then 3-proj-3-tuple(v_345) else caught-fail) in
        {1008}let ck_56: key = (if v_346 then 2-proj-3-tuple(v_345) else caught-fail) in
        {1009}let cs_46: cipherstate = (if v_346 then 1-proj-3-tuple(v_345) else caught-fail) in
        {1010}let ssi_12: symmetricstate = (if v_344 then catch-fail((if v_346 then symmetricstatepack(cs_46,ck_56,hash(h_46,ciphertext_20)) else fail-any)) else caught-fail) in
        {1011}let v_347: bool = not-caught-fail(ssi_12) in
        {1012}let v_348: bitstring = (if v_335 then catch-fail((if v_337 then (if v_344 then (if v_347 then (ssi_12,ciphertext_20) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1013}let v_349: bool = (not-caught-fail(v_348) && success?(1-proj-2-tuple(v_348))) in
        {1014}let ciphertext_21: bitstring = (if v_349 then 2-proj-2-tuple(v_348) else caught-fail) in
        {1015}let ss_53: symmetricstate = (if v_349 then 1-proj-2-tuple(v_348) else caught-fail) in
        {1016}let hs_26: handshakestate = (if v_349 then handshakestatepack(ss_53,s_11,m_11,e_17,rs_9,rm_9,re_11,psk_9,initiator_8) else caught-fail) in
        {1017}let message_buffer_4: bitstring = (if v_349 then concat3(ns_9,nm_3,ciphertext_21) else caught-fail) in
        {1018}let v_350: bitstring = (if v_349 then catch-fail(symmetricstateunpack(ss_53)) else caught-fail) in
        {1019}let v_351: bool = (not-caught-fail(v_350) && success?(1-proj-3-tuple(v_350))) in
        {1020}let h_47: bitstring = (if v_351 then 3-proj-3-tuple(v_350) else caught-fail) in
        {1021}let ck_57: key = (if v_351 then 2-proj-3-tuple(v_350) else caught-fail) in
        {1022}let cs_47: cipherstate = (if v_351 then 1-proj-3-tuple(v_350) else caught-fail) in
        {1023}let input_key_material_11: key = (if v_351 then zero else caught-fail) in
        {1024}let output1_11: key = (if v_351 then hmac_hash1(ck_57,input_key_material_11) else caught-fail) in
        {1025}let output2_11: key = (if v_351 then hmac_hash2(ck_57,input_key_material_11) else caught-fail) in
        {1026}let output3_11: key = (if v_351 then hmac_hash3(ck_57,input_key_material_11) else caught-fail) in
        {1027}let v_352: bitstring = (if v_351 then catch-fail((output1_11,output2_11,output3_11)) else caught-fail) in
        {1028}let v_353: bool = (not-caught-fail(v_352) && success?(1-proj-3-tuple(v_352))) in
        {1029}let temp_k3_1: key = (if v_353 then 3-proj-3-tuple(v_352) else caught-fail) in
        {1030}let temp_k2_1: key = (if v_353 then 2-proj-3-tuple(v_352) else caught-fail) in
        {1031}let temp_k1_1: key = (if v_353 then 1-proj-3-tuple(v_352) else caught-fail) in
        {1032}let cs1_5: cipherstate = (if v_353 then cipherstatepack(temp_k1_1,minnonce) else caught-fail) in
        {1033}let cs2_5: cipherstate = (if v_353 then cipherstatepack(temp_k2_1,minnonce) else caught-fail) in
        {1034}let v_354: bitstring = (if v_349 then catch-fail((if v_351 then (if v_353 then (ss_53,cs1_5,cs2_5) else fail-any) else fail-any)) else caught-fail) in
        {1035}let v_355: bool = (not-caught-fail(v_354) && success?(1-proj-3-tuple(v_354))) in
        {1036}let cs2_6: cipherstate = (if v_355 then 3-proj-3-tuple(v_354) else caught-fail) in
        {1037}let cs1_6: cipherstate = (if v_355 then 2-proj-3-tuple(v_354) else caught-fail) in
        {1038}let ssi_13: symmetricstate = (if v_355 then 1-proj-3-tuple(v_354) else caught-fail) in
        {1039}let (hs_27: handshakestate,message_c_1: bitstring,cs1_7: cipherstate,cs2_7: cipherstate) = (if v_283 then (if v_285 then (if v_287 then (if v_302 then (if v_304 then (if v_319 then (if v_327 then (if v_335 then (if v_349 then (if v_355 then (hs_26,message_buffer_4,cs1_6,cs2_6) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1040}event SendMsg(me_1,them_1,stagepack_c(sid_2),msg_c(me_1,them_1,sid_2));
        {1041}insert statestore(me_1,them_1,sid_2,statepack_d(hs_27,cs1_7,cs2_7));
        {1042}out(pub, message_c_1)
    ) | (
        {1044}!
        {1110}get statestore(=me_1,=them_1,=sid_2,statepack_d(hs_28: handshakestate,cs1_8: cipherstate,cs2_8: cipherstate)) in
        {1045}let hs_29: handshakestate = handshakestatesetcs(hs_28,cs2_8) in
        {1046}in(pub, message_d_1: bitstring);
        {1047}let v_356: bitstring = catch-fail(handshakestateunpack(hs_29)) in
        {1048}let v_357: bool = (not-caught-fail(v_356) && success?(1-proj-9-tuple(v_356))) in
        {1049}let initiator_9: bool = (if v_357 then 9-proj-9-tuple(v_356) else caught-fail) in
        {1050}let psk_10: key = (if v_357 then 8-proj-9-tuple(v_356) else caught-fail) in
        {1051}let re_12: key = (if v_357 then 7-proj-9-tuple(v_356) else caught-fail) in
        {1052}let rm_10: key = (if v_357 then 6-proj-9-tuple(v_356) else caught-fail) in
        {1053}let rs_10: key = (if v_357 then 5-proj-9-tuple(v_356) else caught-fail) in
        {1054}let e_21: keypair = (if v_357 then 4-proj-9-tuple(v_356) else caught-fail) in
        {1055}let m_12: keypair = (if v_357 then 3-proj-9-tuple(v_356) else caught-fail) in
        {1056}let s_12: keypair = (if v_357 then 2-proj-9-tuple(v_356) else caught-fail) in
        {1057}let ss_54: symmetricstate = (if v_357 then 1-proj-9-tuple(v_356) else caught-fail) in
        {1058}let v_358: bitstring = (if v_357 then catch-fail(deconcat3(message_d_1)) else caught-fail) in
        {1059}let v_359: bool = (not-caught-fail(v_358) && success?(1-proj-3-tuple(v_358))) in
        {1060}let ciphertext_22: bitstring = (if v_359 then 3-proj-3-tuple(v_358) else caught-fail) in
        {1061}let ns_10: bitstring = (if v_359 then 2-proj-3-tuple(v_358) else caught-fail) in
        {1062}let ne_8: bitstring = (if v_359 then 1-proj-3-tuple(v_358) else caught-fail) in
        {1063}let valid1_3: bool = (if v_359 then true else caught-fail) in
        {1064}let v_360: bitstring = (if v_359 then catch-fail(symmetricstateunpack(ss_54)) else caught-fail) in
        {1065}let v_361: bool = (not-caught-fail(v_360) && success?(1-proj-3-tuple(v_360))) in
        {1066}let h_48: bitstring = (if v_361 then 3-proj-3-tuple(v_360) else caught-fail) in
        {1067}let ck_58: key = (if v_361 then 2-proj-3-tuple(v_360) else caught-fail) in
        {1068}let cs_48: cipherstate = (if v_361 then 1-proj-3-tuple(v_360) else caught-fail) in
        {1069}let v_362: bitstring = (if v_361 then catch-fail(cipherstateunpack(cs_48)) else caught-fail) in
        {1070}let v_363: bool = (not-caught-fail(v_362) && success?(1-proj-2-tuple(v_362))) in
        {1071}let n_24: nonce = (if v_363 then 2-proj-2-tuple(v_362) else caught-fail) in
        {1072}let k_26: key = (if v_363 then 1-proj-2-tuple(v_362) else caught-fail) in
        {1073}let d_3: aead = (if v_363 then catch-fail(decrypt(k_26,n_24,h_48,ciphertext_22)) else caught-fail) in
        {1074}let v_364: bool = not-caught-fail(d_3) in
        {1075}let v_365: bitstring = (if v_364 then catch-fail(aeadunpack(d_3)) else caught-fail) in
        {1076}let v_366: bool = (not-caught-fail(v_365) && success?(1-proj-3-tuple(v_365))) in
        {1077}let plaintext_13: bitstring = (if v_366 then 3-proj-3-tuple(v_365) else caught-fail) in
        {1078}let adi_3: bitstring = (if v_366 then 2-proj-3-tuple(v_365) else caught-fail) in
        {1079}let valid_9: bool = (if v_366 then 1-proj-3-tuple(v_365) else caught-fail) in
        {1080}let n_25: nonce = (if v_366 then increment_nonce(n_24) else caught-fail) in
        {1081}let v_367: bitstring = (if v_366 then catch-fail(cipherstateunpack(cs_48)) else caught-fail) in
        {1082}let v_368: bool = (not-caught-fail(v_367) && success?(1-proj-2-tuple(v_367))) in
        {1083}let o_12: nonce = (if v_368 then 2-proj-2-tuple(v_367) else caught-fail) in
        {1084}let k_27: key = (if v_368 then 1-proj-2-tuple(v_367) else caught-fail) in
        {1085}let csi_24: cipherstate = (if v_366 then catch-fail((if v_368 then cipherstatepack(k_27,n_25) else fail-any)) else caught-fail) in
        {1086}let v_369: bool = not-caught-fail(csi_24) in
        {1087}let v_370: bitstring = (if v_361 then catch-fail((if v_363 then (if v_364 then (if v_366 then (if v_369 then (csi_24,plaintext_13,valid_9) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1088}let v_371: bool = (not-caught-fail(v_370) && success?(1-proj-3-tuple(v_370))) in
        {1089}let valid_10: bool = (if v_371 then 3-proj-3-tuple(v_370) else caught-fail) in
        {1090}let plaintext_14: bitstring = (if v_371 then 2-proj-3-tuple(v_370) else caught-fail) in
        {1091}let csi_25: cipherstate = (if v_371 then 1-proj-3-tuple(v_370) else caught-fail) in
        {1092}let ss_55: symmetricstate = (if v_371 then symmetricstatepack(csi_25,ck_58,h_48) else caught-fail) in
        {1093}let v_372: bitstring = (if v_371 then catch-fail(symmetricstateunpack(ss_55)) else caught-fail) in
        {1094}let v_373: bool = (not-caught-fail(v_372) && success?(1-proj-3-tuple(v_372))) in
        {1095}let h_49: bitstring = (if v_373 then 3-proj-3-tuple(v_372) else caught-fail) in
        {1096}let ck_59: key = (if v_373 then 2-proj-3-tuple(v_372) else caught-fail) in
        {1097}let cs_49: cipherstate = (if v_373 then 1-proj-3-tuple(v_372) else caught-fail) in
        {1098}let ssi_14: symmetricstate = (if v_371 then catch-fail((if v_373 then symmetricstatepack(cs_49,ck_59,hash(h_49,ciphertext_22)) else fail-any)) else caught-fail) in
        {1099}let v_374: bool = not-caught-fail(ssi_14) in
        {1100}let v_375: bitstring = (if v_359 then catch-fail((if v_361 then (if v_371 then (if v_374 then (ssi_14,plaintext_14,valid_10) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1101}let v_376: bool = (not-caught-fail(v_375) && success?(1-proj-3-tuple(v_375))) in
        {1102}let valid2_3: bool = (if v_376 then 3-proj-3-tuple(v_375) else caught-fail) in
        {1103}let plaintext_15: bitstring = (if v_376 then 2-proj-3-tuple(v_375) else caught-fail) in
        {1104}let ss_56: symmetricstate = (if v_376 then 1-proj-3-tuple(v_375) else caught-fail) in
        {1105}let v_377: bool = (if v_376 then catch-fail((valid1_3 && valid2_3)) else caught-fail) in
        {1106}let hs_30: handshakestate = (if v_377 then handshakestatepack(ss_56,s_12,m_12,e_21,rs_10,rm_10,re_12,psk_10,initiator_9) else caught-fail) in
        {1107}let (hs_31: handshakestate,plaintext_d_1: bitstring,valid_11: bool) = (if v_357 then (if v_359 then (if v_376 then (if undo-catch-fail(v_377) then (hs_30,plaintext_15,true) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1108}event RecvMsg(me_1,them_1,stagepack_d(sid_2),plaintext_d_1);
        {1109}insert statestore(me_1,them_1,sid_2,statepack_e(hs_31,cs1_8,handshakestategetcs(hs_31)))
    ) | (
        {1111}!
        {1168}get statestore(=me_1,=them_1,=sid_2,statepack_e(hs_32: handshakestate,cs1_9: cipherstate,cs2_9: cipherstate)) in
        {1112}let hs_33: handshakestate = handshakestatesetcs(hs_32,cs1_9) in
        {1113}let payload_5: bitstring = msg_e(me_1,them_1,sid_2) in
        {1114}let v_378: bitstring = catch-fail(handshakestateunpack(hs_33)) in
        {1115}let v_379: bool = (not-caught-fail(v_378) && success?(1-proj-9-tuple(v_378))) in
        {1116}let initiator_10: bool = (if v_379 then 9-proj-9-tuple(v_378) else caught-fail) in
        {1117}let psk_11: key = (if v_379 then 8-proj-9-tuple(v_378) else caught-fail) in
        {1118}let re_13: key = (if v_379 then 7-proj-9-tuple(v_378) else caught-fail) in
        {1119}let rm_11: key = (if v_379 then 6-proj-9-tuple(v_378) else caught-fail) in
        {1120}let rs_11: key = (if v_379 then 5-proj-9-tuple(v_378) else caught-fail) in
        {1121}let e_22: keypair = (if v_379 then 4-proj-9-tuple(v_378) else caught-fail) in
        {1122}let m_13: keypair = (if v_379 then 3-proj-9-tuple(v_378) else caught-fail) in
        {1123}let s_13: keypair = (if v_379 then 2-proj-9-tuple(v_378) else caught-fail) in
        {1124}let ss_57: symmetricstate = (if v_379 then 1-proj-9-tuple(v_378) else caught-fail) in
        {1125}let v_380: bitstring = (if v_379 then catch-fail((empty,empty,empty)) else caught-fail) in
        {1126}let v_381: bool = (not-caught-fail(v_380) && success?(1-proj-3-tuple(v_380))) in
        {1127}let ciphertext_23: bitstring = (if v_381 then 3-proj-3-tuple(v_380) else caught-fail) in
        {1128}let ns_11: bitstring = (if v_381 then 2-proj-3-tuple(v_380) else caught-fail) in
        {1129}let ne_9: bitstring = (if v_381 then 1-proj-3-tuple(v_380) else caught-fail) in
        {1130}let v_382: bitstring = (if v_381 then catch-fail(symmetricstateunpack(ss_57)) else caught-fail) in
        {1131}let v_383: bool = (not-caught-fail(v_382) && success?(1-proj-3-tuple(v_382))) in
        {1132}let h_50: bitstring = (if v_383 then 3-proj-3-tuple(v_382) else caught-fail) in
        {1133}let ck_60: key = (if v_383 then 2-proj-3-tuple(v_382) else caught-fail) in
        {1134}let cs_50: cipherstate = (if v_383 then 1-proj-3-tuple(v_382) else caught-fail) in
        {1135}let v_384: bitstring = (if v_383 then catch-fail(cipherstateunpack(cs_50)) else caught-fail) in
        {1136}let v_385: bool = (not-caught-fail(v_384) && success?(1-proj-2-tuple(v_384))) in
        {1137}let n_26: nonce = (if v_385 then 2-proj-2-tuple(v_384) else caught-fail) in
        {1138}let k_28: key = (if v_385 then 1-proj-2-tuple(v_384) else caught-fail) in
        {1139}let e_23: bitstring = (if v_385 then encrypt(k_28,n_26,h_50,payload_5) else caught-fail) in
        {1140}let n_27: nonce = (if v_385 then increment_nonce(n_26) else caught-fail) in
        {1141}let v_386: bitstring = (if v_385 then catch-fail(cipherstateunpack(cs_50)) else caught-fail) in
        {1142}let v_387: bool = (not-caught-fail(v_386) && success?(1-proj-2-tuple(v_386))) in
        {1143}let o_13: nonce = (if v_387 then 2-proj-2-tuple(v_386) else caught-fail) in
        {1144}let k_29: key = (if v_387 then 1-proj-2-tuple(v_386) else caught-fail) in
        {1145}let csi_26: cipherstate = (if v_385 then catch-fail((if v_387 then cipherstatepack(k_29,n_27) else fail-any)) else caught-fail) in
        {1146}let v_388: bool = not-caught-fail(csi_26) in
        {1147}let v_389: bitstring = (if v_383 then catch-fail((if v_385 then (if v_388 then (csi_26,e_23) else fail-any) else fail-any)) else caught-fail) in
        {1148}let v_390: bool = (not-caught-fail(v_389) && success?(1-proj-2-tuple(v_389))) in
        {1149}let ciphertext_24: bitstring = (if v_390 then 2-proj-2-tuple(v_389) else caught-fail) in
        {1150}let csi_27: cipherstate = (if v_390 then 1-proj-2-tuple(v_389) else caught-fail) in
        {1151}let ss_58: symmetricstate = (if v_390 then symmetricstatepack(csi_27,ck_60,h_50) else caught-fail) in
        {1152}let v_391: bitstring = (if v_390 then catch-fail(symmetricstateunpack(ss_58)) else caught-fail) in
        {1153}let v_392: bool = (not-caught-fail(v_391) && success?(1-proj-3-tuple(v_391))) in
        {1154}let h_51: bitstring = (if v_392 then 3-proj-3-tuple(v_391) else caught-fail) in
        {1155}let ck_61: key = (if v_392 then 2-proj-3-tuple(v_391) else caught-fail) in
        {1156}let cs_51: cipherstate = (if v_392 then 1-proj-3-tuple(v_391) else caught-fail) in
        {1157}let ssi_15: symmetricstate = (if v_390 then catch-fail((if v_392 then symmetricstatepack(cs_51,ck_61,hash(h_51,ciphertext_24)) else fail-any)) else caught-fail) in
        {1158}let v_393: bool = not-caught-fail(ssi_15) in
        {1159}let v_394: bitstring = (if v_381 then catch-fail((if v_383 then (if v_390 then (if v_393 then (ssi_15,ciphertext_24) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1160}let v_395: bool = (not-caught-fail(v_394) && success?(1-proj-2-tuple(v_394))) in
        {1161}let ciphertext_25: bitstring = (if v_395 then 2-proj-2-tuple(v_394) else caught-fail) in
        {1162}let ss_59: symmetricstate = (if v_395 then 1-proj-2-tuple(v_394) else caught-fail) in
        {1163}let hs_34: handshakestate = (if v_395 then handshakestatepack(ss_59,s_13,m_13,e_22,rs_11,rm_11,re_13,psk_11,initiator_10) else caught-fail) in
        {1164}let message_buffer_5: bitstring = (if v_395 then concat3(ne_9,ns_11,ciphertext_25) else caught-fail) in
        {1165}let (hs_35: handshakestate,message_e_1: bitstring) = (if v_379 then (if v_381 then (if v_395 then (hs_34,message_buffer_5) else fail-any) else fail-any) else fail-any) in
        {1166}event SendMsg(me_1,them_1,stagepack_e(sid_2),msg_e(me_1,them_1,sid_2));
        {1167}out(pub, message_e_1)
    ) | (
        {1169}event LeakS(phase0,me_1);
        {1170}event LeakM(phase0,me_1);
        {1171}out(pub, (key_s(me_1),key_m(me_1)))
    ) | (
        {1172}phase 1;
        {1173}event LeakS(phase1,me_1);
        {1174}event LeakM(phase1,me_1);
        {1175}out(pub, (key_s(me_1),key_m(me_1)))
    )
) | (
    {1176}let me_2: principal = bob in
    {1177}let them_2: principal = alice in
    {1178}let sid_3: sessionid = sid in
    {1179}let basis_10: key = key_s(me_2) in
    {1180}let public_key_10: key = catch-fail(dhexp(basis_10,validkey(g))) in
    {1181}let v_396: bool = not-caught-fail(public_key_10) in
    {1182}let s_14: keypair = (if v_396 then keypairpack(validkey(public_key_10),basis_10) else fail-any) in
    {1183}let basis_11: key = key_m(me_2) in
    {1184}let public_key_11: key = catch-fail(dhexp(basis_11,validkey(g))) in
    {1185}let v_397: bool = not-caught-fail(public_key_11) in
    {1186}let m_14: keypair = (if v_397 then keypairpack(validkey(public_key_11),basis_11) else fail-any) in
    {1187}out(pub, (getpublickey(s_14),getpublickey(m_14)));
    (
        {1188}let e_24: keypair = keypairpack(empty,empty) in
        {1189}let rs_12: key = empty in
        {1190}let rm_12: key = empty in
        {1191}let re_14: key = empty in
        {1192}let prologue_2: bitstring = empty in
        {1193}let psk_12: key = empty in
        {1194}let protocol_name_2: bitstring = somename in
        {1195}let h_52: bitstring = hash(protocol_name_2,empty) in
        {1196}let ck_62: key = h_52 in
        {1197}let k_30: key = empty in
        {1198}let cs_52: cipherstate = cipherstatepack(k_30,minnonce) in
        {1199}let ss_60: symmetricstate = symmetricstatepack(cs_52,ck_62,h_52) in
        {1200}let v_398: bitstring = catch-fail(symmetricstateunpack(ss_60)) in
        {1201}let v_399: bool = (not-caught-fail(v_398) && success?(1-proj-3-tuple(v_398))) in
        {1202}let h_53: bitstring = (if v_399 then 3-proj-3-tuple(v_398) else caught-fail) in
        {1203}let ck_63: key = (if v_399 then 2-proj-3-tuple(v_398) else caught-fail) in
        {1204}let cs_53: cipherstate = (if v_399 then 1-proj-3-tuple(v_398) else caught-fail) in
        {1205}let ss_61: symmetricstate = catch-fail((if v_399 then symmetricstatepack(cs_53,ck_63,hash(h_53,prologue_2)) else fail-any)) in
        {1206}let v_400: bool = not-caught-fail(ss_61) in
        {1207}let data: bitstring = (if v_400 then catch-fail(getpublickey(s_14)) else caught-fail) in
        {1208}let v_401: bool = not-caught-fail(data) in
        {1209}let v_402: bitstring = (if v_401 then catch-fail(symmetricstateunpack(ss_61)) else caught-fail) in
        {1210}let v_403: bool = (not-caught-fail(v_402) && success?(1-proj-3-tuple(v_402))) in
        {1211}let h_54: bitstring = (if v_403 then 3-proj-3-tuple(v_402) else caught-fail) in
        {1212}let ck_64: key = (if v_403 then 2-proj-3-tuple(v_402) else caught-fail) in
        {1213}let cs_54: cipherstate = (if v_403 then 1-proj-3-tuple(v_402) else caught-fail) in
        {1214}let ss_62: symmetricstate = (if v_400 then catch-fail((if v_401 then (if v_403 then symmetricstatepack(cs_54,ck_64,hash(h_54,data)) else fail-any) else fail-any)) else caught-fail) in
        {1215}let v_404: bool = not-caught-fail(ss_62) in
        {1216}let data_1: bitstring = (if v_404 then catch-fail(getpublickey(m_14)) else caught-fail) in
        {1217}let v_405: bool = not-caught-fail(data_1) in
        {1218}let v_406: bitstring = (if v_405 then catch-fail(symmetricstateunpack(ss_62)) else caught-fail) in
        {1219}let v_407: bool = (not-caught-fail(v_406) && success?(1-proj-3-tuple(v_406))) in
        {1220}let h_55: bitstring = (if v_407 then 3-proj-3-tuple(v_406) else caught-fail) in
        {1221}let ck_65: key = (if v_407 then 2-proj-3-tuple(v_406) else caught-fail) in
        {1222}let cs_55: cipherstate = (if v_407 then 1-proj-3-tuple(v_406) else caught-fail) in
        {1223}let ss_63: symmetricstate = (if v_404 then catch-fail((if v_405 then (if v_407 then symmetricstatepack(cs_55,ck_65,hash(h_55,data_1)) else fail-any) else fail-any)) else caught-fail) in
        {1224}let v_408: bool = not-caught-fail(ss_63) in
        {1225}let hs_36: handshakestate = (if v_400 then (if v_404 then (if v_408 then handshakestatepack(ss_63,s_14,m_14,e_24,rs_12,rm_12,re_14,psk_12,false) else fail-any) else fail-any) else fail-any) in
        {1226}insert statestore(me_2,them_2,sid_3,statepack_a(hs_36))
    ) | (
        {1341}get statestore(=me_2,=them_2,=sid_3,statepack_a(hs_37: handshakestate)) in
        {1227}in(pub, message_a_2: bitstring);
        {1228}let v_409: bitstring = catch-fail(handshakestateunpack(hs_37)) in
        {1229}let v_410: bool = (not-caught-fail(v_409) && success?(1-proj-9-tuple(v_409))) in
        {1230}let initiator_11: bool = (if v_410 then 9-proj-9-tuple(v_409) else caught-fail) in
        {1231}let psk_13: key = (if v_410 then 8-proj-9-tuple(v_409) else caught-fail) in
        {1232}let re_15: key = (if v_410 then 7-proj-9-tuple(v_409) else caught-fail) in
        {1233}let rm_13: key = (if v_410 then 6-proj-9-tuple(v_409) else caught-fail) in
        {1234}let rs_13: key = (if v_410 then 5-proj-9-tuple(v_409) else caught-fail) in
        {1235}let e_25: keypair = (if v_410 then 4-proj-9-tuple(v_409) else caught-fail) in
        {1236}let m_15: keypair = (if v_410 then 3-proj-9-tuple(v_409) else caught-fail) in
        {1237}let s_15: keypair = (if v_410 then 2-proj-9-tuple(v_409) else caught-fail) in
        {1238}let ss_64: symmetricstate = (if v_410 then 1-proj-9-tuple(v_409) else caught-fail) in
        {1239}let v_411: bitstring = (if v_410 then catch-fail(deconcat3(message_a_2)) else caught-fail) in
        {1240}let v_412: bool = (not-caught-fail(v_411) && success?(1-proj-3-tuple(v_411))) in
        {1241}let ciphertext_26: bitstring = (if v_412 then 3-proj-3-tuple(v_411) else caught-fail) in
        {1242}let ns_12: bitstring = (if v_412 then 2-proj-3-tuple(v_411) else caught-fail) in
        {1243}let ne_10: bitstring = (if v_412 then 1-proj-3-tuple(v_411) else caught-fail) in
        {1244}let valid1_4: bool = (if v_412 then true else caught-fail) in
        {1245}let re_16: key = (if v_412 then ne_10 else caught-fail) in
        {1246}let v_413: bitstring = (if v_412 then catch-fail(symmetricstateunpack(ss_64)) else caught-fail) in
        {1247}let v_414: bool = (not-caught-fail(v_413) && success?(1-proj-3-tuple(v_413))) in
        {1248}let h_56: bitstring = (if v_414 then 3-proj-3-tuple(v_413) else caught-fail) in
        {1249}let ck_66: key = (if v_414 then 2-proj-3-tuple(v_413) else caught-fail) in
        {1250}let cs_56: cipherstate = (if v_414 then 1-proj-3-tuple(v_413) else caught-fail) in
        {1251}let ss_65: symmetricstate = (if v_412 then catch-fail((if v_414 then symmetricstatepack(cs_56,ck_66,hash(h_56,re_16)) else fail-any)) else caught-fail) in
        {1252}let v_415: bool = not-caught-fail(ss_65) in
        {1253}let v_416: bitstring = (if v_415 then catch-fail(keypairunpack(s_15)) else caught-fail) in
        {1254}let v_417: bool = (not-caught-fail(v_416) && success?(1-proj-2-tuple(v_416))) in
        {1255}let my_private_key_10: key = (if v_417 then 2-proj-2-tuple(v_416) else caught-fail) in
        {1256}let my_public_key_10: key = (if v_417 then 1-proj-2-tuple(v_416) else caught-fail) in
        {1257}let input_key_material_12: key = (if v_415 then catch-fail((if v_417 then dhexp(my_private_key_10,re_16) else fail-any)) else caught-fail) in
        {1258}let v_418: bool = not-caught-fail(input_key_material_12) in
        {1259}let v_419: bitstring = (if v_418 then catch-fail(symmetricstateunpack(ss_65)) else caught-fail) in
        {1260}let v_420: bool = (not-caught-fail(v_419) && success?(1-proj-3-tuple(v_419))) in
        {1261}let h_57: bitstring = (if v_420 then 3-proj-3-tuple(v_419) else caught-fail) in
        {1262}let ck_67: key = (if v_420 then 2-proj-3-tuple(v_419) else caught-fail) in
        {1263}let cs_57: cipherstate = (if v_420 then 1-proj-3-tuple(v_419) else caught-fail) in
        {1264}let output1_12: key = (if v_420 then hmac_hash1(ck_67,input_key_material_12) else caught-fail) in
        {1265}let output2_12: key = (if v_420 then hmac_hash2(ck_67,input_key_material_12) else caught-fail) in
        {1266}let output3_12: key = (if v_420 then hmac_hash3(ck_67,input_key_material_12) else caught-fail) in
        {1267}let v_421: bitstring = (if v_420 then catch-fail((output1_12,output2_12,output3_12)) else caught-fail) in
        {1268}let v_422: bool = (not-caught-fail(v_421) && success?(1-proj-3-tuple(v_421))) in
        {1269}let output_10: key = (if v_422 then 3-proj-3-tuple(v_421) else caught-fail) in
        {1270}let temp_k_10: key = (if v_422 then 2-proj-3-tuple(v_421) else caught-fail) in
        {1271}let ck_68: key = (if v_422 then 1-proj-3-tuple(v_421) else caught-fail) in
        {1272}let ss_66: symmetricstate = (if v_415 then catch-fail((if v_418 then (if v_420 then (if v_422 then symmetricstatepack(cipherstatepack(temp_k_10,minnonce),ck_68,h_57) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1273}let v_423: bool = not-caught-fail(ss_66) in
        {1274}let v_424: bitstring = (if v_423 then catch-fail(keypairunpack(m_15)) else caught-fail) in
        {1275}let v_425: bool = (not-caught-fail(v_424) && success?(1-proj-2-tuple(v_424))) in
        {1276}let my_private_key_11: key = (if v_425 then 2-proj-2-tuple(v_424) else caught-fail) in
        {1277}let my_public_key_11: key = (if v_425 then 1-proj-2-tuple(v_424) else caught-fail) in
        {1278}let input_key_material_13: key = (if v_423 then catch-fail((if v_425 then dhexp(my_private_key_11,re_16) else fail-any)) else caught-fail) in
        {1279}let v_426: bool = not-caught-fail(input_key_material_13) in
        {1280}let v_427: bitstring = (if v_426 then catch-fail(symmetricstateunpack(ss_66)) else caught-fail) in
        {1281}let v_428: bool = (not-caught-fail(v_427) && success?(1-proj-3-tuple(v_427))) in
        {1282}let h_58: bitstring = (if v_428 then 3-proj-3-tuple(v_427) else caught-fail) in
        {1283}let ck_69: key = (if v_428 then 2-proj-3-tuple(v_427) else caught-fail) in
        {1284}let cs_58: cipherstate = (if v_428 then 1-proj-3-tuple(v_427) else caught-fail) in
        {1285}let output1_13: key = (if v_428 then hmac_hash1(ck_69,input_key_material_13) else caught-fail) in
        {1286}let output2_13: key = (if v_428 then hmac_hash2(ck_69,input_key_material_13) else caught-fail) in
        {1287}let output3_13: key = (if v_428 then hmac_hash3(ck_69,input_key_material_13) else caught-fail) in
        {1288}let v_429: bitstring = (if v_428 then catch-fail((output1_13,output2_13,output3_13)) else caught-fail) in
        {1289}let v_430: bool = (not-caught-fail(v_429) && success?(1-proj-3-tuple(v_429))) in
        {1290}let output_11: key = (if v_430 then 3-proj-3-tuple(v_429) else caught-fail) in
        {1291}let temp_k_11: key = (if v_430 then 2-proj-3-tuple(v_429) else caught-fail) in
        {1292}let ck_70: key = (if v_430 then 1-proj-3-tuple(v_429) else caught-fail) in
        {1293}let ss_67: symmetricstate = (if v_423 then catch-fail((if v_426 then (if v_428 then (if v_430 then symmetricstatepack(cipherstatepack(temp_k_11,minnonce),ck_70,h_58) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1294}let v_431: bool = not-caught-fail(ss_67) in
        {1295}let v_432: bitstring = (if v_431 then catch-fail(symmetricstateunpack(ss_67)) else caught-fail) in
        {1296}let v_433: bool = (not-caught-fail(v_432) && success?(1-proj-3-tuple(v_432))) in
        {1297}let h_59: bitstring = (if v_433 then 3-proj-3-tuple(v_432) else caught-fail) in
        {1298}let ck_71: key = (if v_433 then 2-proj-3-tuple(v_432) else caught-fail) in
        {1299}let cs_59: cipherstate = (if v_433 then 1-proj-3-tuple(v_432) else caught-fail) in
        {1300}let v_434: bitstring = (if v_433 then catch-fail(cipherstateunpack(cs_59)) else caught-fail) in
        {1301}let v_435: bool = (not-caught-fail(v_434) && success?(1-proj-2-tuple(v_434))) in
        {1302}let n_28: nonce = (if v_435 then 2-proj-2-tuple(v_434) else caught-fail) in
        {1303}let k_31: key = (if v_435 then 1-proj-2-tuple(v_434) else caught-fail) in
        {1304}let d_4: aead = (if v_435 then catch-fail(decrypt(k_31,n_28,h_59,ciphertext_26)) else caught-fail) in
        {1305}let v_436: bool = not-caught-fail(d_4) in
        {1306}let v_437: bitstring = (if v_436 then catch-fail(aeadunpack(d_4)) else caught-fail) in
        {1307}let v_438: bool = (not-caught-fail(v_437) && success?(1-proj-3-tuple(v_437))) in
        {1308}let plaintext_16: bitstring = (if v_438 then 3-proj-3-tuple(v_437) else caught-fail) in
        {1309}let adi_4: bitstring = (if v_438 then 2-proj-3-tuple(v_437) else caught-fail) in
        {1310}let valid_12: bool = (if v_438 then 1-proj-3-tuple(v_437) else caught-fail) in
        {1311}let n_29: nonce = (if v_438 then increment_nonce(n_28) else caught-fail) in
        {1312}let v_439: bitstring = (if v_438 then catch-fail(cipherstateunpack(cs_59)) else caught-fail) in
        {1313}let v_440: bool = (not-caught-fail(v_439) && success?(1-proj-2-tuple(v_439))) in
        {1314}let o_14: nonce = (if v_440 then 2-proj-2-tuple(v_439) else caught-fail) in
        {1315}let k_32: key = (if v_440 then 1-proj-2-tuple(v_439) else caught-fail) in
        {1316}let csi_28: cipherstate = (if v_438 then catch-fail((if v_440 then cipherstatepack(k_32,n_29) else fail-any)) else caught-fail) in
        {1317}let v_441: bool = not-caught-fail(csi_28) in
        {1318}let v_442: bitstring = (if v_433 then catch-fail((if v_435 then (if v_436 then (if v_438 then (if v_441 then (csi_28,plaintext_16,valid_12) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1319}let v_443: bool = (not-caught-fail(v_442) && success?(1-proj-3-tuple(v_442))) in
        {1320}let valid_13: bool = (if v_443 then 3-proj-3-tuple(v_442) else caught-fail) in
        {1321}let plaintext_17: bitstring = (if v_443 then 2-proj-3-tuple(v_442) else caught-fail) in
        {1322}let csi_29: cipherstate = (if v_443 then 1-proj-3-tuple(v_442) else caught-fail) in
        {1323}let ss_68: symmetricstate = (if v_443 then symmetricstatepack(csi_29,ck_71,h_59) else caught-fail) in
        {1324}let v_444: bitstring = (if v_443 then catch-fail(symmetricstateunpack(ss_68)) else caught-fail) in
        {1325}let v_445: bool = (not-caught-fail(v_444) && success?(1-proj-3-tuple(v_444))) in
        {1326}let h_60: bitstring = (if v_445 then 3-proj-3-tuple(v_444) else caught-fail) in
        {1327}let ck_72: key = (if v_445 then 2-proj-3-tuple(v_444) else caught-fail) in
        {1328}let cs_60: cipherstate = (if v_445 then 1-proj-3-tuple(v_444) else caught-fail) in
        {1329}let ssi_16: symmetricstate = (if v_443 then catch-fail((if v_445 then symmetricstatepack(cs_60,ck_72,hash(h_60,ciphertext_26)) else fail-any)) else caught-fail) in
        {1330}let v_446: bool = not-caught-fail(ssi_16) in
        {1331}let v_447: bitstring = (if v_431 then catch-fail((if v_433 then (if v_443 then (if v_446 then (ssi_16,plaintext_17,valid_13) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1332}let v_448: bool = (not-caught-fail(v_447) && success?(1-proj-3-tuple(v_447))) in
        {1333}let valid2_4: bool = (if v_448 then 3-proj-3-tuple(v_447) else caught-fail) in
        {1334}let plaintext_18: bitstring = (if v_448 then 2-proj-3-tuple(v_447) else caught-fail) in
        {1335}let ss_69: symmetricstate = (if v_448 then 1-proj-3-tuple(v_447) else caught-fail) in
        {1336}let v_449: bool = (if v_448 then catch-fail((valid1_4 && valid2_4)) else caught-fail) in
        {1337}let hs_38: handshakestate = (if v_449 then handshakestatepack(ss_69,s_15,m_15,e_25,rs_13,rm_13,re_16,psk_13,initiator_11) else caught-fail) in
        {1338}let (hs_39: handshakestate,plaintext_a: bitstring,valid_14: bool) = (if v_410 then (if v_412 then (if v_415 then (if v_423 then (if v_431 then (if v_448 then (if undo-catch-fail(v_449) then (hs_38,plaintext_18,true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1339}event RecvMsg(me_2,them_2,stagepack_a(sid_3),plaintext_a);
        {1340}insert statestore(me_2,them_2,sid_3,statepack_b(hs_39))
    ) | (
        {1433}get statestore(=me_2,=them_2,=sid_3,statepack_b(hs_40: handshakestate)) in
        {1342}let payload_6: bitstring = msg_b(me_2,them_2,sid_3) in
        {1343}let v_450: bitstring = catch-fail(handshakestateunpack(hs_40)) in
        {1344}let v_451: bool = (not-caught-fail(v_450) && success?(1-proj-9-tuple(v_450))) in
        {1345}let initiator_12: bool = (if v_451 then 9-proj-9-tuple(v_450) else caught-fail) in
        {1346}let psk_14: key = (if v_451 then 8-proj-9-tuple(v_450) else caught-fail) in
        {1347}let re_17: key = (if v_451 then 7-proj-9-tuple(v_450) else caught-fail) in
        {1348}let rm_14: key = (if v_451 then 6-proj-9-tuple(v_450) else caught-fail) in
        {1349}let rs_14: key = (if v_451 then 5-proj-9-tuple(v_450) else caught-fail) in
        {1350}let e_26: keypair = (if v_451 then 4-proj-9-tuple(v_450) else caught-fail) in
        {1351}let m_16: keypair = (if v_451 then 3-proj-9-tuple(v_450) else caught-fail) in
        {1352}let s_16: keypair = (if v_451 then 2-proj-9-tuple(v_450) else caught-fail) in
        {1353}let ss_70: symmetricstate = (if v_451 then 1-proj-9-tuple(v_450) else caught-fail) in
        {1354}let v_452: bitstring = (if v_451 then catch-fail((empty,empty,empty)) else caught-fail) in
        {1355}let v_453: bool = (not-caught-fail(v_452) && success?(1-proj-3-tuple(v_452))) in
        {1356}let ciphertext_27: bitstring = (if v_453 then 3-proj-3-tuple(v_452) else caught-fail) in
        {1357}let ns_13: bitstring = (if v_453 then 2-proj-3-tuple(v_452) else caught-fail) in
        {1358}let ne_11: bitstring = (if v_453 then 1-proj-3-tuple(v_452) else caught-fail) in
        {1359}let basis_12: key = (if v_453 then key_e(me_2,them_2,sid_3) else caught-fail) in
        {1360}let public_key_12: key = (if v_453 then catch-fail(dhexp(basis_12,validkey(g))) else caught-fail) in
        {1361}let v_454: bool = not-caught-fail(public_key_12) in
        {1362}let e_27: keypair = (if v_453 then catch-fail((if v_454 then keypairpack(validkey(public_key_12),basis_12) else fail-any)) else caught-fail) in
        {1363}let v_455: bool = not-caught-fail(e_27) in
        {1364}let ne_12: bitstring = (if v_455 then catch-fail(getpublickey(e_27)) else caught-fail) in
        {1365}let v_456: bool = not-caught-fail(ne_12) in
        {1366}let v_457: bitstring = (if v_456 then catch-fail(symmetricstateunpack(ss_70)) else caught-fail) in
        {1367}let v_458: bool = (not-caught-fail(v_457) && success?(1-proj-3-tuple(v_457))) in
        {1368}let h_61: bitstring = (if v_458 then 3-proj-3-tuple(v_457) else caught-fail) in
        {1369}let ck_73: key = (if v_458 then 2-proj-3-tuple(v_457) else caught-fail) in
        {1370}let cs_61: cipherstate = (if v_458 then 1-proj-3-tuple(v_457) else caught-fail) in
        {1371}let ss_71: symmetricstate = (if v_456 then catch-fail((if v_458 then symmetricstatepack(cs_61,ck_73,hash(h_61,ne_12)) else fail-any)) else caught-fail) in
        {1372}let v_459: bool = not-caught-fail(ss_71) in
        {1373}let v_460: bitstring = (if v_459 then catch-fail(keypairunpack(e_27)) else caught-fail) in
        {1374}let v_461: bool = (not-caught-fail(v_460) && success?(1-proj-2-tuple(v_460))) in
        {1375}let my_private_key_12: key = (if v_461 then 2-proj-2-tuple(v_460) else caught-fail) in
        {1376}let my_public_key_12: key = (if v_461 then 1-proj-2-tuple(v_460) else caught-fail) in
        {1377}let input_key_material_14: key = (if v_459 then catch-fail((if v_461 then dhexp(my_private_key_12,re_17) else fail-any)) else caught-fail) in
        {1378}let v_462: bool = not-caught-fail(input_key_material_14) in
        {1379}let v_463: bitstring = (if v_462 then catch-fail(symmetricstateunpack(ss_71)) else caught-fail) in
        {1380}let v_464: bool = (not-caught-fail(v_463) && success?(1-proj-3-tuple(v_463))) in
        {1381}let h_62: bitstring = (if v_464 then 3-proj-3-tuple(v_463) else caught-fail) in
        {1382}let ck_74: key = (if v_464 then 2-proj-3-tuple(v_463) else caught-fail) in
        {1383}let cs_62: cipherstate = (if v_464 then 1-proj-3-tuple(v_463) else caught-fail) in
        {1384}let output1_14: key = (if v_464 then hmac_hash1(ck_74,input_key_material_14) else caught-fail) in
        {1385}let output2_14: key = (if v_464 then hmac_hash2(ck_74,input_key_material_14) else caught-fail) in
        {1386}let output3_14: key = (if v_464 then hmac_hash3(ck_74,input_key_material_14) else caught-fail) in
        {1387}let v_465: bitstring = (if v_464 then catch-fail((output1_14,output2_14,output3_14)) else caught-fail) in
        {1388}let v_466: bool = (not-caught-fail(v_465) && success?(1-proj-3-tuple(v_465))) in
        {1389}let output_12: key = (if v_466 then 3-proj-3-tuple(v_465) else caught-fail) in
        {1390}let temp_k_12: key = (if v_466 then 2-proj-3-tuple(v_465) else caught-fail) in
        {1391}let ck_75: key = (if v_466 then 1-proj-3-tuple(v_465) else caught-fail) in
        {1392}let ss_72: symmetricstate = (if v_459 then catch-fail((if v_462 then (if v_464 then (if v_466 then symmetricstatepack(cipherstatepack(temp_k_12,minnonce),ck_75,h_62) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1393}let v_467: bool = not-caught-fail(ss_72) in
        {1394}let v_468: bitstring = (if v_467 then catch-fail(symmetricstateunpack(ss_72)) else caught-fail) in
        {1395}let v_469: bool = (not-caught-fail(v_468) && success?(1-proj-3-tuple(v_468))) in
        {1396}let h_63: bitstring = (if v_469 then 3-proj-3-tuple(v_468) else caught-fail) in
        {1397}let ck_76: key = (if v_469 then 2-proj-3-tuple(v_468) else caught-fail) in
        {1398}let cs_63: cipherstate = (if v_469 then 1-proj-3-tuple(v_468) else caught-fail) in
        {1399}let v_470: bitstring = (if v_469 then catch-fail(cipherstateunpack(cs_63)) else caught-fail) in
        {1400}let v_471: bool = (not-caught-fail(v_470) && success?(1-proj-2-tuple(v_470))) in
        {1401}let n_30: nonce = (if v_471 then 2-proj-2-tuple(v_470) else caught-fail) in
        {1402}let k_33: key = (if v_471 then 1-proj-2-tuple(v_470) else caught-fail) in
        {1403}let e_28: bitstring = (if v_471 then encrypt(k_33,n_30,h_63,payload_6) else caught-fail) in
        {1404}let n_31: nonce = (if v_471 then increment_nonce(n_30) else caught-fail) in
        {1405}let v_472: bitstring = (if v_471 then catch-fail(cipherstateunpack(cs_63)) else caught-fail) in
        {1406}let v_473: bool = (not-caught-fail(v_472) && success?(1-proj-2-tuple(v_472))) in
        {1407}let o_15: nonce = (if v_473 then 2-proj-2-tuple(v_472) else caught-fail) in
        {1408}let k_34: key = (if v_473 then 1-proj-2-tuple(v_472) else caught-fail) in
        {1409}let csi_30: cipherstate = (if v_471 then catch-fail((if v_473 then cipherstatepack(k_34,n_31) else fail-any)) else caught-fail) in
        {1410}let v_474: bool = not-caught-fail(csi_30) in
        {1411}let v_475: bitstring = (if v_469 then catch-fail((if v_471 then (if v_474 then (csi_30,e_28) else fail-any) else fail-any)) else caught-fail) in
        {1412}let v_476: bool = (not-caught-fail(v_475) && success?(1-proj-2-tuple(v_475))) in
        {1413}let ciphertext_28: bitstring = (if v_476 then 2-proj-2-tuple(v_475) else caught-fail) in
        {1414}let csi_31: cipherstate = (if v_476 then 1-proj-2-tuple(v_475) else caught-fail) in
        {1415}let ss_73: symmetricstate = (if v_476 then symmetricstatepack(csi_31,ck_76,h_63) else caught-fail) in
        {1416}let v_477: bitstring = (if v_476 then catch-fail(symmetricstateunpack(ss_73)) else caught-fail) in
        {1417}let v_478: bool = (not-caught-fail(v_477) && success?(1-proj-3-tuple(v_477))) in
        {1418}let h_64: bitstring = (if v_478 then 3-proj-3-tuple(v_477) else caught-fail) in
        {1419}let ck_77: key = (if v_478 then 2-proj-3-tuple(v_477) else caught-fail) in
        {1420}let cs_64: cipherstate = (if v_478 then 1-proj-3-tuple(v_477) else caught-fail) in
        {1421}let ssi_17: symmetricstate = (if v_476 then catch-fail((if v_478 then symmetricstatepack(cs_64,ck_77,hash(h_64,ciphertext_28)) else fail-any)) else caught-fail) in
        {1422}let v_479: bool = not-caught-fail(ssi_17) in
        {1423}let v_480: bitstring = (if v_467 then catch-fail((if v_469 then (if v_476 then (if v_479 then (ssi_17,ciphertext_28) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1424}let v_481: bool = (not-caught-fail(v_480) && success?(1-proj-2-tuple(v_480))) in
        {1425}let ciphertext_29: bitstring = (if v_481 then 2-proj-2-tuple(v_480) else caught-fail) in
        {1426}let ss_74: symmetricstate = (if v_481 then 1-proj-2-tuple(v_480) else caught-fail) in
        {1427}let hs_41: handshakestate = (if v_481 then handshakestatepack(ss_74,s_16,m_16,e_27,rs_14,rm_14,re_17,psk_14,initiator_12) else caught-fail) in
        {1428}let message_buffer_6: bitstring = (if v_481 then concat3(ne_12,ns_13,ciphertext_29) else caught-fail) in
        {1429}let (hs_42: handshakestate,message_b_2: bitstring) = (if v_451 then (if v_453 then (if v_455 then (if v_456 then (if v_459 then (if v_467 then (if v_481 then (hs_41,message_buffer_6) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1430}event SendMsg(me_2,them_2,stagepack_b(sid_3),msg_b(me_2,them_2,sid_3));
        {1431}insert statestore(me_2,them_2,sid_3,statepack_c(hs_42));
        {1432}out(pub, message_b_2)
    ) | (
        {1649}get statestore(=me_2,=them_2,=sid_3,statepack_c(hs_43: handshakestate)) in
        {1434}in(pub, message_c_2: bitstring);
        {1435}let v_482: bitstring = catch-fail(handshakestateunpack(hs_43)) in
        {1436}let v_483: bool = (not-caught-fail(v_482) && success?(1-proj-9-tuple(v_482))) in
        {1437}let initiator_13: bool = (if v_483 then 9-proj-9-tuple(v_482) else caught-fail) in
        {1438}let psk_15: key = (if v_483 then 8-proj-9-tuple(v_482) else caught-fail) in
        {1439}let re_18: key = (if v_483 then 7-proj-9-tuple(v_482) else caught-fail) in
        {1440}let rm_15: key = (if v_483 then 6-proj-9-tuple(v_482) else caught-fail) in
        {1441}let rs_15: key = (if v_483 then 5-proj-9-tuple(v_482) else caught-fail) in
        {1442}let e_29: keypair = (if v_483 then 4-proj-9-tuple(v_482) else caught-fail) in
        {1443}let m_17: keypair = (if v_483 then 3-proj-9-tuple(v_482) else caught-fail) in
        {1444}let s_17: keypair = (if v_483 then 2-proj-9-tuple(v_482) else caught-fail) in
        {1445}let ss_75: symmetricstate = (if v_483 then 1-proj-9-tuple(v_482) else caught-fail) in
        {1446}let v_484: bitstring = (if v_483 then catch-fail(deconcat3(message_c_2)) else caught-fail) in
        {1447}let v_485: bool = (not-caught-fail(v_484) && success?(1-proj-3-tuple(v_484))) in
        {1448}let ciphertext_30: bitstring = (if v_485 then 3-proj-3-tuple(v_484) else caught-fail) in
        {1449}let nm_4: bitstring = (if v_485 then 2-proj-3-tuple(v_484) else caught-fail) in
        {1450}let ns_14: bitstring = (if v_485 then 1-proj-3-tuple(v_484) else caught-fail) in
        {1451}let valid1_5: bool = (if v_485 then true else caught-fail) in
        {1452}let valid2_5: bool = (if v_485 then true else caught-fail) in
        {1453}let v_486: bitstring = (if v_485 then catch-fail(symmetricstateunpack(ss_75)) else caught-fail) in
        {1454}let v_487: bool = (not-caught-fail(v_486) && success?(1-proj-3-tuple(v_486))) in
        {1455}let h_65: bitstring = (if v_487 then 3-proj-3-tuple(v_486) else caught-fail) in
        {1456}let ck_78: key = (if v_487 then 2-proj-3-tuple(v_486) else caught-fail) in
        {1457}let cs_65: cipherstate = (if v_487 then 1-proj-3-tuple(v_486) else caught-fail) in
        {1458}let v_488: bitstring = (if v_487 then catch-fail(cipherstateunpack(cs_65)) else caught-fail) in
        {1459}let v_489: bool = (not-caught-fail(v_488) && success?(1-proj-2-tuple(v_488))) in
        {1460}let n_32: nonce = (if v_489 then 2-proj-2-tuple(v_488) else caught-fail) in
        {1461}let k_35: key = (if v_489 then 1-proj-2-tuple(v_488) else caught-fail) in
        {1462}let d_5: aead = (if v_489 then catch-fail(decrypt(k_35,n_32,h_65,ns_14)) else caught-fail) in
        {1463}let v_490: bool = not-caught-fail(d_5) in
        {1464}let v_491: bitstring = (if v_490 then catch-fail(aeadunpack(d_5)) else caught-fail) in
        {1465}let v_492: bool = (not-caught-fail(v_491) && success?(1-proj-3-tuple(v_491))) in
        {1466}let plaintext_19: bitstring = (if v_492 then 3-proj-3-tuple(v_491) else caught-fail) in
        {1467}let adi_5: bitstring = (if v_492 then 2-proj-3-tuple(v_491) else caught-fail) in
        {1468}let valid_15: bool = (if v_492 then 1-proj-3-tuple(v_491) else caught-fail) in
        {1469}let n_33: nonce = (if v_492 then increment_nonce(n_32) else caught-fail) in
        {1470}let v_493: bitstring = (if v_492 then catch-fail(cipherstateunpack(cs_65)) else caught-fail) in
        {1471}let v_494: bool = (not-caught-fail(v_493) && success?(1-proj-2-tuple(v_493))) in
        {1472}let o_16: nonce = (if v_494 then 2-proj-2-tuple(v_493) else caught-fail) in
        {1473}let k_36: key = (if v_494 then 1-proj-2-tuple(v_493) else caught-fail) in
        {1474}let csi_32: cipherstate = (if v_492 then catch-fail((if v_494 then cipherstatepack(k_36,n_33) else fail-any)) else caught-fail) in
        {1475}let v_495: bool = not-caught-fail(csi_32) in
        {1476}let v_496: bitstring = (if v_487 then catch-fail((if v_489 then (if v_490 then (if v_492 then (if v_495 then (csi_32,plaintext_19,valid_15) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1477}let v_497: bool = (not-caught-fail(v_496) && success?(1-proj-3-tuple(v_496))) in
        {1478}let valid_16: bool = (if v_497 then 3-proj-3-tuple(v_496) else caught-fail) in
        {1479}let plaintext_20: bitstring = (if v_497 then 2-proj-3-tuple(v_496) else caught-fail) in
        {1480}let csi_33: cipherstate = (if v_497 then 1-proj-3-tuple(v_496) else caught-fail) in
        {1481}let ss_76: symmetricstate = (if v_497 then symmetricstatepack(csi_33,ck_78,h_65) else caught-fail) in
        {1482}let v_498: bitstring = (if v_497 then catch-fail(symmetricstateunpack(ss_76)) else caught-fail) in
        {1483}let v_499: bool = (not-caught-fail(v_498) && success?(1-proj-3-tuple(v_498))) in
        {1484}let h_66: bitstring = (if v_499 then 3-proj-3-tuple(v_498) else caught-fail) in
        {1485}let ck_79: key = (if v_499 then 2-proj-3-tuple(v_498) else caught-fail) in
        {1486}let cs_66: cipherstate = (if v_499 then 1-proj-3-tuple(v_498) else caught-fail) in
        {1487}let ssi_18: symmetricstate = (if v_497 then catch-fail((if v_499 then symmetricstatepack(cs_66,ck_79,hash(h_66,ns_14)) else fail-any)) else caught-fail) in
        {1488}let v_500: bool = not-caught-fail(ssi_18) in
        {1489}let v_501: bitstring = (if v_485 then catch-fail((if v_487 then (if v_497 then (if v_500 then (ssi_18,plaintext_20,valid_16) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1490}let v_502: bool = (not-caught-fail(v_501) && success?(1-proj-3-tuple(v_501))) in
        {1491}let valid1_6: bool = (if v_502 then 3-proj-3-tuple(v_501) else caught-fail) in
        {1492}let nes: bitstring = (if v_502 then 2-proj-3-tuple(v_501) else caught-fail) in
        {1493}let ss_77: symmetricstate = (if v_502 then 1-proj-3-tuple(v_501) else caught-fail) in
        {1494}let rs_16: key = (if v_502 then nes else caught-fail) in
        {1495}let v_503: bitstring = (if v_502 then catch-fail(symmetricstateunpack(ss_77)) else caught-fail) in
        {1496}let v_504: bool = (not-caught-fail(v_503) && success?(1-proj-3-tuple(v_503))) in
        {1497}let h_67: bitstring = (if v_504 then 3-proj-3-tuple(v_503) else caught-fail) in
        {1498}let ck_80: key = (if v_504 then 2-proj-3-tuple(v_503) else caught-fail) in
        {1499}let cs_67: cipherstate = (if v_504 then 1-proj-3-tuple(v_503) else caught-fail) in
        {1500}let v_505: bitstring = (if v_504 then catch-fail(cipherstateunpack(cs_67)) else caught-fail) in
        {1501}let v_506: bool = (not-caught-fail(v_505) && success?(1-proj-2-tuple(v_505))) in
        {1502}let n_34: nonce = (if v_506 then 2-proj-2-tuple(v_505) else caught-fail) in
        {1503}let k_37: key = (if v_506 then 1-proj-2-tuple(v_505) else caught-fail) in
        {1504}let d_6: aead = (if v_506 then catch-fail(decrypt(k_37,n_34,h_67,nm_4)) else caught-fail) in
        {1505}let v_507: bool = not-caught-fail(d_6) in
        {1506}let v_508: bitstring = (if v_507 then catch-fail(aeadunpack(d_6)) else caught-fail) in
        {1507}let v_509: bool = (not-caught-fail(v_508) && success?(1-proj-3-tuple(v_508))) in
        {1508}let plaintext_21: bitstring = (if v_509 then 3-proj-3-tuple(v_508) else caught-fail) in
        {1509}let adi_6: bitstring = (if v_509 then 2-proj-3-tuple(v_508) else caught-fail) in
        {1510}let valid_17: bool = (if v_509 then 1-proj-3-tuple(v_508) else caught-fail) in
        {1511}let n_35: nonce = (if v_509 then increment_nonce(n_34) else caught-fail) in
        {1512}let v_510: bitstring = (if v_509 then catch-fail(cipherstateunpack(cs_67)) else caught-fail) in
        {1513}let v_511: bool = (not-caught-fail(v_510) && success?(1-proj-2-tuple(v_510))) in
        {1514}let o_17: nonce = (if v_511 then 2-proj-2-tuple(v_510) else caught-fail) in
        {1515}let k_38: key = (if v_511 then 1-proj-2-tuple(v_510) else caught-fail) in
        {1516}let csi_34: cipherstate = (if v_509 then catch-fail((if v_511 then cipherstatepack(k_38,n_35) else fail-any)) else caught-fail) in
        {1517}let v_512: bool = not-caught-fail(csi_34) in
        {1518}let v_513: bitstring = (if v_504 then catch-fail((if v_506 then (if v_507 then (if v_509 then (if v_512 then (csi_34,plaintext_21,valid_17) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1519}let v_514: bool = (not-caught-fail(v_513) && success?(1-proj-3-tuple(v_513))) in
        {1520}let valid_18: bool = (if v_514 then 3-proj-3-tuple(v_513) else caught-fail) in
        {1521}let plaintext_22: bitstring = (if v_514 then 2-proj-3-tuple(v_513) else caught-fail) in
        {1522}let csi_35: cipherstate = (if v_514 then 1-proj-3-tuple(v_513) else caught-fail) in
        {1523}let ss_78: symmetricstate = (if v_514 then symmetricstatepack(csi_35,ck_80,h_67) else caught-fail) in
        {1524}let v_515: bitstring = (if v_514 then catch-fail(symmetricstateunpack(ss_78)) else caught-fail) in
        {1525}let v_516: bool = (not-caught-fail(v_515) && success?(1-proj-3-tuple(v_515))) in
        {1526}let h_68: bitstring = (if v_516 then 3-proj-3-tuple(v_515) else caught-fail) in
        {1527}let ck_81: key = (if v_516 then 2-proj-3-tuple(v_515) else caught-fail) in
        {1528}let cs_68: cipherstate = (if v_516 then 1-proj-3-tuple(v_515) else caught-fail) in
        {1529}let ssi_19: symmetricstate = (if v_514 then catch-fail((if v_516 then symmetricstatepack(cs_68,ck_81,hash(h_68,nm_4)) else fail-any)) else caught-fail) in
        {1530}let v_517: bool = not-caught-fail(ssi_19) in
        {1531}let v_518: bitstring = (if v_502 then catch-fail((if v_504 then (if v_514 then (if v_517 then (ssi_19,plaintext_22,valid_18) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1532}let v_519: bool = (not-caught-fail(v_518) && success?(1-proj-3-tuple(v_518))) in
        {1533}let valid2_6: bool = (if v_519 then 3-proj-3-tuple(v_518) else caught-fail) in
        {1534}let nem: bitstring = (if v_519 then 2-proj-3-tuple(v_518) else caught-fail) in
        {1535}let ss_79: symmetricstate = (if v_519 then 1-proj-3-tuple(v_518) else caught-fail) in
        {1536}let rm_16: key = (if v_519 then nem else caught-fail) in
        {1537}let v_520: bitstring = (if v_519 then catch-fail(keypairunpack(e_29)) else caught-fail) in
        {1538}let v_521: bool = (not-caught-fail(v_520) && success?(1-proj-2-tuple(v_520))) in
        {1539}let my_private_key_13: key = (if v_521 then 2-proj-2-tuple(v_520) else caught-fail) in
        {1540}let my_public_key_13: key = (if v_521 then 1-proj-2-tuple(v_520) else caught-fail) in
        {1541}let input_key_material_15: key = (if v_519 then catch-fail((if v_521 then dhexp(my_private_key_13,rs_16) else fail-any)) else caught-fail) in
        {1542}let v_522: bool = not-caught-fail(input_key_material_15) in
        {1543}let v_523: bitstring = (if v_522 then catch-fail(symmetricstateunpack(ss_79)) else caught-fail) in
        {1544}let v_524: bool = (not-caught-fail(v_523) && success?(1-proj-3-tuple(v_523))) in
        {1545}let h_69: bitstring = (if v_524 then 3-proj-3-tuple(v_523) else caught-fail) in
        {1546}let ck_82: key = (if v_524 then 2-proj-3-tuple(v_523) else caught-fail) in
        {1547}let cs_69: cipherstate = (if v_524 then 1-proj-3-tuple(v_523) else caught-fail) in
        {1548}let output1_15: key = (if v_524 then hmac_hash1(ck_82,input_key_material_15) else caught-fail) in
        {1549}let output2_15: key = (if v_524 then hmac_hash2(ck_82,input_key_material_15) else caught-fail) in
        {1550}let output3_15: key = (if v_524 then hmac_hash3(ck_82,input_key_material_15) else caught-fail) in
        {1551}let v_525: bitstring = (if v_524 then catch-fail((output1_15,output2_15,output3_15)) else caught-fail) in
        {1552}let v_526: bool = (not-caught-fail(v_525) && success?(1-proj-3-tuple(v_525))) in
        {1553}let output_13: key = (if v_526 then 3-proj-3-tuple(v_525) else caught-fail) in
        {1554}let temp_k_13: key = (if v_526 then 2-proj-3-tuple(v_525) else caught-fail) in
        {1555}let ck_83: key = (if v_526 then 1-proj-3-tuple(v_525) else caught-fail) in
        {1556}let ss_80: symmetricstate = (if v_519 then catch-fail((if v_522 then (if v_524 then (if v_526 then symmetricstatepack(cipherstatepack(temp_k_13,minnonce),ck_83,h_69) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1557}let v_527: bool = not-caught-fail(ss_80) in
        {1558}let v_528: bitstring = (if v_527 then catch-fail(keypairunpack(e_29)) else caught-fail) in
        {1559}let v_529: bool = (not-caught-fail(v_528) && success?(1-proj-2-tuple(v_528))) in
        {1560}let my_private_key_14: key = (if v_529 then 2-proj-2-tuple(v_528) else caught-fail) in
        {1561}let my_public_key_14: key = (if v_529 then 1-proj-2-tuple(v_528) else caught-fail) in
        {1562}let input_key_material_16: key = (if v_527 then catch-fail((if v_529 then dhexp(my_private_key_14,rm_16) else fail-any)) else caught-fail) in
        {1563}let v_530: bool = not-caught-fail(input_key_material_16) in
        {1564}let v_531: bitstring = (if v_530 then catch-fail(symmetricstateunpack(ss_80)) else caught-fail) in
        {1565}let v_532: bool = (not-caught-fail(v_531) && success?(1-proj-3-tuple(v_531))) in
        {1566}let h_70: bitstring = (if v_532 then 3-proj-3-tuple(v_531) else caught-fail) in
        {1567}let ck_84: key = (if v_532 then 2-proj-3-tuple(v_531) else caught-fail) in
        {1568}let cs_70: cipherstate = (if v_532 then 1-proj-3-tuple(v_531) else caught-fail) in
        {1569}let output1_16: key = (if v_532 then hmac_hash1(ck_84,input_key_material_16) else caught-fail) in
        {1570}let output2_16: key = (if v_532 then hmac_hash2(ck_84,input_key_material_16) else caught-fail) in
        {1571}let output3_16: key = (if v_532 then hmac_hash3(ck_84,input_key_material_16) else caught-fail) in
        {1572}let v_533: bitstring = (if v_532 then catch-fail((output1_16,output2_16,output3_16)) else caught-fail) in
        {1573}let v_534: bool = (not-caught-fail(v_533) && success?(1-proj-3-tuple(v_533))) in
        {1574}let output_14: key = (if v_534 then 3-proj-3-tuple(v_533) else caught-fail) in
        {1575}let temp_k_14: key = (if v_534 then 2-proj-3-tuple(v_533) else caught-fail) in
        {1576}let ck_85: key = (if v_534 then 1-proj-3-tuple(v_533) else caught-fail) in
        {1577}let ss_81: symmetricstate = (if v_527 then catch-fail((if v_530 then (if v_532 then (if v_534 then symmetricstatepack(cipherstatepack(temp_k_14,minnonce),ck_85,h_70) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1578}let v_535: bool = not-caught-fail(ss_81) in
        {1579}let v_536: bitstring = (if v_535 then catch-fail(symmetricstateunpack(ss_81)) else caught-fail) in
        {1580}let v_537: bool = (not-caught-fail(v_536) && success?(1-proj-3-tuple(v_536))) in
        {1581}let h_71: bitstring = (if v_537 then 3-proj-3-tuple(v_536) else caught-fail) in
        {1582}let ck_86: key = (if v_537 then 2-proj-3-tuple(v_536) else caught-fail) in
        {1583}let cs_71: cipherstate = (if v_537 then 1-proj-3-tuple(v_536) else caught-fail) in
        {1584}let v_538: bitstring = (if v_537 then catch-fail(cipherstateunpack(cs_71)) else caught-fail) in
        {1585}let v_539: bool = (not-caught-fail(v_538) && success?(1-proj-2-tuple(v_538))) in
        {1586}let n_36: nonce = (if v_539 then 2-proj-2-tuple(v_538) else caught-fail) in
        {1587}let k_39: key = (if v_539 then 1-proj-2-tuple(v_538) else caught-fail) in
        {1588}let d_7: aead = (if v_539 then catch-fail(decrypt(k_39,n_36,h_71,ciphertext_30)) else caught-fail) in
        {1589}let v_540: bool = not-caught-fail(d_7) in
        {1590}let v_541: bitstring = (if v_540 then catch-fail(aeadunpack(d_7)) else caught-fail) in
        {1591}let v_542: bool = (not-caught-fail(v_541) && success?(1-proj-3-tuple(v_541))) in
        {1592}let plaintext_23: bitstring = (if v_542 then 3-proj-3-tuple(v_541) else caught-fail) in
        {1593}let adi_7: bitstring = (if v_542 then 2-proj-3-tuple(v_541) else caught-fail) in
        {1594}let valid_19: bool = (if v_542 then 1-proj-3-tuple(v_541) else caught-fail) in
        {1595}let n_37: nonce = (if v_542 then increment_nonce(n_36) else caught-fail) in
        {1596}let v_543: bitstring = (if v_542 then catch-fail(cipherstateunpack(cs_71)) else caught-fail) in
        {1597}let v_544: bool = (not-caught-fail(v_543) && success?(1-proj-2-tuple(v_543))) in
        {1598}let o_18: nonce = (if v_544 then 2-proj-2-tuple(v_543) else caught-fail) in
        {1599}let k_40: key = (if v_544 then 1-proj-2-tuple(v_543) else caught-fail) in
        {1600}let csi_36: cipherstate = (if v_542 then catch-fail((if v_544 then cipherstatepack(k_40,n_37) else fail-any)) else caught-fail) in
        {1601}let v_545: bool = not-caught-fail(csi_36) in
        {1602}let v_546: bitstring = (if v_537 then catch-fail((if v_539 then (if v_540 then (if v_542 then (if v_545 then (csi_36,plaintext_23,valid_19) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1603}let v_547: bool = (not-caught-fail(v_546) && success?(1-proj-3-tuple(v_546))) in
        {1604}let valid_20: bool = (if v_547 then 3-proj-3-tuple(v_546) else caught-fail) in
        {1605}let plaintext_24: bitstring = (if v_547 then 2-proj-3-tuple(v_546) else caught-fail) in
        {1606}let csi_37: cipherstate = (if v_547 then 1-proj-3-tuple(v_546) else caught-fail) in
        {1607}let ss_82: symmetricstate = (if v_547 then symmetricstatepack(csi_37,ck_86,h_71) else caught-fail) in
        {1608}let v_548: bitstring = (if v_547 then catch-fail(symmetricstateunpack(ss_82)) else caught-fail) in
        {1609}let v_549: bool = (not-caught-fail(v_548) && success?(1-proj-3-tuple(v_548))) in
        {1610}let h_72: bitstring = (if v_549 then 3-proj-3-tuple(v_548) else caught-fail) in
        {1611}let ck_87: key = (if v_549 then 2-proj-3-tuple(v_548) else caught-fail) in
        {1612}let cs_72: cipherstate = (if v_549 then 1-proj-3-tuple(v_548) else caught-fail) in
        {1613}let ssi_20: symmetricstate = (if v_547 then catch-fail((if v_549 then symmetricstatepack(cs_72,ck_87,hash(h_72,ciphertext_30)) else fail-any)) else caught-fail) in
        {1614}let v_550: bool = not-caught-fail(ssi_20) in
        {1615}let v_551: bitstring = (if v_535 then catch-fail((if v_537 then (if v_547 then (if v_550 then (ssi_20,plaintext_24,valid_20) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1616}let v_552: bool = (not-caught-fail(v_551) && success?(1-proj-3-tuple(v_551))) in
        {1617}let valid3: bool = (if v_552 then 3-proj-3-tuple(v_551) else caught-fail) in
        {1618}let plaintext_25: bitstring = (if v_552 then 2-proj-3-tuple(v_551) else caught-fail) in
        {1619}let ss_83: symmetricstate = (if v_552 then 1-proj-3-tuple(v_551) else caught-fail) in
        {1620}let basis_13: key = (if v_552 then key_s(them_2) else caught-fail) in
        {1621}let public_key_13: key = (if v_552 then catch-fail(dhexp(basis_13,validkey(g))) else caught-fail) in
        {1622}let v_553: bool = not-caught-fail(public_key_13) in
        {1623}let v_554: bool = (if v_552 then catch-fail(((valid1_6 && (valid2_6 && valid3)) && (rs_16 = getpublickey((if v_553 then keypairpack(validkey(public_key_13),basis_13) else fail-any))))) else caught-fail) in
        {1624}let hs_44: handshakestate = (if v_554 then handshakestatepack(ss_83,s_17,m_17,e_29,rs_16,rm_16,re_18,psk_15,initiator_13) else caught-fail) in
        {1625}let v_555: bitstring = (if v_554 then catch-fail(symmetricstateunpack(ss_83)) else caught-fail) in
        {1626}let v_556: bool = (not-caught-fail(v_555) && success?(1-proj-3-tuple(v_555))) in
        {1627}let h_73: bitstring = (if v_556 then 3-proj-3-tuple(v_555) else caught-fail) in
        {1628}let ck_88: key = (if v_556 then 2-proj-3-tuple(v_555) else caught-fail) in
        {1629}let cs_73: cipherstate = (if v_556 then 1-proj-3-tuple(v_555) else caught-fail) in
        {1630}let input_key_material_17: key = (if v_556 then zero else caught-fail) in
        {1631}let output1_17: key = (if v_556 then hmac_hash1(ck_88,input_key_material_17) else caught-fail) in
        {1632}let output2_17: key = (if v_556 then hmac_hash2(ck_88,input_key_material_17) else caught-fail) in
        {1633}let output3_17: key = (if v_556 then hmac_hash3(ck_88,input_key_material_17) else caught-fail) in
        {1634}let v_557: bitstring = (if v_556 then catch-fail((output1_17,output2_17,output3_17)) else caught-fail) in
        {1635}let v_558: bool = (not-caught-fail(v_557) && success?(1-proj-3-tuple(v_557))) in
        {1636}let temp_k3_2: key = (if v_558 then 3-proj-3-tuple(v_557) else caught-fail) in
        {1637}let temp_k2_2: key = (if v_558 then 2-proj-3-tuple(v_557) else caught-fail) in
        {1638}let temp_k1_2: key = (if v_558 then 1-proj-3-tuple(v_557) else caught-fail) in
        {1639}let cs1_10: cipherstate = (if v_558 then cipherstatepack(temp_k1_2,minnonce) else caught-fail) in
        {1640}let cs2_10: cipherstate = (if v_558 then cipherstatepack(temp_k2_2,minnonce) else caught-fail) in
        {1641}let v_559: bitstring = (if v_554 then catch-fail((if v_556 then (if v_558 then (ss_83,cs1_10,cs2_10) else fail-any) else fail-any)) else caught-fail) in
        {1642}let v_560: bool = (not-caught-fail(v_559) && success?(1-proj-3-tuple(v_559))) in
        {1643}let cs2_11: cipherstate = (if v_560 then 3-proj-3-tuple(v_559) else caught-fail) in
        {1644}let cs1_11: cipherstate = (if v_560 then 2-proj-3-tuple(v_559) else caught-fail) in
        {1645}let ssi_21: symmetricstate = (if v_560 then 1-proj-3-tuple(v_559) else caught-fail) in
        {1646}let (hs_45: handshakestate,plaintext_c: bitstring,valid_21: bool,cs1_12: cipherstate,cs2_12: cipherstate) = (if v_483 then (if v_485 then (if v_502 then (if v_519 then (if v_527 then (if v_535 then (if v_552 then (if undo-catch-fail(v_554) then (if v_560 then (hs_44,plaintext_25,true,cs1_11,cs2_11) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1647}event RecvMsg(me_2,them_2,stagepack_c(sid_3),plaintext_c);
        {1648}insert statestore(me_2,them_2,sid_3,statepack_d(hs_45,cs1_12,cs2_12))
    ) | (
        {1650}!
        {1708}get statestore(=me_2,=them_2,=sid_3,statepack_d(hs_46: handshakestate,cs1_13: cipherstate,cs2_13: cipherstate)) in
        {1651}let hs_47: handshakestate = handshakestatesetcs(hs_46,cs2_13) in
        {1652}let payload_7: bitstring = msg_d(me_2,them_2,sid_3) in
        {1653}let v_561: bitstring = catch-fail(handshakestateunpack(hs_47)) in
        {1654}let v_562: bool = (not-caught-fail(v_561) && success?(1-proj-9-tuple(v_561))) in
        {1655}let initiator_14: bool = (if v_562 then 9-proj-9-tuple(v_561) else caught-fail) in
        {1656}let psk_16: key = (if v_562 then 8-proj-9-tuple(v_561) else caught-fail) in
        {1657}let re_19: key = (if v_562 then 7-proj-9-tuple(v_561) else caught-fail) in
        {1658}let rm_17: key = (if v_562 then 6-proj-9-tuple(v_561) else caught-fail) in
        {1659}let rs_17: key = (if v_562 then 5-proj-9-tuple(v_561) else caught-fail) in
        {1660}let e_30: keypair = (if v_562 then 4-proj-9-tuple(v_561) else caught-fail) in
        {1661}let m_18: keypair = (if v_562 then 3-proj-9-tuple(v_561) else caught-fail) in
        {1662}let s_18: keypair = (if v_562 then 2-proj-9-tuple(v_561) else caught-fail) in
        {1663}let ss_84: symmetricstate = (if v_562 then 1-proj-9-tuple(v_561) else caught-fail) in
        {1664}let v_563: bitstring = (if v_562 then catch-fail((empty,empty,empty)) else caught-fail) in
        {1665}let v_564: bool = (not-caught-fail(v_563) && success?(1-proj-3-tuple(v_563))) in
        {1666}let ciphertext_31: bitstring = (if v_564 then 3-proj-3-tuple(v_563) else caught-fail) in
        {1667}let ns_15: bitstring = (if v_564 then 2-proj-3-tuple(v_563) else caught-fail) in
        {1668}let ne_13: bitstring = (if v_564 then 1-proj-3-tuple(v_563) else caught-fail) in
        {1669}let v_565: bitstring = (if v_564 then catch-fail(symmetricstateunpack(ss_84)) else caught-fail) in
        {1670}let v_566: bool = (not-caught-fail(v_565) && success?(1-proj-3-tuple(v_565))) in
        {1671}let h_74: bitstring = (if v_566 then 3-proj-3-tuple(v_565) else caught-fail) in
        {1672}let ck_89: key = (if v_566 then 2-proj-3-tuple(v_565) else caught-fail) in
        {1673}let cs_74: cipherstate = (if v_566 then 1-proj-3-tuple(v_565) else caught-fail) in
        {1674}let v_567: bitstring = (if v_566 then catch-fail(cipherstateunpack(cs_74)) else caught-fail) in
        {1675}let v_568: bool = (not-caught-fail(v_567) && success?(1-proj-2-tuple(v_567))) in
        {1676}let n_38: nonce = (if v_568 then 2-proj-2-tuple(v_567) else caught-fail) in
        {1677}let k_41: key = (if v_568 then 1-proj-2-tuple(v_567) else caught-fail) in
        {1678}let e_31: bitstring = (if v_568 then encrypt(k_41,n_38,h_74,payload_7) else caught-fail) in
        {1679}let n_39: nonce = (if v_568 then increment_nonce(n_38) else caught-fail) in
        {1680}let v_569: bitstring = (if v_568 then catch-fail(cipherstateunpack(cs_74)) else caught-fail) in
        {1681}let v_570: bool = (not-caught-fail(v_569) && success?(1-proj-2-tuple(v_569))) in
        {1682}let o_19: nonce = (if v_570 then 2-proj-2-tuple(v_569) else caught-fail) in
        {1683}let k_42: key = (if v_570 then 1-proj-2-tuple(v_569) else caught-fail) in
        {1684}let csi_38: cipherstate = (if v_568 then catch-fail((if v_570 then cipherstatepack(k_42,n_39) else fail-any)) else caught-fail) in
        {1685}let v_571: bool = not-caught-fail(csi_38) in
        {1686}let v_572: bitstring = (if v_566 then catch-fail((if v_568 then (if v_571 then (csi_38,e_31) else fail-any) else fail-any)) else caught-fail) in
        {1687}let v_573: bool = (not-caught-fail(v_572) && success?(1-proj-2-tuple(v_572))) in
        {1688}let ciphertext_32: bitstring = (if v_573 then 2-proj-2-tuple(v_572) else caught-fail) in
        {1689}let csi_39: cipherstate = (if v_573 then 1-proj-2-tuple(v_572) else caught-fail) in
        {1690}let ss_85: symmetricstate = (if v_573 then symmetricstatepack(csi_39,ck_89,h_74) else caught-fail) in
        {1691}let v_574: bitstring = (if v_573 then catch-fail(symmetricstateunpack(ss_85)) else caught-fail) in
        {1692}let v_575: bool = (not-caught-fail(v_574) && success?(1-proj-3-tuple(v_574))) in
        {1693}let h_75: bitstring = (if v_575 then 3-proj-3-tuple(v_574) else caught-fail) in
        {1694}let ck_90: key = (if v_575 then 2-proj-3-tuple(v_574) else caught-fail) in
        {1695}let cs_75: cipherstate = (if v_575 then 1-proj-3-tuple(v_574) else caught-fail) in
        {1696}let ssi_22: symmetricstate = (if v_573 then catch-fail((if v_575 then symmetricstatepack(cs_75,ck_90,hash(h_75,ciphertext_32)) else fail-any)) else caught-fail) in
        {1697}let v_576: bool = not-caught-fail(ssi_22) in
        {1698}let v_577: bitstring = (if v_564 then catch-fail((if v_566 then (if v_573 then (if v_576 then (ssi_22,ciphertext_32) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1699}let v_578: bool = (not-caught-fail(v_577) && success?(1-proj-2-tuple(v_577))) in
        {1700}let ciphertext_33: bitstring = (if v_578 then 2-proj-2-tuple(v_577) else caught-fail) in
        {1701}let ss_86: symmetricstate = (if v_578 then 1-proj-2-tuple(v_577) else caught-fail) in
        {1702}let hs_48: handshakestate = (if v_578 then handshakestatepack(ss_86,s_18,m_18,e_30,rs_17,rm_17,re_19,psk_16,initiator_14) else caught-fail) in
        {1703}let message_buffer_7: bitstring = (if v_578 then concat3(ne_13,ns_15,ciphertext_33) else caught-fail) in
        {1704}let (hs_49: handshakestate,message_d_2: bitstring) = (if v_562 then (if v_564 then (if v_578 then (hs_48,message_buffer_7) else fail-any) else fail-any) else fail-any) in
        {1705}event SendMsg(me_2,them_2,stagepack_d(sid_3),msg_d(me_2,them_2,sid_3));
        {1706}insert statestore(me_2,them_2,sid_3,statepack_e(hs_49,cs1_13,handshakestategetcs(hs_49)));
        {1707}out(pub, message_d_2)
    ) | (
        {1709}!
        {1775}get statestore(=me_2,=them_2,=sid_3,statepack_e(hs_50: handshakestate,cs1_14: cipherstate,cs2_14: cipherstate)) in
        {1710}let hs_51: handshakestate = handshakestatesetcs(hs_50,cs1_14) in
        {1711}in(pub, message_e_2: bitstring);
        {1712}let v_579: bitstring = catch-fail(handshakestateunpack(hs_51)) in
        {1713}let v_580: bool = (not-caught-fail(v_579) && success?(1-proj-9-tuple(v_579))) in
        {1714}let initiator_15: bool = (if v_580 then 9-proj-9-tuple(v_579) else caught-fail) in
        {1715}let psk_17: key = (if v_580 then 8-proj-9-tuple(v_579) else caught-fail) in
        {1716}let re_20: key = (if v_580 then 7-proj-9-tuple(v_579) else caught-fail) in
        {1717}let rm_18: key = (if v_580 then 6-proj-9-tuple(v_579) else caught-fail) in
        {1718}let rs_18: key = (if v_580 then 5-proj-9-tuple(v_579) else caught-fail) in
        {1719}let e_32: keypair = (if v_580 then 4-proj-9-tuple(v_579) else caught-fail) in
        {1720}let m_19: keypair = (if v_580 then 3-proj-9-tuple(v_579) else caught-fail) in
        {1721}let s_19: keypair = (if v_580 then 2-proj-9-tuple(v_579) else caught-fail) in
        {1722}let ss_87: symmetricstate = (if v_580 then 1-proj-9-tuple(v_579) else caught-fail) in
        {1723}let v_581: bitstring = (if v_580 then catch-fail(deconcat3(message_e_2)) else caught-fail) in
        {1724}let v_582: bool = (not-caught-fail(v_581) && success?(1-proj-3-tuple(v_581))) in
        {1725}let ciphertext_34: bitstring = (if v_582 then 3-proj-3-tuple(v_581) else caught-fail) in
        {1726}let ns_16: bitstring = (if v_582 then 2-proj-3-tuple(v_581) else caught-fail) in
        {1727}let ne_14: bitstring = (if v_582 then 1-proj-3-tuple(v_581) else caught-fail) in
        {1728}let valid1_7: bool = (if v_582 then true else caught-fail) in
        {1729}let v_583: bitstring = (if v_582 then catch-fail(symmetricstateunpack(ss_87)) else caught-fail) in
        {1730}let v_584: bool = (not-caught-fail(v_583) && success?(1-proj-3-tuple(v_583))) in
        {1731}let h_76: bitstring = (if v_584 then 3-proj-3-tuple(v_583) else caught-fail) in
        {1732}let ck_91: key = (if v_584 then 2-proj-3-tuple(v_583) else caught-fail) in
        {1733}let cs_76: cipherstate = (if v_584 then 1-proj-3-tuple(v_583) else caught-fail) in
        {1734}let v_585: bitstring = (if v_584 then catch-fail(cipherstateunpack(cs_76)) else caught-fail) in
        {1735}let v_586: bool = (not-caught-fail(v_585) && success?(1-proj-2-tuple(v_585))) in
        {1736}let n_40: nonce = (if v_586 then 2-proj-2-tuple(v_585) else caught-fail) in
        {1737}let k_43: key = (if v_586 then 1-proj-2-tuple(v_585) else caught-fail) in
        {1738}let d_8: aead = (if v_586 then catch-fail(decrypt(k_43,n_40,h_76,ciphertext_34)) else caught-fail) in
        {1739}let v_587: bool = not-caught-fail(d_8) in
        {1740}let v_588: bitstring = (if v_587 then catch-fail(aeadunpack(d_8)) else caught-fail) in
        {1741}let v_589: bool = (not-caught-fail(v_588) && success?(1-proj-3-tuple(v_588))) in
        {1742}let plaintext_26: bitstring = (if v_589 then 3-proj-3-tuple(v_588) else caught-fail) in
        {1743}let adi_8: bitstring = (if v_589 then 2-proj-3-tuple(v_588) else caught-fail) in
        {1744}let valid_22: bool = (if v_589 then 1-proj-3-tuple(v_588) else caught-fail) in
        {1745}let n_41: nonce = (if v_589 then increment_nonce(n_40) else caught-fail) in
        {1746}let v_590: bitstring = (if v_589 then catch-fail(cipherstateunpack(cs_76)) else caught-fail) in
        {1747}let v_591: bool = (not-caught-fail(v_590) && success?(1-proj-2-tuple(v_590))) in
        {1748}let o_20: nonce = (if v_591 then 2-proj-2-tuple(v_590) else caught-fail) in
        {1749}let k_44: key = (if v_591 then 1-proj-2-tuple(v_590) else caught-fail) in
        {1750}let csi_40: cipherstate = (if v_589 then catch-fail((if v_591 then cipherstatepack(k_44,n_41) else fail-any)) else caught-fail) in
        {1751}let v_592: bool = not-caught-fail(csi_40) in
        {1752}let v_593: bitstring = (if v_584 then catch-fail((if v_586 then (if v_587 then (if v_589 then (if v_592 then (csi_40,plaintext_26,valid_22) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1753}let v_594: bool = (not-caught-fail(v_593) && success?(1-proj-3-tuple(v_593))) in
        {1754}let valid_23: bool = (if v_594 then 3-proj-3-tuple(v_593) else caught-fail) in
        {1755}let plaintext_27: bitstring = (if v_594 then 2-proj-3-tuple(v_593) else caught-fail) in
        {1756}let csi_41: cipherstate = (if v_594 then 1-proj-3-tuple(v_593) else caught-fail) in
        {1757}let ss_88: symmetricstate = (if v_594 then symmetricstatepack(csi_41,ck_91,h_76) else caught-fail) in
        {1758}let v_595: bitstring = (if v_594 then catch-fail(symmetricstateunpack(ss_88)) else caught-fail) in
        {1759}let v_596: bool = (not-caught-fail(v_595) && success?(1-proj-3-tuple(v_595))) in
        {1760}let h_77: bitstring = (if v_596 then 3-proj-3-tuple(v_595) else caught-fail) in
        {1761}let ck_92: key = (if v_596 then 2-proj-3-tuple(v_595) else caught-fail) in
        {1762}let cs_77: cipherstate = (if v_596 then 1-proj-3-tuple(v_595) else caught-fail) in
        {1763}let ssi_23: symmetricstate = (if v_594 then catch-fail((if v_596 then symmetricstatepack(cs_77,ck_92,hash(h_77,ciphertext_34)) else fail-any)) else caught-fail) in
        {1764}let v_597: bool = not-caught-fail(ssi_23) in
        {1765}let v_598: bitstring = (if v_582 then catch-fail((if v_584 then (if v_594 then (if v_597 then (ssi_23,plaintext_27,valid_23) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1766}let v_599: bool = (not-caught-fail(v_598) && success?(1-proj-3-tuple(v_598))) in
        {1767}let valid2_7: bool = (if v_599 then 3-proj-3-tuple(v_598) else caught-fail) in
        {1768}let plaintext_28: bitstring = (if v_599 then 2-proj-3-tuple(v_598) else caught-fail) in
        {1769}let ss_89: symmetricstate = (if v_599 then 1-proj-3-tuple(v_598) else caught-fail) in
        {1770}let v_600: bool = (if v_599 then catch-fail((valid1_7 && valid2_7)) else caught-fail) in
        {1771}let hs_52: handshakestate = (if v_600 then handshakestatepack(ss_89,s_19,m_19,e_32,rs_18,rm_18,re_20,psk_17,initiator_15) else caught-fail) in
        {1772}let (hs_53: handshakestate,plaintext_e: bitstring,valid_24: bool) = (if v_580 then (if v_582 then (if v_599 then (if undo-catch-fail(v_600) then (hs_52,plaintext_28,true) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1773}event RecvMsg(me_2,them_2,stagepack_e(sid_3),plaintext_e);
        {1774}event RecvEnd(valid_24)
    ) | (
        {1776}event LeakS(phase0,me_2);
        {1777}event LeakM(phase0,me_2);
        {1778}out(pub, (key_s(me_2),key_m(me_2)))
    ) | (
        {1779}phase 1;
        {1780}event LeakS(phase1,me_2);
        {1781}event LeakM(phase1,me_2);
        {1782}out(pub, (key_s(me_2),key_m(me_2)))
    )
) | (
    {1783}let me_3: principal = bob in
    {1784}let them_3: principal = charlie in
    {1785}let sid_4: sessionid = sid in
    {1786}let basis_14: key = key_s(me_3) in
    {1787}let public_key_14: key = catch-fail(dhexp(basis_14,validkey(g))) in
    {1788}let v_601: bool = not-caught-fail(public_key_14) in
    {1789}let s_20: keypair = (if v_601 then keypairpack(validkey(public_key_14),basis_14) else fail-any) in
    {1790}let basis_15: key = key_m(me_3) in
    {1791}let public_key_15: key = catch-fail(dhexp(basis_15,validkey(g))) in
    {1792}let v_602: bool = not-caught-fail(public_key_15) in
    {1793}let m_20: keypair = (if v_602 then keypairpack(validkey(public_key_15),basis_15) else fail-any) in
    {1794}out(pub, (getpublickey(s_20),getpublickey(m_20)));
    (
        {1795}let e_33: keypair = keypairpack(empty,empty) in
        {1796}let rs_19: key = empty in
        {1797}let rm_19: key = empty in
        {1798}let re_21: key = empty in
        {1799}let prologue_3: bitstring = empty in
        {1800}let psk_18: key = empty in
        {1801}let protocol_name_3: bitstring = somename in
        {1802}let h_78: bitstring = hash(protocol_name_3,empty) in
        {1803}let ck_93: key = h_78 in
        {1804}let k_45: key = empty in
        {1805}let cs_78: cipherstate = cipherstatepack(k_45,minnonce) in
        {1806}let ss_90: symmetricstate = symmetricstatepack(cs_78,ck_93,h_78) in
        {1807}let v_603: bitstring = catch-fail(symmetricstateunpack(ss_90)) in
        {1808}let v_604: bool = (not-caught-fail(v_603) && success?(1-proj-3-tuple(v_603))) in
        {1809}let h_79: bitstring = (if v_604 then 3-proj-3-tuple(v_603) else caught-fail) in
        {1810}let ck_94: key = (if v_604 then 2-proj-3-tuple(v_603) else caught-fail) in
        {1811}let cs_79: cipherstate = (if v_604 then 1-proj-3-tuple(v_603) else caught-fail) in
        {1812}let ss_91: symmetricstate = catch-fail((if v_604 then symmetricstatepack(cs_79,ck_94,hash(h_79,prologue_3)) else fail-any)) in
        {1813}let v_605: bool = not-caught-fail(ss_91) in
        {1814}let data_2: bitstring = (if v_605 then catch-fail(getpublickey(s_20)) else caught-fail) in
        {1815}let v_606: bool = not-caught-fail(data_2) in
        {1816}let v_607: bitstring = (if v_606 then catch-fail(symmetricstateunpack(ss_91)) else caught-fail) in
        {1817}let v_608: bool = (not-caught-fail(v_607) && success?(1-proj-3-tuple(v_607))) in
        {1818}let h_80: bitstring = (if v_608 then 3-proj-3-tuple(v_607) else caught-fail) in
        {1819}let ck_95: key = (if v_608 then 2-proj-3-tuple(v_607) else caught-fail) in
        {1820}let cs_80: cipherstate = (if v_608 then 1-proj-3-tuple(v_607) else caught-fail) in
        {1821}let ss_92: symmetricstate = (if v_605 then catch-fail((if v_606 then (if v_608 then symmetricstatepack(cs_80,ck_95,hash(h_80,data_2)) else fail-any) else fail-any)) else caught-fail) in
        {1822}let v_609: bool = not-caught-fail(ss_92) in
        {1823}let data_3: bitstring = (if v_609 then catch-fail(getpublickey(m_20)) else caught-fail) in
        {1824}let v_610: bool = not-caught-fail(data_3) in
        {1825}let v_611: bitstring = (if v_610 then catch-fail(symmetricstateunpack(ss_92)) else caught-fail) in
        {1826}let v_612: bool = (not-caught-fail(v_611) && success?(1-proj-3-tuple(v_611))) in
        {1827}let h_81: bitstring = (if v_612 then 3-proj-3-tuple(v_611) else caught-fail) in
        {1828}let ck_96: key = (if v_612 then 2-proj-3-tuple(v_611) else caught-fail) in
        {1829}let cs_81: cipherstate = (if v_612 then 1-proj-3-tuple(v_611) else caught-fail) in
        {1830}let ss_93: symmetricstate = (if v_609 then catch-fail((if v_610 then (if v_612 then symmetricstatepack(cs_81,ck_96,hash(h_81,data_3)) else fail-any) else fail-any)) else caught-fail) in
        {1831}let v_613: bool = not-caught-fail(ss_93) in
        {1832}let hs_54: handshakestate = (if v_605 then (if v_609 then (if v_613 then handshakestatepack(ss_93,s_20,m_20,e_33,rs_19,rm_19,re_21,psk_18,false) else fail-any) else fail-any) else fail-any) in
        {1833}insert statestore(me_3,them_3,sid_4,statepack_a(hs_54))
    ) | (
        {1948}get statestore(=me_3,=them_3,=sid_4,statepack_a(hs_55: handshakestate)) in
        {1834}in(pub, message_a_3: bitstring);
        {1835}let v_614: bitstring = catch-fail(handshakestateunpack(hs_55)) in
        {1836}let v_615: bool = (not-caught-fail(v_614) && success?(1-proj-9-tuple(v_614))) in
        {1837}let initiator_16: bool = (if v_615 then 9-proj-9-tuple(v_614) else caught-fail) in
        {1838}let psk_19: key = (if v_615 then 8-proj-9-tuple(v_614) else caught-fail) in
        {1839}let re_22: key = (if v_615 then 7-proj-9-tuple(v_614) else caught-fail) in
        {1840}let rm_20: key = (if v_615 then 6-proj-9-tuple(v_614) else caught-fail) in
        {1841}let rs_20: key = (if v_615 then 5-proj-9-tuple(v_614) else caught-fail) in
        {1842}let e_34: keypair = (if v_615 then 4-proj-9-tuple(v_614) else caught-fail) in
        {1843}let m_21: keypair = (if v_615 then 3-proj-9-tuple(v_614) else caught-fail) in
        {1844}let s_21: keypair = (if v_615 then 2-proj-9-tuple(v_614) else caught-fail) in
        {1845}let ss_94: symmetricstate = (if v_615 then 1-proj-9-tuple(v_614) else caught-fail) in
        {1846}let v_616: bitstring = (if v_615 then catch-fail(deconcat3(message_a_3)) else caught-fail) in
        {1847}let v_617: bool = (not-caught-fail(v_616) && success?(1-proj-3-tuple(v_616))) in
        {1848}let ciphertext_35: bitstring = (if v_617 then 3-proj-3-tuple(v_616) else caught-fail) in
        {1849}let ns_17: bitstring = (if v_617 then 2-proj-3-tuple(v_616) else caught-fail) in
        {1850}let ne_15: bitstring = (if v_617 then 1-proj-3-tuple(v_616) else caught-fail) in
        {1851}let valid1_8: bool = (if v_617 then true else caught-fail) in
        {1852}let re_23: key = (if v_617 then ne_15 else caught-fail) in
        {1853}let v_618: bitstring = (if v_617 then catch-fail(symmetricstateunpack(ss_94)) else caught-fail) in
        {1854}let v_619: bool = (not-caught-fail(v_618) && success?(1-proj-3-tuple(v_618))) in
        {1855}let h_82: bitstring = (if v_619 then 3-proj-3-tuple(v_618) else caught-fail) in
        {1856}let ck_97: key = (if v_619 then 2-proj-3-tuple(v_618) else caught-fail) in
        {1857}let cs_82: cipherstate = (if v_619 then 1-proj-3-tuple(v_618) else caught-fail) in
        {1858}let ss_95: symmetricstate = (if v_617 then catch-fail((if v_619 then symmetricstatepack(cs_82,ck_97,hash(h_82,re_23)) else fail-any)) else caught-fail) in
        {1859}let v_620: bool = not-caught-fail(ss_95) in
        {1860}let v_621: bitstring = (if v_620 then catch-fail(keypairunpack(s_21)) else caught-fail) in
        {1861}let v_622: bool = (not-caught-fail(v_621) && success?(1-proj-2-tuple(v_621))) in
        {1862}let my_private_key_15: key = (if v_622 then 2-proj-2-tuple(v_621) else caught-fail) in
        {1863}let my_public_key_15: key = (if v_622 then 1-proj-2-tuple(v_621) else caught-fail) in
        {1864}let input_key_material_18: key = (if v_620 then catch-fail((if v_622 then dhexp(my_private_key_15,re_23) else fail-any)) else caught-fail) in
        {1865}let v_623: bool = not-caught-fail(input_key_material_18) in
        {1866}let v_624: bitstring = (if v_623 then catch-fail(symmetricstateunpack(ss_95)) else caught-fail) in
        {1867}let v_625: bool = (not-caught-fail(v_624) && success?(1-proj-3-tuple(v_624))) in
        {1868}let h_83: bitstring = (if v_625 then 3-proj-3-tuple(v_624) else caught-fail) in
        {1869}let ck_98: key = (if v_625 then 2-proj-3-tuple(v_624) else caught-fail) in
        {1870}let cs_83: cipherstate = (if v_625 then 1-proj-3-tuple(v_624) else caught-fail) in
        {1871}let output1_18: key = (if v_625 then hmac_hash1(ck_98,input_key_material_18) else caught-fail) in
        {1872}let output2_18: key = (if v_625 then hmac_hash2(ck_98,input_key_material_18) else caught-fail) in
        {1873}let output3_18: key = (if v_625 then hmac_hash3(ck_98,input_key_material_18) else caught-fail) in
        {1874}let v_626: bitstring = (if v_625 then catch-fail((output1_18,output2_18,output3_18)) else caught-fail) in
        {1875}let v_627: bool = (not-caught-fail(v_626) && success?(1-proj-3-tuple(v_626))) in
        {1876}let output_15: key = (if v_627 then 3-proj-3-tuple(v_626) else caught-fail) in
        {1877}let temp_k_15: key = (if v_627 then 2-proj-3-tuple(v_626) else caught-fail) in
        {1878}let ck_99: key = (if v_627 then 1-proj-3-tuple(v_626) else caught-fail) in
        {1879}let ss_96: symmetricstate = (if v_620 then catch-fail((if v_623 then (if v_625 then (if v_627 then symmetricstatepack(cipherstatepack(temp_k_15,minnonce),ck_99,h_83) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1880}let v_628: bool = not-caught-fail(ss_96) in
        {1881}let v_629: bitstring = (if v_628 then catch-fail(keypairunpack(m_21)) else caught-fail) in
        {1882}let v_630: bool = (not-caught-fail(v_629) && success?(1-proj-2-tuple(v_629))) in
        {1883}let my_private_key_16: key = (if v_630 then 2-proj-2-tuple(v_629) else caught-fail) in
        {1884}let my_public_key_16: key = (if v_630 then 1-proj-2-tuple(v_629) else caught-fail) in
        {1885}let input_key_material_19: key = (if v_628 then catch-fail((if v_630 then dhexp(my_private_key_16,re_23) else fail-any)) else caught-fail) in
        {1886}let v_631: bool = not-caught-fail(input_key_material_19) in
        {1887}let v_632: bitstring = (if v_631 then catch-fail(symmetricstateunpack(ss_96)) else caught-fail) in
        {1888}let v_633: bool = (not-caught-fail(v_632) && success?(1-proj-3-tuple(v_632))) in
        {1889}let h_84: bitstring = (if v_633 then 3-proj-3-tuple(v_632) else caught-fail) in
        {1890}let ck_100: key = (if v_633 then 2-proj-3-tuple(v_632) else caught-fail) in
        {1891}let cs_84: cipherstate = (if v_633 then 1-proj-3-tuple(v_632) else caught-fail) in
        {1892}let output1_19: key = (if v_633 then hmac_hash1(ck_100,input_key_material_19) else caught-fail) in
        {1893}let output2_19: key = (if v_633 then hmac_hash2(ck_100,input_key_material_19) else caught-fail) in
        {1894}let output3_19: key = (if v_633 then hmac_hash3(ck_100,input_key_material_19) else caught-fail) in
        {1895}let v_634: bitstring = (if v_633 then catch-fail((output1_19,output2_19,output3_19)) else caught-fail) in
        {1896}let v_635: bool = (not-caught-fail(v_634) && success?(1-proj-3-tuple(v_634))) in
        {1897}let output_16: key = (if v_635 then 3-proj-3-tuple(v_634) else caught-fail) in
        {1898}let temp_k_16: key = (if v_635 then 2-proj-3-tuple(v_634) else caught-fail) in
        {1899}let ck_101: key = (if v_635 then 1-proj-3-tuple(v_634) else caught-fail) in
        {1900}let ss_97: symmetricstate = (if v_628 then catch-fail((if v_631 then (if v_633 then (if v_635 then symmetricstatepack(cipherstatepack(temp_k_16,minnonce),ck_101,h_84) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1901}let v_636: bool = not-caught-fail(ss_97) in
        {1902}let v_637: bitstring = (if v_636 then catch-fail(symmetricstateunpack(ss_97)) else caught-fail) in
        {1903}let v_638: bool = (not-caught-fail(v_637) && success?(1-proj-3-tuple(v_637))) in
        {1904}let h_85: bitstring = (if v_638 then 3-proj-3-tuple(v_637) else caught-fail) in
        {1905}let ck_102: key = (if v_638 then 2-proj-3-tuple(v_637) else caught-fail) in
        {1906}let cs_85: cipherstate = (if v_638 then 1-proj-3-tuple(v_637) else caught-fail) in
        {1907}let v_639: bitstring = (if v_638 then catch-fail(cipherstateunpack(cs_85)) else caught-fail) in
        {1908}let v_640: bool = (not-caught-fail(v_639) && success?(1-proj-2-tuple(v_639))) in
        {1909}let n_42: nonce = (if v_640 then 2-proj-2-tuple(v_639) else caught-fail) in
        {1910}let k_46: key = (if v_640 then 1-proj-2-tuple(v_639) else caught-fail) in
        {1911}let d_9: aead = (if v_640 then catch-fail(decrypt(k_46,n_42,h_85,ciphertext_35)) else caught-fail) in
        {1912}let v_641: bool = not-caught-fail(d_9) in
        {1913}let v_642: bitstring = (if v_641 then catch-fail(aeadunpack(d_9)) else caught-fail) in
        {1914}let v_643: bool = (not-caught-fail(v_642) && success?(1-proj-3-tuple(v_642))) in
        {1915}let plaintext_29: bitstring = (if v_643 then 3-proj-3-tuple(v_642) else caught-fail) in
        {1916}let adi_9: bitstring = (if v_643 then 2-proj-3-tuple(v_642) else caught-fail) in
        {1917}let valid_25: bool = (if v_643 then 1-proj-3-tuple(v_642) else caught-fail) in
        {1918}let n_43: nonce = (if v_643 then increment_nonce(n_42) else caught-fail) in
        {1919}let v_644: bitstring = (if v_643 then catch-fail(cipherstateunpack(cs_85)) else caught-fail) in
        {1920}let v_645: bool = (not-caught-fail(v_644) && success?(1-proj-2-tuple(v_644))) in
        {1921}let o_21: nonce = (if v_645 then 2-proj-2-tuple(v_644) else caught-fail) in
        {1922}let k_47: key = (if v_645 then 1-proj-2-tuple(v_644) else caught-fail) in
        {1923}let csi_42: cipherstate = (if v_643 then catch-fail((if v_645 then cipherstatepack(k_47,n_43) else fail-any)) else caught-fail) in
        {1924}let v_646: bool = not-caught-fail(csi_42) in
        {1925}let v_647: bitstring = (if v_638 then catch-fail((if v_640 then (if v_641 then (if v_643 then (if v_646 then (csi_42,plaintext_29,valid_25) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1926}let v_648: bool = (not-caught-fail(v_647) && success?(1-proj-3-tuple(v_647))) in
        {1927}let valid_26: bool = (if v_648 then 3-proj-3-tuple(v_647) else caught-fail) in
        {1928}let plaintext_30: bitstring = (if v_648 then 2-proj-3-tuple(v_647) else caught-fail) in
        {1929}let csi_43: cipherstate = (if v_648 then 1-proj-3-tuple(v_647) else caught-fail) in
        {1930}let ss_98: symmetricstate = (if v_648 then symmetricstatepack(csi_43,ck_102,h_85) else caught-fail) in
        {1931}let v_649: bitstring = (if v_648 then catch-fail(symmetricstateunpack(ss_98)) else caught-fail) in
        {1932}let v_650: bool = (not-caught-fail(v_649) && success?(1-proj-3-tuple(v_649))) in
        {1933}let h_86: bitstring = (if v_650 then 3-proj-3-tuple(v_649) else caught-fail) in
        {1934}let ck_103: key = (if v_650 then 2-proj-3-tuple(v_649) else caught-fail) in
        {1935}let cs_86: cipherstate = (if v_650 then 1-proj-3-tuple(v_649) else caught-fail) in
        {1936}let ssi_24: symmetricstate = (if v_648 then catch-fail((if v_650 then symmetricstatepack(cs_86,ck_103,hash(h_86,ciphertext_35)) else fail-any)) else caught-fail) in
        {1937}let v_651: bool = not-caught-fail(ssi_24) in
        {1938}let v_652: bitstring = (if v_636 then catch-fail((if v_638 then (if v_648 then (if v_651 then (ssi_24,plaintext_30,valid_26) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1939}let v_653: bool = (not-caught-fail(v_652) && success?(1-proj-3-tuple(v_652))) in
        {1940}let valid2_8: bool = (if v_653 then 3-proj-3-tuple(v_652) else caught-fail) in
        {1941}let plaintext_31: bitstring = (if v_653 then 2-proj-3-tuple(v_652) else caught-fail) in
        {1942}let ss_99: symmetricstate = (if v_653 then 1-proj-3-tuple(v_652) else caught-fail) in
        {1943}let v_654: bool = (if v_653 then catch-fail((valid1_8 && valid2_8)) else caught-fail) in
        {1944}let hs_56: handshakestate = (if v_654 then handshakestatepack(ss_99,s_21,m_21,e_34,rs_20,rm_20,re_23,psk_19,initiator_16) else caught-fail) in
        {1945}let (hs_57: handshakestate,plaintext_a_1: bitstring,valid_27: bool) = (if v_615 then (if v_617 then (if v_620 then (if v_628 then (if v_636 then (if v_653 then (if undo-catch-fail(v_654) then (hs_56,plaintext_31,true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1946}event RecvMsg(me_3,them_3,stagepack_a(sid_4),plaintext_a_1);
        {1947}insert statestore(me_3,them_3,sid_4,statepack_b(hs_57))
    ) | (
        {2040}get statestore(=me_3,=them_3,=sid_4,statepack_b(hs_58: handshakestate)) in
        {1949}let payload_8: bitstring = msg_b(me_3,them_3,sid_4) in
        {1950}let v_655: bitstring = catch-fail(handshakestateunpack(hs_58)) in
        {1951}let v_656: bool = (not-caught-fail(v_655) && success?(1-proj-9-tuple(v_655))) in
        {1952}let initiator_17: bool = (if v_656 then 9-proj-9-tuple(v_655) else caught-fail) in
        {1953}let psk_20: key = (if v_656 then 8-proj-9-tuple(v_655) else caught-fail) in
        {1954}let re_24: key = (if v_656 then 7-proj-9-tuple(v_655) else caught-fail) in
        {1955}let rm_21: key = (if v_656 then 6-proj-9-tuple(v_655) else caught-fail) in
        {1956}let rs_21: key = (if v_656 then 5-proj-9-tuple(v_655) else caught-fail) in
        {1957}let e_35: keypair = (if v_656 then 4-proj-9-tuple(v_655) else caught-fail) in
        {1958}let m_22: keypair = (if v_656 then 3-proj-9-tuple(v_655) else caught-fail) in
        {1959}let s_22: keypair = (if v_656 then 2-proj-9-tuple(v_655) else caught-fail) in
        {1960}let ss_100: symmetricstate = (if v_656 then 1-proj-9-tuple(v_655) else caught-fail) in
        {1961}let v_657: bitstring = (if v_656 then catch-fail((empty,empty,empty)) else caught-fail) in
        {1962}let v_658: bool = (not-caught-fail(v_657) && success?(1-proj-3-tuple(v_657))) in
        {1963}let ciphertext_36: bitstring = (if v_658 then 3-proj-3-tuple(v_657) else caught-fail) in
        {1964}let ns_18: bitstring = (if v_658 then 2-proj-3-tuple(v_657) else caught-fail) in
        {1965}let ne_16: bitstring = (if v_658 then 1-proj-3-tuple(v_657) else caught-fail) in
        {1966}let basis_16: key = (if v_658 then key_e(me_3,them_3,sid_4) else caught-fail) in
        {1967}let public_key_16: key = (if v_658 then catch-fail(dhexp(basis_16,validkey(g))) else caught-fail) in
        {1968}let v_659: bool = not-caught-fail(public_key_16) in
        {1969}let e_36: keypair = (if v_658 then catch-fail((if v_659 then keypairpack(validkey(public_key_16),basis_16) else fail-any)) else caught-fail) in
        {1970}let v_660: bool = not-caught-fail(e_36) in
        {1971}let ne_17: bitstring = (if v_660 then catch-fail(getpublickey(e_36)) else caught-fail) in
        {1972}let v_661: bool = not-caught-fail(ne_17) in
        {1973}let v_662: bitstring = (if v_661 then catch-fail(symmetricstateunpack(ss_100)) else caught-fail) in
        {1974}let v_663: bool = (not-caught-fail(v_662) && success?(1-proj-3-tuple(v_662))) in
        {1975}let h_87: bitstring = (if v_663 then 3-proj-3-tuple(v_662) else caught-fail) in
        {1976}let ck_104: key = (if v_663 then 2-proj-3-tuple(v_662) else caught-fail) in
        {1977}let cs_87: cipherstate = (if v_663 then 1-proj-3-tuple(v_662) else caught-fail) in
        {1978}let ss_101: symmetricstate = (if v_661 then catch-fail((if v_663 then symmetricstatepack(cs_87,ck_104,hash(h_87,ne_17)) else fail-any)) else caught-fail) in
        {1979}let v_664: bool = not-caught-fail(ss_101) in
        {1980}let v_665: bitstring = (if v_664 then catch-fail(keypairunpack(e_36)) else caught-fail) in
        {1981}let v_666: bool = (not-caught-fail(v_665) && success?(1-proj-2-tuple(v_665))) in
        {1982}let my_private_key_17: key = (if v_666 then 2-proj-2-tuple(v_665) else caught-fail) in
        {1983}let my_public_key_17: key = (if v_666 then 1-proj-2-tuple(v_665) else caught-fail) in
        {1984}let input_key_material_20: key = (if v_664 then catch-fail((if v_666 then dhexp(my_private_key_17,re_24) else fail-any)) else caught-fail) in
        {1985}let v_667: bool = not-caught-fail(input_key_material_20) in
        {1986}let v_668: bitstring = (if v_667 then catch-fail(symmetricstateunpack(ss_101)) else caught-fail) in
        {1987}let v_669: bool = (not-caught-fail(v_668) && success?(1-proj-3-tuple(v_668))) in
        {1988}let h_88: bitstring = (if v_669 then 3-proj-3-tuple(v_668) else caught-fail) in
        {1989}let ck_105: key = (if v_669 then 2-proj-3-tuple(v_668) else caught-fail) in
        {1990}let cs_88: cipherstate = (if v_669 then 1-proj-3-tuple(v_668) else caught-fail) in
        {1991}let output1_20: key = (if v_669 then hmac_hash1(ck_105,input_key_material_20) else caught-fail) in
        {1992}let output2_20: key = (if v_669 then hmac_hash2(ck_105,input_key_material_20) else caught-fail) in
        {1993}let output3_20: key = (if v_669 then hmac_hash3(ck_105,input_key_material_20) else caught-fail) in
        {1994}let v_670: bitstring = (if v_669 then catch-fail((output1_20,output2_20,output3_20)) else caught-fail) in
        {1995}let v_671: bool = (not-caught-fail(v_670) && success?(1-proj-3-tuple(v_670))) in
        {1996}let output_17: key = (if v_671 then 3-proj-3-tuple(v_670) else caught-fail) in
        {1997}let temp_k_17: key = (if v_671 then 2-proj-3-tuple(v_670) else caught-fail) in
        {1998}let ck_106: key = (if v_671 then 1-proj-3-tuple(v_670) else caught-fail) in
        {1999}let ss_102: symmetricstate = (if v_664 then catch-fail((if v_667 then (if v_669 then (if v_671 then symmetricstatepack(cipherstatepack(temp_k_17,minnonce),ck_106,h_88) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {2000}let v_672: bool = not-caught-fail(ss_102) in
        {2001}let v_673: bitstring = (if v_672 then catch-fail(symmetricstateunpack(ss_102)) else caught-fail) in
        {2002}let v_674: bool = (not-caught-fail(v_673) && success?(1-proj-3-tuple(v_673))) in
        {2003}let h_89: bitstring = (if v_674 then 3-proj-3-tuple(v_673) else caught-fail) in
        {2004}let ck_107: key = (if v_674 then 2-proj-3-tuple(v_673) else caught-fail) in
        {2005}let cs_89: cipherstate = (if v_674 then 1-proj-3-tuple(v_673) else caught-fail) in
        {2006}let v_675: bitstring = (if v_674 then catch-fail(cipherstateunpack(cs_89)) else caught-fail) in
        {2007}let v_676: bool = (not-caught-fail(v_675) && success?(1-proj-2-tuple(v_675))) in
        {2008}let n_44: nonce = (if v_676 then 2-proj-2-tuple(v_675) else caught-fail) in
        {2009}let k_48: key = (if v_676 then 1-proj-2-tuple(v_675) else caught-fail) in
        {2010}let e_37: bitstring = (if v_676 then encrypt(k_48,n_44,h_89,payload_8) else caught-fail) in
        {2011}let n_45: nonce = (if v_676 then increment_nonce(n_44) else caught-fail) in
        {2012}let v_677: bitstring = (if v_676 then catch-fail(cipherstateunpack(cs_89)) else caught-fail) in
        {2013}let v_678: bool = (not-caught-fail(v_677) && success?(1-proj-2-tuple(v_677))) in
        {2014}let o_22: nonce = (if v_678 then 2-proj-2-tuple(v_677) else caught-fail) in
        {2015}let k_49: key = (if v_678 then 1-proj-2-tuple(v_677) else caught-fail) in
        {2016}let csi_44: cipherstate = (if v_676 then catch-fail((if v_678 then cipherstatepack(k_49,n_45) else fail-any)) else caught-fail) in
        {2017}let v_679: bool = not-caught-fail(csi_44) in
        {2018}let v_680: bitstring = (if v_674 then catch-fail((if v_676 then (if v_679 then (csi_44,e_37) else fail-any) else fail-any)) else caught-fail) in
        {2019}let v_681: bool = (not-caught-fail(v_680) && success?(1-proj-2-tuple(v_680))) in
        {2020}let ciphertext_37: bitstring = (if v_681 then 2-proj-2-tuple(v_680) else caught-fail) in
        {2021}let csi_45: cipherstate = (if v_681 then 1-proj-2-tuple(v_680) else caught-fail) in
        {2022}let ss_103: symmetricstate = (if v_681 then symmetricstatepack(csi_45,ck_107,h_89) else caught-fail) in
        {2023}let v_682: bitstring = (if v_681 then catch-fail(symmetricstateunpack(ss_103)) else caught-fail) in
        {2024}let v_683: bool = (not-caught-fail(v_682) && success?(1-proj-3-tuple(v_682))) in
        {2025}let h_90: bitstring = (if v_683 then 3-proj-3-tuple(v_682) else caught-fail) in
        {2026}let ck_108: key = (if v_683 then 2-proj-3-tuple(v_682) else caught-fail) in
        {2027}let cs_90: cipherstate = (if v_683 then 1-proj-3-tuple(v_682) else caught-fail) in
        {2028}let ssi_25: symmetricstate = (if v_681 then catch-fail((if v_683 then symmetricstatepack(cs_90,ck_108,hash(h_90,ciphertext_37)) else fail-any)) else caught-fail) in
        {2029}let v_684: bool = not-caught-fail(ssi_25) in
        {2030}let v_685: bitstring = (if v_672 then catch-fail((if v_674 then (if v_681 then (if v_684 then (ssi_25,ciphertext_37) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {2031}let v_686: bool = (not-caught-fail(v_685) && success?(1-proj-2-tuple(v_685))) in
        {2032}let ciphertext_38: bitstring = (if v_686 then 2-proj-2-tuple(v_685) else caught-fail) in
        {2033}let ss_104: symmetricstate = (if v_686 then 1-proj-2-tuple(v_685) else caught-fail) in
        {2034}let hs_59: handshakestate = (if v_686 then handshakestatepack(ss_104,s_22,m_22,e_36,rs_21,rm_21,re_24,psk_20,initiator_17) else caught-fail) in
        {2035}let message_buffer_8: bitstring = (if v_686 then concat3(ne_17,ns_18,ciphertext_38) else caught-fail) in
        {2036}let (hs_60: handshakestate,message_b_3: bitstring) = (if v_656 then (if v_658 then (if v_660 then (if v_661 then (if v_664 then (if v_672 then (if v_686 then (hs_59,message_buffer_8) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {2037}event SendMsg(me_3,them_3,stagepack_b(sid_4),msg_b(me_3,them_3,sid_4));
        {2038}insert statestore(me_3,them_3,sid_4,statepack_c(hs_60));
        {2039}out(pub, message_b_3)
    ) | (
        {2256}get statestore(=me_3,=them_3,=sid_4,statepack_c(hs_61: handshakestate)) in
        {2041}in(pub, message_c_3: bitstring);
        {2042}let v_687: bitstring = catch-fail(handshakestateunpack(hs_61)) in
        {2043}let v_688: bool = (not-caught-fail(v_687) && success?(1-proj-9-tuple(v_687))) in
        {2044}let initiator_18: bool = (if v_688 then 9-proj-9-tuple(v_687) else caught-fail) in
        {2045}let psk_21: key = (if v_688 then 8-proj-9-tuple(v_687) else caught-fail) in
        {2046}let re_25: key = (if v_688 then 7-proj-9-tuple(v_687) else caught-fail) in
        {2047}let rm_22: key = (if v_688 then 6-proj-9-tuple(v_687) else caught-fail) in
        {2048}let rs_22: key = (if v_688 then 5-proj-9-tuple(v_687) else caught-fail) in
        {2049}let e_38: keypair = (if v_688 then 4-proj-9-tuple(v_687) else caught-fail) in
        {2050}let m_23: keypair = (if v_688 then 3-proj-9-tuple(v_687) else caught-fail) in
        {2051}let s_23: keypair = (if v_688 then 2-proj-9-tuple(v_687) else caught-fail) in
        {2052}let ss_105: symmetricstate = (if v_688 then 1-proj-9-tuple(v_687) else caught-fail) in
        {2053}let v_689: bitstring = (if v_688 then catch-fail(deconcat3(message_c_3)) else caught-fail) in
        {2054}let v_690: bool = (not-caught-fail(v_689) && success?(1-proj-3-tuple(v_689))) in
        {2055}let ciphertext_39: bitstring = (if v_690 then 3-proj-3-tuple(v_689) else caught-fail) in
        {2056}let nm_5: bitstring = (if v_690 then 2-proj-3-tuple(v_689) else caught-fail) in
        {2057}let ns_19: bitstring = (if v_690 then 1-proj-3-tuple(v_689) else caught-fail) in
        {2058}let valid1_9: bool = (if v_690 then true else caught-fail) in
        {2059}let valid2_9: bool = (if v_690 then true else caught-fail) in
        {2060}let v_691: bitstring = (if v_690 then catch-fail(symmetricstateunpack(ss_105)) else caught-fail) in
        {2061}let v_692: bool = (not-caught-fail(v_691) && success?(1-proj-3-tuple(v_691))) in
        {2062}let h_91: bitstring = (if v_692 then 3-proj-3-tuple(v_691) else caught-fail) in
        {2063}let ck_109: key = (if v_692 then 2-proj-3-tuple(v_691) else caught-fail) in
        {2064}let cs_91: cipherstate = (if v_692 then 1-proj-3-tuple(v_691) else caught-fail) in
        {2065}let v_693: bitstring = (if v_692 then catch-fail(cipherstateunpack(cs_91)) else caught-fail) in
        {2066}let v_694: bool = (not-caught-fail(v_693) && success?(1-proj-2-tuple(v_693))) in
        {2067}let n_46: nonce = (if v_694 then 2-proj-2-tuple(v_693) else caught-fail) in
        {2068}let k_50: key = (if v_694 then 1-proj-2-tuple(v_693) else caught-fail) in
        {2069}let d_10: aead = (if v_694 then catch-fail(decrypt(k_50,n_46,h_91,ns_19)) else caught-fail) in
        {2070}let v_695: bool = not-caught-fail(d_10) in
        {2071}let v_696: bitstring = (if v_695 then catch-fail(aeadunpack(d_10)) else caught-fail) in
        {2072}let v_697: bool = (not-caught-fail(v_696) && success?(1-proj-3-tuple(v_696))) in
        {2073}let plaintext_32: bitstring = (if v_697 then 3-proj-3-tuple(v_696) else caught-fail) in
        {2074}let adi_10: bitstring = (if v_697 then 2-proj-3-tuple(v_696) else caught-fail) in
        {2075}let valid_28: bool = (if v_697 then 1-proj-3-tuple(v_696) else caught-fail) in
        {2076}let n_47: nonce = (if v_697 then increment_nonce(n_46) else caught-fail) in
        {2077}let v_698: bitstring = (if v_697 then catch-fail(cipherstateunpack(cs_91)) else caught-fail) in
        {2078}let v_699: bool = (not-caught-fail(v_698) && success?(1-proj-2-tuple(v_698))) in
        {2079}let o_23: nonce = (if v_699 then 2-proj-2-tuple(v_698) else caught-fail) in
        {2080}let k_51: key = (if v_699 then 1-proj-2-tuple(v_698) else caught-fail) in
        {2081}let csi_46: cipherstate = (if v_697 then catch-fail((if v_699 then cipherstatepack(k_51,n_47) else fail-any)) else caught-fail) in
        {2082}let v_700: bool = not-caught-fail(csi_46) in
        {2083}let v_701: bitstring = (if v_692 then catch-fail((if v_694 then (if v_695 then (if v_697 then (if v_700 then (csi_46,plaintext_32,valid_28) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {2084}let v_702: bool = (not-caught-fail(v_701) && success?(1-proj-3-tuple(v_701))) in
        {2085}let valid_29: bool = (if v_702 then 3-proj-3-tuple(v_701) else caught-fail) in
        {2086}let plaintext_33: bitstring = (if v_702 then 2-proj-3-tuple(v_701) else caught-fail) in
        {2087}let csi_47: cipherstate = (if v_702 then 1-proj-3-tuple(v_701) else caught-fail) in
        {2088}let ss_106: symmetricstate = (if v_702 then symmetricstatepack(csi_47,ck_109,h_91) else caught-fail) in
        {2089}let v_703: bitstring = (if v_702 then catch-fail(symmetricstateunpack(ss_106)) else caught-fail) in
        {2090}let v_704: bool = (not-caught-fail(v_703) && success?(1-proj-3-tuple(v_703))) in
        {2091}let h_92: bitstring = (if v_704 then 3-proj-3-tuple(v_703) else caught-fail) in
        {2092}let ck_110: key = (if v_704 then 2-proj-3-tuple(v_703) else caught-fail) in
        {2093}let cs_92: cipherstate = (if v_704 then 1-proj-3-tuple(v_703) else caught-fail) in
        {2094}let ssi_26: symmetricstate = (if v_702 then catch-fail((if v_704 then symmetricstatepack(cs_92,ck_110,hash(h_92,ns_19)) else fail-any)) else caught-fail) in
        {2095}let v_705: bool = not-caught-fail(ssi_26) in
        {2096}let v_706: bitstring = (if v_690 then catch-fail((if v_692 then (if v_702 then (if v_705 then (ssi_26,plaintext_33,valid_29) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {2097}let v_707: bool = (not-caught-fail(v_706) && success?(1-proj-3-tuple(v_706))) in
        {2098}let valid1_10: bool = (if v_707 then 3-proj-3-tuple(v_706) else caught-fail) in
        {2099}let nes_1: bitstring = (if v_707 then 2-proj-3-tuple(v_706) else caught-fail) in
        {2100}let ss_107: symmetricstate = (if v_707 then 1-proj-3-tuple(v_706) else caught-fail) in
        {2101}let rs_23: key = (if v_707 then nes_1 else caught-fail) in
        {2102}let v_708: bitstring = (if v_707 then catch-fail(symmetricstateunpack(ss_107)) else caught-fail) in
        {2103}let v_709: bool = (not-caught-fail(v_708) && success?(1-proj-3-tuple(v_708))) in
        {2104}let h_93: bitstring = (if v_709 then 3-proj-3-tuple(v_708) else caught-fail) in
        {2105}let ck_111: key = (if v_709 then 2-proj-3-tuple(v_708) else caught-fail) in
        {2106}let cs_93: cipherstate = (if v_709 then 1-proj-3-tuple(v_708) else caught-fail) in
        {2107}let v_710: bitstring = (if v_709 then catch-fail(cipherstateunpack(cs_93)) else caught-fail) in
        {2108}let v_711: bool = (not-caught-fail(v_710) && success?(1-proj-2-tuple(v_710))) in
        {2109}let n_48: nonce = (if v_711 then 2-proj-2-tuple(v_710) else caught-fail) in
        {2110}let k_52: key = (if v_711 then 1-proj-2-tuple(v_710) else caught-fail) in
        {2111}let d_11: aead = (if v_711 then catch-fail(decrypt(k_52,n_48,h_93,nm_5)) else caught-fail) in
        {2112}let v_712: bool = not-caught-fail(d_11) in
        {2113}let v_713: bitstring = (if v_712 then catch-fail(aeadunpack(d_11)) else caught-fail) in
        {2114}let v_714: bool = (not-caught-fail(v_713) && success?(1-proj-3-tuple(v_713))) in
        {2115}let plaintext_34: bitstring = (if v_714 then 3-proj-3-tuple(v_713) else caught-fail) in
        {2116}let adi_11: bitstring = (if v_714 then 2-proj-3-tuple(v_713) else caught-fail) in
        {2117}let valid_30: bool = (if v_714 then 1-proj-3-tuple(v_713) else caught-fail) in
        {2118}let n_49: nonce = (if v_714 then increment_nonce(n_48) else caught-fail) in
        {2119}let v_715: bitstring = (if v_714 then catch-fail(cipherstateunpack(cs_93)) else caught-fail) in
        {2120}let v_716: bool = (not-caught-fail(v_715) && success?(1-proj-2-tuple(v_715))) in
        {2121}let o_24: nonce = (if v_716 then 2-proj-2-tuple(v_715) else caught-fail) in
        {2122}let k_53: key = (if v_716 then 1-proj-2-tuple(v_715) else caught-fail) in
        {2123}let csi_48: cipherstate = (if v_714 then catch-fail((if v_716 then cipherstatepack(k_53,n_49) else fail-any)) else caught-fail) in
        {2124}let v_717: bool = not-caught-fail(csi_48) in
        {2125}let v_718: bitstring = (if v_709 then catch-fail((if v_711 then (if v_712 then (if v_714 then (if v_717 then (csi_48,plaintext_34,valid_30) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {2126}let v_719: bool = (not-caught-fail(v_718) && success?(1-proj-3-tuple(v_718))) in
        {2127}let valid_31: bool = (if v_719 then 3-proj-3-tuple(v_718) else caught-fail) in
        {2128}let plaintext_35: bitstring = (if v_719 then 2-proj-3-tuple(v_718) else caught-fail) in
        {2129}let csi_49: cipherstate = (if v_719 then 1-proj-3-tuple(v_718) else caught-fail) in
        {2130}let ss_108: symmetricstate = (if v_719 then symmetricstatepack(csi_49,ck_111,h_93) else caught-fail) in
        {2131}let v_720: bitstring = (if v_719 then catch-fail(symmetricstateunpack(ss_108)) else caught-fail) in
        {2132}let v_721: bool = (not-caught-fail(v_720) && success?(1-proj-3-tuple(v_720))) in
        {2133}let h_94: bitstring = (if v_721 then 3-proj-3-tuple(v_720) else caught-fail) in
        {2134}let ck_112: key = (if v_721 then 2-proj-3-tuple(v_720) else caught-fail) in
        {2135}let cs_94: cipherstate = (if v_721 then 1-proj-3-tuple(v_720) else caught-fail) in
        {2136}let ssi_27: symmetricstate = (if v_719 then catch-fail((if v_721 then symmetricstatepack(cs_94,ck_112,hash(h_94,nm_5)) else fail-any)) else caught-fail) in
        {2137}let v_722: bool = not-caught-fail(ssi_27) in
        {2138}let v_723: bitstring = (if v_707 then catch-fail((if v_709 then (if v_719 then (if v_722 then (ssi_27,plaintext_35,valid_31) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {2139}let v_724: bool = (not-caught-fail(v_723) && success?(1-proj-3-tuple(v_723))) in
        {2140}let valid2_10: bool = (if v_724 then 3-proj-3-tuple(v_723) else caught-fail) in
        {2141}let nem_1: bitstring = (if v_724 then 2-proj-3-tuple(v_723) else caught-fail) in
        {2142}let ss_109: symmetricstate = (if v_724 then 1-proj-3-tuple(v_723) else caught-fail) in
        {2143}let rm_23: key = (if v_724 then nem_1 else caught-fail) in
        {2144}let v_725: bitstring = (if v_724 then catch-fail(keypairunpack(e_38)) else caught-fail) in
        {2145}let v_726: bool = (not-caught-fail(v_725) && success?(1-proj-2-tuple(v_725))) in
        {2146}let my_private_key_18: key = (if v_726 then 2-proj-2-tuple(v_725) else caught-fail) in
        {2147}let my_public_key_18: key = (if v_726 then 1-proj-2-tuple(v_725) else caught-fail) in
        {2148}let input_key_material_21: key = (if v_724 then catch-fail((if v_726 then dhexp(my_private_key_18,rs_23) else fail-any)) else caught-fail) in
        {2149}let v_727: bool = not-caught-fail(input_key_material_21) in
        {2150}let v_728: bitstring = (if v_727 then catch-fail(symmetricstateunpack(ss_109)) else caught-fail) in
        {2151}let v_729: bool = (not-caught-fail(v_728) && success?(1-proj-3-tuple(v_728))) in
        {2152}let h_95: bitstring = (if v_729 then 3-proj-3-tuple(v_728) else caught-fail) in
        {2153}let ck_113: key = (if v_729 then 2-proj-3-tuple(v_728) else caught-fail) in
        {2154}let cs_95: cipherstate = (if v_729 then 1-proj-3-tuple(v_728) else caught-fail) in
        {2155}let output1_21: key = (if v_729 then hmac_hash1(ck_113,input_key_material_21) else caught-fail) in
        {2156}let output2_21: key = (if v_729 then hmac_hash2(ck_113,input_key_material_21) else caught-fail) in
        {2157}let output3_21: key = (if v_729 then hmac_hash3(ck_113,input_key_material_21) else caught-fail) in
        {2158}let v_730: bitstring = (if v_729 then catch-fail((output1_21,output2_21,output3_21)) else caught-fail) in
        {2159}let v_731: bool = (not-caught-fail(v_730) && success?(1-proj-3-tuple(v_730))) in
        {2160}let output_18: key = (if v_731 then 3-proj-3-tuple(v_730) else caught-fail) in
        {2161}let temp_k_18: key = (if v_731 then 2-proj-3-tuple(v_730) else caught-fail) in
        {2162}let ck_114: key = (if v_731 then 1-proj-3-tuple(v_730) else caught-fail) in
        {2163}let ss_110: symmetricstate = (if v_724 then catch-fail((if v_727 then (if v_729 then (if v_731 then symmetricstatepack(cipherstatepack(temp_k_18,minnonce),ck_114,h_95) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {2164}let v_732: bool = not-caught-fail(ss_110) in
        {2165}let v_733: bitstring = (if v_732 then catch-fail(keypairunpack(e_38)) else caught-fail) in
        {2166}let v_734: bool = (not-caught-fail(v_733) && success?(1-proj-2-tuple(v_733))) in
        {2167}let my_private_key_19: key = (if v_734 then 2-proj-2-tuple(v_733) else caught-fail) in
        {2168}let my_public_key_19: key = (if v_734 then 1-proj-2-tuple(v_733) else caught-fail) in
        {2169}let input_key_material_22: key = (if v_732 then catch-fail((if v_734 then dhexp(my_private_key_19,rm_23) else fail-any)) else caught-fail) in
        {2170}let v_735: bool = not-caught-fail(input_key_material_22) in
        {2171}let v_736: bitstring = (if v_735 then catch-fail(symmetricstateunpack(ss_110)) else caught-fail) in
        {2172}let v_737: bool = (not-caught-fail(v_736) && success?(1-proj-3-tuple(v_736))) in
        {2173}let h_96: bitstring = (if v_737 then 3-proj-3-tuple(v_736) else caught-fail) in
        {2174}let ck_115: key = (if v_737 then 2-proj-3-tuple(v_736) else caught-fail) in
        {2175}let cs_96: cipherstate = (if v_737 then 1-proj-3-tuple(v_736) else caught-fail) in
        {2176}let output1_22: key = (if v_737 then hmac_hash1(ck_115,input_key_material_22) else caught-fail) in
        {2177}let output2_22: key = (if v_737 then hmac_hash2(ck_115,input_key_material_22) else caught-fail) in
        {2178}let output3_22: key = (if v_737 then hmac_hash3(ck_115,input_key_material_22) else caught-fail) in
        {2179}let v_738: bitstring = (if v_737 then catch-fail((output1_22,output2_22,output3_22)) else caught-fail) in
        {2180}let v_739: bool = (not-caught-fail(v_738) && success?(1-proj-3-tuple(v_738))) in
        {2181}let output_19: key = (if v_739 then 3-proj-3-tuple(v_738) else caught-fail) in
        {2182}let temp_k_19: key = (if v_739 then 2-proj-3-tuple(v_738) else caught-fail) in
        {2183}let ck_116: key = (if v_739 then 1-proj-3-tuple(v_738) else caught-fail) in
        {2184}let ss_111: symmetricstate = (if v_732 then catch-fail((if v_735 then (if v_737 then (if v_739 then symmetricstatepack(cipherstatepack(temp_k_19,minnonce),ck_116,h_96) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {2185}let v_740: bool = not-caught-fail(ss_111) in
        {2186}let v_741: bitstring = (if v_740 then catch-fail(symmetricstateunpack(ss_111)) else caught-fail) in
        {2187}let v_742: bool = (not-caught-fail(v_741) && success?(1-proj-3-tuple(v_741))) in
        {2188}let h_97: bitstring = (if v_742 then 3-proj-3-tuple(v_741) else caught-fail) in
        {2189}let ck_117: key = (if v_742 then 2-proj-3-tuple(v_741) else caught-fail) in
        {2190}let cs_97: cipherstate = (if v_742 then 1-proj-3-tuple(v_741) else caught-fail) in
        {2191}let v_743: bitstring = (if v_742 then catch-fail(cipherstateunpack(cs_97)) else caught-fail) in
        {2192}let v_744: bool = (not-caught-fail(v_743) && success?(1-proj-2-tuple(v_743))) in
        {2193}let n_50: nonce = (if v_744 then 2-proj-2-tuple(v_743) else caught-fail) in
        {2194}let k_54: key = (if v_744 then 1-proj-2-tuple(v_743) else caught-fail) in
        {2195}let d_12: aead = (if v_744 then catch-fail(decrypt(k_54,n_50,h_97,ciphertext_39)) else caught-fail) in
        {2196}let v_745: bool = not-caught-fail(d_12) in
        {2197}let v_746: bitstring = (if v_745 then catch-fail(aeadunpack(d_12)) else caught-fail) in
        {2198}let v_747: bool = (not-caught-fail(v_746) && success?(1-proj-3-tuple(v_746))) in
        {2199}let plaintext_36: bitstring = (if v_747 then 3-proj-3-tuple(v_746) else caught-fail) in
        {2200}let adi_12: bitstring = (if v_747 then 2-proj-3-tuple(v_746) else caught-fail) in
        {2201}let valid_32: bool = (if v_747 then 1-proj-3-tuple(v_746) else caught-fail) in
        {2202}let n_51: nonce = (if v_747 then increment_nonce(n_50) else caught-fail) in
        {2203}let v_748: bitstring = (if v_747 then catch-fail(cipherstateunpack(cs_97)) else caught-fail) in
        {2204}let v_749: bool = (not-caught-fail(v_748) && success?(1-proj-2-tuple(v_748))) in
        {2205}let o_25: nonce = (if v_749 then 2-proj-2-tuple(v_748) else caught-fail) in
        {2206}let k_55: key = (if v_749 then 1-proj-2-tuple(v_748) else caught-fail) in
        {2207}let csi_50: cipherstate = (if v_747 then catch-fail((if v_749 then cipherstatepack(k_55,n_51) else fail-any)) else caught-fail) in
        {2208}let v_750: bool = not-caught-fail(csi_50) in
        {2209}let v_751: bitstring = (if v_742 then catch-fail((if v_744 then (if v_745 then (if v_747 then (if v_750 then (csi_50,plaintext_36,valid_32) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {2210}let v_752: bool = (not-caught-fail(v_751) && success?(1-proj-3-tuple(v_751))) in
        {2211}let valid_33: bool = (if v_752 then 3-proj-3-tuple(v_751) else caught-fail) in
        {2212}let plaintext_37: bitstring = (if v_752 then 2-proj-3-tuple(v_751) else caught-fail) in
        {2213}let csi_51: cipherstate = (if v_752 then 1-proj-3-tuple(v_751) else caught-fail) in
        {2214}let ss_112: symmetricstate = (if v_752 then symmetricstatepack(csi_51,ck_117,h_97) else caught-fail) in
        {2215}let v_753: bitstring = (if v_752 then catch-fail(symmetricstateunpack(ss_112)) else caught-fail) in
        {2216}let v_754: bool = (not-caught-fail(v_753) && success?(1-proj-3-tuple(v_753))) in
        {2217}let h_98: bitstring = (if v_754 then 3-proj-3-tuple(v_753) else caught-fail) in
        {2218}let ck_118: key = (if v_754 then 2-proj-3-tuple(v_753) else caught-fail) in
        {2219}let cs_98: cipherstate = (if v_754 then 1-proj-3-tuple(v_753) else caught-fail) in
        {2220}let ssi_28: symmetricstate = (if v_752 then catch-fail((if v_754 then symmetricstatepack(cs_98,ck_118,hash(h_98,ciphertext_39)) else fail-any)) else caught-fail) in
        {2221}let v_755: bool = not-caught-fail(ssi_28) in
        {2222}let v_756: bitstring = (if v_740 then catch-fail((if v_742 then (if v_752 then (if v_755 then (ssi_28,plaintext_37,valid_33) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {2223}let v_757: bool = (not-caught-fail(v_756) && success?(1-proj-3-tuple(v_756))) in
        {2224}let valid3_1: bool = (if v_757 then 3-proj-3-tuple(v_756) else caught-fail) in
        {2225}let plaintext_38: bitstring = (if v_757 then 2-proj-3-tuple(v_756) else caught-fail) in
        {2226}let ss_113: symmetricstate = (if v_757 then 1-proj-3-tuple(v_756) else caught-fail) in
        {2227}let basis_17: key = (if v_757 then key_s(them_3) else caught-fail) in
        {2228}let public_key_17: key = (if v_757 then catch-fail(dhexp(basis_17,validkey(g))) else caught-fail) in
        {2229}let v_758: bool = not-caught-fail(public_key_17) in
        {2230}let v_759: bool = (if v_757 then catch-fail(((valid1_10 && (valid2_10 && valid3_1)) && (rs_23 = getpublickey((if v_758 then keypairpack(validkey(public_key_17),basis_17) else fail-any))))) else caught-fail) in
        {2231}let hs_62: handshakestate = (if v_759 then handshakestatepack(ss_113,s_23,m_23,e_38,rs_23,rm_23,re_25,psk_21,initiator_18) else caught-fail) in
        {2232}let v_760: bitstring = (if v_759 then catch-fail(symmetricstateunpack(ss_113)) else caught-fail) in
        {2233}let v_761: bool = (not-caught-fail(v_760) && success?(1-proj-3-tuple(v_760))) in
        {2234}let h_99: bitstring = (if v_761 then 3-proj-3-tuple(v_760) else caught-fail) in
        {2235}let ck_119: key = (if v_761 then 2-proj-3-tuple(v_760) else caught-fail) in
        {2236}let cs_99: cipherstate = (if v_761 then 1-proj-3-tuple(v_760) else caught-fail) in
        {2237}let input_key_material_23: key = (if v_761 then zero else caught-fail) in
        {2238}let output1_23: key = (if v_761 then hmac_hash1(ck_119,input_key_material_23) else caught-fail) in
        {2239}let output2_23: key = (if v_761 then hmac_hash2(ck_119,input_key_material_23) else caught-fail) in
        {2240}let output3_23: key = (if v_761 then hmac_hash3(ck_119,input_key_material_23) else caught-fail) in
        {2241}let v_762: bitstring = (if v_761 then catch-fail((output1_23,output2_23,output3_23)) else caught-fail) in
        {2242}let v_763: bool = (not-caught-fail(v_762) && success?(1-proj-3-tuple(v_762))) in
        {2243}let temp_k3_3: key = (if v_763 then 3-proj-3-tuple(v_762) else caught-fail) in
        {2244}let temp_k2_3: key = (if v_763 then 2-proj-3-tuple(v_762) else caught-fail) in
        {2245}let temp_k1_3: key = (if v_763 then 1-proj-3-tuple(v_762) else caught-fail) in
        {2246}let cs1_15: cipherstate = (if v_763 then cipherstatepack(temp_k1_3,minnonce) else caught-fail) in
        {2247}let cs2_15: cipherstate = (if v_763 then cipherstatepack(temp_k2_3,minnonce) else caught-fail) in
        {2248}let v_764: bitstring = (if v_759 then catch-fail((if v_761 then (if v_763 then (ss_113,cs1_15,cs2_15) else fail-any) else fail-any)) else caught-fail) in
        {2249}let v_765: bool = (not-caught-fail(v_764) && success?(1-proj-3-tuple(v_764))) in
        {2250}let cs2_16: cipherstate = (if v_765 then 3-proj-3-tuple(v_764) else caught-fail) in
        {2251}let cs1_16: cipherstate = (if v_765 then 2-proj-3-tuple(v_764) else caught-fail) in
        {2252}let ssi_29: symmetricstate = (if v_765 then 1-proj-3-tuple(v_764) else caught-fail) in
        {2253}let (hs_63: handshakestate,plaintext_c_1: bitstring,valid_34: bool,cs1_17: cipherstate,cs2_17: cipherstate) = (if v_688 then (if v_690 then (if v_707 then (if v_724 then (if v_732 then (if v_740 then (if v_757 then (if undo-catch-fail(v_759) then (if v_765 then (hs_62,plaintext_38,true,cs1_16,cs2_16) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {2254}event RecvMsg(me_3,them_3,stagepack_c(sid_4),plaintext_c_1);
        {2255}insert statestore(me_3,them_3,sid_4,statepack_d(hs_63,cs1_17,cs2_17))
    ) | (
        {2257}!
        {2315}get statestore(=me_3,=them_3,=sid_4,statepack_d(hs_64: handshakestate,cs1_18: cipherstate,cs2_18: cipherstate)) in
        {2258}let hs_65: handshakestate = handshakestatesetcs(hs_64,cs2_18) in
        {2259}let payload_9: bitstring = msg_d(me_3,them_3,sid_4) in
        {2260}let v_766: bitstring = catch-fail(handshakestateunpack(hs_65)) in
        {2261}let v_767: bool = (not-caught-fail(v_766) && success?(1-proj-9-tuple(v_766))) in
        {2262}let initiator_19: bool = (if v_767 then 9-proj-9-tuple(v_766) else caught-fail) in
        {2263}let psk_22: key = (if v_767 then 8-proj-9-tuple(v_766) else caught-fail) in
        {2264}let re_26: key = (if v_767 then 7-proj-9-tuple(v_766) else caught-fail) in
        {2265}let rm_24: key = (if v_767 then 6-proj-9-tuple(v_766) else caught-fail) in
        {2266}let rs_24: key = (if v_767 then 5-proj-9-tuple(v_766) else caught-fail) in
        {2267}let e_39: keypair = (if v_767 then 4-proj-9-tuple(v_766) else caught-fail) in
        {2268}let m_24: keypair = (if v_767 then 3-proj-9-tuple(v_766) else caught-fail) in
        {2269}let s_24: keypair = (if v_767 then 2-proj-9-tuple(v_766) else caught-fail) in
        {2270}let ss_114: symmetricstate = (if v_767 then 1-proj-9-tuple(v_766) else caught-fail) in
        {2271}let v_768: bitstring = (if v_767 then catch-fail((empty,empty,empty)) else caught-fail) in
        {2272}let v_769: bool = (not-caught-fail(v_768) && success?(1-proj-3-tuple(v_768))) in
        {2273}let ciphertext_40: bitstring = (if v_769 then 3-proj-3-tuple(v_768) else caught-fail) in
        {2274}let ns_20: bitstring = (if v_769 then 2-proj-3-tuple(v_768) else caught-fail) in
        {2275}let ne_18: bitstring = (if v_769 then 1-proj-3-tuple(v_768) else caught-fail) in
        {2276}let v_770: bitstring = (if v_769 then catch-fail(symmetricstateunpack(ss_114)) else caught-fail) in
        {2277}let v_771: bool = (not-caught-fail(v_770) && success?(1-proj-3-tuple(v_770))) in
        {2278}let h_100: bitstring = (if v_771 then 3-proj-3-tuple(v_770) else caught-fail) in
        {2279}let ck_120: key = (if v_771 then 2-proj-3-tuple(v_770) else caught-fail) in
        {2280}let cs_100: cipherstate = (if v_771 then 1-proj-3-tuple(v_770) else caught-fail) in
        {2281}let v_772: bitstring = (if v_771 then catch-fail(cipherstateunpack(cs_100)) else caught-fail) in
        {2282}let v_773: bool = (not-caught-fail(v_772) && success?(1-proj-2-tuple(v_772))) in
        {2283}let n_52: nonce = (if v_773 then 2-proj-2-tuple(v_772) else caught-fail) in
        {2284}let k_56: key = (if v_773 then 1-proj-2-tuple(v_772) else caught-fail) in
        {2285}let e_40: bitstring = (if v_773 then encrypt(k_56,n_52,h_100,payload_9) else caught-fail) in
        {2286}let n_53: nonce = (if v_773 then increment_nonce(n_52) else caught-fail) in
        {2287}let v_774: bitstring = (if v_773 then catch-fail(cipherstateunpack(cs_100)) else caught-fail) in
        {2288}let v_775: bool = (not-caught-fail(v_774) && success?(1-proj-2-tuple(v_774))) in
        {2289}let o_26: nonce = (if v_775 then 2-proj-2-tuple(v_774) else caught-fail) in
        {2290}let k_57: key = (if v_775 then 1-proj-2-tuple(v_774) else caught-fail) in
        {2291}let csi_52: cipherstate = (if v_773 then catch-fail((if v_775 then cipherstatepack(k_57,n_53) else fail-any)) else caught-fail) in
        {2292}let v_776: bool = not-caught-fail(csi_52) in
        {2293}let v_777: bitstring = (if v_771 then catch-fail((if v_773 then (if v_776 then (csi_52,e_40) else fail-any) else fail-any)) else caught-fail) in
        {2294}let v_778: bool = (not-caught-fail(v_777) && success?(1-proj-2-tuple(v_777))) in
        {2295}let ciphertext_41: bitstring = (if v_778 then 2-proj-2-tuple(v_777) else caught-fail) in
        {2296}let csi_53: cipherstate = (if v_778 then 1-proj-2-tuple(v_777) else caught-fail) in
        {2297}let ss_115: symmetricstate = (if v_778 then symmetricstatepack(csi_53,ck_120,h_100) else caught-fail) in
        {2298}let v_779: bitstring = (if v_778 then catch-fail(symmetricstateunpack(ss_115)) else caught-fail) in
        {2299}let v_780: bool = (not-caught-fail(v_779) && success?(1-proj-3-tuple(v_779))) in
        {2300}let h_101: bitstring = (if v_780 then 3-proj-3-tuple(v_779) else caught-fail) in
        {2301}let ck_121: key = (if v_780 then 2-proj-3-tuple(v_779) else caught-fail) in
        {2302}let cs_101: cipherstate = (if v_780 then 1-proj-3-tuple(v_779) else caught-fail) in
        {2303}let ssi_30: symmetricstate = (if v_778 then catch-fail((if v_780 then symmetricstatepack(cs_101,ck_121,hash(h_101,ciphertext_41)) else fail-any)) else caught-fail) in
        {2304}let v_781: bool = not-caught-fail(ssi_30) in
        {2305}let v_782: bitstring = (if v_769 then catch-fail((if v_771 then (if v_778 then (if v_781 then (ssi_30,ciphertext_41) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {2306}let v_783: bool = (not-caught-fail(v_782) && success?(1-proj-2-tuple(v_782))) in
        {2307}let ciphertext_42: bitstring = (if v_783 then 2-proj-2-tuple(v_782) else caught-fail) in
        {2308}let ss_116: symmetricstate = (if v_783 then 1-proj-2-tuple(v_782) else caught-fail) in
        {2309}let hs_66: handshakestate = (if v_783 then handshakestatepack(ss_116,s_24,m_24,e_39,rs_24,rm_24,re_26,psk_22,initiator_19) else caught-fail) in
        {2310}let message_buffer_9: bitstring = (if v_783 then concat3(ne_18,ns_20,ciphertext_42) else caught-fail) in
        {2311}let (hs_67: handshakestate,message_d_3: bitstring) = (if v_767 then (if v_769 then (if v_783 then (hs_66,message_buffer_9) else fail-any) else fail-any) else fail-any) in
        {2312}event SendMsg(me_3,them_3,stagepack_d(sid_4),msg_d(me_3,them_3,sid_4));
        {2313}insert statestore(me_3,them_3,sid_4,statepack_e(hs_67,cs1_18,handshakestategetcs(hs_67)));
        {2314}out(pub, message_d_3)
    ) | (
        {2316}!
        {2382}get statestore(=me_3,=them_3,=sid_4,statepack_e(hs_68: handshakestate,cs1_19: cipherstate,cs2_19: cipherstate)) in
        {2317}let hs_69: handshakestate = handshakestatesetcs(hs_68,cs1_19) in
        {2318}in(pub, message_e_3: bitstring);
        {2319}let v_784: bitstring = catch-fail(handshakestateunpack(hs_69)) in
        {2320}let v_785: bool = (not-caught-fail(v_784) && success?(1-proj-9-tuple(v_784))) in
        {2321}let initiator_20: bool = (if v_785 then 9-proj-9-tuple(v_784) else caught-fail) in
        {2322}let psk_23: key = (if v_785 then 8-proj-9-tuple(v_784) else caught-fail) in
        {2323}let re_27: key = (if v_785 then 7-proj-9-tuple(v_784) else caught-fail) in
        {2324}let rm_25: key = (if v_785 then 6-proj-9-tuple(v_784) else caught-fail) in
        {2325}let rs_25: key = (if v_785 then 5-proj-9-tuple(v_784) else caught-fail) in
        {2326}let e_41: keypair = (if v_785 then 4-proj-9-tuple(v_784) else caught-fail) in
        {2327}let m_25: keypair = (if v_785 then 3-proj-9-tuple(v_784) else caught-fail) in
        {2328}let s_25: keypair = (if v_785 then 2-proj-9-tuple(v_784) else caught-fail) in
        {2329}let ss_117: symmetricstate = (if v_785 then 1-proj-9-tuple(v_784) else caught-fail) in
        {2330}let v_786: bitstring = (if v_785 then catch-fail(deconcat3(message_e_3)) else caught-fail) in
        {2331}let v_787: bool = (not-caught-fail(v_786) && success?(1-proj-3-tuple(v_786))) in
        {2332}let ciphertext_43: bitstring = (if v_787 then 3-proj-3-tuple(v_786) else caught-fail) in
        {2333}let ns_21: bitstring = (if v_787 then 2-proj-3-tuple(v_786) else caught-fail) in
        {2334}let ne_19: bitstring = (if v_787 then 1-proj-3-tuple(v_786) else caught-fail) in
        {2335}let valid1_11: bool = (if v_787 then true else caught-fail) in
        {2336}let v_788: bitstring = (if v_787 then catch-fail(symmetricstateunpack(ss_117)) else caught-fail) in
        {2337}let v_789: bool = (not-caught-fail(v_788) && success?(1-proj-3-tuple(v_788))) in
        {2338}let h_102: bitstring = (if v_789 then 3-proj-3-tuple(v_788) else caught-fail) in
        {2339}let ck_122: key = (if v_789 then 2-proj-3-tuple(v_788) else caught-fail) in
        {2340}let cs_102: cipherstate = (if v_789 then 1-proj-3-tuple(v_788) else caught-fail) in
        {2341}let v_790: bitstring = (if v_789 then catch-fail(cipherstateunpack(cs_102)) else caught-fail) in
        {2342}let v_791: bool = (not-caught-fail(v_790) && success?(1-proj-2-tuple(v_790))) in
        {2343}let n_54: nonce = (if v_791 then 2-proj-2-tuple(v_790) else caught-fail) in
        {2344}let k_58: key = (if v_791 then 1-proj-2-tuple(v_790) else caught-fail) in
        {2345}let d_13: aead = (if v_791 then catch-fail(decrypt(k_58,n_54,h_102,ciphertext_43)) else caught-fail) in
        {2346}let v_792: bool = not-caught-fail(d_13) in
        {2347}let v_793: bitstring = (if v_792 then catch-fail(aeadunpack(d_13)) else caught-fail) in
        {2348}let v_794: bool = (not-caught-fail(v_793) && success?(1-proj-3-tuple(v_793))) in
        {2349}let plaintext_39: bitstring = (if v_794 then 3-proj-3-tuple(v_793) else caught-fail) in
        {2350}let adi_13: bitstring = (if v_794 then 2-proj-3-tuple(v_793) else caught-fail) in
        {2351}let valid_35: bool = (if v_794 then 1-proj-3-tuple(v_793) else caught-fail) in
        {2352}let n_55: nonce = (if v_794 then increment_nonce(n_54) else caught-fail) in
        {2353}let v_795: bitstring = (if v_794 then catch-fail(cipherstateunpack(cs_102)) else caught-fail) in
        {2354}let v_796: bool = (not-caught-fail(v_795) && success?(1-proj-2-tuple(v_795))) in
        {2355}let o_27: nonce = (if v_796 then 2-proj-2-tuple(v_795) else caught-fail) in
        {2356}let k_59: key = (if v_796 then 1-proj-2-tuple(v_795) else caught-fail) in
        {2357}let csi_54: cipherstate = (if v_794 then catch-fail((if v_796 then cipherstatepack(k_59,n_55) else fail-any)) else caught-fail) in
        {2358}let v_797: bool = not-caught-fail(csi_54) in
        {2359}let v_798: bitstring = (if v_789 then catch-fail((if v_791 then (if v_792 then (if v_794 then (if v_797 then (csi_54,plaintext_39,valid_35) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {2360}let v_799: bool = (not-caught-fail(v_798) && success?(1-proj-3-tuple(v_798))) in
        {2361}let valid_36: bool = (if v_799 then 3-proj-3-tuple(v_798) else caught-fail) in
        {2362}let plaintext_40: bitstring = (if v_799 then 2-proj-3-tuple(v_798) else caught-fail) in
        {2363}let csi_55: cipherstate = (if v_799 then 1-proj-3-tuple(v_798) else caught-fail) in
        {2364}let ss_118: symmetricstate = (if v_799 then symmetricstatepack(csi_55,ck_122,h_102) else caught-fail) in
        {2365}let v_800: bitstring = (if v_799 then catch-fail(symmetricstateunpack(ss_118)) else caught-fail) in
        {2366}let v_801: bool = (not-caught-fail(v_800) && success?(1-proj-3-tuple(v_800))) in
        {2367}let h_103: bitstring = (if v_801 then 3-proj-3-tuple(v_800) else caught-fail) in
        {2368}let ck_123: key = (if v_801 then 2-proj-3-tuple(v_800) else caught-fail) in
        {2369}let cs_103: cipherstate = (if v_801 then 1-proj-3-tuple(v_800) else caught-fail) in
        {2370}let ssi_31: symmetricstate = (if v_799 then catch-fail((if v_801 then symmetricstatepack(cs_103,ck_123,hash(h_103,ciphertext_43)) else fail-any)) else caught-fail) in
        {2371}let v_802: bool = not-caught-fail(ssi_31) in
        {2372}let v_803: bitstring = (if v_787 then catch-fail((if v_789 then (if v_799 then (if v_802 then (ssi_31,plaintext_40,valid_36) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {2373}let v_804: bool = (not-caught-fail(v_803) && success?(1-proj-3-tuple(v_803))) in
        {2374}let valid2_11: bool = (if v_804 then 3-proj-3-tuple(v_803) else caught-fail) in
        {2375}let plaintext_41: bitstring = (if v_804 then 2-proj-3-tuple(v_803) else caught-fail) in
        {2376}let ss_119: symmetricstate = (if v_804 then 1-proj-3-tuple(v_803) else caught-fail) in
        {2377}let v_805: bool = (if v_804 then catch-fail((valid1_11 && valid2_11)) else caught-fail) in
        {2378}let hs_70: handshakestate = (if v_805 then handshakestatepack(ss_119,s_25,m_25,e_41,rs_25,rm_25,re_27,psk_23,initiator_20) else caught-fail) in
        {2379}let (hs_71: handshakestate,plaintext_e_1: bitstring,valid_37: bool) = (if v_785 then (if v_787 then (if v_804 then (if undo-catch-fail(v_805) then (hs_70,plaintext_41,true) else fail-any) else fail-any) else fail-any) else fail-any) in
        {2380}event RecvMsg(me_3,them_3,stagepack_e(sid_4),plaintext_e_1);
        {2381}event RecvEnd(valid_37)
    ) | (
        {2383}event LeakS(phase0,me_3);
        {2384}event LeakM(phase0,me_3);
        {2385}out(pub, (key_s(me_3),key_m(me_3)))
    ) | (
        {2386}phase 1;
        {2387}event LeakS(phase1,me_3);
        {2388}event LeakM(phase1,me_3);
        {2389}out(pub, (key_s(me_3),key_m(me_3)))
    )
)

--  Process 1 (that is, process 0, with let moved downwards):
{1}out(pub, (key_s(charlie),key_m(charlie)));
{2}!
{3}new sid: sessionid;
(
    {8}let m: keypair = keypairpack(empty,empty) in
    {7}let s: keypair = keypairpack(empty,empty) in
    {9}out(pub, (getpublickey(s),getpublickey(m)));
    {6}let sid_1: sessionid = sid in
    {5}let them: principal = bob in
    {4}let me: principal = alice in
    (
        {11}let basis: key = key_s(them) in
        {12}let public_key: key = catch-fail(dhexp(basis,validkey(g))) in
        {13}let v: bool = not-caught-fail(public_key) in
        {14}let rs: key = getpublickey((if v then keypairpack(validkey(public_key),basis) else fail-any)) in
        {15}let basis_1: key = key_m(them) in
        {16}let public_key_1: key = catch-fail(dhexp(basis_1,validkey(g))) in
        {17}let v_1: bool = not-caught-fail(public_key_1) in
        {18}let rm: key = getpublickey((if v_1 then keypairpack(validkey(public_key_1),basis_1) else fail-any)) in
        {25}let k: key = empty in
        {26}let cs: cipherstate = cipherstatepack(k,minnonce) in
        {22}let protocol_name: bitstring = somename in
        {23}let h: bitstring = hash(protocol_name,empty) in
        {24}let ck: key = h in
        {27}let ss: symmetricstate = symmetricstatepack(cs,ck,h) in
        {28}let v_2: bitstring = catch-fail(symmetricstateunpack(ss)) in
        {29}let v_3: bool = (not-caught-fail(v_2) && success?(1-proj-3-tuple(v_2))) in
        {30}let h_1: bitstring = (if v_3 then 3-proj-3-tuple(v_2) else caught-fail) in
        {31}let ck_1: key = (if v_3 then 2-proj-3-tuple(v_2) else caught-fail) in
        {32}let cs_1: cipherstate = (if v_3 then 1-proj-3-tuple(v_2) else caught-fail) in
        {20}let prologue: bitstring = empty in
        {33}let ss_1: symmetricstate = catch-fail((if v_3 then symmetricstatepack(cs_1,ck_1,hash(h_1,prologue)) else fail-any)) in
        {34}let v_4: bool = not-caught-fail(ss_1) in
        {35}let v_5: bitstring = (if v_4 then catch-fail(symmetricstateunpack(ss_1)) else caught-fail) in
        {36}let v_6: bool = (not-caught-fail(v_5) && success?(1-proj-3-tuple(v_5))) in
        {37}let h_2: bitstring = (if v_6 then 3-proj-3-tuple(v_5) else caught-fail) in
        {38}let ck_2: key = (if v_6 then 2-proj-3-tuple(v_5) else caught-fail) in
        {39}let cs_2: cipherstate = (if v_6 then 1-proj-3-tuple(v_5) else caught-fail) in
        {40}let ss_2: symmetricstate = (if v_4 then catch-fail((if v_6 then symmetricstatepack(cs_2,ck_2,hash(h_2,rs)) else fail-any)) else caught-fail) in
        {41}let v_7: bool = not-caught-fail(ss_2) in
        {42}let v_8: bitstring = (if v_7 then catch-fail(symmetricstateunpack(ss_2)) else caught-fail) in
        {43}let v_9: bool = (not-caught-fail(v_8) && success?(1-proj-3-tuple(v_8))) in
        {44}let h_3: bitstring = (if v_9 then 3-proj-3-tuple(v_8) else caught-fail) in
        {45}let ck_3: key = (if v_9 then 2-proj-3-tuple(v_8) else caught-fail) in
        {46}let cs_3: cipherstate = (if v_9 then 1-proj-3-tuple(v_8) else caught-fail) in
        {47}let ss_3: symmetricstate = (if v_7 then catch-fail((if v_9 then symmetricstatepack(cs_3,ck_3,hash(h_3,rm)) else fail-any)) else caught-fail) in
        {48}let v_10: bool = not-caught-fail(ss_3) in
        {21}let psk: key = empty in
        {19}let re: key = empty in
        {10}let e: keypair = keypairpack(empty,empty) in
        {49}let hs: handshakestate = (if v_4 then (if v_7 then (if v_10 then handshakestatepack(ss_3,s,m,e,rs,rm,re,psk,true) else fail-any) else fail-any) else fail-any) in
        {50}insert statestore(me,them,sid_1,statepack_a(hs))
    ) | (
        {163}get statestore(=me,=them,=sid_1,statepack_a(hs_1: handshakestate)) in
        {52}let v_11: bitstring = catch-fail(handshakestateunpack(hs_1)) in
        {53}let v_12: bool = (not-caught-fail(v_11) && success?(1-proj-9-tuple(v_11))) in
        {54}let initiator_1: bool = (if v_12 then 9-proj-9-tuple(v_11) else caught-fail) in
        {55}let psk_1: key = (if v_12 then 8-proj-9-tuple(v_11) else caught-fail) in
        {56}let re_1: key = (if v_12 then 7-proj-9-tuple(v_11) else caught-fail) in
        {57}let rm_1: key = (if v_12 then 6-proj-9-tuple(v_11) else caught-fail) in
        {58}let rs_1: key = (if v_12 then 5-proj-9-tuple(v_11) else caught-fail) in
        {59}let e_1: keypair = (if v_12 then 4-proj-9-tuple(v_11) else caught-fail) in
        {60}let m_1: keypair = (if v_12 then 3-proj-9-tuple(v_11) else caught-fail) in
        {61}let s_1: keypair = (if v_12 then 2-proj-9-tuple(v_11) else caught-fail) in
        {62}let ss_4: symmetricstate = (if v_12 then 1-proj-9-tuple(v_11) else caught-fail) in
        {63}let v_13: bitstring = (if v_12 then catch-fail((empty,empty,empty)) else caught-fail) in
        {64}let v_14: bool = (not-caught-fail(v_13) && success?(1-proj-3-tuple(v_13))) in
        {65}let ciphertext: bitstring = (if v_14 then 3-proj-3-tuple(v_13) else caught-fail) in
        {66}let ns: bitstring = (if v_14 then 2-proj-3-tuple(v_13) else caught-fail) in
        {67}let ne: bitstring = (if v_14 then 1-proj-3-tuple(v_13) else caught-fail) in
        {68}let basis_2: key = (if v_14 then key_e(me,them,sid_1) else caught-fail) in
        {69}let public_key_2: key = (if v_14 then catch-fail(dhexp(basis_2,validkey(g))) else caught-fail) in
        {70}let v_15: bool = not-caught-fail(public_key_2) in
        {71}let e_2: keypair = (if v_14 then catch-fail((if v_15 then keypairpack(validkey(public_key_2),basis_2) else fail-any)) else caught-fail) in
        {72}let v_16: bool = not-caught-fail(e_2) in
        {73}let ne_1: bitstring = (if v_16 then catch-fail(getpublickey(e_2)) else caught-fail) in
        {74}let v_17: bool = not-caught-fail(ne_1) in
        {75}let v_18: bitstring = (if v_17 then catch-fail(symmetricstateunpack(ss_4)) else caught-fail) in
        {76}let v_19: bool = (not-caught-fail(v_18) && success?(1-proj-3-tuple(v_18))) in
        {77}let h_4: bitstring = (if v_19 then 3-proj-3-tuple(v_18) else caught-fail) in
        {78}let ck_4: key = (if v_19 then 2-proj-3-tuple(v_18) else caught-fail) in
        {79}let cs_4: cipherstate = (if v_19 then 1-proj-3-tuple(v_18) else caught-fail) in
        {80}let ss_5: symmetricstate = (if v_17 then catch-fail((if v_19 then symmetricstatepack(cs_4,ck_4,hash(h_4,ne_1)) else fail-any)) else caught-fail) in
        {81}let v_20: bool = not-caught-fail(ss_5) in
        {82}let v_21: bitstring = (if v_20 then catch-fail(keypairunpack(e_2)) else caught-fail) in
        {83}let v_22: bool = (not-caught-fail(v_21) && success?(1-proj-2-tuple(v_21))) in
        {84}let my_private_key: key = (if v_22 then 2-proj-2-tuple(v_21) else caught-fail) in
        {85}let my_public_key: key = (if v_22 then 1-proj-2-tuple(v_21) else caught-fail) in
        {86}let input_key_material: key = (if v_20 then catch-fail((if v_22 then dhexp(my_private_key,rs_1) else fail-any)) else caught-fail) in
        {87}let v_23: bool = not-caught-fail(input_key_material) in
        {88}let v_24: bitstring = (if v_23 then catch-fail(symmetricstateunpack(ss_5)) else caught-fail) in
        {89}let v_25: bool = (not-caught-fail(v_24) && success?(1-proj-3-tuple(v_24))) in
        {90}let h_5: bitstring = (if v_25 then 3-proj-3-tuple(v_24) else caught-fail) in
        {91}let ck_5: key = (if v_25 then 2-proj-3-tuple(v_24) else caught-fail) in
        {92}let cs_5: cipherstate = (if v_25 then 1-proj-3-tuple(v_24) else caught-fail) in
        {95}let output3: key = (if v_25 then hmac_hash3(ck_5,input_key_material) else caught-fail) in
        {94}let output2: key = (if v_25 then hmac_hash2(ck_5,input_key_material) else caught-fail) in
        {93}let output1: key = (if v_25 then hmac_hash1(ck_5,input_key_material) else caught-fail) in
        {96}let v_26: bitstring = (if v_25 then catch-fail((output1,output2,output3)) else caught-fail) in
        {97}let v_27: bool = (not-caught-fail(v_26) && success?(1-proj-3-tuple(v_26))) in
        {98}let output_3: key = (if v_27 then 3-proj-3-tuple(v_26) else caught-fail) in
        {99}let temp_k: key = (if v_27 then 2-proj-3-tuple(v_26) else caught-fail) in
        {100}let ck_6: key = (if v_27 then 1-proj-3-tuple(v_26) else caught-fail) in
        {101}let ss_6: symmetricstate = (if v_20 then catch-fail((if v_23 then (if v_25 then (if v_27 then symmetricstatepack(cipherstatepack(temp_k,minnonce),ck_6,h_5) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {102}let v_28: bool = not-caught-fail(ss_6) in
        {103}let v_29: bitstring = (if v_28 then catch-fail(keypairunpack(e_2)) else caught-fail) in
        {104}let v_30: bool = (not-caught-fail(v_29) && success?(1-proj-2-tuple(v_29))) in
        {105}let my_private_key_1: key = (if v_30 then 2-proj-2-tuple(v_29) else caught-fail) in
        {106}let my_public_key_1: key = (if v_30 then 1-proj-2-tuple(v_29) else caught-fail) in
        {107}let input_key_material_1: key = (if v_28 then catch-fail((if v_30 then dhexp(my_private_key_1,rm_1) else fail-any)) else caught-fail) in
        {108}let v_31: bool = not-caught-fail(input_key_material_1) in
        {109}let v_32: bitstring = (if v_31 then catch-fail(symmetricstateunpack(ss_6)) else caught-fail) in
        {110}let v_33: bool = (not-caught-fail(v_32) && success?(1-proj-3-tuple(v_32))) in
        {111}let h_6: bitstring = (if v_33 then 3-proj-3-tuple(v_32) else caught-fail) in
        {112}let ck_7: key = (if v_33 then 2-proj-3-tuple(v_32) else caught-fail) in
        {113}let cs_6: cipherstate = (if v_33 then 1-proj-3-tuple(v_32) else caught-fail) in
        {116}let output3_1: key = (if v_33 then hmac_hash3(ck_7,input_key_material_1) else caught-fail) in
        {115}let output2_1: key = (if v_33 then hmac_hash2(ck_7,input_key_material_1) else caught-fail) in
        {114}let output1_1: key = (if v_33 then hmac_hash1(ck_7,input_key_material_1) else caught-fail) in
        {117}let v_34: bitstring = (if v_33 then catch-fail((output1_1,output2_1,output3_1)) else caught-fail) in
        {118}let v_35: bool = (not-caught-fail(v_34) && success?(1-proj-3-tuple(v_34))) in
        {119}let output: key = (if v_35 then 3-proj-3-tuple(v_34) else caught-fail) in
        {120}let temp_k_1: key = (if v_35 then 2-proj-3-tuple(v_34) else caught-fail) in
        {121}let ck_8: key = (if v_35 then 1-proj-3-tuple(v_34) else caught-fail) in
        {122}let ss_7: symmetricstate = (if v_28 then catch-fail((if v_31 then (if v_33 then (if v_35 then symmetricstatepack(cipherstatepack(temp_k_1,minnonce),ck_8,h_6) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {123}let v_36: bool = not-caught-fail(ss_7) in
        {124}let v_37: bitstring = (if v_36 then catch-fail(symmetricstateunpack(ss_7)) else caught-fail) in
        {125}let v_38: bool = (not-caught-fail(v_37) && success?(1-proj-3-tuple(v_37))) in
        {126}let h_7: bitstring = (if v_38 then 3-proj-3-tuple(v_37) else caught-fail) in
        {127}let ck_9: key = (if v_38 then 2-proj-3-tuple(v_37) else caught-fail) in
        {128}let cs_7: cipherstate = (if v_38 then 1-proj-3-tuple(v_37) else caught-fail) in
        {129}let v_39: bitstring = (if v_38 then catch-fail(cipherstateunpack(cs_7)) else caught-fail) in
        {130}let v_40: bool = (not-caught-fail(v_39) && success?(1-proj-2-tuple(v_39))) in
        {131}let n: nonce = (if v_40 then 2-proj-2-tuple(v_39) else caught-fail) in
        {132}let k_1: key = (if v_40 then 1-proj-2-tuple(v_39) else caught-fail) in
        {135}let v_41: bitstring = (if v_40 then catch-fail(cipherstateunpack(cs_7)) else caught-fail) in
        {136}let v_42: bool = (not-caught-fail(v_41) && success?(1-proj-2-tuple(v_41))) in
        {137}let o: nonce = (if v_42 then 2-proj-2-tuple(v_41) else caught-fail) in
        {138}let k_2: key = (if v_42 then 1-proj-2-tuple(v_41) else caught-fail) in
        {134}let n_1: nonce = (if v_40 then increment_nonce(n) else caught-fail) in
        {139}let csi: cipherstate = (if v_40 then catch-fail((if v_42 then cipherstatepack(k_2,n_1) else fail-any)) else caught-fail) in
        {140}let v_43: bool = not-caught-fail(csi) in
        {51}let payload: bitstring = msg_a(me,them,sid_1) in
        {133}let e_3: bitstring = (if v_40 then encrypt(k_1,n,h_7,payload) else caught-fail) in
        {141}let v_44: bitstring = (if v_38 then catch-fail((if v_40 then (if v_43 then (csi,e_3) else fail-any) else fail-any)) else caught-fail) in
        {142}let v_45: bool = (not-caught-fail(v_44) && success?(1-proj-2-tuple(v_44))) in
        {143}let ciphertext_1: bitstring = (if v_45 then 2-proj-2-tuple(v_44) else caught-fail) in
        {144}let csi_1: cipherstate = (if v_45 then 1-proj-2-tuple(v_44) else caught-fail) in
        {145}let ss_8: symmetricstate = (if v_45 then symmetricstatepack(csi_1,ck_9,h_7) else caught-fail) in
        {146}let v_46: bitstring = (if v_45 then catch-fail(symmetricstateunpack(ss_8)) else caught-fail) in
        {147}let v_47: bool = (not-caught-fail(v_46) && success?(1-proj-3-tuple(v_46))) in
        {148}let h_8: bitstring = (if v_47 then 3-proj-3-tuple(v_46) else caught-fail) in
        {149}let ck_10: key = (if v_47 then 2-proj-3-tuple(v_46) else caught-fail) in
        {150}let cs_8: cipherstate = (if v_47 then 1-proj-3-tuple(v_46) else caught-fail) in
        {151}let ssi: symmetricstate = (if v_45 then catch-fail((if v_47 then symmetricstatepack(cs_8,ck_10,hash(h_8,ciphertext_1)) else fail-any)) else caught-fail) in
        {152}let v_48: bool = not-caught-fail(ssi) in
        {153}let v_49: bitstring = (if v_36 then catch-fail((if v_38 then (if v_45 then (if v_48 then (ssi,ciphertext_1) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {154}let v_50: bool = (not-caught-fail(v_49) && success?(1-proj-2-tuple(v_49))) in
        {155}let ciphertext_2: bitstring = (if v_50 then 2-proj-2-tuple(v_49) else caught-fail) in
        {156}let ss_9: symmetricstate = (if v_50 then 1-proj-2-tuple(v_49) else caught-fail) in
        {158}let message_buffer: bitstring = (if v_50 then concat3(ne_1,ns,ciphertext_2) else caught-fail) in
        {157}let hs_2: handshakestate = (if v_50 then handshakestatepack(ss_9,s_1,m_1,e_2,rs_1,rm_1,re_1,psk_1,initiator_1) else caught-fail) in
        {159}let (hs_3: handshakestate,message_a: bitstring) = (if v_12 then (if v_14 then (if v_16 then (if v_17 then (if v_20 then (if v_28 then (if v_36 then (if v_50 then (hs_2,message_buffer) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {160}event SendMsg(me,them,stagepack_a(sid_1),msg_a(me,them,sid_1));
        {161}insert statestore(me,them,sid_1,statepack_b(hs_3));
        {162}out(pub, message_a)
    ) | (
        {257}get statestore(=me,=them,=sid_1,statepack_b(hs_4: handshakestate)) in
        {164}in(pub, message_b: bitstring);
        {165}let v_51: bitstring = catch-fail(handshakestateunpack(hs_4)) in
        {166}let v_52: bool = (not-caught-fail(v_51) && success?(1-proj-9-tuple(v_51))) in
        {167}let initiator_2: bool = (if v_52 then 9-proj-9-tuple(v_51) else caught-fail) in
        {168}let psk_2: key = (if v_52 then 8-proj-9-tuple(v_51) else caught-fail) in
        {169}let re_2: key = (if v_52 then 7-proj-9-tuple(v_51) else caught-fail) in
        {170}let rm_2: key = (if v_52 then 6-proj-9-tuple(v_51) else caught-fail) in
        {171}let rs_2: key = (if v_52 then 5-proj-9-tuple(v_51) else caught-fail) in
        {172}let e_4: keypair = (if v_52 then 4-proj-9-tuple(v_51) else caught-fail) in
        {173}let m_2: keypair = (if v_52 then 3-proj-9-tuple(v_51) else caught-fail) in
        {174}let s_2: keypair = (if v_52 then 2-proj-9-tuple(v_51) else caught-fail) in
        {175}let ss_10: symmetricstate = (if v_52 then 1-proj-9-tuple(v_51) else caught-fail) in
        {176}let v_53: bitstring = (if v_52 then catch-fail(deconcat3(message_b)) else caught-fail) in
        {177}let v_54: bool = (not-caught-fail(v_53) && success?(1-proj-3-tuple(v_53))) in
        {178}let ciphertext_3: bitstring = (if v_54 then 3-proj-3-tuple(v_53) else caught-fail) in
        {179}let ns_1: bitstring = (if v_54 then 2-proj-3-tuple(v_53) else caught-fail) in
        {180}let ne_2: bitstring = (if v_54 then 1-proj-3-tuple(v_53) else caught-fail) in
        {183}let v_55: bitstring = (if v_54 then catch-fail(symmetricstateunpack(ss_10)) else caught-fail) in
        {184}let v_56: bool = (not-caught-fail(v_55) && success?(1-proj-3-tuple(v_55))) in
        {185}let h_9: bitstring = (if v_56 then 3-proj-3-tuple(v_55) else caught-fail) in
        {186}let ck_11: key = (if v_56 then 2-proj-3-tuple(v_55) else caught-fail) in
        {187}let cs_9: cipherstate = (if v_56 then 1-proj-3-tuple(v_55) else caught-fail) in
        {182}let re_3: key = (if v_54 then ne_2 else caught-fail) in
        {188}let ss_11: symmetricstate = (if v_54 then catch-fail((if v_56 then symmetricstatepack(cs_9,ck_11,hash(h_9,re_3)) else fail-any)) else caught-fail) in
        {189}let v_57: bool = not-caught-fail(ss_11) in
        {190}let v_58: bitstring = (if v_57 then catch-fail(keypairunpack(e_4)) else caught-fail) in
        {191}let v_59: bool = (not-caught-fail(v_58) && success?(1-proj-2-tuple(v_58))) in
        {192}let my_private_key_2: key = (if v_59 then 2-proj-2-tuple(v_58) else caught-fail) in
        {193}let my_public_key_2: key = (if v_59 then 1-proj-2-tuple(v_58) else caught-fail) in
        {194}let input_key_material_2: key = (if v_57 then catch-fail((if v_59 then dhexp(my_private_key_2,re_3) else fail-any)) else caught-fail) in
        {195}let v_60: bool = not-caught-fail(input_key_material_2) in
        {196}let v_61: bitstring = (if v_60 then catch-fail(symmetricstateunpack(ss_11)) else caught-fail) in
        {197}let v_62: bool = (not-caught-fail(v_61) && success?(1-proj-3-tuple(v_61))) in
        {198}let h_10: bitstring = (if v_62 then 3-proj-3-tuple(v_61) else caught-fail) in
        {199}let ck_12: key = (if v_62 then 2-proj-3-tuple(v_61) else caught-fail) in
        {200}let cs_10: cipherstate = (if v_62 then 1-proj-3-tuple(v_61) else caught-fail) in
        {203}let output3_2: key = (if v_62 then hmac_hash3(ck_12,input_key_material_2) else caught-fail) in
        {202}let output2_2: key = (if v_62 then hmac_hash2(ck_12,input_key_material_2) else caught-fail) in
        {201}let output1_2: key = (if v_62 then hmac_hash1(ck_12,input_key_material_2) else caught-fail) in
        {204}let v_63: bitstring = (if v_62 then catch-fail((output1_2,output2_2,output3_2)) else caught-fail) in
        {205}let v_64: bool = (not-caught-fail(v_63) && success?(1-proj-3-tuple(v_63))) in
        {206}let output_1: key = (if v_64 then 3-proj-3-tuple(v_63) else caught-fail) in
        {207}let temp_k_2: key = (if v_64 then 2-proj-3-tuple(v_63) else caught-fail) in
        {208}let ck_13: key = (if v_64 then 1-proj-3-tuple(v_63) else caught-fail) in
        {209}let ss_12: symmetricstate = (if v_57 then catch-fail((if v_60 then (if v_62 then (if v_64 then symmetricstatepack(cipherstatepack(temp_k_2,minnonce),ck_13,h_10) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {210}let v_65: bool = not-caught-fail(ss_12) in
        {211}let v_66: bitstring = (if v_65 then catch-fail(symmetricstateunpack(ss_12)) else caught-fail) in
        {212}let v_67: bool = (not-caught-fail(v_66) && success?(1-proj-3-tuple(v_66))) in
        {213}let h_11: bitstring = (if v_67 then 3-proj-3-tuple(v_66) else caught-fail) in
        {214}let ck_14: key = (if v_67 then 2-proj-3-tuple(v_66) else caught-fail) in
        {215}let cs_11: cipherstate = (if v_67 then 1-proj-3-tuple(v_66) else caught-fail) in
        {216}let v_68: bitstring = (if v_67 then catch-fail(cipherstateunpack(cs_11)) else caught-fail) in
        {217}let v_69: bool = (not-caught-fail(v_68) && success?(1-proj-2-tuple(v_68))) in
        {218}let n_2: nonce = (if v_69 then 2-proj-2-tuple(v_68) else caught-fail) in
        {219}let k_3: key = (if v_69 then 1-proj-2-tuple(v_68) else caught-fail) in
        {220}let d: aead = (if v_69 then catch-fail(decrypt(k_3,n_2,h_11,ciphertext_3)) else caught-fail) in
        {221}let v_70: bool = not-caught-fail(d) in
        {222}let v_71: bitstring = (if v_70 then catch-fail(aeadunpack(d)) else caught-fail) in
        {223}let v_72: bool = (not-caught-fail(v_71) && success?(1-proj-3-tuple(v_71))) in
        {224}let plaintext: bitstring = (if v_72 then 3-proj-3-tuple(v_71) else caught-fail) in
        {225}let adi: bitstring = (if v_72 then 2-proj-3-tuple(v_71) else caught-fail) in
        {226}let valid: bool = (if v_72 then 1-proj-3-tuple(v_71) else caught-fail) in
        {228}let v_73: bitstring = (if v_72 then catch-fail(cipherstateunpack(cs_11)) else caught-fail) in
        {229}let v_74: bool = (not-caught-fail(v_73) && success?(1-proj-2-tuple(v_73))) in
        {230}let o_1: nonce = (if v_74 then 2-proj-2-tuple(v_73) else caught-fail) in
        {231}let k_4: key = (if v_74 then 1-proj-2-tuple(v_73) else caught-fail) in
        {227}let n_3: nonce = (if v_72 then increment_nonce(n_2) else caught-fail) in
        {232}let csi_2: cipherstate = (if v_72 then catch-fail((if v_74 then cipherstatepack(k_4,n_3) else fail-any)) else caught-fail) in
        {233}let v_75: bool = not-caught-fail(csi_2) in
        {234}let v_76: bitstring = (if v_67 then catch-fail((if v_69 then (if v_70 then (if v_72 then (if v_75 then (csi_2,plaintext,valid) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {235}let v_77: bool = (not-caught-fail(v_76) && success?(1-proj-3-tuple(v_76))) in
        {236}let valid_1: bool = (if v_77 then 3-proj-3-tuple(v_76) else caught-fail) in
        {237}let plaintext_1: bitstring = (if v_77 then 2-proj-3-tuple(v_76) else caught-fail) in
        {238}let csi_3: cipherstate = (if v_77 then 1-proj-3-tuple(v_76) else caught-fail) in
        {239}let ss_13: symmetricstate = (if v_77 then symmetricstatepack(csi_3,ck_14,h_11) else caught-fail) in
        {240}let v_78: bitstring = (if v_77 then catch-fail(symmetricstateunpack(ss_13)) else caught-fail) in
        {241}let v_79: bool = (not-caught-fail(v_78) && success?(1-proj-3-tuple(v_78))) in
        {242}let h_12: bitstring = (if v_79 then 3-proj-3-tuple(v_78) else caught-fail) in
        {243}let ck_15: key = (if v_79 then 2-proj-3-tuple(v_78) else caught-fail) in
        {244}let cs_12: cipherstate = (if v_79 then 1-proj-3-tuple(v_78) else caught-fail) in
        {245}let ssi_1: symmetricstate = (if v_77 then catch-fail((if v_79 then symmetricstatepack(cs_12,ck_15,hash(h_12,ciphertext_3)) else fail-any)) else caught-fail) in
        {246}let v_80: bool = not-caught-fail(ssi_1) in
        {247}let v_81: bitstring = (if v_65 then catch-fail((if v_67 then (if v_77 then (if v_80 then (ssi_1,plaintext_1,valid_1) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {248}let v_82: bool = (not-caught-fail(v_81) && success?(1-proj-3-tuple(v_81))) in
        {249}let valid2: bool = (if v_82 then 3-proj-3-tuple(v_81) else caught-fail) in
        {250}let plaintext_2: bitstring = (if v_82 then 2-proj-3-tuple(v_81) else caught-fail) in
        {251}let ss_14: symmetricstate = (if v_82 then 1-proj-3-tuple(v_81) else caught-fail) in
        {181}let valid1: bool = (if v_54 then true else caught-fail) in
        {252}let v_83: bool = (if v_82 then catch-fail((valid1 && valid2)) else caught-fail) in
        {253}let hs_5: handshakestate = (if v_83 then handshakestatepack(ss_14,s_2,m_2,e_4,rs_2,rm_2,re_3,psk_2,initiator_2) else caught-fail) in
        {254}let (hs_6: handshakestate,plaintext_b: bitstring,valid_2: bool) = (if v_52 then (if v_54 then (if v_57 then (if v_65 then (if v_82 then (if undo-catch-fail(v_83) then (hs_5,plaintext_2,true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {255}event RecvMsg(me,them,stagepack_b(sid_1),plaintext_b);
        {256}insert statestore(me,them,sid_1,statepack_c(hs_6))
    ) | (
        {457}get statestore(=me,=them,=sid_1,statepack_c(hs_7: handshakestate)) in
        {259}let v_84: bitstring = catch-fail(handshakestateunpack(hs_7)) in
        {260}let v_85: bool = (not-caught-fail(v_84) && success?(1-proj-9-tuple(v_84))) in
        {261}let initiator_3: bool = (if v_85 then 9-proj-9-tuple(v_84) else caught-fail) in
        {262}let psk_3: key = (if v_85 then 8-proj-9-tuple(v_84) else caught-fail) in
        {263}let re_4: key = (if v_85 then 7-proj-9-tuple(v_84) else caught-fail) in
        {264}let rm_3: key = (if v_85 then 6-proj-9-tuple(v_84) else caught-fail) in
        {265}let rs_3: key = (if v_85 then 5-proj-9-tuple(v_84) else caught-fail) in
        {266}let e_5: keypair = (if v_85 then 4-proj-9-tuple(v_84) else caught-fail) in
        {267}let m_3: keypair = (if v_85 then 3-proj-9-tuple(v_84) else caught-fail) in
        {268}let s_3: keypair = (if v_85 then 2-proj-9-tuple(v_84) else caught-fail) in
        {269}let ss_15: symmetricstate = (if v_85 then 1-proj-9-tuple(v_84) else caught-fail) in
        {270}let v_86: bitstring = (if v_85 then catch-fail((empty,empty,empty)) else caught-fail) in
        {271}let v_87: bool = (not-caught-fail(v_86) && success?(1-proj-3-tuple(v_86))) in
        {272}let ciphertext_4: bitstring = (if v_87 then 3-proj-3-tuple(v_86) else caught-fail) in
        {273}let nm: bitstring = (if v_87 then 2-proj-3-tuple(v_86) else caught-fail) in
        {274}let ns_2: bitstring = (if v_87 then 1-proj-3-tuple(v_86) else caught-fail) in
        {275}let basis_3: key = (if v_87 then key_s(me) else caught-fail) in
        {276}let public_key_3: key = (if v_87 then catch-fail(dhexp(basis_3,validkey(g))) else caught-fail) in
        {277}let v_88: bool = not-caught-fail(public_key_3) in
        {278}let s_4: keypair = (if v_87 then catch-fail((if v_88 then keypairpack(validkey(public_key_3),basis_3) else fail-any)) else caught-fail) in
        {279}let v_89: bool = not-caught-fail(s_4) in
        {280}let plaintext_3: bitstring = (if v_89 then catch-fail(getpublickey(s_4)) else caught-fail) in
        {281}let v_90: bool = not-caught-fail(plaintext_3) in
        {282}let v_91: bitstring = (if v_90 then catch-fail(symmetricstateunpack(ss_15)) else caught-fail) in
        {283}let v_92: bool = (not-caught-fail(v_91) && success?(1-proj-3-tuple(v_91))) in
        {284}let h_13: bitstring = (if v_92 then 3-proj-3-tuple(v_91) else caught-fail) in
        {285}let ck_16: key = (if v_92 then 2-proj-3-tuple(v_91) else caught-fail) in
        {286}let cs_13: cipherstate = (if v_92 then 1-proj-3-tuple(v_91) else caught-fail) in
        {287}let v_93: bitstring = (if v_92 then catch-fail(cipherstateunpack(cs_13)) else caught-fail) in
        {288}let v_94: bool = (not-caught-fail(v_93) && success?(1-proj-2-tuple(v_93))) in
        {289}let n_4: nonce = (if v_94 then 2-proj-2-tuple(v_93) else caught-fail) in
        {290}let k_5: key = (if v_94 then 1-proj-2-tuple(v_93) else caught-fail) in
        {293}let v_95: bitstring = (if v_94 then catch-fail(cipherstateunpack(cs_13)) else caught-fail) in
        {294}let v_96: bool = (not-caught-fail(v_95) && success?(1-proj-2-tuple(v_95))) in
        {295}let o_2: nonce = (if v_96 then 2-proj-2-tuple(v_95) else caught-fail) in
        {296}let k_6: key = (if v_96 then 1-proj-2-tuple(v_95) else caught-fail) in
        {292}let n_5: nonce = (if v_94 then increment_nonce(n_4) else caught-fail) in
        {297}let csi_4: cipherstate = (if v_94 then catch-fail((if v_96 then cipherstatepack(k_6,n_5) else fail-any)) else caught-fail) in
        {298}let v_97: bool = not-caught-fail(csi_4) in
        {291}let e_6: bitstring = (if v_94 then encrypt(k_5,n_4,h_13,plaintext_3) else caught-fail) in
        {299}let v_98: bitstring = (if v_92 then catch-fail((if v_94 then (if v_97 then (csi_4,e_6) else fail-any) else fail-any)) else caught-fail) in
        {300}let v_99: bool = (not-caught-fail(v_98) && success?(1-proj-2-tuple(v_98))) in
        {301}let ciphertext_5: bitstring = (if v_99 then 2-proj-2-tuple(v_98) else caught-fail) in
        {302}let csi_5: cipherstate = (if v_99 then 1-proj-2-tuple(v_98) else caught-fail) in
        {303}let ss_16: symmetricstate = (if v_99 then symmetricstatepack(csi_5,ck_16,h_13) else caught-fail) in
        {304}let v_100: bitstring = (if v_99 then catch-fail(symmetricstateunpack(ss_16)) else caught-fail) in
        {305}let v_101: bool = (not-caught-fail(v_100) && success?(1-proj-3-tuple(v_100))) in
        {306}let h_14: bitstring = (if v_101 then 3-proj-3-tuple(v_100) else caught-fail) in
        {307}let ck_17: key = (if v_101 then 2-proj-3-tuple(v_100) else caught-fail) in
        {308}let cs_14: cipherstate = (if v_101 then 1-proj-3-tuple(v_100) else caught-fail) in
        {309}let ssi_2: symmetricstate = (if v_99 then catch-fail((if v_101 then symmetricstatepack(cs_14,ck_17,hash(h_14,ciphertext_5)) else fail-any)) else caught-fail) in
        {310}let v_102: bool = not-caught-fail(ssi_2) in
        {311}let v_103: bitstring = (if v_89 then catch-fail((if v_90 then (if v_92 then (if v_99 then (if v_102 then (ssi_2,ciphertext_5) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {312}let v_104: bool = (not-caught-fail(v_103) && success?(1-proj-2-tuple(v_103))) in
        {313}let ns_3: bitstring = (if v_104 then 2-proj-2-tuple(v_103) else caught-fail) in
        {314}let ss_17: symmetricstate = (if v_104 then 1-proj-2-tuple(v_103) else caught-fail) in
        {315}let basis_4: key = (if v_104 then key_m(me) else caught-fail) in
        {316}let public_key_4: key = (if v_104 then catch-fail(dhexp(basis_4,validkey(g))) else caught-fail) in
        {317}let v_105: bool = not-caught-fail(public_key_4) in
        {318}let m_4: keypair = (if v_104 then catch-fail((if v_105 then keypairpack(validkey(public_key_4),basis_4) else fail-any)) else caught-fail) in
        {319}let v_106: bool = not-caught-fail(m_4) in
        {320}let plaintext_4: bitstring = (if v_106 then catch-fail(getpublickey(m_4)) else caught-fail) in
        {321}let v_107: bool = not-caught-fail(plaintext_4) in
        {322}let v_108: bitstring = (if v_107 then catch-fail(symmetricstateunpack(ss_17)) else caught-fail) in
        {323}let v_109: bool = (not-caught-fail(v_108) && success?(1-proj-3-tuple(v_108))) in
        {324}let h_15: bitstring = (if v_109 then 3-proj-3-tuple(v_108) else caught-fail) in
        {325}let ck_18: key = (if v_109 then 2-proj-3-tuple(v_108) else caught-fail) in
        {326}let cs_15: cipherstate = (if v_109 then 1-proj-3-tuple(v_108) else caught-fail) in
        {327}let v_110: bitstring = (if v_109 then catch-fail(cipherstateunpack(cs_15)) else caught-fail) in
        {328}let v_111: bool = (not-caught-fail(v_110) && success?(1-proj-2-tuple(v_110))) in
        {329}let n_6: nonce = (if v_111 then 2-proj-2-tuple(v_110) else caught-fail) in
        {330}let k_7: key = (if v_111 then 1-proj-2-tuple(v_110) else caught-fail) in
        {333}let v_112: bitstring = (if v_111 then catch-fail(cipherstateunpack(cs_15)) else caught-fail) in
        {334}let v_113: bool = (not-caught-fail(v_112) && success?(1-proj-2-tuple(v_112))) in
        {335}let o_3: nonce = (if v_113 then 2-proj-2-tuple(v_112) else caught-fail) in
        {336}let k_8: key = (if v_113 then 1-proj-2-tuple(v_112) else caught-fail) in
        {332}let n_7: nonce = (if v_111 then increment_nonce(n_6) else caught-fail) in
        {337}let csi_6: cipherstate = (if v_111 then catch-fail((if v_113 then cipherstatepack(k_8,n_7) else fail-any)) else caught-fail) in
        {338}let v_114: bool = not-caught-fail(csi_6) in
        {331}let e_7: bitstring = (if v_111 then encrypt(k_7,n_6,h_15,plaintext_4) else caught-fail) in
        {339}let v_115: bitstring = (if v_109 then catch-fail((if v_111 then (if v_114 then (csi_6,e_7) else fail-any) else fail-any)) else caught-fail) in
        {340}let v_116: bool = (not-caught-fail(v_115) && success?(1-proj-2-tuple(v_115))) in
        {341}let ciphertext_6: bitstring = (if v_116 then 2-proj-2-tuple(v_115) else caught-fail) in
        {342}let csi_7: cipherstate = (if v_116 then 1-proj-2-tuple(v_115) else caught-fail) in
        {343}let ss_18: symmetricstate = (if v_116 then symmetricstatepack(csi_7,ck_18,h_15) else caught-fail) in
        {344}let v_117: bitstring = (if v_116 then catch-fail(symmetricstateunpack(ss_18)) else caught-fail) in
        {345}let v_118: bool = (not-caught-fail(v_117) && success?(1-proj-3-tuple(v_117))) in
        {346}let h_16: bitstring = (if v_118 then 3-proj-3-tuple(v_117) else caught-fail) in
        {347}let ck_19: key = (if v_118 then 2-proj-3-tuple(v_117) else caught-fail) in
        {348}let cs_16: cipherstate = (if v_118 then 1-proj-3-tuple(v_117) else caught-fail) in
        {349}let ssi_3: symmetricstate = (if v_116 then catch-fail((if v_118 then symmetricstatepack(cs_16,ck_19,hash(h_16,ciphertext_6)) else fail-any)) else caught-fail) in
        {350}let v_119: bool = not-caught-fail(ssi_3) in
        {351}let v_120: bitstring = (if v_106 then catch-fail((if v_107 then (if v_109 then (if v_116 then (if v_119 then (ssi_3,ciphertext_6) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {352}let v_121: bool = (not-caught-fail(v_120) && success?(1-proj-2-tuple(v_120))) in
        {353}let nm_1: bitstring = (if v_121 then 2-proj-2-tuple(v_120) else caught-fail) in
        {354}let ss_19: symmetricstate = (if v_121 then 1-proj-2-tuple(v_120) else caught-fail) in
        {355}let v_122: bitstring = (if v_121 then catch-fail(keypairunpack(s_4)) else caught-fail) in
        {356}let v_123: bool = (not-caught-fail(v_122) && success?(1-proj-2-tuple(v_122))) in
        {357}let my_private_key_3: key = (if v_123 then 2-proj-2-tuple(v_122) else caught-fail) in
        {358}let my_public_key_3: key = (if v_123 then 1-proj-2-tuple(v_122) else caught-fail) in
        {359}let input_key_material_3: key = (if v_121 then catch-fail((if v_123 then dhexp(my_private_key_3,re_4) else fail-any)) else caught-fail) in
        {360}let v_124: bool = not-caught-fail(input_key_material_3) in
        {361}let v_125: bitstring = (if v_124 then catch-fail(symmetricstateunpack(ss_19)) else caught-fail) in
        {362}let v_126: bool = (not-caught-fail(v_125) && success?(1-proj-3-tuple(v_125))) in
        {363}let h_17: bitstring = (if v_126 then 3-proj-3-tuple(v_125) else caught-fail) in
        {364}let ck_20: key = (if v_126 then 2-proj-3-tuple(v_125) else caught-fail) in
        {365}let cs_17: cipherstate = (if v_126 then 1-proj-3-tuple(v_125) else caught-fail) in
        {368}let output3_3: key = (if v_126 then hmac_hash3(ck_20,input_key_material_3) else caught-fail) in
        {367}let output2_3: key = (if v_126 then hmac_hash2(ck_20,input_key_material_3) else caught-fail) in
        {366}let output1_3: key = (if v_126 then hmac_hash1(ck_20,input_key_material_3) else caught-fail) in
        {369}let v_127: bitstring = (if v_126 then catch-fail((output1_3,output2_3,output3_3)) else caught-fail) in
        {370}let v_128: bool = (not-caught-fail(v_127) && success?(1-proj-3-tuple(v_127))) in
        {371}let output_2: key = (if v_128 then 3-proj-3-tuple(v_127) else caught-fail) in
        {372}let temp_k_3: key = (if v_128 then 2-proj-3-tuple(v_127) else caught-fail) in
        {373}let ck_21: key = (if v_128 then 1-proj-3-tuple(v_127) else caught-fail) in
        {374}let ss_20: symmetricstate = (if v_121 then catch-fail((if v_124 then (if v_126 then (if v_128 then symmetricstatepack(cipherstatepack(temp_k_3,minnonce),ck_21,h_17) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {375}let v_129: bool = not-caught-fail(ss_20) in
        {376}let v_130: bitstring = (if v_129 then catch-fail(keypairunpack(m_4)) else caught-fail) in
        {377}let v_131: bool = (not-caught-fail(v_130) && success?(1-proj-2-tuple(v_130))) in
        {378}let my_private_key_4: key = (if v_131 then 2-proj-2-tuple(v_130) else caught-fail) in
        {379}let my_public_key_4: key = (if v_131 then 1-proj-2-tuple(v_130) else caught-fail) in
        {380}let input_key_material_4: key = (if v_129 then catch-fail((if v_131 then dhexp(my_private_key_4,re_4) else fail-any)) else caught-fail) in
        {381}let v_132: bool = not-caught-fail(input_key_material_4) in
        {382}let v_133: bitstring = (if v_132 then catch-fail(symmetricstateunpack(ss_20)) else caught-fail) in
        {383}let v_134: bool = (not-caught-fail(v_133) && success?(1-proj-3-tuple(v_133))) in
        {384}let h_18: bitstring = (if v_134 then 3-proj-3-tuple(v_133) else caught-fail) in
        {385}let ck_22: key = (if v_134 then 2-proj-3-tuple(v_133) else caught-fail) in
        {386}let cs_18: cipherstate = (if v_134 then 1-proj-3-tuple(v_133) else caught-fail) in
        {389}let output3_4: key = (if v_134 then hmac_hash3(ck_22,input_key_material_4) else caught-fail) in
        {388}let output2_4: key = (if v_134 then hmac_hash2(ck_22,input_key_material_4) else caught-fail) in
        {387}let output1_4: key = (if v_134 then hmac_hash1(ck_22,input_key_material_4) else caught-fail) in
        {390}let v_135: bitstring = (if v_134 then catch-fail((output1_4,output2_4,output3_4)) else caught-fail) in
        {391}let v_136: bool = (not-caught-fail(v_135) && success?(1-proj-3-tuple(v_135))) in
        {392}let output_4: key = (if v_136 then 3-proj-3-tuple(v_135) else caught-fail) in
        {393}let temp_k_4: key = (if v_136 then 2-proj-3-tuple(v_135) else caught-fail) in
        {394}let ck_23: key = (if v_136 then 1-proj-3-tuple(v_135) else caught-fail) in
        {395}let ss_21: symmetricstate = (if v_129 then catch-fail((if v_132 then (if v_134 then (if v_136 then symmetricstatepack(cipherstatepack(temp_k_4,minnonce),ck_23,h_18) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {396}let v_137: bool = not-caught-fail(ss_21) in
        {397}let v_138: bitstring = (if v_137 then catch-fail(symmetricstateunpack(ss_21)) else caught-fail) in
        {398}let v_139: bool = (not-caught-fail(v_138) && success?(1-proj-3-tuple(v_138))) in
        {399}let h_19: bitstring = (if v_139 then 3-proj-3-tuple(v_138) else caught-fail) in
        {400}let ck_24: key = (if v_139 then 2-proj-3-tuple(v_138) else caught-fail) in
        {401}let cs_19: cipherstate = (if v_139 then 1-proj-3-tuple(v_138) else caught-fail) in
        {402}let v_140: bitstring = (if v_139 then catch-fail(cipherstateunpack(cs_19)) else caught-fail) in
        {403}let v_141: bool = (not-caught-fail(v_140) && success?(1-proj-2-tuple(v_140))) in
        {404}let n_8: nonce = (if v_141 then 2-proj-2-tuple(v_140) else caught-fail) in
        {405}let k_9: key = (if v_141 then 1-proj-2-tuple(v_140) else caught-fail) in
        {408}let v_142: bitstring = (if v_141 then catch-fail(cipherstateunpack(cs_19)) else caught-fail) in
        {409}let v_143: bool = (not-caught-fail(v_142) && success?(1-proj-2-tuple(v_142))) in
        {410}let o_4: nonce = (if v_143 then 2-proj-2-tuple(v_142) else caught-fail) in
        {411}let k_10: key = (if v_143 then 1-proj-2-tuple(v_142) else caught-fail) in
        {407}let n_9: nonce = (if v_141 then increment_nonce(n_8) else caught-fail) in
        {412}let csi_8: cipherstate = (if v_141 then catch-fail((if v_143 then cipherstatepack(k_10,n_9) else fail-any)) else caught-fail) in
        {413}let v_144: bool = not-caught-fail(csi_8) in
        {258}let payload_1: bitstring = msg_c(me,them,sid_1) in
        {406}let e_8: bitstring = (if v_141 then encrypt(k_9,n_8,h_19,payload_1) else caught-fail) in
        {414}let v_145: bitstring = (if v_139 then catch-fail((if v_141 then (if v_144 then (csi_8,e_8) else fail-any) else fail-any)) else caught-fail) in
        {415}let v_146: bool = (not-caught-fail(v_145) && success?(1-proj-2-tuple(v_145))) in
        {416}let ciphertext_7: bitstring = (if v_146 then 2-proj-2-tuple(v_145) else caught-fail) in
        {417}let csi_9: cipherstate = (if v_146 then 1-proj-2-tuple(v_145) else caught-fail) in
        {418}let ss_22: symmetricstate = (if v_146 then symmetricstatepack(csi_9,ck_24,h_19) else caught-fail) in
        {419}let v_147: bitstring = (if v_146 then catch-fail(symmetricstateunpack(ss_22)) else caught-fail) in
        {420}let v_148: bool = (not-caught-fail(v_147) && success?(1-proj-3-tuple(v_147))) in
        {421}let h_20: bitstring = (if v_148 then 3-proj-3-tuple(v_147) else caught-fail) in
        {422}let ck_25: key = (if v_148 then 2-proj-3-tuple(v_147) else caught-fail) in
        {423}let cs_20: cipherstate = (if v_148 then 1-proj-3-tuple(v_147) else caught-fail) in
        {424}let ssi_4: symmetricstate = (if v_146 then catch-fail((if v_148 then symmetricstatepack(cs_20,ck_25,hash(h_20,ciphertext_7)) else fail-any)) else caught-fail) in
        {425}let v_149: bool = not-caught-fail(ssi_4) in
        {426}let v_150: bitstring = (if v_137 then catch-fail((if v_139 then (if v_146 then (if v_149 then (ssi_4,ciphertext_7) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {427}let v_151: bool = (not-caught-fail(v_150) && success?(1-proj-2-tuple(v_150))) in
        {428}let ciphertext_8: bitstring = (if v_151 then 2-proj-2-tuple(v_150) else caught-fail) in
        {429}let ss_23: symmetricstate = (if v_151 then 1-proj-2-tuple(v_150) else caught-fail) in
        {432}let v_152: bitstring = (if v_151 then catch-fail(symmetricstateunpack(ss_23)) else caught-fail) in
        {433}let v_153: bool = (not-caught-fail(v_152) && success?(1-proj-3-tuple(v_152))) in
        {434}let h_21: bitstring = (if v_153 then 3-proj-3-tuple(v_152) else caught-fail) in
        {435}let ck_26: key = (if v_153 then 2-proj-3-tuple(v_152) else caught-fail) in
        {436}let cs_21: cipherstate = (if v_153 then 1-proj-3-tuple(v_152) else caught-fail) in
        {437}let input_key_material_5: key = (if v_153 then zero else caught-fail) in
        {440}let output3_5: key = (if v_153 then hmac_hash3(ck_26,input_key_material_5) else caught-fail) in
        {439}let output2_5: key = (if v_153 then hmac_hash2(ck_26,input_key_material_5) else caught-fail) in
        {438}let output1_5: key = (if v_153 then hmac_hash1(ck_26,input_key_material_5) else caught-fail) in
        {441}let v_154: bitstring = (if v_153 then catch-fail((output1_5,output2_5,output3_5)) else caught-fail) in
        {442}let v_155: bool = (not-caught-fail(v_154) && success?(1-proj-3-tuple(v_154))) in
        {443}let temp_k3: key = (if v_155 then 3-proj-3-tuple(v_154) else caught-fail) in
        {444}let temp_k2: key = (if v_155 then 2-proj-3-tuple(v_154) else caught-fail) in
        {445}let temp_k1: key = (if v_155 then 1-proj-3-tuple(v_154) else caught-fail) in
        {447}let cs2: cipherstate = (if v_155 then cipherstatepack(temp_k2,minnonce) else caught-fail) in
        {446}let cs1: cipherstate = (if v_155 then cipherstatepack(temp_k1,minnonce) else caught-fail) in
        {448}let v_156: bitstring = (if v_151 then catch-fail((if v_153 then (if v_155 then (ss_23,cs1,cs2) else fail-any) else fail-any)) else caught-fail) in
        {449}let v_157: bool = (not-caught-fail(v_156) && success?(1-proj-3-tuple(v_156))) in
        {450}let cs2_1: cipherstate = (if v_157 then 3-proj-3-tuple(v_156) else caught-fail) in
        {451}let cs1_1: cipherstate = (if v_157 then 2-proj-3-tuple(v_156) else caught-fail) in
        {452}let ssi_5: symmetricstate = (if v_157 then 1-proj-3-tuple(v_156) else caught-fail) in
        {431}let message_buffer_1: bitstring = (if v_151 then concat3(ns_3,nm_1,ciphertext_8) else caught-fail) in
        {430}let hs_8: handshakestate = (if v_151 then handshakestatepack(ss_23,s_4,m_4,e_5,rs_3,rm_3,re_4,psk_3,initiator_3) else caught-fail) in
        {453}let (hs_9: handshakestate,message_c: bitstring,cs1_2: cipherstate,cs2_2: cipherstate) = (if v_85 then (if v_87 then (if v_89 then (if v_104 then (if v_106 then (if v_121 then (if v_129 then (if v_137 then (if v_151 then (if v_157 then (hs_8,message_buffer_1,cs1_1,cs2_1) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {454}event SendMsg(me,them,stagepack_c(sid_1),msg_c(me,them,sid_1));
        {455}insert statestore(me,them,sid_1,statepack_d(hs_9,cs1_2,cs2_2));
        {456}out(pub, message_c)
    ) | (
        {458}!
        {524}get statestore(=me,=them,=sid_1,statepack_d(hs_10: handshakestate,cs1_3: cipherstate,cs2_3: cipherstate)) in
        {459}let hs_11: handshakestate = handshakestatesetcs(hs_10,cs2_3) in
        {460}in(pub, message_d: bitstring);
        {461}let v_158: bitstring = catch-fail(handshakestateunpack(hs_11)) in
        {462}let v_159: bool = (not-caught-fail(v_158) && success?(1-proj-9-tuple(v_158))) in
        {463}let initiator_4: bool = (if v_159 then 9-proj-9-tuple(v_158) else caught-fail) in
        {464}let psk_4: key = (if v_159 then 8-proj-9-tuple(v_158) else caught-fail) in
        {465}let re_5: key = (if v_159 then 7-proj-9-tuple(v_158) else caught-fail) in
        {466}let rm_4: key = (if v_159 then 6-proj-9-tuple(v_158) else caught-fail) in
        {467}let rs_4: key = (if v_159 then 5-proj-9-tuple(v_158) else caught-fail) in
        {468}let e_9: keypair = (if v_159 then 4-proj-9-tuple(v_158) else caught-fail) in
        {469}let m_5: keypair = (if v_159 then 3-proj-9-tuple(v_158) else caught-fail) in
        {470}let s_5: keypair = (if v_159 then 2-proj-9-tuple(v_158) else caught-fail) in
        {471}let ss_24: symmetricstate = (if v_159 then 1-proj-9-tuple(v_158) else caught-fail) in
        {472}let v_160: bitstring = (if v_159 then catch-fail(deconcat3(message_d)) else caught-fail) in
        {473}let v_161: bool = (not-caught-fail(v_160) && success?(1-proj-3-tuple(v_160))) in
        {474}let ciphertext_9: bitstring = (if v_161 then 3-proj-3-tuple(v_160) else caught-fail) in
        {475}let ns_4: bitstring = (if v_161 then 2-proj-3-tuple(v_160) else caught-fail) in
        {476}let ne_3: bitstring = (if v_161 then 1-proj-3-tuple(v_160) else caught-fail) in
        {478}let v_162: bitstring = (if v_161 then catch-fail(symmetricstateunpack(ss_24)) else caught-fail) in
        {479}let v_163: bool = (not-caught-fail(v_162) && success?(1-proj-3-tuple(v_162))) in
        {480}let h_22: bitstring = (if v_163 then 3-proj-3-tuple(v_162) else caught-fail) in
        {481}let ck_27: key = (if v_163 then 2-proj-3-tuple(v_162) else caught-fail) in
        {482}let cs_22: cipherstate = (if v_163 then 1-proj-3-tuple(v_162) else caught-fail) in
        {483}let v_164: bitstring = (if v_163 then catch-fail(cipherstateunpack(cs_22)) else caught-fail) in
        {484}let v_165: bool = (not-caught-fail(v_164) && success?(1-proj-2-tuple(v_164))) in
        {485}let n_10: nonce = (if v_165 then 2-proj-2-tuple(v_164) else caught-fail) in
        {486}let k_11: key = (if v_165 then 1-proj-2-tuple(v_164) else caught-fail) in
        {487}let d_1: aead = (if v_165 then catch-fail(decrypt(k_11,n_10,h_22,ciphertext_9)) else caught-fail) in
        {488}let v_166: bool = not-caught-fail(d_1) in
        {489}let v_167: bitstring = (if v_166 then catch-fail(aeadunpack(d_1)) else caught-fail) in
        {490}let v_168: bool = (not-caught-fail(v_167) && success?(1-proj-3-tuple(v_167))) in
        {491}let plaintext_5: bitstring = (if v_168 then 3-proj-3-tuple(v_167) else caught-fail) in
        {492}let adi_1: bitstring = (if v_168 then 2-proj-3-tuple(v_167) else caught-fail) in
        {493}let valid_3: bool = (if v_168 then 1-proj-3-tuple(v_167) else caught-fail) in
        {495}let v_169: bitstring = (if v_168 then catch-fail(cipherstateunpack(cs_22)) else caught-fail) in
        {496}let v_170: bool = (not-caught-fail(v_169) && success?(1-proj-2-tuple(v_169))) in
        {497}let o_5: nonce = (if v_170 then 2-proj-2-tuple(v_169) else caught-fail) in
        {498}let k_12: key = (if v_170 then 1-proj-2-tuple(v_169) else caught-fail) in
        {494}let n_11: nonce = (if v_168 then increment_nonce(n_10) else caught-fail) in
        {499}let csi_10: cipherstate = (if v_168 then catch-fail((if v_170 then cipherstatepack(k_12,n_11) else fail-any)) else caught-fail) in
        {500}let v_171: bool = not-caught-fail(csi_10) in
        {501}let v_172: bitstring = (if v_163 then catch-fail((if v_165 then (if v_166 then (if v_168 then (if v_171 then (csi_10,plaintext_5,valid_3) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {502}let v_173: bool = (not-caught-fail(v_172) && success?(1-proj-3-tuple(v_172))) in
        {503}let valid_4: bool = (if v_173 then 3-proj-3-tuple(v_172) else caught-fail) in
        {504}let plaintext_6: bitstring = (if v_173 then 2-proj-3-tuple(v_172) else caught-fail) in
        {505}let csi_11: cipherstate = (if v_173 then 1-proj-3-tuple(v_172) else caught-fail) in
        {506}let ss_25: symmetricstate = (if v_173 then symmetricstatepack(csi_11,ck_27,h_22) else caught-fail) in
        {507}let v_174: bitstring = (if v_173 then catch-fail(symmetricstateunpack(ss_25)) else caught-fail) in
        {508}let v_175: bool = (not-caught-fail(v_174) && success?(1-proj-3-tuple(v_174))) in
        {509}let h_23: bitstring = (if v_175 then 3-proj-3-tuple(v_174) else caught-fail) in
        {510}let ck_28: key = (if v_175 then 2-proj-3-tuple(v_174) else caught-fail) in
        {511}let cs_23: cipherstate = (if v_175 then 1-proj-3-tuple(v_174) else caught-fail) in
        {512}let ssi_6: symmetricstate = (if v_173 then catch-fail((if v_175 then symmetricstatepack(cs_23,ck_28,hash(h_23,ciphertext_9)) else fail-any)) else caught-fail) in
        {513}let v_176: bool = not-caught-fail(ssi_6) in
        {514}let v_177: bitstring = (if v_161 then catch-fail((if v_163 then (if v_173 then (if v_176 then (ssi_6,plaintext_6,valid_4) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {515}let v_178: bool = (not-caught-fail(v_177) && success?(1-proj-3-tuple(v_177))) in
        {516}let valid2_1: bool = (if v_178 then 3-proj-3-tuple(v_177) else caught-fail) in
        {517}let plaintext_7: bitstring = (if v_178 then 2-proj-3-tuple(v_177) else caught-fail) in
        {518}let ss_26: symmetricstate = (if v_178 then 1-proj-3-tuple(v_177) else caught-fail) in
        {477}let valid1_1: bool = (if v_161 then true else caught-fail) in
        {519}let v_179: bool = (if v_178 then catch-fail((valid1_1 && valid2_1)) else caught-fail) in
        {520}let hs_12: handshakestate = (if v_179 then handshakestatepack(ss_26,s_5,m_5,e_9,rs_4,rm_4,re_5,psk_4,initiator_4) else caught-fail) in
        {521}let (hs_13: handshakestate,plaintext_d: bitstring,valid_5: bool) = (if v_159 then (if v_161 then (if v_178 then (if undo-catch-fail(v_179) then (hs_12,plaintext_7,true) else fail-any) else fail-any) else fail-any) else fail-any) in
        {522}event RecvMsg(me,them,stagepack_d(sid_1),plaintext_d);
        {523}insert statestore(me,them,sid_1,statepack_e(hs_13,cs1_3,handshakestategetcs(hs_13)))
    ) | (
        {525}!
        {582}get statestore(=me,=them,=sid_1,statepack_e(hs_14: handshakestate,cs1_4: cipherstate,cs2_4: cipherstate)) in
        {526}let hs_15: handshakestate = handshakestatesetcs(hs_14,cs1_4) in
        {528}let v_180: bitstring = catch-fail(handshakestateunpack(hs_15)) in
        {529}let v_181: bool = (not-caught-fail(v_180) && success?(1-proj-9-tuple(v_180))) in
        {530}let initiator_5: bool = (if v_181 then 9-proj-9-tuple(v_180) else caught-fail) in
        {531}let psk_5: key = (if v_181 then 8-proj-9-tuple(v_180) else caught-fail) in
        {532}let re_6: key = (if v_181 then 7-proj-9-tuple(v_180) else caught-fail) in
        {533}let rm_5: key = (if v_181 then 6-proj-9-tuple(v_180) else caught-fail) in
        {534}let rs_5: key = (if v_181 then 5-proj-9-tuple(v_180) else caught-fail) in
        {535}let e_10: keypair = (if v_181 then 4-proj-9-tuple(v_180) else caught-fail) in
        {536}let m_6: keypair = (if v_181 then 3-proj-9-tuple(v_180) else caught-fail) in
        {537}let s_6: keypair = (if v_181 then 2-proj-9-tuple(v_180) else caught-fail) in
        {538}let ss_27: symmetricstate = (if v_181 then 1-proj-9-tuple(v_180) else caught-fail) in
        {539}let v_182: bitstring = (if v_181 then catch-fail((empty,empty,empty)) else caught-fail) in
        {540}let v_183: bool = (not-caught-fail(v_182) && success?(1-proj-3-tuple(v_182))) in
        {541}let ciphertext_10: bitstring = (if v_183 then 3-proj-3-tuple(v_182) else caught-fail) in
        {542}let ns_5: bitstring = (if v_183 then 2-proj-3-tuple(v_182) else caught-fail) in
        {543}let ne_4: bitstring = (if v_183 then 1-proj-3-tuple(v_182) else caught-fail) in
        {544}let v_184: bitstring = (if v_183 then catch-fail(symmetricstateunpack(ss_27)) else caught-fail) in
        {545}let v_185: bool = (not-caught-fail(v_184) && success?(1-proj-3-tuple(v_184))) in
        {546}let h_24: bitstring = (if v_185 then 3-proj-3-tuple(v_184) else caught-fail) in
        {547}let ck_29: key = (if v_185 then 2-proj-3-tuple(v_184) else caught-fail) in
        {548}let cs_24: cipherstate = (if v_185 then 1-proj-3-tuple(v_184) else caught-fail) in
        {549}let v_186: bitstring = (if v_185 then catch-fail(cipherstateunpack(cs_24)) else caught-fail) in
        {550}let v_187: bool = (not-caught-fail(v_186) && success?(1-proj-2-tuple(v_186))) in
        {551}let n_12: nonce = (if v_187 then 2-proj-2-tuple(v_186) else caught-fail) in
        {552}let k_13: key = (if v_187 then 1-proj-2-tuple(v_186) else caught-fail) in
        {555}let v_188: bitstring = (if v_187 then catch-fail(cipherstateunpack(cs_24)) else caught-fail) in
        {556}let v_189: bool = (not-caught-fail(v_188) && success?(1-proj-2-tuple(v_188))) in
        {557}let o_6: nonce = (if v_189 then 2-proj-2-tuple(v_188) else caught-fail) in
        {558}let k_14: key = (if v_189 then 1-proj-2-tuple(v_188) else caught-fail) in
        {554}let n_13: nonce = (if v_187 then increment_nonce(n_12) else caught-fail) in
        {559}let csi_12: cipherstate = (if v_187 then catch-fail((if v_189 then cipherstatepack(k_14,n_13) else fail-any)) else caught-fail) in
        {560}let v_190: bool = not-caught-fail(csi_12) in
        {527}let payload_2: bitstring = msg_e(me,them,sid_1) in
        {553}let e_11: bitstring = (if v_187 then encrypt(k_13,n_12,h_24,payload_2) else caught-fail) in
        {561}let v_191: bitstring = (if v_185 then catch-fail((if v_187 then (if v_190 then (csi_12,e_11) else fail-any) else fail-any)) else caught-fail) in
        {562}let v_192: bool = (not-caught-fail(v_191) && success?(1-proj-2-tuple(v_191))) in
        {563}let ciphertext_11: bitstring = (if v_192 then 2-proj-2-tuple(v_191) else caught-fail) in
        {564}let csi_13: cipherstate = (if v_192 then 1-proj-2-tuple(v_191) else caught-fail) in
        {565}let ss_28: symmetricstate = (if v_192 then symmetricstatepack(csi_13,ck_29,h_24) else caught-fail) in
        {566}let v_193: bitstring = (if v_192 then catch-fail(symmetricstateunpack(ss_28)) else caught-fail) in
        {567}let v_194: bool = (not-caught-fail(v_193) && success?(1-proj-3-tuple(v_193))) in
        {568}let h_25: bitstring = (if v_194 then 3-proj-3-tuple(v_193) else caught-fail) in
        {569}let ck_30: key = (if v_194 then 2-proj-3-tuple(v_193) else caught-fail) in
        {570}let cs_25: cipherstate = (if v_194 then 1-proj-3-tuple(v_193) else caught-fail) in
        {571}let ssi_7: symmetricstate = (if v_192 then catch-fail((if v_194 then symmetricstatepack(cs_25,ck_30,hash(h_25,ciphertext_11)) else fail-any)) else caught-fail) in
        {572}let v_195: bool = not-caught-fail(ssi_7) in
        {573}let v_196: bitstring = (if v_183 then catch-fail((if v_185 then (if v_192 then (if v_195 then (ssi_7,ciphertext_11) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {574}let v_197: bool = (not-caught-fail(v_196) && success?(1-proj-2-tuple(v_196))) in
        {575}let ciphertext_12: bitstring = (if v_197 then 2-proj-2-tuple(v_196) else caught-fail) in
        {576}let ss_29: symmetricstate = (if v_197 then 1-proj-2-tuple(v_196) else caught-fail) in
        {578}let message_buffer_2: bitstring = (if v_197 then concat3(ne_4,ns_5,ciphertext_12) else caught-fail) in
        {577}let hs_16: handshakestate = (if v_197 then handshakestatepack(ss_29,s_6,m_6,e_10,rs_5,rm_5,re_6,psk_5,initiator_5) else caught-fail) in
        {579}let (hs_17: handshakestate,message_e: bitstring) = (if v_181 then (if v_183 then (if v_197 then (hs_16,message_buffer_2) else fail-any) else fail-any) else fail-any) in
        {580}event SendMsg(me,them,stagepack_e(sid_1),msg_e(me,them,sid_1));
        {581}out(pub, message_e)
    ) | (
        {583}event LeakS(phase0,me);
        {584}event LeakM(phase0,me);
        {585}out(pub, (key_s(me),key_m(me)))
    ) | (
        {586}phase 1;
        {587}event LeakS(phase1,me);
        {588}event LeakM(phase1,me);
        {589}out(pub, (key_s(me),key_m(me)))
    )
) | (
    {594}let m_7: keypair = keypairpack(empty,empty) in
    {593}let s_7: keypair = keypairpack(empty,empty) in
    {595}out(pub, (getpublickey(s_7),getpublickey(m_7)));
    {592}let sid_2: sessionid = sid in
    {591}let them_1: principal = charlie in
    {590}let me_1: principal = alice in
    (
        {597}let basis_5: key = key_s(them_1) in
        {598}let public_key_5: key = catch-fail(dhexp(basis_5,validkey(g))) in
        {599}let v_198: bool = not-caught-fail(public_key_5) in
        {600}let rs_6: key = getpublickey((if v_198 then keypairpack(validkey(public_key_5),basis_5) else fail-any)) in
        {601}let basis_6: key = key_m(them_1) in
        {602}let public_key_6: key = catch-fail(dhexp(basis_6,validkey(g))) in
        {603}let v_199: bool = not-caught-fail(public_key_6) in
        {604}let rm_6: key = getpublickey((if v_199 then keypairpack(validkey(public_key_6),basis_6) else fail-any)) in
        {611}let k_15: key = empty in
        {612}let cs_26: cipherstate = cipherstatepack(k_15,minnonce) in
        {608}let protocol_name_1: bitstring = somename in
        {609}let h_26: bitstring = hash(protocol_name_1,empty) in
        {610}let ck_31: key = h_26 in
        {613}let ss_30: symmetricstate = symmetricstatepack(cs_26,ck_31,h_26) in
        {614}let v_200: bitstring = catch-fail(symmetricstateunpack(ss_30)) in
        {615}let v_201: bool = (not-caught-fail(v_200) && success?(1-proj-3-tuple(v_200))) in
        {616}let h_27: bitstring = (if v_201 then 3-proj-3-tuple(v_200) else caught-fail) in
        {617}let ck_32: key = (if v_201 then 2-proj-3-tuple(v_200) else caught-fail) in
        {618}let cs_27: cipherstate = (if v_201 then 1-proj-3-tuple(v_200) else caught-fail) in
        {606}let prologue_1: bitstring = empty in
        {619}let ss_31: symmetricstate = catch-fail((if v_201 then symmetricstatepack(cs_27,ck_32,hash(h_27,prologue_1)) else fail-any)) in
        {620}let v_202: bool = not-caught-fail(ss_31) in
        {621}let v_203: bitstring = (if v_202 then catch-fail(symmetricstateunpack(ss_31)) else caught-fail) in
        {622}let v_204: bool = (not-caught-fail(v_203) && success?(1-proj-3-tuple(v_203))) in
        {623}let h_28: bitstring = (if v_204 then 3-proj-3-tuple(v_203) else caught-fail) in
        {624}let ck_33: key = (if v_204 then 2-proj-3-tuple(v_203) else caught-fail) in
        {625}let cs_28: cipherstate = (if v_204 then 1-proj-3-tuple(v_203) else caught-fail) in
        {626}let ss_32: symmetricstate = (if v_202 then catch-fail((if v_204 then symmetricstatepack(cs_28,ck_33,hash(h_28,rs_6)) else fail-any)) else caught-fail) in
        {627}let v_205: bool = not-caught-fail(ss_32) in
        {628}let v_206: bitstring = (if v_205 then catch-fail(symmetricstateunpack(ss_32)) else caught-fail) in
        {629}let v_207: bool = (not-caught-fail(v_206) && success?(1-proj-3-tuple(v_206))) in
        {630}let h_29: bitstring = (if v_207 then 3-proj-3-tuple(v_206) else caught-fail) in
        {631}let ck_34: key = (if v_207 then 2-proj-3-tuple(v_206) else caught-fail) in
        {632}let cs_29: cipherstate = (if v_207 then 1-proj-3-tuple(v_206) else caught-fail) in
        {633}let ss_33: symmetricstate = (if v_205 then catch-fail((if v_207 then symmetricstatepack(cs_29,ck_34,hash(h_29,rm_6)) else fail-any)) else caught-fail) in
        {634}let v_208: bool = not-caught-fail(ss_33) in
        {607}let psk_6: key = empty in
        {605}let re_7: key = empty in
        {596}let e_12: keypair = keypairpack(empty,empty) in
        {635}let hs_18: handshakestate = (if v_202 then (if v_205 then (if v_208 then handshakestatepack(ss_33,s_7,m_7,e_12,rs_6,rm_6,re_7,psk_6,true) else fail-any) else fail-any) else fail-any) in
        {636}insert statestore(me_1,them_1,sid_2,statepack_a(hs_18))
    ) | (
        {749}get statestore(=me_1,=them_1,=sid_2,statepack_a(hs_19: handshakestate)) in
        {638}let v_209: bitstring = catch-fail(handshakestateunpack(hs_19)) in
        {639}let v_210: bool = (not-caught-fail(v_209) && success?(1-proj-9-tuple(v_209))) in
        {640}let initiator_6: bool = (if v_210 then 9-proj-9-tuple(v_209) else caught-fail) in
        {641}let psk_7: key = (if v_210 then 8-proj-9-tuple(v_209) else caught-fail) in
        {642}let re_8: key = (if v_210 then 7-proj-9-tuple(v_209) else caught-fail) in
        {643}let rm_7: key = (if v_210 then 6-proj-9-tuple(v_209) else caught-fail) in
        {644}let rs_7: key = (if v_210 then 5-proj-9-tuple(v_209) else caught-fail) in
        {645}let e_13: keypair = (if v_210 then 4-proj-9-tuple(v_209) else caught-fail) in
        {646}let m_8: keypair = (if v_210 then 3-proj-9-tuple(v_209) else caught-fail) in
        {647}let s_8: keypair = (if v_210 then 2-proj-9-tuple(v_209) else caught-fail) in
        {648}let ss_34: symmetricstate = (if v_210 then 1-proj-9-tuple(v_209) else caught-fail) in
        {649}let v_211: bitstring = (if v_210 then catch-fail((empty,empty,empty)) else caught-fail) in
        {650}let v_212: bool = (not-caught-fail(v_211) && success?(1-proj-3-tuple(v_211))) in
        {651}let ciphertext_13: bitstring = (if v_212 then 3-proj-3-tuple(v_211) else caught-fail) in
        {652}let ns_6: bitstring = (if v_212 then 2-proj-3-tuple(v_211) else caught-fail) in
        {653}let ne_5: bitstring = (if v_212 then 1-proj-3-tuple(v_211) else caught-fail) in
        {654}let basis_7: key = (if v_212 then key_e(me_1,them_1,sid_2) else caught-fail) in
        {655}let public_key_7: key = (if v_212 then catch-fail(dhexp(basis_7,validkey(g))) else caught-fail) in
        {656}let v_213: bool = not-caught-fail(public_key_7) in
        {657}let e_14: keypair = (if v_212 then catch-fail((if v_213 then keypairpack(validkey(public_key_7),basis_7) else fail-any)) else caught-fail) in
        {658}let v_214: bool = not-caught-fail(e_14) in
        {659}let ne_6: bitstring = (if v_214 then catch-fail(getpublickey(e_14)) else caught-fail) in
        {660}let v_215: bool = not-caught-fail(ne_6) in
        {661}let v_216: bitstring = (if v_215 then catch-fail(symmetricstateunpack(ss_34)) else caught-fail) in
        {662}let v_217: bool = (not-caught-fail(v_216) && success?(1-proj-3-tuple(v_216))) in
        {663}let h_30: bitstring = (if v_217 then 3-proj-3-tuple(v_216) else caught-fail) in
        {664}let ck_35: key = (if v_217 then 2-proj-3-tuple(v_216) else caught-fail) in
        {665}let cs_30: cipherstate = (if v_217 then 1-proj-3-tuple(v_216) else caught-fail) in
        {666}let ss_35: symmetricstate = (if v_215 then catch-fail((if v_217 then symmetricstatepack(cs_30,ck_35,hash(h_30,ne_6)) else fail-any)) else caught-fail) in
        {667}let v_218: bool = not-caught-fail(ss_35) in
        {668}let v_219: bitstring = (if v_218 then catch-fail(keypairunpack(e_14)) else caught-fail) in
        {669}let v_220: bool = (not-caught-fail(v_219) && success?(1-proj-2-tuple(v_219))) in
        {670}let my_private_key_5: key = (if v_220 then 2-proj-2-tuple(v_219) else caught-fail) in
        {671}let my_public_key_5: key = (if v_220 then 1-proj-2-tuple(v_219) else caught-fail) in
        {672}let input_key_material_6: key = (if v_218 then catch-fail((if v_220 then dhexp(my_private_key_5,rs_7) else fail-any)) else caught-fail) in
        {673}let v_221: bool = not-caught-fail(input_key_material_6) in
        {674}let v_222: bitstring = (if v_221 then catch-fail(symmetricstateunpack(ss_35)) else caught-fail) in
        {675}let v_223: bool = (not-caught-fail(v_222) && success?(1-proj-3-tuple(v_222))) in
        {676}let h_31: bitstring = (if v_223 then 3-proj-3-tuple(v_222) else caught-fail) in
        {677}let ck_36: key = (if v_223 then 2-proj-3-tuple(v_222) else caught-fail) in
        {678}let cs_31: cipherstate = (if v_223 then 1-proj-3-tuple(v_222) else caught-fail) in
        {681}let output3_6: key = (if v_223 then hmac_hash3(ck_36,input_key_material_6) else caught-fail) in
        {680}let output2_6: key = (if v_223 then hmac_hash2(ck_36,input_key_material_6) else caught-fail) in
        {679}let output1_6: key = (if v_223 then hmac_hash1(ck_36,input_key_material_6) else caught-fail) in
        {682}let v_224: bitstring = (if v_223 then catch-fail((output1_6,output2_6,output3_6)) else caught-fail) in
        {683}let v_225: bool = (not-caught-fail(v_224) && success?(1-proj-3-tuple(v_224))) in
        {684}let output_5: key = (if v_225 then 3-proj-3-tuple(v_224) else caught-fail) in
        {685}let temp_k_5: key = (if v_225 then 2-proj-3-tuple(v_224) else caught-fail) in
        {686}let ck_37: key = (if v_225 then 1-proj-3-tuple(v_224) else caught-fail) in
        {687}let ss_36: symmetricstate = (if v_218 then catch-fail((if v_221 then (if v_223 then (if v_225 then symmetricstatepack(cipherstatepack(temp_k_5,minnonce),ck_37,h_31) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {688}let v_226: bool = not-caught-fail(ss_36) in
        {689}let v_227: bitstring = (if v_226 then catch-fail(keypairunpack(e_14)) else caught-fail) in
        {690}let v_228: bool = (not-caught-fail(v_227) && success?(1-proj-2-tuple(v_227))) in
        {691}let my_private_key_6: key = (if v_228 then 2-proj-2-tuple(v_227) else caught-fail) in
        {692}let my_public_key_6: key = (if v_228 then 1-proj-2-tuple(v_227) else caught-fail) in
        {693}let input_key_material_7: key = (if v_226 then catch-fail((if v_228 then dhexp(my_private_key_6,rm_7) else fail-any)) else caught-fail) in
        {694}let v_229: bool = not-caught-fail(input_key_material_7) in
        {695}let v_230: bitstring = (if v_229 then catch-fail(symmetricstateunpack(ss_36)) else caught-fail) in
        {696}let v_231: bool = (not-caught-fail(v_230) && success?(1-proj-3-tuple(v_230))) in
        {697}let h_32: bitstring = (if v_231 then 3-proj-3-tuple(v_230) else caught-fail) in
        {698}let ck_38: key = (if v_231 then 2-proj-3-tuple(v_230) else caught-fail) in
        {699}let cs_32: cipherstate = (if v_231 then 1-proj-3-tuple(v_230) else caught-fail) in
        {702}let output3_7: key = (if v_231 then hmac_hash3(ck_38,input_key_material_7) else caught-fail) in
        {701}let output2_7: key = (if v_231 then hmac_hash2(ck_38,input_key_material_7) else caught-fail) in
        {700}let output1_7: key = (if v_231 then hmac_hash1(ck_38,input_key_material_7) else caught-fail) in
        {703}let v_232: bitstring = (if v_231 then catch-fail((output1_7,output2_7,output3_7)) else caught-fail) in
        {704}let v_233: bool = (not-caught-fail(v_232) && success?(1-proj-3-tuple(v_232))) in
        {705}let output_6: key = (if v_233 then 3-proj-3-tuple(v_232) else caught-fail) in
        {706}let temp_k_6: key = (if v_233 then 2-proj-3-tuple(v_232) else caught-fail) in
        {707}let ck_39: key = (if v_233 then 1-proj-3-tuple(v_232) else caught-fail) in
        {708}let ss_37: symmetricstate = (if v_226 then catch-fail((if v_229 then (if v_231 then (if v_233 then symmetricstatepack(cipherstatepack(temp_k_6,minnonce),ck_39,h_32) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {709}let v_234: bool = not-caught-fail(ss_37) in
        {710}let v_235: bitstring = (if v_234 then catch-fail(symmetricstateunpack(ss_37)) else caught-fail) in
        {711}let v_236: bool = (not-caught-fail(v_235) && success?(1-proj-3-tuple(v_235))) in
        {712}let h_33: bitstring = (if v_236 then 3-proj-3-tuple(v_235) else caught-fail) in
        {713}let ck_40: key = (if v_236 then 2-proj-3-tuple(v_235) else caught-fail) in
        {714}let cs_33: cipherstate = (if v_236 then 1-proj-3-tuple(v_235) else caught-fail) in
        {715}let v_237: bitstring = (if v_236 then catch-fail(cipherstateunpack(cs_33)) else caught-fail) in
        {716}let v_238: bool = (not-caught-fail(v_237) && success?(1-proj-2-tuple(v_237))) in
        {717}let n_14: nonce = (if v_238 then 2-proj-2-tuple(v_237) else caught-fail) in
        {718}let k_16: key = (if v_238 then 1-proj-2-tuple(v_237) else caught-fail) in
        {721}let v_239: bitstring = (if v_238 then catch-fail(cipherstateunpack(cs_33)) else caught-fail) in
        {722}let v_240: bool = (not-caught-fail(v_239) && success?(1-proj-2-tuple(v_239))) in
        {723}let o_7: nonce = (if v_240 then 2-proj-2-tuple(v_239) else caught-fail) in
        {724}let k_17: key = (if v_240 then 1-proj-2-tuple(v_239) else caught-fail) in
        {720}let n_15: nonce = (if v_238 then increment_nonce(n_14) else caught-fail) in
        {725}let csi_14: cipherstate = (if v_238 then catch-fail((if v_240 then cipherstatepack(k_17,n_15) else fail-any)) else caught-fail) in
        {726}let v_241: bool = not-caught-fail(csi_14) in
        {637}let payload_3: bitstring = msg_a(me_1,them_1,sid_2) in
        {719}let e_15: bitstring = (if v_238 then encrypt(k_16,n_14,h_33,payload_3) else caught-fail) in
        {727}let v_242: bitstring = (if v_236 then catch-fail((if v_238 then (if v_241 then (csi_14,e_15) else fail-any) else fail-any)) else caught-fail) in
        {728}let v_243: bool = (not-caught-fail(v_242) && success?(1-proj-2-tuple(v_242))) in
        {729}let ciphertext_14: bitstring = (if v_243 then 2-proj-2-tuple(v_242) else caught-fail) in
        {730}let csi_15: cipherstate = (if v_243 then 1-proj-2-tuple(v_242) else caught-fail) in
        {731}let ss_38: symmetricstate = (if v_243 then symmetricstatepack(csi_15,ck_40,h_33) else caught-fail) in
        {732}let v_244: bitstring = (if v_243 then catch-fail(symmetricstateunpack(ss_38)) else caught-fail) in
        {733}let v_245: bool = (not-caught-fail(v_244) && success?(1-proj-3-tuple(v_244))) in
        {734}let h_34: bitstring = (if v_245 then 3-proj-3-tuple(v_244) else caught-fail) in
        {735}let ck_41: key = (if v_245 then 2-proj-3-tuple(v_244) else caught-fail) in
        {736}let cs_34: cipherstate = (if v_245 then 1-proj-3-tuple(v_244) else caught-fail) in
        {737}let ssi_8: symmetricstate = (if v_243 then catch-fail((if v_245 then symmetricstatepack(cs_34,ck_41,hash(h_34,ciphertext_14)) else fail-any)) else caught-fail) in
        {738}let v_246: bool = not-caught-fail(ssi_8) in
        {739}let v_247: bitstring = (if v_234 then catch-fail((if v_236 then (if v_243 then (if v_246 then (ssi_8,ciphertext_14) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {740}let v_248: bool = (not-caught-fail(v_247) && success?(1-proj-2-tuple(v_247))) in
        {741}let ciphertext_15: bitstring = (if v_248 then 2-proj-2-tuple(v_247) else caught-fail) in
        {742}let ss_39: symmetricstate = (if v_248 then 1-proj-2-tuple(v_247) else caught-fail) in
        {744}let message_buffer_3: bitstring = (if v_248 then concat3(ne_6,ns_6,ciphertext_15) else caught-fail) in
        {743}let hs_20: handshakestate = (if v_248 then handshakestatepack(ss_39,s_8,m_8,e_14,rs_7,rm_7,re_8,psk_7,initiator_6) else caught-fail) in
        {745}let (hs_21: handshakestate,message_a_1: bitstring) = (if v_210 then (if v_212 then (if v_214 then (if v_215 then (if v_218 then (if v_226 then (if v_234 then (if v_248 then (hs_20,message_buffer_3) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {746}event SendMsg(me_1,them_1,stagepack_a(sid_2),msg_a(me_1,them_1,sid_2));
        {747}insert statestore(me_1,them_1,sid_2,statepack_b(hs_21));
        {748}out(pub, message_a_1)
    ) | (
        {843}get statestore(=me_1,=them_1,=sid_2,statepack_b(hs_22: handshakestate)) in
        {750}in(pub, message_b_1: bitstring);
        {751}let v_249: bitstring = catch-fail(handshakestateunpack(hs_22)) in
        {752}let v_250: bool = (not-caught-fail(v_249) && success?(1-proj-9-tuple(v_249))) in
        {753}let initiator_7: bool = (if v_250 then 9-proj-9-tuple(v_249) else caught-fail) in
        {754}let psk_8: key = (if v_250 then 8-proj-9-tuple(v_249) else caught-fail) in
        {755}let re_9: key = (if v_250 then 7-proj-9-tuple(v_249) else caught-fail) in
        {756}let rm_8: key = (if v_250 then 6-proj-9-tuple(v_249) else caught-fail) in
        {757}let rs_8: key = (if v_250 then 5-proj-9-tuple(v_249) else caught-fail) in
        {758}let e_16: keypair = (if v_250 then 4-proj-9-tuple(v_249) else caught-fail) in
        {759}let m_9: keypair = (if v_250 then 3-proj-9-tuple(v_249) else caught-fail) in
        {760}let s_9: keypair = (if v_250 then 2-proj-9-tuple(v_249) else caught-fail) in
        {761}let ss_40: symmetricstate = (if v_250 then 1-proj-9-tuple(v_249) else caught-fail) in
        {762}let v_251: bitstring = (if v_250 then catch-fail(deconcat3(message_b_1)) else caught-fail) in
        {763}let v_252: bool = (not-caught-fail(v_251) && success?(1-proj-3-tuple(v_251))) in
        {764}let ciphertext_16: bitstring = (if v_252 then 3-proj-3-tuple(v_251) else caught-fail) in
        {765}let ns_7: bitstring = (if v_252 then 2-proj-3-tuple(v_251) else caught-fail) in
        {766}let ne_7: bitstring = (if v_252 then 1-proj-3-tuple(v_251) else caught-fail) in
        {769}let v_253: bitstring = (if v_252 then catch-fail(symmetricstateunpack(ss_40)) else caught-fail) in
        {770}let v_254: bool = (not-caught-fail(v_253) && success?(1-proj-3-tuple(v_253))) in
        {771}let h_35: bitstring = (if v_254 then 3-proj-3-tuple(v_253) else caught-fail) in
        {772}let ck_42: key = (if v_254 then 2-proj-3-tuple(v_253) else caught-fail) in
        {773}let cs_35: cipherstate = (if v_254 then 1-proj-3-tuple(v_253) else caught-fail) in
        {768}let re_10: key = (if v_252 then ne_7 else caught-fail) in
        {774}let ss_41: symmetricstate = (if v_252 then catch-fail((if v_254 then symmetricstatepack(cs_35,ck_42,hash(h_35,re_10)) else fail-any)) else caught-fail) in
        {775}let v_255: bool = not-caught-fail(ss_41) in
        {776}let v_256: bitstring = (if v_255 then catch-fail(keypairunpack(e_16)) else caught-fail) in
        {777}let v_257: bool = (not-caught-fail(v_256) && success?(1-proj-2-tuple(v_256))) in
        {778}let my_private_key_7: key = (if v_257 then 2-proj-2-tuple(v_256) else caught-fail) in
        {779}let my_public_key_7: key = (if v_257 then 1-proj-2-tuple(v_256) else caught-fail) in
        {780}let input_key_material_8: key = (if v_255 then catch-fail((if v_257 then dhexp(my_private_key_7,re_10) else fail-any)) else caught-fail) in
        {781}let v_258: bool = not-caught-fail(input_key_material_8) in
        {782}let v_259: bitstring = (if v_258 then catch-fail(symmetricstateunpack(ss_41)) else caught-fail) in
        {783}let v_260: bool = (not-caught-fail(v_259) && success?(1-proj-3-tuple(v_259))) in
        {784}let h_36: bitstring = (if v_260 then 3-proj-3-tuple(v_259) else caught-fail) in
        {785}let ck_43: key = (if v_260 then 2-proj-3-tuple(v_259) else caught-fail) in
        {786}let cs_36: cipherstate = (if v_260 then 1-proj-3-tuple(v_259) else caught-fail) in
        {789}let output3_8: key = (if v_260 then hmac_hash3(ck_43,input_key_material_8) else caught-fail) in
        {788}let output2_8: key = (if v_260 then hmac_hash2(ck_43,input_key_material_8) else caught-fail) in
        {787}let output1_8: key = (if v_260 then hmac_hash1(ck_43,input_key_material_8) else caught-fail) in
        {790}let v_261: bitstring = (if v_260 then catch-fail((output1_8,output2_8,output3_8)) else caught-fail) in
        {791}let v_262: bool = (not-caught-fail(v_261) && success?(1-proj-3-tuple(v_261))) in
        {792}let output_7: key = (if v_262 then 3-proj-3-tuple(v_261) else caught-fail) in
        {793}let temp_k_7: key = (if v_262 then 2-proj-3-tuple(v_261) else caught-fail) in
        {794}let ck_44: key = (if v_262 then 1-proj-3-tuple(v_261) else caught-fail) in
        {795}let ss_42: symmetricstate = (if v_255 then catch-fail((if v_258 then (if v_260 then (if v_262 then symmetricstatepack(cipherstatepack(temp_k_7,minnonce),ck_44,h_36) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {796}let v_263: bool = not-caught-fail(ss_42) in
        {797}let v_264: bitstring = (if v_263 then catch-fail(symmetricstateunpack(ss_42)) else caught-fail) in
        {798}let v_265: bool = (not-caught-fail(v_264) && success?(1-proj-3-tuple(v_264))) in
        {799}let h_37: bitstring = (if v_265 then 3-proj-3-tuple(v_264) else caught-fail) in
        {800}let ck_45: key = (if v_265 then 2-proj-3-tuple(v_264) else caught-fail) in
        {801}let cs_37: cipherstate = (if v_265 then 1-proj-3-tuple(v_264) else caught-fail) in
        {802}let v_266: bitstring = (if v_265 then catch-fail(cipherstateunpack(cs_37)) else caught-fail) in
        {803}let v_267: bool = (not-caught-fail(v_266) && success?(1-proj-2-tuple(v_266))) in
        {804}let n_16: nonce = (if v_267 then 2-proj-2-tuple(v_266) else caught-fail) in
        {805}let k_18: key = (if v_267 then 1-proj-2-tuple(v_266) else caught-fail) in
        {806}let d_2: aead = (if v_267 then catch-fail(decrypt(k_18,n_16,h_37,ciphertext_16)) else caught-fail) in
        {807}let v_268: bool = not-caught-fail(d_2) in
        {808}let v_269: bitstring = (if v_268 then catch-fail(aeadunpack(d_2)) else caught-fail) in
        {809}let v_270: bool = (not-caught-fail(v_269) && success?(1-proj-3-tuple(v_269))) in
        {810}let plaintext_8: bitstring = (if v_270 then 3-proj-3-tuple(v_269) else caught-fail) in
        {811}let adi_2: bitstring = (if v_270 then 2-proj-3-tuple(v_269) else caught-fail) in
        {812}let valid_6: bool = (if v_270 then 1-proj-3-tuple(v_269) else caught-fail) in
        {814}let v_271: bitstring = (if v_270 then catch-fail(cipherstateunpack(cs_37)) else caught-fail) in
        {815}let v_272: bool = (not-caught-fail(v_271) && success?(1-proj-2-tuple(v_271))) in
        {816}let o_8: nonce = (if v_272 then 2-proj-2-tuple(v_271) else caught-fail) in
        {817}let k_19: key = (if v_272 then 1-proj-2-tuple(v_271) else caught-fail) in
        {813}let n_17: nonce = (if v_270 then increment_nonce(n_16) else caught-fail) in
        {818}let csi_16: cipherstate = (if v_270 then catch-fail((if v_272 then cipherstatepack(k_19,n_17) else fail-any)) else caught-fail) in
        {819}let v_273: bool = not-caught-fail(csi_16) in
        {820}let v_274: bitstring = (if v_265 then catch-fail((if v_267 then (if v_268 then (if v_270 then (if v_273 then (csi_16,plaintext_8,valid_6) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {821}let v_275: bool = (not-caught-fail(v_274) && success?(1-proj-3-tuple(v_274))) in
        {822}let valid_7: bool = (if v_275 then 3-proj-3-tuple(v_274) else caught-fail) in
        {823}let plaintext_9: bitstring = (if v_275 then 2-proj-3-tuple(v_274) else caught-fail) in
        {824}let csi_17: cipherstate = (if v_275 then 1-proj-3-tuple(v_274) else caught-fail) in
        {825}let ss_43: symmetricstate = (if v_275 then symmetricstatepack(csi_17,ck_45,h_37) else caught-fail) in
        {826}let v_276: bitstring = (if v_275 then catch-fail(symmetricstateunpack(ss_43)) else caught-fail) in
        {827}let v_277: bool = (not-caught-fail(v_276) && success?(1-proj-3-tuple(v_276))) in
        {828}let h_38: bitstring = (if v_277 then 3-proj-3-tuple(v_276) else caught-fail) in
        {829}let ck_46: key = (if v_277 then 2-proj-3-tuple(v_276) else caught-fail) in
        {830}let cs_38: cipherstate = (if v_277 then 1-proj-3-tuple(v_276) else caught-fail) in
        {831}let ssi_9: symmetricstate = (if v_275 then catch-fail((if v_277 then symmetricstatepack(cs_38,ck_46,hash(h_38,ciphertext_16)) else fail-any)) else caught-fail) in
        {832}let v_278: bool = not-caught-fail(ssi_9) in
        {833}let v_279: bitstring = (if v_263 then catch-fail((if v_265 then (if v_275 then (if v_278 then (ssi_9,plaintext_9,valid_7) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {834}let v_280: bool = (not-caught-fail(v_279) && success?(1-proj-3-tuple(v_279))) in
        {835}let valid2_2: bool = (if v_280 then 3-proj-3-tuple(v_279) else caught-fail) in
        {836}let plaintext_10: bitstring = (if v_280 then 2-proj-3-tuple(v_279) else caught-fail) in
        {837}let ss_44: symmetricstate = (if v_280 then 1-proj-3-tuple(v_279) else caught-fail) in
        {767}let valid1_2: bool = (if v_252 then true else caught-fail) in
        {838}let v_281: bool = (if v_280 then catch-fail((valid1_2 && valid2_2)) else caught-fail) in
        {839}let hs_23: handshakestate = (if v_281 then handshakestatepack(ss_44,s_9,m_9,e_16,rs_8,rm_8,re_10,psk_8,initiator_7) else caught-fail) in
        {840}let (hs_24: handshakestate,plaintext_b_1: bitstring,valid_8: bool) = (if v_250 then (if v_252 then (if v_255 then (if v_263 then (if v_280 then (if undo-catch-fail(v_281) then (hs_23,plaintext_10,true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {841}event RecvMsg(me_1,them_1,stagepack_b(sid_2),plaintext_b_1);
        {842}insert statestore(me_1,them_1,sid_2,statepack_c(hs_24))
    ) | (
        {1043}get statestore(=me_1,=them_1,=sid_2,statepack_c(hs_25: handshakestate)) in
        {845}let v_282: bitstring = catch-fail(handshakestateunpack(hs_25)) in
        {846}let v_283: bool = (not-caught-fail(v_282) && success?(1-proj-9-tuple(v_282))) in
        {847}let initiator_8: bool = (if v_283 then 9-proj-9-tuple(v_282) else caught-fail) in
        {848}let psk_9: key = (if v_283 then 8-proj-9-tuple(v_282) else caught-fail) in
        {849}let re_11: key = (if v_283 then 7-proj-9-tuple(v_282) else caught-fail) in
        {850}let rm_9: key = (if v_283 then 6-proj-9-tuple(v_282) else caught-fail) in
        {851}let rs_9: key = (if v_283 then 5-proj-9-tuple(v_282) else caught-fail) in
        {852}let e_17: keypair = (if v_283 then 4-proj-9-tuple(v_282) else caught-fail) in
        {853}let m_10: keypair = (if v_283 then 3-proj-9-tuple(v_282) else caught-fail) in
        {854}let s_10: keypair = (if v_283 then 2-proj-9-tuple(v_282) else caught-fail) in
        {855}let ss_45: symmetricstate = (if v_283 then 1-proj-9-tuple(v_282) else caught-fail) in
        {856}let v_284: bitstring = (if v_283 then catch-fail((empty,empty,empty)) else caught-fail) in
        {857}let v_285: bool = (not-caught-fail(v_284) && success?(1-proj-3-tuple(v_284))) in
        {858}let ciphertext_17: bitstring = (if v_285 then 3-proj-3-tuple(v_284) else caught-fail) in
        {859}let nm_2: bitstring = (if v_285 then 2-proj-3-tuple(v_284) else caught-fail) in
        {860}let ns_8: bitstring = (if v_285 then 1-proj-3-tuple(v_284) else caught-fail) in
        {861}let basis_8: key = (if v_285 then key_s(me_1) else caught-fail) in
        {862}let public_key_8: key = (if v_285 then catch-fail(dhexp(basis_8,validkey(g))) else caught-fail) in
        {863}let v_286: bool = not-caught-fail(public_key_8) in
        {864}let s_11: keypair = (if v_285 then catch-fail((if v_286 then keypairpack(validkey(public_key_8),basis_8) else fail-any)) else caught-fail) in
        {865}let v_287: bool = not-caught-fail(s_11) in
        {866}let plaintext_11: bitstring = (if v_287 then catch-fail(getpublickey(s_11)) else caught-fail) in
        {867}let v_288: bool = not-caught-fail(plaintext_11) in
        {868}let v_289: bitstring = (if v_288 then catch-fail(symmetricstateunpack(ss_45)) else caught-fail) in
        {869}let v_290: bool = (not-caught-fail(v_289) && success?(1-proj-3-tuple(v_289))) in
        {870}let h_39: bitstring = (if v_290 then 3-proj-3-tuple(v_289) else caught-fail) in
        {871}let ck_47: key = (if v_290 then 2-proj-3-tuple(v_289) else caught-fail) in
        {872}let cs_39: cipherstate = (if v_290 then 1-proj-3-tuple(v_289) else caught-fail) in
        {873}let v_291: bitstring = (if v_290 then catch-fail(cipherstateunpack(cs_39)) else caught-fail) in
        {874}let v_292: bool = (not-caught-fail(v_291) && success?(1-proj-2-tuple(v_291))) in
        {875}let n_18: nonce = (if v_292 then 2-proj-2-tuple(v_291) else caught-fail) in
        {876}let k_20: key = (if v_292 then 1-proj-2-tuple(v_291) else caught-fail) in
        {879}let v_293: bitstring = (if v_292 then catch-fail(cipherstateunpack(cs_39)) else caught-fail) in
        {880}let v_294: bool = (not-caught-fail(v_293) && success?(1-proj-2-tuple(v_293))) in
        {881}let o_9: nonce = (if v_294 then 2-proj-2-tuple(v_293) else caught-fail) in
        {882}let k_21: key = (if v_294 then 1-proj-2-tuple(v_293) else caught-fail) in
        {878}let n_19: nonce = (if v_292 then increment_nonce(n_18) else caught-fail) in
        {883}let csi_18: cipherstate = (if v_292 then catch-fail((if v_294 then cipherstatepack(k_21,n_19) else fail-any)) else caught-fail) in
        {884}let v_295: bool = not-caught-fail(csi_18) in
        {877}let e_18: bitstring = (if v_292 then encrypt(k_20,n_18,h_39,plaintext_11) else caught-fail) in
        {885}let v_296: bitstring = (if v_290 then catch-fail((if v_292 then (if v_295 then (csi_18,e_18) else fail-any) else fail-any)) else caught-fail) in
        {886}let v_297: bool = (not-caught-fail(v_296) && success?(1-proj-2-tuple(v_296))) in
        {887}let ciphertext_18: bitstring = (if v_297 then 2-proj-2-tuple(v_296) else caught-fail) in
        {888}let csi_19: cipherstate = (if v_297 then 1-proj-2-tuple(v_296) else caught-fail) in
        {889}let ss_46: symmetricstate = (if v_297 then symmetricstatepack(csi_19,ck_47,h_39) else caught-fail) in
        {890}let v_298: bitstring = (if v_297 then catch-fail(symmetricstateunpack(ss_46)) else caught-fail) in
        {891}let v_299: bool = (not-caught-fail(v_298) && success?(1-proj-3-tuple(v_298))) in
        {892}let h_40: bitstring = (if v_299 then 3-proj-3-tuple(v_298) else caught-fail) in
        {893}let ck_48: key = (if v_299 then 2-proj-3-tuple(v_298) else caught-fail) in
        {894}let cs_40: cipherstate = (if v_299 then 1-proj-3-tuple(v_298) else caught-fail) in
        {895}let ssi_10: symmetricstate = (if v_297 then catch-fail((if v_299 then symmetricstatepack(cs_40,ck_48,hash(h_40,ciphertext_18)) else fail-any)) else caught-fail) in
        {896}let v_300: bool = not-caught-fail(ssi_10) in
        {897}let v_301: bitstring = (if v_287 then catch-fail((if v_288 then (if v_290 then (if v_297 then (if v_300 then (ssi_10,ciphertext_18) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {898}let v_302: bool = (not-caught-fail(v_301) && success?(1-proj-2-tuple(v_301))) in
        {899}let ns_9: bitstring = (if v_302 then 2-proj-2-tuple(v_301) else caught-fail) in
        {900}let ss_47: symmetricstate = (if v_302 then 1-proj-2-tuple(v_301) else caught-fail) in
        {901}let basis_9: key = (if v_302 then key_m(me_1) else caught-fail) in
        {902}let public_key_9: key = (if v_302 then catch-fail(dhexp(basis_9,validkey(g))) else caught-fail) in
        {903}let v_303: bool = not-caught-fail(public_key_9) in
        {904}let m_11: keypair = (if v_302 then catch-fail((if v_303 then keypairpack(validkey(public_key_9),basis_9) else fail-any)) else caught-fail) in
        {905}let v_304: bool = not-caught-fail(m_11) in
        {906}let plaintext_12: bitstring = (if v_304 then catch-fail(getpublickey(m_11)) else caught-fail) in
        {907}let v_305: bool = not-caught-fail(plaintext_12) in
        {908}let v_306: bitstring = (if v_305 then catch-fail(symmetricstateunpack(ss_47)) else caught-fail) in
        {909}let v_307: bool = (not-caught-fail(v_306) && success?(1-proj-3-tuple(v_306))) in
        {910}let h_41: bitstring = (if v_307 then 3-proj-3-tuple(v_306) else caught-fail) in
        {911}let ck_49: key = (if v_307 then 2-proj-3-tuple(v_306) else caught-fail) in
        {912}let cs_41: cipherstate = (if v_307 then 1-proj-3-tuple(v_306) else caught-fail) in
        {913}let v_308: bitstring = (if v_307 then catch-fail(cipherstateunpack(cs_41)) else caught-fail) in
        {914}let v_309: bool = (not-caught-fail(v_308) && success?(1-proj-2-tuple(v_308))) in
        {915}let n_20: nonce = (if v_309 then 2-proj-2-tuple(v_308) else caught-fail) in
        {916}let k_22: key = (if v_309 then 1-proj-2-tuple(v_308) else caught-fail) in
        {919}let v_310: bitstring = (if v_309 then catch-fail(cipherstateunpack(cs_41)) else caught-fail) in
        {920}let v_311: bool = (not-caught-fail(v_310) && success?(1-proj-2-tuple(v_310))) in
        {921}let o_10: nonce = (if v_311 then 2-proj-2-tuple(v_310) else caught-fail) in
        {922}let k_23: key = (if v_311 then 1-proj-2-tuple(v_310) else caught-fail) in
        {918}let n_21: nonce = (if v_309 then increment_nonce(n_20) else caught-fail) in
        {923}let csi_20: cipherstate = (if v_309 then catch-fail((if v_311 then cipherstatepack(k_23,n_21) else fail-any)) else caught-fail) in
        {924}let v_312: bool = not-caught-fail(csi_20) in
        {917}let e_19: bitstring = (if v_309 then encrypt(k_22,n_20,h_41,plaintext_12) else caught-fail) in
        {925}let v_313: bitstring = (if v_307 then catch-fail((if v_309 then (if v_312 then (csi_20,e_19) else fail-any) else fail-any)) else caught-fail) in
        {926}let v_314: bool = (not-caught-fail(v_313) && success?(1-proj-2-tuple(v_313))) in
        {927}let ciphertext_19: bitstring = (if v_314 then 2-proj-2-tuple(v_313) else caught-fail) in
        {928}let csi_21: cipherstate = (if v_314 then 1-proj-2-tuple(v_313) else caught-fail) in
        {929}let ss_48: symmetricstate = (if v_314 then symmetricstatepack(csi_21,ck_49,h_41) else caught-fail) in
        {930}let v_315: bitstring = (if v_314 then catch-fail(symmetricstateunpack(ss_48)) else caught-fail) in
        {931}let v_316: bool = (not-caught-fail(v_315) && success?(1-proj-3-tuple(v_315))) in
        {932}let h_42: bitstring = (if v_316 then 3-proj-3-tuple(v_315) else caught-fail) in
        {933}let ck_50: key = (if v_316 then 2-proj-3-tuple(v_315) else caught-fail) in
        {934}let cs_42: cipherstate = (if v_316 then 1-proj-3-tuple(v_315) else caught-fail) in
        {935}let ssi_11: symmetricstate = (if v_314 then catch-fail((if v_316 then symmetricstatepack(cs_42,ck_50,hash(h_42,ciphertext_19)) else fail-any)) else caught-fail) in
        {936}let v_317: bool = not-caught-fail(ssi_11) in
        {937}let v_318: bitstring = (if v_304 then catch-fail((if v_305 then (if v_307 then (if v_314 then (if v_317 then (ssi_11,ciphertext_19) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {938}let v_319: bool = (not-caught-fail(v_318) && success?(1-proj-2-tuple(v_318))) in
        {939}let nm_3: bitstring = (if v_319 then 2-proj-2-tuple(v_318) else caught-fail) in
        {940}let ss_49: symmetricstate = (if v_319 then 1-proj-2-tuple(v_318) else caught-fail) in
        {941}let v_320: bitstring = (if v_319 then catch-fail(keypairunpack(s_11)) else caught-fail) in
        {942}let v_321: bool = (not-caught-fail(v_320) && success?(1-proj-2-tuple(v_320))) in
        {943}let my_private_key_8: key = (if v_321 then 2-proj-2-tuple(v_320) else caught-fail) in
        {944}let my_public_key_8: key = (if v_321 then 1-proj-2-tuple(v_320) else caught-fail) in
        {945}let input_key_material_9: key = (if v_319 then catch-fail((if v_321 then dhexp(my_private_key_8,re_11) else fail-any)) else caught-fail) in
        {946}let v_322: bool = not-caught-fail(input_key_material_9) in
        {947}let v_323: bitstring = (if v_322 then catch-fail(symmetricstateunpack(ss_49)) else caught-fail) in
        {948}let v_324: bool = (not-caught-fail(v_323) && success?(1-proj-3-tuple(v_323))) in
        {949}let h_43: bitstring = (if v_324 then 3-proj-3-tuple(v_323) else caught-fail) in
        {950}let ck_51: key = (if v_324 then 2-proj-3-tuple(v_323) else caught-fail) in
        {951}let cs_43: cipherstate = (if v_324 then 1-proj-3-tuple(v_323) else caught-fail) in
        {954}let output3_9: key = (if v_324 then hmac_hash3(ck_51,input_key_material_9) else caught-fail) in
        {953}let output2_9: key = (if v_324 then hmac_hash2(ck_51,input_key_material_9) else caught-fail) in
        {952}let output1_9: key = (if v_324 then hmac_hash1(ck_51,input_key_material_9) else caught-fail) in
        {955}let v_325: bitstring = (if v_324 then catch-fail((output1_9,output2_9,output3_9)) else caught-fail) in
        {956}let v_326: bool = (not-caught-fail(v_325) && success?(1-proj-3-tuple(v_325))) in
        {957}let output_8: key = (if v_326 then 3-proj-3-tuple(v_325) else caught-fail) in
        {958}let temp_k_8: key = (if v_326 then 2-proj-3-tuple(v_325) else caught-fail) in
        {959}let ck_52: key = (if v_326 then 1-proj-3-tuple(v_325) else caught-fail) in
        {960}let ss_50: symmetricstate = (if v_319 then catch-fail((if v_322 then (if v_324 then (if v_326 then symmetricstatepack(cipherstatepack(temp_k_8,minnonce),ck_52,h_43) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {961}let v_327: bool = not-caught-fail(ss_50) in
        {962}let v_328: bitstring = (if v_327 then catch-fail(keypairunpack(m_11)) else caught-fail) in
        {963}let v_329: bool = (not-caught-fail(v_328) && success?(1-proj-2-tuple(v_328))) in
        {964}let my_private_key_9: key = (if v_329 then 2-proj-2-tuple(v_328) else caught-fail) in
        {965}let my_public_key_9: key = (if v_329 then 1-proj-2-tuple(v_328) else caught-fail) in
        {966}let input_key_material_10: key = (if v_327 then catch-fail((if v_329 then dhexp(my_private_key_9,re_11) else fail-any)) else caught-fail) in
        {967}let v_330: bool = not-caught-fail(input_key_material_10) in
        {968}let v_331: bitstring = (if v_330 then catch-fail(symmetricstateunpack(ss_50)) else caught-fail) in
        {969}let v_332: bool = (not-caught-fail(v_331) && success?(1-proj-3-tuple(v_331))) in
        {970}let h_44: bitstring = (if v_332 then 3-proj-3-tuple(v_331) else caught-fail) in
        {971}let ck_53: key = (if v_332 then 2-proj-3-tuple(v_331) else caught-fail) in
        {972}let cs_44: cipherstate = (if v_332 then 1-proj-3-tuple(v_331) else caught-fail) in
        {975}let output3_10: key = (if v_332 then hmac_hash3(ck_53,input_key_material_10) else caught-fail) in
        {974}let output2_10: key = (if v_332 then hmac_hash2(ck_53,input_key_material_10) else caught-fail) in
        {973}let output1_10: key = (if v_332 then hmac_hash1(ck_53,input_key_material_10) else caught-fail) in
        {976}let v_333: bitstring = (if v_332 then catch-fail((output1_10,output2_10,output3_10)) else caught-fail) in
        {977}let v_334: bool = (not-caught-fail(v_333) && success?(1-proj-3-tuple(v_333))) in
        {978}let output_9: key = (if v_334 then 3-proj-3-tuple(v_333) else caught-fail) in
        {979}let temp_k_9: key = (if v_334 then 2-proj-3-tuple(v_333) else caught-fail) in
        {980}let ck_54: key = (if v_334 then 1-proj-3-tuple(v_333) else caught-fail) in
        {981}let ss_51: symmetricstate = (if v_327 then catch-fail((if v_330 then (if v_332 then (if v_334 then symmetricstatepack(cipherstatepack(temp_k_9,minnonce),ck_54,h_44) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {982}let v_335: bool = not-caught-fail(ss_51) in
        {983}let v_336: bitstring = (if v_335 then catch-fail(symmetricstateunpack(ss_51)) else caught-fail) in
        {984}let v_337: bool = (not-caught-fail(v_336) && success?(1-proj-3-tuple(v_336))) in
        {985}let h_45: bitstring = (if v_337 then 3-proj-3-tuple(v_336) else caught-fail) in
        {986}let ck_55: key = (if v_337 then 2-proj-3-tuple(v_336) else caught-fail) in
        {987}let cs_45: cipherstate = (if v_337 then 1-proj-3-tuple(v_336) else caught-fail) in
        {988}let v_338: bitstring = (if v_337 then catch-fail(cipherstateunpack(cs_45)) else caught-fail) in
        {989}let v_339: bool = (not-caught-fail(v_338) && success?(1-proj-2-tuple(v_338))) in
        {990}let n_22: nonce = (if v_339 then 2-proj-2-tuple(v_338) else caught-fail) in
        {991}let k_24: key = (if v_339 then 1-proj-2-tuple(v_338) else caught-fail) in
        {994}let v_340: bitstring = (if v_339 then catch-fail(cipherstateunpack(cs_45)) else caught-fail) in
        {995}let v_341: bool = (not-caught-fail(v_340) && success?(1-proj-2-tuple(v_340))) in
        {996}let o_11: nonce = (if v_341 then 2-proj-2-tuple(v_340) else caught-fail) in
        {997}let k_25: key = (if v_341 then 1-proj-2-tuple(v_340) else caught-fail) in
        {993}let n_23: nonce = (if v_339 then increment_nonce(n_22) else caught-fail) in
        {998}let csi_22: cipherstate = (if v_339 then catch-fail((if v_341 then cipherstatepack(k_25,n_23) else fail-any)) else caught-fail) in
        {999}let v_342: bool = not-caught-fail(csi_22) in
        {844}let payload_4: bitstring = msg_c(me_1,them_1,sid_2) in
        {992}let e_20: bitstring = (if v_339 then encrypt(k_24,n_22,h_45,payload_4) else caught-fail) in
        {1000}let v_343: bitstring = (if v_337 then catch-fail((if v_339 then (if v_342 then (csi_22,e_20) else fail-any) else fail-any)) else caught-fail) in
        {1001}let v_344: bool = (not-caught-fail(v_343) && success?(1-proj-2-tuple(v_343))) in
        {1002}let ciphertext_20: bitstring = (if v_344 then 2-proj-2-tuple(v_343) else caught-fail) in
        {1003}let csi_23: cipherstate = (if v_344 then 1-proj-2-tuple(v_343) else caught-fail) in
        {1004}let ss_52: symmetricstate = (if v_344 then symmetricstatepack(csi_23,ck_55,h_45) else caught-fail) in
        {1005}let v_345: bitstring = (if v_344 then catch-fail(symmetricstateunpack(ss_52)) else caught-fail) in
        {1006}let v_346: bool = (not-caught-fail(v_345) && success?(1-proj-3-tuple(v_345))) in
        {1007}let h_46: bitstring = (if v_346 then 3-proj-3-tuple(v_345) else caught-fail) in
        {1008}let ck_56: key = (if v_346 then 2-proj-3-tuple(v_345) else caught-fail) in
        {1009}let cs_46: cipherstate = (if v_346 then 1-proj-3-tuple(v_345) else caught-fail) in
        {1010}let ssi_12: symmetricstate = (if v_344 then catch-fail((if v_346 then symmetricstatepack(cs_46,ck_56,hash(h_46,ciphertext_20)) else fail-any)) else caught-fail) in
        {1011}let v_347: bool = not-caught-fail(ssi_12) in
        {1012}let v_348: bitstring = (if v_335 then catch-fail((if v_337 then (if v_344 then (if v_347 then (ssi_12,ciphertext_20) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1013}let v_349: bool = (not-caught-fail(v_348) && success?(1-proj-2-tuple(v_348))) in
        {1014}let ciphertext_21: bitstring = (if v_349 then 2-proj-2-tuple(v_348) else caught-fail) in
        {1015}let ss_53: symmetricstate = (if v_349 then 1-proj-2-tuple(v_348) else caught-fail) in
        {1018}let v_350: bitstring = (if v_349 then catch-fail(symmetricstateunpack(ss_53)) else caught-fail) in
        {1019}let v_351: bool = (not-caught-fail(v_350) && success?(1-proj-3-tuple(v_350))) in
        {1020}let h_47: bitstring = (if v_351 then 3-proj-3-tuple(v_350) else caught-fail) in
        {1021}let ck_57: key = (if v_351 then 2-proj-3-tuple(v_350) else caught-fail) in
        {1022}let cs_47: cipherstate = (if v_351 then 1-proj-3-tuple(v_350) else caught-fail) in
        {1023}let input_key_material_11: key = (if v_351 then zero else caught-fail) in
        {1026}let output3_11: key = (if v_351 then hmac_hash3(ck_57,input_key_material_11) else caught-fail) in
        {1025}let output2_11: key = (if v_351 then hmac_hash2(ck_57,input_key_material_11) else caught-fail) in
        {1024}let output1_11: key = (if v_351 then hmac_hash1(ck_57,input_key_material_11) else caught-fail) in
        {1027}let v_352: bitstring = (if v_351 then catch-fail((output1_11,output2_11,output3_11)) else caught-fail) in
        {1028}let v_353: bool = (not-caught-fail(v_352) && success?(1-proj-3-tuple(v_352))) in
        {1029}let temp_k3_1: key = (if v_353 then 3-proj-3-tuple(v_352) else caught-fail) in
        {1030}let temp_k2_1: key = (if v_353 then 2-proj-3-tuple(v_352) else caught-fail) in
        {1031}let temp_k1_1: key = (if v_353 then 1-proj-3-tuple(v_352) else caught-fail) in
        {1033}let cs2_5: cipherstate = (if v_353 then cipherstatepack(temp_k2_1,minnonce) else caught-fail) in
        {1032}let cs1_5: cipherstate = (if v_353 then cipherstatepack(temp_k1_1,minnonce) else caught-fail) in
        {1034}let v_354: bitstring = (if v_349 then catch-fail((if v_351 then (if v_353 then (ss_53,cs1_5,cs2_5) else fail-any) else fail-any)) else caught-fail) in
        {1035}let v_355: bool = (not-caught-fail(v_354) && success?(1-proj-3-tuple(v_354))) in
        {1036}let cs2_6: cipherstate = (if v_355 then 3-proj-3-tuple(v_354) else caught-fail) in
        {1037}let cs1_6: cipherstate = (if v_355 then 2-proj-3-tuple(v_354) else caught-fail) in
        {1038}let ssi_13: symmetricstate = (if v_355 then 1-proj-3-tuple(v_354) else caught-fail) in
        {1017}let message_buffer_4: bitstring = (if v_349 then concat3(ns_9,nm_3,ciphertext_21) else caught-fail) in
        {1016}let hs_26: handshakestate = (if v_349 then handshakestatepack(ss_53,s_11,m_11,e_17,rs_9,rm_9,re_11,psk_9,initiator_8) else caught-fail) in
        {1039}let (hs_27: handshakestate,message_c_1: bitstring,cs1_7: cipherstate,cs2_7: cipherstate) = (if v_283 then (if v_285 then (if v_287 then (if v_302 then (if v_304 then (if v_319 then (if v_327 then (if v_335 then (if v_349 then (if v_355 then (hs_26,message_buffer_4,cs1_6,cs2_6) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1040}event SendMsg(me_1,them_1,stagepack_c(sid_2),msg_c(me_1,them_1,sid_2));
        {1041}insert statestore(me_1,them_1,sid_2,statepack_d(hs_27,cs1_7,cs2_7));
        {1042}out(pub, message_c_1)
    ) | (
        {1044}!
        {1110}get statestore(=me_1,=them_1,=sid_2,statepack_d(hs_28: handshakestate,cs1_8: cipherstate,cs2_8: cipherstate)) in
        {1045}let hs_29: handshakestate = handshakestatesetcs(hs_28,cs2_8) in
        {1046}in(pub, message_d_1: bitstring);
        {1047}let v_356: bitstring = catch-fail(handshakestateunpack(hs_29)) in
        {1048}let v_357: bool = (not-caught-fail(v_356) && success?(1-proj-9-tuple(v_356))) in
        {1049}let initiator_9: bool = (if v_357 then 9-proj-9-tuple(v_356) else caught-fail) in
        {1050}let psk_10: key = (if v_357 then 8-proj-9-tuple(v_356) else caught-fail) in
        {1051}let re_12: key = (if v_357 then 7-proj-9-tuple(v_356) else caught-fail) in
        {1052}let rm_10: key = (if v_357 then 6-proj-9-tuple(v_356) else caught-fail) in
        {1053}let rs_10: key = (if v_357 then 5-proj-9-tuple(v_356) else caught-fail) in
        {1054}let e_21: keypair = (if v_357 then 4-proj-9-tuple(v_356) else caught-fail) in
        {1055}let m_12: keypair = (if v_357 then 3-proj-9-tuple(v_356) else caught-fail) in
        {1056}let s_12: keypair = (if v_357 then 2-proj-9-tuple(v_356) else caught-fail) in
        {1057}let ss_54: symmetricstate = (if v_357 then 1-proj-9-tuple(v_356) else caught-fail) in
        {1058}let v_358: bitstring = (if v_357 then catch-fail(deconcat3(message_d_1)) else caught-fail) in
        {1059}let v_359: bool = (not-caught-fail(v_358) && success?(1-proj-3-tuple(v_358))) in
        {1060}let ciphertext_22: bitstring = (if v_359 then 3-proj-3-tuple(v_358) else caught-fail) in
        {1061}let ns_10: bitstring = (if v_359 then 2-proj-3-tuple(v_358) else caught-fail) in
        {1062}let ne_8: bitstring = (if v_359 then 1-proj-3-tuple(v_358) else caught-fail) in
        {1064}let v_360: bitstring = (if v_359 then catch-fail(symmetricstateunpack(ss_54)) else caught-fail) in
        {1065}let v_361: bool = (not-caught-fail(v_360) && success?(1-proj-3-tuple(v_360))) in
        {1066}let h_48: bitstring = (if v_361 then 3-proj-3-tuple(v_360) else caught-fail) in
        {1067}let ck_58: key = (if v_361 then 2-proj-3-tuple(v_360) else caught-fail) in
        {1068}let cs_48: cipherstate = (if v_361 then 1-proj-3-tuple(v_360) else caught-fail) in
        {1069}let v_362: bitstring = (if v_361 then catch-fail(cipherstateunpack(cs_48)) else caught-fail) in
        {1070}let v_363: bool = (not-caught-fail(v_362) && success?(1-proj-2-tuple(v_362))) in
        {1071}let n_24: nonce = (if v_363 then 2-proj-2-tuple(v_362) else caught-fail) in
        {1072}let k_26: key = (if v_363 then 1-proj-2-tuple(v_362) else caught-fail) in
        {1073}let d_3: aead = (if v_363 then catch-fail(decrypt(k_26,n_24,h_48,ciphertext_22)) else caught-fail) in
        {1074}let v_364: bool = not-caught-fail(d_3) in
        {1075}let v_365: bitstring = (if v_364 then catch-fail(aeadunpack(d_3)) else caught-fail) in
        {1076}let v_366: bool = (not-caught-fail(v_365) && success?(1-proj-3-tuple(v_365))) in
        {1077}let plaintext_13: bitstring = (if v_366 then 3-proj-3-tuple(v_365) else caught-fail) in
        {1078}let adi_3: bitstring = (if v_366 then 2-proj-3-tuple(v_365) else caught-fail) in
        {1079}let valid_9: bool = (if v_366 then 1-proj-3-tuple(v_365) else caught-fail) in
        {1081}let v_367: bitstring = (if v_366 then catch-fail(cipherstateunpack(cs_48)) else caught-fail) in
        {1082}let v_368: bool = (not-caught-fail(v_367) && success?(1-proj-2-tuple(v_367))) in
        {1083}let o_12: nonce = (if v_368 then 2-proj-2-tuple(v_367) else caught-fail) in
        {1084}let k_27: key = (if v_368 then 1-proj-2-tuple(v_367) else caught-fail) in
        {1080}let n_25: nonce = (if v_366 then increment_nonce(n_24) else caught-fail) in
        {1085}let csi_24: cipherstate = (if v_366 then catch-fail((if v_368 then cipherstatepack(k_27,n_25) else fail-any)) else caught-fail) in
        {1086}let v_369: bool = not-caught-fail(csi_24) in
        {1087}let v_370: bitstring = (if v_361 then catch-fail((if v_363 then (if v_364 then (if v_366 then (if v_369 then (csi_24,plaintext_13,valid_9) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1088}let v_371: bool = (not-caught-fail(v_370) && success?(1-proj-3-tuple(v_370))) in
        {1089}let valid_10: bool = (if v_371 then 3-proj-3-tuple(v_370) else caught-fail) in
        {1090}let plaintext_14: bitstring = (if v_371 then 2-proj-3-tuple(v_370) else caught-fail) in
        {1091}let csi_25: cipherstate = (if v_371 then 1-proj-3-tuple(v_370) else caught-fail) in
        {1092}let ss_55: symmetricstate = (if v_371 then symmetricstatepack(csi_25,ck_58,h_48) else caught-fail) in
        {1093}let v_372: bitstring = (if v_371 then catch-fail(symmetricstateunpack(ss_55)) else caught-fail) in
        {1094}let v_373: bool = (not-caught-fail(v_372) && success?(1-proj-3-tuple(v_372))) in
        {1095}let h_49: bitstring = (if v_373 then 3-proj-3-tuple(v_372) else caught-fail) in
        {1096}let ck_59: key = (if v_373 then 2-proj-3-tuple(v_372) else caught-fail) in
        {1097}let cs_49: cipherstate = (if v_373 then 1-proj-3-tuple(v_372) else caught-fail) in
        {1098}let ssi_14: symmetricstate = (if v_371 then catch-fail((if v_373 then symmetricstatepack(cs_49,ck_59,hash(h_49,ciphertext_22)) else fail-any)) else caught-fail) in
        {1099}let v_374: bool = not-caught-fail(ssi_14) in
        {1100}let v_375: bitstring = (if v_359 then catch-fail((if v_361 then (if v_371 then (if v_374 then (ssi_14,plaintext_14,valid_10) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1101}let v_376: bool = (not-caught-fail(v_375) && success?(1-proj-3-tuple(v_375))) in
        {1102}let valid2_3: bool = (if v_376 then 3-proj-3-tuple(v_375) else caught-fail) in
        {1103}let plaintext_15: bitstring = (if v_376 then 2-proj-3-tuple(v_375) else caught-fail) in
        {1104}let ss_56: symmetricstate = (if v_376 then 1-proj-3-tuple(v_375) else caught-fail) in
        {1063}let valid1_3: bool = (if v_359 then true else caught-fail) in
        {1105}let v_377: bool = (if v_376 then catch-fail((valid1_3 && valid2_3)) else caught-fail) in
        {1106}let hs_30: handshakestate = (if v_377 then handshakestatepack(ss_56,s_12,m_12,e_21,rs_10,rm_10,re_12,psk_10,initiator_9) else caught-fail) in
        {1107}let (hs_31: handshakestate,plaintext_d_1: bitstring,valid_11: bool) = (if v_357 then (if v_359 then (if v_376 then (if undo-catch-fail(v_377) then (hs_30,plaintext_15,true) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1108}event RecvMsg(me_1,them_1,stagepack_d(sid_2),plaintext_d_1);
        {1109}insert statestore(me_1,them_1,sid_2,statepack_e(hs_31,cs1_8,handshakestategetcs(hs_31)))
    ) | (
        {1111}!
        {1168}get statestore(=me_1,=them_1,=sid_2,statepack_e(hs_32: handshakestate,cs1_9: cipherstate,cs2_9: cipherstate)) in
        {1112}let hs_33: handshakestate = handshakestatesetcs(hs_32,cs1_9) in
        {1114}let v_378: bitstring = catch-fail(handshakestateunpack(hs_33)) in
        {1115}let v_379: bool = (not-caught-fail(v_378) && success?(1-proj-9-tuple(v_378))) in
        {1116}let initiator_10: bool = (if v_379 then 9-proj-9-tuple(v_378) else caught-fail) in
        {1117}let psk_11: key = (if v_379 then 8-proj-9-tuple(v_378) else caught-fail) in
        {1118}let re_13: key = (if v_379 then 7-proj-9-tuple(v_378) else caught-fail) in
        {1119}let rm_11: key = (if v_379 then 6-proj-9-tuple(v_378) else caught-fail) in
        {1120}let rs_11: key = (if v_379 then 5-proj-9-tuple(v_378) else caught-fail) in
        {1121}let e_22: keypair = (if v_379 then 4-proj-9-tuple(v_378) else caught-fail) in
        {1122}let m_13: keypair = (if v_379 then 3-proj-9-tuple(v_378) else caught-fail) in
        {1123}let s_13: keypair = (if v_379 then 2-proj-9-tuple(v_378) else caught-fail) in
        {1124}let ss_57: symmetricstate = (if v_379 then 1-proj-9-tuple(v_378) else caught-fail) in
        {1125}let v_380: bitstring = (if v_379 then catch-fail((empty,empty,empty)) else caught-fail) in
        {1126}let v_381: bool = (not-caught-fail(v_380) && success?(1-proj-3-tuple(v_380))) in
        {1127}let ciphertext_23: bitstring = (if v_381 then 3-proj-3-tuple(v_380) else caught-fail) in
        {1128}let ns_11: bitstring = (if v_381 then 2-proj-3-tuple(v_380) else caught-fail) in
        {1129}let ne_9: bitstring = (if v_381 then 1-proj-3-tuple(v_380) else caught-fail) in
        {1130}let v_382: bitstring = (if v_381 then catch-fail(symmetricstateunpack(ss_57)) else caught-fail) in
        {1131}let v_383: bool = (not-caught-fail(v_382) && success?(1-proj-3-tuple(v_382))) in
        {1132}let h_50: bitstring = (if v_383 then 3-proj-3-tuple(v_382) else caught-fail) in
        {1133}let ck_60: key = (if v_383 then 2-proj-3-tuple(v_382) else caught-fail) in
        {1134}let cs_50: cipherstate = (if v_383 then 1-proj-3-tuple(v_382) else caught-fail) in
        {1135}let v_384: bitstring = (if v_383 then catch-fail(cipherstateunpack(cs_50)) else caught-fail) in
        {1136}let v_385: bool = (not-caught-fail(v_384) && success?(1-proj-2-tuple(v_384))) in
        {1137}let n_26: nonce = (if v_385 then 2-proj-2-tuple(v_384) else caught-fail) in
        {1138}let k_28: key = (if v_385 then 1-proj-2-tuple(v_384) else caught-fail) in
        {1141}let v_386: bitstring = (if v_385 then catch-fail(cipherstateunpack(cs_50)) else caught-fail) in
        {1142}let v_387: bool = (not-caught-fail(v_386) && success?(1-proj-2-tuple(v_386))) in
        {1143}let o_13: nonce = (if v_387 then 2-proj-2-tuple(v_386) else caught-fail) in
        {1144}let k_29: key = (if v_387 then 1-proj-2-tuple(v_386) else caught-fail) in
        {1140}let n_27: nonce = (if v_385 then increment_nonce(n_26) else caught-fail) in
        {1145}let csi_26: cipherstate = (if v_385 then catch-fail((if v_387 then cipherstatepack(k_29,n_27) else fail-any)) else caught-fail) in
        {1146}let v_388: bool = not-caught-fail(csi_26) in
        {1113}let payload_5: bitstring = msg_e(me_1,them_1,sid_2) in
        {1139}let e_23: bitstring = (if v_385 then encrypt(k_28,n_26,h_50,payload_5) else caught-fail) in
        {1147}let v_389: bitstring = (if v_383 then catch-fail((if v_385 then (if v_388 then (csi_26,e_23) else fail-any) else fail-any)) else caught-fail) in
        {1148}let v_390: bool = (not-caught-fail(v_389) && success?(1-proj-2-tuple(v_389))) in
        {1149}let ciphertext_24: bitstring = (if v_390 then 2-proj-2-tuple(v_389) else caught-fail) in
        {1150}let csi_27: cipherstate = (if v_390 then 1-proj-2-tuple(v_389) else caught-fail) in
        {1151}let ss_58: symmetricstate = (if v_390 then symmetricstatepack(csi_27,ck_60,h_50) else caught-fail) in
        {1152}let v_391: bitstring = (if v_390 then catch-fail(symmetricstateunpack(ss_58)) else caught-fail) in
        {1153}let v_392: bool = (not-caught-fail(v_391) && success?(1-proj-3-tuple(v_391))) in
        {1154}let h_51: bitstring = (if v_392 then 3-proj-3-tuple(v_391) else caught-fail) in
        {1155}let ck_61: key = (if v_392 then 2-proj-3-tuple(v_391) else caught-fail) in
        {1156}let cs_51: cipherstate = (if v_392 then 1-proj-3-tuple(v_391) else caught-fail) in
        {1157}let ssi_15: symmetricstate = (if v_390 then catch-fail((if v_392 then symmetricstatepack(cs_51,ck_61,hash(h_51,ciphertext_24)) else fail-any)) else caught-fail) in
        {1158}let v_393: bool = not-caught-fail(ssi_15) in
        {1159}let v_394: bitstring = (if v_381 then catch-fail((if v_383 then (if v_390 then (if v_393 then (ssi_15,ciphertext_24) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1160}let v_395: bool = (not-caught-fail(v_394) && success?(1-proj-2-tuple(v_394))) in
        {1161}let ciphertext_25: bitstring = (if v_395 then 2-proj-2-tuple(v_394) else caught-fail) in
        {1162}let ss_59: symmetricstate = (if v_395 then 1-proj-2-tuple(v_394) else caught-fail) in
        {1164}let message_buffer_5: bitstring = (if v_395 then concat3(ne_9,ns_11,ciphertext_25) else caught-fail) in
        {1163}let hs_34: handshakestate = (if v_395 then handshakestatepack(ss_59,s_13,m_13,e_22,rs_11,rm_11,re_13,psk_11,initiator_10) else caught-fail) in
        {1165}let (hs_35: handshakestate,message_e_1: bitstring) = (if v_379 then (if v_381 then (if v_395 then (hs_34,message_buffer_5) else fail-any) else fail-any) else fail-any) in
        {1166}event SendMsg(me_1,them_1,stagepack_e(sid_2),msg_e(me_1,them_1,sid_2));
        {1167}out(pub, message_e_1)
    ) | (
        {1169}event LeakS(phase0,me_1);
        {1170}event LeakM(phase0,me_1);
        {1171}out(pub, (key_s(me_1),key_m(me_1)))
    ) | (
        {1172}phase 1;
        {1173}event LeakS(phase1,me_1);
        {1174}event LeakM(phase1,me_1);
        {1175}out(pub, (key_s(me_1),key_m(me_1)))
    )
) | (
    {1176}let me_2: principal = bob in
    {1179}let basis_10: key = key_s(me_2) in
    {1180}let public_key_10: key = catch-fail(dhexp(basis_10,validkey(g))) in
    {1181}let v_396: bool = not-caught-fail(public_key_10) in
    {1182}let s_14: keypair = (if v_396 then keypairpack(validkey(public_key_10),basis_10) else fail-any) in
    {1183}let basis_11: key = key_m(me_2) in
    {1184}let public_key_11: key = catch-fail(dhexp(basis_11,validkey(g))) in
    {1185}let v_397: bool = not-caught-fail(public_key_11) in
    {1186}let m_14: keypair = (if v_397 then keypairpack(validkey(public_key_11),basis_11) else fail-any) in
    {1187}out(pub, (getpublickey(s_14),getpublickey(m_14)));
    {1178}let sid_3: sessionid = sid in
    {1177}let them_2: principal = alice in
    (
        {1197}let k_30: key = empty in
        {1198}let cs_52: cipherstate = cipherstatepack(k_30,minnonce) in
        {1194}let protocol_name_2: bitstring = somename in
        {1195}let h_52: bitstring = hash(protocol_name_2,empty) in
        {1196}let ck_62: key = h_52 in
        {1199}let ss_60: symmetricstate = symmetricstatepack(cs_52,ck_62,h_52) in
        {1200}let v_398: bitstring = catch-fail(symmetricstateunpack(ss_60)) in
        {1201}let v_399: bool = (not-caught-fail(v_398) && success?(1-proj-3-tuple(v_398))) in
        {1202}let h_53: bitstring = (if v_399 then 3-proj-3-tuple(v_398) else caught-fail) in
        {1203}let ck_63: key = (if v_399 then 2-proj-3-tuple(v_398) else caught-fail) in
        {1204}let cs_53: cipherstate = (if v_399 then 1-proj-3-tuple(v_398) else caught-fail) in
        {1192}let prologue_2: bitstring = empty in
        {1205}let ss_61: symmetricstate = catch-fail((if v_399 then symmetricstatepack(cs_53,ck_63,hash(h_53,prologue_2)) else fail-any)) in
        {1206}let v_400: bool = not-caught-fail(ss_61) in
        {1207}let data: bitstring = (if v_400 then catch-fail(getpublickey(s_14)) else caught-fail) in
        {1208}let v_401: bool = not-caught-fail(data) in
        {1209}let v_402: bitstring = (if v_401 then catch-fail(symmetricstateunpack(ss_61)) else caught-fail) in
        {1210}let v_403: bool = (not-caught-fail(v_402) && success?(1-proj-3-tuple(v_402))) in
        {1211}let h_54: bitstring = (if v_403 then 3-proj-3-tuple(v_402) else caught-fail) in
        {1212}let ck_64: key = (if v_403 then 2-proj-3-tuple(v_402) else caught-fail) in
        {1213}let cs_54: cipherstate = (if v_403 then 1-proj-3-tuple(v_402) else caught-fail) in
        {1214}let ss_62: symmetricstate = (if v_400 then catch-fail((if v_401 then (if v_403 then symmetricstatepack(cs_54,ck_64,hash(h_54,data)) else fail-any) else fail-any)) else caught-fail) in
        {1215}let v_404: bool = not-caught-fail(ss_62) in
        {1216}let data_1: bitstring = (if v_404 then catch-fail(getpublickey(m_14)) else caught-fail) in
        {1217}let v_405: bool = not-caught-fail(data_1) in
        {1218}let v_406: bitstring = (if v_405 then catch-fail(symmetricstateunpack(ss_62)) else caught-fail) in
        {1219}let v_407: bool = (not-caught-fail(v_406) && success?(1-proj-3-tuple(v_406))) in
        {1220}let h_55: bitstring = (if v_407 then 3-proj-3-tuple(v_406) else caught-fail) in
        {1221}let ck_65: key = (if v_407 then 2-proj-3-tuple(v_406) else caught-fail) in
        {1222}let cs_55: cipherstate = (if v_407 then 1-proj-3-tuple(v_406) else caught-fail) in
        {1223}let ss_63: symmetricstate = (if v_404 then catch-fail((if v_405 then (if v_407 then symmetricstatepack(cs_55,ck_65,hash(h_55,data_1)) else fail-any) else fail-any)) else caught-fail) in
        {1224}let v_408: bool = not-caught-fail(ss_63) in
        {1193}let psk_12: key = empty in
        {1191}let re_14: key = empty in
        {1190}let rm_12: key = empty in
        {1189}let rs_12: key = empty in
        {1188}let e_24: keypair = keypairpack(empty,empty) in
        {1225}let hs_36: handshakestate = (if v_400 then (if v_404 then (if v_408 then handshakestatepack(ss_63,s_14,m_14,e_24,rs_12,rm_12,re_14,psk_12,false) else fail-any) else fail-any) else fail-any) in
        {1226}insert statestore(me_2,them_2,sid_3,statepack_a(hs_36))
    ) | (
        {1341}get statestore(=me_2,=them_2,=sid_3,statepack_a(hs_37: handshakestate)) in
        {1227}in(pub, message_a_2: bitstring);
        {1228}let v_409: bitstring = catch-fail(handshakestateunpack(hs_37)) in
        {1229}let v_410: bool = (not-caught-fail(v_409) && success?(1-proj-9-tuple(v_409))) in
        {1230}let initiator_11: bool = (if v_410 then 9-proj-9-tuple(v_409) else caught-fail) in
        {1231}let psk_13: key = (if v_410 then 8-proj-9-tuple(v_409) else caught-fail) in
        {1232}let re_15: key = (if v_410 then 7-proj-9-tuple(v_409) else caught-fail) in
        {1233}let rm_13: key = (if v_410 then 6-proj-9-tuple(v_409) else caught-fail) in
        {1234}let rs_13: key = (if v_410 then 5-proj-9-tuple(v_409) else caught-fail) in
        {1235}let e_25: keypair = (if v_410 then 4-proj-9-tuple(v_409) else caught-fail) in
        {1236}let m_15: keypair = (if v_410 then 3-proj-9-tuple(v_409) else caught-fail) in
        {1237}let s_15: keypair = (if v_410 then 2-proj-9-tuple(v_409) else caught-fail) in
        {1238}let ss_64: symmetricstate = (if v_410 then 1-proj-9-tuple(v_409) else caught-fail) in
        {1239}let v_411: bitstring = (if v_410 then catch-fail(deconcat3(message_a_2)) else caught-fail) in
        {1240}let v_412: bool = (not-caught-fail(v_411) && success?(1-proj-3-tuple(v_411))) in
        {1241}let ciphertext_26: bitstring = (if v_412 then 3-proj-3-tuple(v_411) else caught-fail) in
        {1242}let ns_12: bitstring = (if v_412 then 2-proj-3-tuple(v_411) else caught-fail) in
        {1243}let ne_10: bitstring = (if v_412 then 1-proj-3-tuple(v_411) else caught-fail) in
        {1246}let v_413: bitstring = (if v_412 then catch-fail(symmetricstateunpack(ss_64)) else caught-fail) in
        {1247}let v_414: bool = (not-caught-fail(v_413) && success?(1-proj-3-tuple(v_413))) in
        {1248}let h_56: bitstring = (if v_414 then 3-proj-3-tuple(v_413) else caught-fail) in
        {1249}let ck_66: key = (if v_414 then 2-proj-3-tuple(v_413) else caught-fail) in
        {1250}let cs_56: cipherstate = (if v_414 then 1-proj-3-tuple(v_413) else caught-fail) in
        {1245}let re_16: key = (if v_412 then ne_10 else caught-fail) in
        {1251}let ss_65: symmetricstate = (if v_412 then catch-fail((if v_414 then symmetricstatepack(cs_56,ck_66,hash(h_56,re_16)) else fail-any)) else caught-fail) in
        {1252}let v_415: bool = not-caught-fail(ss_65) in
        {1253}let v_416: bitstring = (if v_415 then catch-fail(keypairunpack(s_15)) else caught-fail) in
        {1254}let v_417: bool = (not-caught-fail(v_416) && success?(1-proj-2-tuple(v_416))) in
        {1255}let my_private_key_10: key = (if v_417 then 2-proj-2-tuple(v_416) else caught-fail) in
        {1256}let my_public_key_10: key = (if v_417 then 1-proj-2-tuple(v_416) else caught-fail) in
        {1257}let input_key_material_12: key = (if v_415 then catch-fail((if v_417 then dhexp(my_private_key_10,re_16) else fail-any)) else caught-fail) in
        {1258}let v_418: bool = not-caught-fail(input_key_material_12) in
        {1259}let v_419: bitstring = (if v_418 then catch-fail(symmetricstateunpack(ss_65)) else caught-fail) in
        {1260}let v_420: bool = (not-caught-fail(v_419) && success?(1-proj-3-tuple(v_419))) in
        {1261}let h_57: bitstring = (if v_420 then 3-proj-3-tuple(v_419) else caught-fail) in
        {1262}let ck_67: key = (if v_420 then 2-proj-3-tuple(v_419) else caught-fail) in
        {1263}let cs_57: cipherstate = (if v_420 then 1-proj-3-tuple(v_419) else caught-fail) in
        {1266}let output3_12: key = (if v_420 then hmac_hash3(ck_67,input_key_material_12) else caught-fail) in
        {1265}let output2_12: key = (if v_420 then hmac_hash2(ck_67,input_key_material_12) else caught-fail) in
        {1264}let output1_12: key = (if v_420 then hmac_hash1(ck_67,input_key_material_12) else caught-fail) in
        {1267}let v_421: bitstring = (if v_420 then catch-fail((output1_12,output2_12,output3_12)) else caught-fail) in
        {1268}let v_422: bool = (not-caught-fail(v_421) && success?(1-proj-3-tuple(v_421))) in
        {1269}let output_10: key = (if v_422 then 3-proj-3-tuple(v_421) else caught-fail) in
        {1270}let temp_k_10: key = (if v_422 then 2-proj-3-tuple(v_421) else caught-fail) in
        {1271}let ck_68: key = (if v_422 then 1-proj-3-tuple(v_421) else caught-fail) in
        {1272}let ss_66: symmetricstate = (if v_415 then catch-fail((if v_418 then (if v_420 then (if v_422 then symmetricstatepack(cipherstatepack(temp_k_10,minnonce),ck_68,h_57) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1273}let v_423: bool = not-caught-fail(ss_66) in
        {1274}let v_424: bitstring = (if v_423 then catch-fail(keypairunpack(m_15)) else caught-fail) in
        {1275}let v_425: bool = (not-caught-fail(v_424) && success?(1-proj-2-tuple(v_424))) in
        {1276}let my_private_key_11: key = (if v_425 then 2-proj-2-tuple(v_424) else caught-fail) in
        {1277}let my_public_key_11: key = (if v_425 then 1-proj-2-tuple(v_424) else caught-fail) in
        {1278}let input_key_material_13: key = (if v_423 then catch-fail((if v_425 then dhexp(my_private_key_11,re_16) else fail-any)) else caught-fail) in
        {1279}let v_426: bool = not-caught-fail(input_key_material_13) in
        {1280}let v_427: bitstring = (if v_426 then catch-fail(symmetricstateunpack(ss_66)) else caught-fail) in
        {1281}let v_428: bool = (not-caught-fail(v_427) && success?(1-proj-3-tuple(v_427))) in
        {1282}let h_58: bitstring = (if v_428 then 3-proj-3-tuple(v_427) else caught-fail) in
        {1283}let ck_69: key = (if v_428 then 2-proj-3-tuple(v_427) else caught-fail) in
        {1284}let cs_58: cipherstate = (if v_428 then 1-proj-3-tuple(v_427) else caught-fail) in
        {1287}let output3_13: key = (if v_428 then hmac_hash3(ck_69,input_key_material_13) else caught-fail) in
        {1286}let output2_13: key = (if v_428 then hmac_hash2(ck_69,input_key_material_13) else caught-fail) in
        {1285}let output1_13: key = (if v_428 then hmac_hash1(ck_69,input_key_material_13) else caught-fail) in
        {1288}let v_429: bitstring = (if v_428 then catch-fail((output1_13,output2_13,output3_13)) else caught-fail) in
        {1289}let v_430: bool = (not-caught-fail(v_429) && success?(1-proj-3-tuple(v_429))) in
        {1290}let output_11: key = (if v_430 then 3-proj-3-tuple(v_429) else caught-fail) in
        {1291}let temp_k_11: key = (if v_430 then 2-proj-3-tuple(v_429) else caught-fail) in
        {1292}let ck_70: key = (if v_430 then 1-proj-3-tuple(v_429) else caught-fail) in
        {1293}let ss_67: symmetricstate = (if v_423 then catch-fail((if v_426 then (if v_428 then (if v_430 then symmetricstatepack(cipherstatepack(temp_k_11,minnonce),ck_70,h_58) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1294}let v_431: bool = not-caught-fail(ss_67) in
        {1295}let v_432: bitstring = (if v_431 then catch-fail(symmetricstateunpack(ss_67)) else caught-fail) in
        {1296}let v_433: bool = (not-caught-fail(v_432) && success?(1-proj-3-tuple(v_432))) in
        {1297}let h_59: bitstring = (if v_433 then 3-proj-3-tuple(v_432) else caught-fail) in
        {1298}let ck_71: key = (if v_433 then 2-proj-3-tuple(v_432) else caught-fail) in
        {1299}let cs_59: cipherstate = (if v_433 then 1-proj-3-tuple(v_432) else caught-fail) in
        {1300}let v_434: bitstring = (if v_433 then catch-fail(cipherstateunpack(cs_59)) else caught-fail) in
        {1301}let v_435: bool = (not-caught-fail(v_434) && success?(1-proj-2-tuple(v_434))) in
        {1302}let n_28: nonce = (if v_435 then 2-proj-2-tuple(v_434) else caught-fail) in
        {1303}let k_31: key = (if v_435 then 1-proj-2-tuple(v_434) else caught-fail) in
        {1304}let d_4: aead = (if v_435 then catch-fail(decrypt(k_31,n_28,h_59,ciphertext_26)) else caught-fail) in
        {1305}let v_436: bool = not-caught-fail(d_4) in
        {1306}let v_437: bitstring = (if v_436 then catch-fail(aeadunpack(d_4)) else caught-fail) in
        {1307}let v_438: bool = (not-caught-fail(v_437) && success?(1-proj-3-tuple(v_437))) in
        {1308}let plaintext_16: bitstring = (if v_438 then 3-proj-3-tuple(v_437) else caught-fail) in
        {1309}let adi_4: bitstring = (if v_438 then 2-proj-3-tuple(v_437) else caught-fail) in
        {1310}let valid_12: bool = (if v_438 then 1-proj-3-tuple(v_437) else caught-fail) in
        {1312}let v_439: bitstring = (if v_438 then catch-fail(cipherstateunpack(cs_59)) else caught-fail) in
        {1313}let v_440: bool = (not-caught-fail(v_439) && success?(1-proj-2-tuple(v_439))) in
        {1314}let o_14: nonce = (if v_440 then 2-proj-2-tuple(v_439) else caught-fail) in
        {1315}let k_32: key = (if v_440 then 1-proj-2-tuple(v_439) else caught-fail) in
        {1311}let n_29: nonce = (if v_438 then increment_nonce(n_28) else caught-fail) in
        {1316}let csi_28: cipherstate = (if v_438 then catch-fail((if v_440 then cipherstatepack(k_32,n_29) else fail-any)) else caught-fail) in
        {1317}let v_441: bool = not-caught-fail(csi_28) in
        {1318}let v_442: bitstring = (if v_433 then catch-fail((if v_435 then (if v_436 then (if v_438 then (if v_441 then (csi_28,plaintext_16,valid_12) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1319}let v_443: bool = (not-caught-fail(v_442) && success?(1-proj-3-tuple(v_442))) in
        {1320}let valid_13: bool = (if v_443 then 3-proj-3-tuple(v_442) else caught-fail) in
        {1321}let plaintext_17: bitstring = (if v_443 then 2-proj-3-tuple(v_442) else caught-fail) in
        {1322}let csi_29: cipherstate = (if v_443 then 1-proj-3-tuple(v_442) else caught-fail) in
        {1323}let ss_68: symmetricstate = (if v_443 then symmetricstatepack(csi_29,ck_71,h_59) else caught-fail) in
        {1324}let v_444: bitstring = (if v_443 then catch-fail(symmetricstateunpack(ss_68)) else caught-fail) in
        {1325}let v_445: bool = (not-caught-fail(v_444) && success?(1-proj-3-tuple(v_444))) in
        {1326}let h_60: bitstring = (if v_445 then 3-proj-3-tuple(v_444) else caught-fail) in
        {1327}let ck_72: key = (if v_445 then 2-proj-3-tuple(v_444) else caught-fail) in
        {1328}let cs_60: cipherstate = (if v_445 then 1-proj-3-tuple(v_444) else caught-fail) in
        {1329}let ssi_16: symmetricstate = (if v_443 then catch-fail((if v_445 then symmetricstatepack(cs_60,ck_72,hash(h_60,ciphertext_26)) else fail-any)) else caught-fail) in
        {1330}let v_446: bool = not-caught-fail(ssi_16) in
        {1331}let v_447: bitstring = (if v_431 then catch-fail((if v_433 then (if v_443 then (if v_446 then (ssi_16,plaintext_17,valid_13) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1332}let v_448: bool = (not-caught-fail(v_447) && success?(1-proj-3-tuple(v_447))) in
        {1333}let valid2_4: bool = (if v_448 then 3-proj-3-tuple(v_447) else caught-fail) in
        {1334}let plaintext_18: bitstring = (if v_448 then 2-proj-3-tuple(v_447) else caught-fail) in
        {1335}let ss_69: symmetricstate = (if v_448 then 1-proj-3-tuple(v_447) else caught-fail) in
        {1244}let valid1_4: bool = (if v_412 then true else caught-fail) in
        {1336}let v_449: bool = (if v_448 then catch-fail((valid1_4 && valid2_4)) else caught-fail) in
        {1337}let hs_38: handshakestate = (if v_449 then handshakestatepack(ss_69,s_15,m_15,e_25,rs_13,rm_13,re_16,psk_13,initiator_11) else caught-fail) in
        {1338}let (hs_39: handshakestate,plaintext_a: bitstring,valid_14: bool) = (if v_410 then (if v_412 then (if v_415 then (if v_423 then (if v_431 then (if v_448 then (if undo-catch-fail(v_449) then (hs_38,plaintext_18,true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1339}event RecvMsg(me_2,them_2,stagepack_a(sid_3),plaintext_a);
        {1340}insert statestore(me_2,them_2,sid_3,statepack_b(hs_39))
    ) | (
        {1433}get statestore(=me_2,=them_2,=sid_3,statepack_b(hs_40: handshakestate)) in
        {1343}let v_450: bitstring = catch-fail(handshakestateunpack(hs_40)) in
        {1344}let v_451: bool = (not-caught-fail(v_450) && success?(1-proj-9-tuple(v_450))) in
        {1345}let initiator_12: bool = (if v_451 then 9-proj-9-tuple(v_450) else caught-fail) in
        {1346}let psk_14: key = (if v_451 then 8-proj-9-tuple(v_450) else caught-fail) in
        {1347}let re_17: key = (if v_451 then 7-proj-9-tuple(v_450) else caught-fail) in
        {1348}let rm_14: key = (if v_451 then 6-proj-9-tuple(v_450) else caught-fail) in
        {1349}let rs_14: key = (if v_451 then 5-proj-9-tuple(v_450) else caught-fail) in
        {1350}let e_26: keypair = (if v_451 then 4-proj-9-tuple(v_450) else caught-fail) in
        {1351}let m_16: keypair = (if v_451 then 3-proj-9-tuple(v_450) else caught-fail) in
        {1352}let s_16: keypair = (if v_451 then 2-proj-9-tuple(v_450) else caught-fail) in
        {1353}let ss_70: symmetricstate = (if v_451 then 1-proj-9-tuple(v_450) else caught-fail) in
        {1354}let v_452: bitstring = (if v_451 then catch-fail((empty,empty,empty)) else caught-fail) in
        {1355}let v_453: bool = (not-caught-fail(v_452) && success?(1-proj-3-tuple(v_452))) in
        {1356}let ciphertext_27: bitstring = (if v_453 then 3-proj-3-tuple(v_452) else caught-fail) in
        {1357}let ns_13: bitstring = (if v_453 then 2-proj-3-tuple(v_452) else caught-fail) in
        {1358}let ne_11: bitstring = (if v_453 then 1-proj-3-tuple(v_452) else caught-fail) in
        {1359}let basis_12: key = (if v_453 then key_e(me_2,them_2,sid_3) else caught-fail) in
        {1360}let public_key_12: key = (if v_453 then catch-fail(dhexp(basis_12,validkey(g))) else caught-fail) in
        {1361}let v_454: bool = not-caught-fail(public_key_12) in
        {1362}let e_27: keypair = (if v_453 then catch-fail((if v_454 then keypairpack(validkey(public_key_12),basis_12) else fail-any)) else caught-fail) in
        {1363}let v_455: bool = not-caught-fail(e_27) in
        {1364}let ne_12: bitstring = (if v_455 then catch-fail(getpublickey(e_27)) else caught-fail) in
        {1365}let v_456: bool = not-caught-fail(ne_12) in
        {1366}let v_457: bitstring = (if v_456 then catch-fail(symmetricstateunpack(ss_70)) else caught-fail) in
        {1367}let v_458: bool = (not-caught-fail(v_457) && success?(1-proj-3-tuple(v_457))) in
        {1368}let h_61: bitstring = (if v_458 then 3-proj-3-tuple(v_457) else caught-fail) in
        {1369}let ck_73: key = (if v_458 then 2-proj-3-tuple(v_457) else caught-fail) in
        {1370}let cs_61: cipherstate = (if v_458 then 1-proj-3-tuple(v_457) else caught-fail) in
        {1371}let ss_71: symmetricstate = (if v_456 then catch-fail((if v_458 then symmetricstatepack(cs_61,ck_73,hash(h_61,ne_12)) else fail-any)) else caught-fail) in
        {1372}let v_459: bool = not-caught-fail(ss_71) in
        {1373}let v_460: bitstring = (if v_459 then catch-fail(keypairunpack(e_27)) else caught-fail) in
        {1374}let v_461: bool = (not-caught-fail(v_460) && success?(1-proj-2-tuple(v_460))) in
        {1375}let my_private_key_12: key = (if v_461 then 2-proj-2-tuple(v_460) else caught-fail) in
        {1376}let my_public_key_12: key = (if v_461 then 1-proj-2-tuple(v_460) else caught-fail) in
        {1377}let input_key_material_14: key = (if v_459 then catch-fail((if v_461 then dhexp(my_private_key_12,re_17) else fail-any)) else caught-fail) in
        {1378}let v_462: bool = not-caught-fail(input_key_material_14) in
        {1379}let v_463: bitstring = (if v_462 then catch-fail(symmetricstateunpack(ss_71)) else caught-fail) in
        {1380}let v_464: bool = (not-caught-fail(v_463) && success?(1-proj-3-tuple(v_463))) in
        {1381}let h_62: bitstring = (if v_464 then 3-proj-3-tuple(v_463) else caught-fail) in
        {1382}let ck_74: key = (if v_464 then 2-proj-3-tuple(v_463) else caught-fail) in
        {1383}let cs_62: cipherstate = (if v_464 then 1-proj-3-tuple(v_463) else caught-fail) in
        {1386}let output3_14: key = (if v_464 then hmac_hash3(ck_74,input_key_material_14) else caught-fail) in
        {1385}let output2_14: key = (if v_464 then hmac_hash2(ck_74,input_key_material_14) else caught-fail) in
        {1384}let output1_14: key = (if v_464 then hmac_hash1(ck_74,input_key_material_14) else caught-fail) in
        {1387}let v_465: bitstring = (if v_464 then catch-fail((output1_14,output2_14,output3_14)) else caught-fail) in
        {1388}let v_466: bool = (not-caught-fail(v_465) && success?(1-proj-3-tuple(v_465))) in
        {1389}let output_12: key = (if v_466 then 3-proj-3-tuple(v_465) else caught-fail) in
        {1390}let temp_k_12: key = (if v_466 then 2-proj-3-tuple(v_465) else caught-fail) in
        {1391}let ck_75: key = (if v_466 then 1-proj-3-tuple(v_465) else caught-fail) in
        {1392}let ss_72: symmetricstate = (if v_459 then catch-fail((if v_462 then (if v_464 then (if v_466 then symmetricstatepack(cipherstatepack(temp_k_12,minnonce),ck_75,h_62) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1393}let v_467: bool = not-caught-fail(ss_72) in
        {1394}let v_468: bitstring = (if v_467 then catch-fail(symmetricstateunpack(ss_72)) else caught-fail) in
        {1395}let v_469: bool = (not-caught-fail(v_468) && success?(1-proj-3-tuple(v_468))) in
        {1396}let h_63: bitstring = (if v_469 then 3-proj-3-tuple(v_468) else caught-fail) in
        {1397}let ck_76: key = (if v_469 then 2-proj-3-tuple(v_468) else caught-fail) in
        {1398}let cs_63: cipherstate = (if v_469 then 1-proj-3-tuple(v_468) else caught-fail) in
        {1399}let v_470: bitstring = (if v_469 then catch-fail(cipherstateunpack(cs_63)) else caught-fail) in
        {1400}let v_471: bool = (not-caught-fail(v_470) && success?(1-proj-2-tuple(v_470))) in
        {1401}let n_30: nonce = (if v_471 then 2-proj-2-tuple(v_470) else caught-fail) in
        {1402}let k_33: key = (if v_471 then 1-proj-2-tuple(v_470) else caught-fail) in
        {1405}let v_472: bitstring = (if v_471 then catch-fail(cipherstateunpack(cs_63)) else caught-fail) in
        {1406}let v_473: bool = (not-caught-fail(v_472) && success?(1-proj-2-tuple(v_472))) in
        {1407}let o_15: nonce = (if v_473 then 2-proj-2-tuple(v_472) else caught-fail) in
        {1408}let k_34: key = (if v_473 then 1-proj-2-tuple(v_472) else caught-fail) in
        {1404}let n_31: nonce = (if v_471 then increment_nonce(n_30) else caught-fail) in
        {1409}let csi_30: cipherstate = (if v_471 then catch-fail((if v_473 then cipherstatepack(k_34,n_31) else fail-any)) else caught-fail) in
        {1410}let v_474: bool = not-caught-fail(csi_30) in
        {1342}let payload_6: bitstring = msg_b(me_2,them_2,sid_3) in
        {1403}let e_28: bitstring = (if v_471 then encrypt(k_33,n_30,h_63,payload_6) else caught-fail) in
        {1411}let v_475: bitstring = (if v_469 then catch-fail((if v_471 then (if v_474 then (csi_30,e_28) else fail-any) else fail-any)) else caught-fail) in
        {1412}let v_476: bool = (not-caught-fail(v_475) && success?(1-proj-2-tuple(v_475))) in
        {1413}let ciphertext_28: bitstring = (if v_476 then 2-proj-2-tuple(v_475) else caught-fail) in
        {1414}let csi_31: cipherstate = (if v_476 then 1-proj-2-tuple(v_475) else caught-fail) in
        {1415}let ss_73: symmetricstate = (if v_476 then symmetricstatepack(csi_31,ck_76,h_63) else caught-fail) in
        {1416}let v_477: bitstring = (if v_476 then catch-fail(symmetricstateunpack(ss_73)) else caught-fail) in
        {1417}let v_478: bool = (not-caught-fail(v_477) && success?(1-proj-3-tuple(v_477))) in
        {1418}let h_64: bitstring = (if v_478 then 3-proj-3-tuple(v_477) else caught-fail) in
        {1419}let ck_77: key = (if v_478 then 2-proj-3-tuple(v_477) else caught-fail) in
        {1420}let cs_64: cipherstate = (if v_478 then 1-proj-3-tuple(v_477) else caught-fail) in
        {1421}let ssi_17: symmetricstate = (if v_476 then catch-fail((if v_478 then symmetricstatepack(cs_64,ck_77,hash(h_64,ciphertext_28)) else fail-any)) else caught-fail) in
        {1422}let v_479: bool = not-caught-fail(ssi_17) in
        {1423}let v_480: bitstring = (if v_467 then catch-fail((if v_469 then (if v_476 then (if v_479 then (ssi_17,ciphertext_28) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1424}let v_481: bool = (not-caught-fail(v_480) && success?(1-proj-2-tuple(v_480))) in
        {1425}let ciphertext_29: bitstring = (if v_481 then 2-proj-2-tuple(v_480) else caught-fail) in
        {1426}let ss_74: symmetricstate = (if v_481 then 1-proj-2-tuple(v_480) else caught-fail) in
        {1428}let message_buffer_6: bitstring = (if v_481 then concat3(ne_12,ns_13,ciphertext_29) else caught-fail) in
        {1427}let hs_41: handshakestate = (if v_481 then handshakestatepack(ss_74,s_16,m_16,e_27,rs_14,rm_14,re_17,psk_14,initiator_12) else caught-fail) in
        {1429}let (hs_42: handshakestate,message_b_2: bitstring) = (if v_451 then (if v_453 then (if v_455 then (if v_456 then (if v_459 then (if v_467 then (if v_481 then (hs_41,message_buffer_6) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1430}event SendMsg(me_2,them_2,stagepack_b(sid_3),msg_b(me_2,them_2,sid_3));
        {1431}insert statestore(me_2,them_2,sid_3,statepack_c(hs_42));
        {1432}out(pub, message_b_2)
    ) | (
        {1649}get statestore(=me_2,=them_2,=sid_3,statepack_c(hs_43: handshakestate)) in
        {1434}in(pub, message_c_2: bitstring);
        {1435}let v_482: bitstring = catch-fail(handshakestateunpack(hs_43)) in
        {1436}let v_483: bool = (not-caught-fail(v_482) && success?(1-proj-9-tuple(v_482))) in
        {1437}let initiator_13: bool = (if v_483 then 9-proj-9-tuple(v_482) else caught-fail) in
        {1438}let psk_15: key = (if v_483 then 8-proj-9-tuple(v_482) else caught-fail) in
        {1439}let re_18: key = (if v_483 then 7-proj-9-tuple(v_482) else caught-fail) in
        {1440}let rm_15: key = (if v_483 then 6-proj-9-tuple(v_482) else caught-fail) in
        {1441}let rs_15: key = (if v_483 then 5-proj-9-tuple(v_482) else caught-fail) in
        {1442}let e_29: keypair = (if v_483 then 4-proj-9-tuple(v_482) else caught-fail) in
        {1443}let m_17: keypair = (if v_483 then 3-proj-9-tuple(v_482) else caught-fail) in
        {1444}let s_17: keypair = (if v_483 then 2-proj-9-tuple(v_482) else caught-fail) in
        {1445}let ss_75: symmetricstate = (if v_483 then 1-proj-9-tuple(v_482) else caught-fail) in
        {1446}let v_484: bitstring = (if v_483 then catch-fail(deconcat3(message_c_2)) else caught-fail) in
        {1447}let v_485: bool = (not-caught-fail(v_484) && success?(1-proj-3-tuple(v_484))) in
        {1448}let ciphertext_30: bitstring = (if v_485 then 3-proj-3-tuple(v_484) else caught-fail) in
        {1449}let nm_4: bitstring = (if v_485 then 2-proj-3-tuple(v_484) else caught-fail) in
        {1450}let ns_14: bitstring = (if v_485 then 1-proj-3-tuple(v_484) else caught-fail) in
        {1453}let v_486: bitstring = (if v_485 then catch-fail(symmetricstateunpack(ss_75)) else caught-fail) in
        {1454}let v_487: bool = (not-caught-fail(v_486) && success?(1-proj-3-tuple(v_486))) in
        {1455}let h_65: bitstring = (if v_487 then 3-proj-3-tuple(v_486) else caught-fail) in
        {1456}let ck_78: key = (if v_487 then 2-proj-3-tuple(v_486) else caught-fail) in
        {1457}let cs_65: cipherstate = (if v_487 then 1-proj-3-tuple(v_486) else caught-fail) in
        {1458}let v_488: bitstring = (if v_487 then catch-fail(cipherstateunpack(cs_65)) else caught-fail) in
        {1459}let v_489: bool = (not-caught-fail(v_488) && success?(1-proj-2-tuple(v_488))) in
        {1460}let n_32: nonce = (if v_489 then 2-proj-2-tuple(v_488) else caught-fail) in
        {1461}let k_35: key = (if v_489 then 1-proj-2-tuple(v_488) else caught-fail) in
        {1462}let d_5: aead = (if v_489 then catch-fail(decrypt(k_35,n_32,h_65,ns_14)) else caught-fail) in
        {1463}let v_490: bool = not-caught-fail(d_5) in
        {1464}let v_491: bitstring = (if v_490 then catch-fail(aeadunpack(d_5)) else caught-fail) in
        {1465}let v_492: bool = (not-caught-fail(v_491) && success?(1-proj-3-tuple(v_491))) in
        {1466}let plaintext_19: bitstring = (if v_492 then 3-proj-3-tuple(v_491) else caught-fail) in
        {1467}let adi_5: bitstring = (if v_492 then 2-proj-3-tuple(v_491) else caught-fail) in
        {1468}let valid_15: bool = (if v_492 then 1-proj-3-tuple(v_491) else caught-fail) in
        {1470}let v_493: bitstring = (if v_492 then catch-fail(cipherstateunpack(cs_65)) else caught-fail) in
        {1471}let v_494: bool = (not-caught-fail(v_493) && success?(1-proj-2-tuple(v_493))) in
        {1472}let o_16: nonce = (if v_494 then 2-proj-2-tuple(v_493) else caught-fail) in
        {1473}let k_36: key = (if v_494 then 1-proj-2-tuple(v_493) else caught-fail) in
        {1469}let n_33: nonce = (if v_492 then increment_nonce(n_32) else caught-fail) in
        {1474}let csi_32: cipherstate = (if v_492 then catch-fail((if v_494 then cipherstatepack(k_36,n_33) else fail-any)) else caught-fail) in
        {1475}let v_495: bool = not-caught-fail(csi_32) in
        {1476}let v_496: bitstring = (if v_487 then catch-fail((if v_489 then (if v_490 then (if v_492 then (if v_495 then (csi_32,plaintext_19,valid_15) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1477}let v_497: bool = (not-caught-fail(v_496) && success?(1-proj-3-tuple(v_496))) in
        {1478}let valid_16: bool = (if v_497 then 3-proj-3-tuple(v_496) else caught-fail) in
        {1479}let plaintext_20: bitstring = (if v_497 then 2-proj-3-tuple(v_496) else caught-fail) in
        {1480}let csi_33: cipherstate = (if v_497 then 1-proj-3-tuple(v_496) else caught-fail) in
        {1481}let ss_76: symmetricstate = (if v_497 then symmetricstatepack(csi_33,ck_78,h_65) else caught-fail) in
        {1482}let v_498: bitstring = (if v_497 then catch-fail(symmetricstateunpack(ss_76)) else caught-fail) in
        {1483}let v_499: bool = (not-caught-fail(v_498) && success?(1-proj-3-tuple(v_498))) in
        {1484}let h_66: bitstring = (if v_499 then 3-proj-3-tuple(v_498) else caught-fail) in
        {1485}let ck_79: key = (if v_499 then 2-proj-3-tuple(v_498) else caught-fail) in
        {1486}let cs_66: cipherstate = (if v_499 then 1-proj-3-tuple(v_498) else caught-fail) in
        {1487}let ssi_18: symmetricstate = (if v_497 then catch-fail((if v_499 then symmetricstatepack(cs_66,ck_79,hash(h_66,ns_14)) else fail-any)) else caught-fail) in
        {1488}let v_500: bool = not-caught-fail(ssi_18) in
        {1489}let v_501: bitstring = (if v_485 then catch-fail((if v_487 then (if v_497 then (if v_500 then (ssi_18,plaintext_20,valid_16) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1490}let v_502: bool = (not-caught-fail(v_501) && success?(1-proj-3-tuple(v_501))) in
        {1491}let valid1_6: bool = (if v_502 then 3-proj-3-tuple(v_501) else caught-fail) in
        {1492}let nes: bitstring = (if v_502 then 2-proj-3-tuple(v_501) else caught-fail) in
        {1493}let ss_77: symmetricstate = (if v_502 then 1-proj-3-tuple(v_501) else caught-fail) in
        {1495}let v_503: bitstring = (if v_502 then catch-fail(symmetricstateunpack(ss_77)) else caught-fail) in
        {1496}let v_504: bool = (not-caught-fail(v_503) && success?(1-proj-3-tuple(v_503))) in
        {1497}let h_67: bitstring = (if v_504 then 3-proj-3-tuple(v_503) else caught-fail) in
        {1498}let ck_80: key = (if v_504 then 2-proj-3-tuple(v_503) else caught-fail) in
        {1499}let cs_67: cipherstate = (if v_504 then 1-proj-3-tuple(v_503) else caught-fail) in
        {1500}let v_505: bitstring = (if v_504 then catch-fail(cipherstateunpack(cs_67)) else caught-fail) in
        {1501}let v_506: bool = (not-caught-fail(v_505) && success?(1-proj-2-tuple(v_505))) in
        {1502}let n_34: nonce = (if v_506 then 2-proj-2-tuple(v_505) else caught-fail) in
        {1503}let k_37: key = (if v_506 then 1-proj-2-tuple(v_505) else caught-fail) in
        {1504}let d_6: aead = (if v_506 then catch-fail(decrypt(k_37,n_34,h_67,nm_4)) else caught-fail) in
        {1505}let v_507: bool = not-caught-fail(d_6) in
        {1506}let v_508: bitstring = (if v_507 then catch-fail(aeadunpack(d_6)) else caught-fail) in
        {1507}let v_509: bool = (not-caught-fail(v_508) && success?(1-proj-3-tuple(v_508))) in
        {1508}let plaintext_21: bitstring = (if v_509 then 3-proj-3-tuple(v_508) else caught-fail) in
        {1509}let adi_6: bitstring = (if v_509 then 2-proj-3-tuple(v_508) else caught-fail) in
        {1510}let valid_17: bool = (if v_509 then 1-proj-3-tuple(v_508) else caught-fail) in
        {1512}let v_510: bitstring = (if v_509 then catch-fail(cipherstateunpack(cs_67)) else caught-fail) in
        {1513}let v_511: bool = (not-caught-fail(v_510) && success?(1-proj-2-tuple(v_510))) in
        {1514}let o_17: nonce = (if v_511 then 2-proj-2-tuple(v_510) else caught-fail) in
        {1515}let k_38: key = (if v_511 then 1-proj-2-tuple(v_510) else caught-fail) in
        {1511}let n_35: nonce = (if v_509 then increment_nonce(n_34) else caught-fail) in
        {1516}let csi_34: cipherstate = (if v_509 then catch-fail((if v_511 then cipherstatepack(k_38,n_35) else fail-any)) else caught-fail) in
        {1517}let v_512: bool = not-caught-fail(csi_34) in
        {1518}let v_513: bitstring = (if v_504 then catch-fail((if v_506 then (if v_507 then (if v_509 then (if v_512 then (csi_34,plaintext_21,valid_17) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1519}let v_514: bool = (not-caught-fail(v_513) && success?(1-proj-3-tuple(v_513))) in
        {1520}let valid_18: bool = (if v_514 then 3-proj-3-tuple(v_513) else caught-fail) in
        {1521}let plaintext_22: bitstring = (if v_514 then 2-proj-3-tuple(v_513) else caught-fail) in
        {1522}let csi_35: cipherstate = (if v_514 then 1-proj-3-tuple(v_513) else caught-fail) in
        {1523}let ss_78: symmetricstate = (if v_514 then symmetricstatepack(csi_35,ck_80,h_67) else caught-fail) in
        {1524}let v_515: bitstring = (if v_514 then catch-fail(symmetricstateunpack(ss_78)) else caught-fail) in
        {1525}let v_516: bool = (not-caught-fail(v_515) && success?(1-proj-3-tuple(v_515))) in
        {1526}let h_68: bitstring = (if v_516 then 3-proj-3-tuple(v_515) else caught-fail) in
        {1527}let ck_81: key = (if v_516 then 2-proj-3-tuple(v_515) else caught-fail) in
        {1528}let cs_68: cipherstate = (if v_516 then 1-proj-3-tuple(v_515) else caught-fail) in
        {1529}let ssi_19: symmetricstate = (if v_514 then catch-fail((if v_516 then symmetricstatepack(cs_68,ck_81,hash(h_68,nm_4)) else fail-any)) else caught-fail) in
        {1530}let v_517: bool = not-caught-fail(ssi_19) in
        {1531}let v_518: bitstring = (if v_502 then catch-fail((if v_504 then (if v_514 then (if v_517 then (ssi_19,plaintext_22,valid_18) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1532}let v_519: bool = (not-caught-fail(v_518) && success?(1-proj-3-tuple(v_518))) in
        {1533}let valid2_6: bool = (if v_519 then 3-proj-3-tuple(v_518) else caught-fail) in
        {1534}let nem: bitstring = (if v_519 then 2-proj-3-tuple(v_518) else caught-fail) in
        {1535}let ss_79: symmetricstate = (if v_519 then 1-proj-3-tuple(v_518) else caught-fail) in
        {1537}let v_520: bitstring = (if v_519 then catch-fail(keypairunpack(e_29)) else caught-fail) in
        {1538}let v_521: bool = (not-caught-fail(v_520) && success?(1-proj-2-tuple(v_520))) in
        {1539}let my_private_key_13: key = (if v_521 then 2-proj-2-tuple(v_520) else caught-fail) in
        {1540}let my_public_key_13: key = (if v_521 then 1-proj-2-tuple(v_520) else caught-fail) in
        {1494}let rs_16: key = (if v_502 then nes else caught-fail) in
        {1541}let input_key_material_15: key = (if v_519 then catch-fail((if v_521 then dhexp(my_private_key_13,rs_16) else fail-any)) else caught-fail) in
        {1542}let v_522: bool = not-caught-fail(input_key_material_15) in
        {1543}let v_523: bitstring = (if v_522 then catch-fail(symmetricstateunpack(ss_79)) else caught-fail) in
        {1544}let v_524: bool = (not-caught-fail(v_523) && success?(1-proj-3-tuple(v_523))) in
        {1545}let h_69: bitstring = (if v_524 then 3-proj-3-tuple(v_523) else caught-fail) in
        {1546}let ck_82: key = (if v_524 then 2-proj-3-tuple(v_523) else caught-fail) in
        {1547}let cs_69: cipherstate = (if v_524 then 1-proj-3-tuple(v_523) else caught-fail) in
        {1550}let output3_15: key = (if v_524 then hmac_hash3(ck_82,input_key_material_15) else caught-fail) in
        {1549}let output2_15: key = (if v_524 then hmac_hash2(ck_82,input_key_material_15) else caught-fail) in
        {1548}let output1_15: key = (if v_524 then hmac_hash1(ck_82,input_key_material_15) else caught-fail) in
        {1551}let v_525: bitstring = (if v_524 then catch-fail((output1_15,output2_15,output3_15)) else caught-fail) in
        {1552}let v_526: bool = (not-caught-fail(v_525) && success?(1-proj-3-tuple(v_525))) in
        {1553}let output_13: key = (if v_526 then 3-proj-3-tuple(v_525) else caught-fail) in
        {1554}let temp_k_13: key = (if v_526 then 2-proj-3-tuple(v_525) else caught-fail) in
        {1555}let ck_83: key = (if v_526 then 1-proj-3-tuple(v_525) else caught-fail) in
        {1556}let ss_80: symmetricstate = (if v_519 then catch-fail((if v_522 then (if v_524 then (if v_526 then symmetricstatepack(cipherstatepack(temp_k_13,minnonce),ck_83,h_69) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1557}let v_527: bool = not-caught-fail(ss_80) in
        {1558}let v_528: bitstring = (if v_527 then catch-fail(keypairunpack(e_29)) else caught-fail) in
        {1559}let v_529: bool = (not-caught-fail(v_528) && success?(1-proj-2-tuple(v_528))) in
        {1560}let my_private_key_14: key = (if v_529 then 2-proj-2-tuple(v_528) else caught-fail) in
        {1561}let my_public_key_14: key = (if v_529 then 1-proj-2-tuple(v_528) else caught-fail) in
        {1536}let rm_16: key = (if v_519 then nem else caught-fail) in
        {1562}let input_key_material_16: key = (if v_527 then catch-fail((if v_529 then dhexp(my_private_key_14,rm_16) else fail-any)) else caught-fail) in
        {1563}let v_530: bool = not-caught-fail(input_key_material_16) in
        {1564}let v_531: bitstring = (if v_530 then catch-fail(symmetricstateunpack(ss_80)) else caught-fail) in
        {1565}let v_532: bool = (not-caught-fail(v_531) && success?(1-proj-3-tuple(v_531))) in
        {1566}let h_70: bitstring = (if v_532 then 3-proj-3-tuple(v_531) else caught-fail) in
        {1567}let ck_84: key = (if v_532 then 2-proj-3-tuple(v_531) else caught-fail) in
        {1568}let cs_70: cipherstate = (if v_532 then 1-proj-3-tuple(v_531) else caught-fail) in
        {1571}let output3_16: key = (if v_532 then hmac_hash3(ck_84,input_key_material_16) else caught-fail) in
        {1570}let output2_16: key = (if v_532 then hmac_hash2(ck_84,input_key_material_16) else caught-fail) in
        {1569}let output1_16: key = (if v_532 then hmac_hash1(ck_84,input_key_material_16) else caught-fail) in
        {1572}let v_533: bitstring = (if v_532 then catch-fail((output1_16,output2_16,output3_16)) else caught-fail) in
        {1573}let v_534: bool = (not-caught-fail(v_533) && success?(1-proj-3-tuple(v_533))) in
        {1574}let output_14: key = (if v_534 then 3-proj-3-tuple(v_533) else caught-fail) in
        {1575}let temp_k_14: key = (if v_534 then 2-proj-3-tuple(v_533) else caught-fail) in
        {1576}let ck_85: key = (if v_534 then 1-proj-3-tuple(v_533) else caught-fail) in
        {1577}let ss_81: symmetricstate = (if v_527 then catch-fail((if v_530 then (if v_532 then (if v_534 then symmetricstatepack(cipherstatepack(temp_k_14,minnonce),ck_85,h_70) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1578}let v_535: bool = not-caught-fail(ss_81) in
        {1579}let v_536: bitstring = (if v_535 then catch-fail(symmetricstateunpack(ss_81)) else caught-fail) in
        {1580}let v_537: bool = (not-caught-fail(v_536) && success?(1-proj-3-tuple(v_536))) in
        {1581}let h_71: bitstring = (if v_537 then 3-proj-3-tuple(v_536) else caught-fail) in
        {1582}let ck_86: key = (if v_537 then 2-proj-3-tuple(v_536) else caught-fail) in
        {1583}let cs_71: cipherstate = (if v_537 then 1-proj-3-tuple(v_536) else caught-fail) in
        {1584}let v_538: bitstring = (if v_537 then catch-fail(cipherstateunpack(cs_71)) else caught-fail) in
        {1585}let v_539: bool = (not-caught-fail(v_538) && success?(1-proj-2-tuple(v_538))) in
        {1586}let n_36: nonce = (if v_539 then 2-proj-2-tuple(v_538) else caught-fail) in
        {1587}let k_39: key = (if v_539 then 1-proj-2-tuple(v_538) else caught-fail) in
        {1588}let d_7: aead = (if v_539 then catch-fail(decrypt(k_39,n_36,h_71,ciphertext_30)) else caught-fail) in
        {1589}let v_540: bool = not-caught-fail(d_7) in
        {1590}let v_541: bitstring = (if v_540 then catch-fail(aeadunpack(d_7)) else caught-fail) in
        {1591}let v_542: bool = (not-caught-fail(v_541) && success?(1-proj-3-tuple(v_541))) in
        {1592}let plaintext_23: bitstring = (if v_542 then 3-proj-3-tuple(v_541) else caught-fail) in
        {1593}let adi_7: bitstring = (if v_542 then 2-proj-3-tuple(v_541) else caught-fail) in
        {1594}let valid_19: bool = (if v_542 then 1-proj-3-tuple(v_541) else caught-fail) in
        {1596}let v_543: bitstring = (if v_542 then catch-fail(cipherstateunpack(cs_71)) else caught-fail) in
        {1597}let v_544: bool = (not-caught-fail(v_543) && success?(1-proj-2-tuple(v_543))) in
        {1598}let o_18: nonce = (if v_544 then 2-proj-2-tuple(v_543) else caught-fail) in
        {1599}let k_40: key = (if v_544 then 1-proj-2-tuple(v_543) else caught-fail) in
        {1595}let n_37: nonce = (if v_542 then increment_nonce(n_36) else caught-fail) in
        {1600}let csi_36: cipherstate = (if v_542 then catch-fail((if v_544 then cipherstatepack(k_40,n_37) else fail-any)) else caught-fail) in
        {1601}let v_545: bool = not-caught-fail(csi_36) in
        {1602}let v_546: bitstring = (if v_537 then catch-fail((if v_539 then (if v_540 then (if v_542 then (if v_545 then (csi_36,plaintext_23,valid_19) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1603}let v_547: bool = (not-caught-fail(v_546) && success?(1-proj-3-tuple(v_546))) in
        {1604}let valid_20: bool = (if v_547 then 3-proj-3-tuple(v_546) else caught-fail) in
        {1605}let plaintext_24: bitstring = (if v_547 then 2-proj-3-tuple(v_546) else caught-fail) in
        {1606}let csi_37: cipherstate = (if v_547 then 1-proj-3-tuple(v_546) else caught-fail) in
        {1607}let ss_82: symmetricstate = (if v_547 then symmetricstatepack(csi_37,ck_86,h_71) else caught-fail) in
        {1608}let v_548: bitstring = (if v_547 then catch-fail(symmetricstateunpack(ss_82)) else caught-fail) in
        {1609}let v_549: bool = (not-caught-fail(v_548) && success?(1-proj-3-tuple(v_548))) in
        {1610}let h_72: bitstring = (if v_549 then 3-proj-3-tuple(v_548) else caught-fail) in
        {1611}let ck_87: key = (if v_549 then 2-proj-3-tuple(v_548) else caught-fail) in
        {1612}let cs_72: cipherstate = (if v_549 then 1-proj-3-tuple(v_548) else caught-fail) in
        {1613}let ssi_20: symmetricstate = (if v_547 then catch-fail((if v_549 then symmetricstatepack(cs_72,ck_87,hash(h_72,ciphertext_30)) else fail-any)) else caught-fail) in
        {1614}let v_550: bool = not-caught-fail(ssi_20) in
        {1615}let v_551: bitstring = (if v_535 then catch-fail((if v_537 then (if v_547 then (if v_550 then (ssi_20,plaintext_24,valid_20) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1616}let v_552: bool = (not-caught-fail(v_551) && success?(1-proj-3-tuple(v_551))) in
        {1617}let valid3: bool = (if v_552 then 3-proj-3-tuple(v_551) else caught-fail) in
        {1618}let plaintext_25: bitstring = (if v_552 then 2-proj-3-tuple(v_551) else caught-fail) in
        {1619}let ss_83: symmetricstate = (if v_552 then 1-proj-3-tuple(v_551) else caught-fail) in
        {1620}let basis_13: key = (if v_552 then key_s(them_2) else caught-fail) in
        {1621}let public_key_13: key = (if v_552 then catch-fail(dhexp(basis_13,validkey(g))) else caught-fail) in
        {1622}let v_553: bool = not-caught-fail(public_key_13) in
        {1623}let v_554: bool = (if v_552 then catch-fail(((valid1_6 && (valid2_6 && valid3)) && (rs_16 = getpublickey((if v_553 then keypairpack(validkey(public_key_13),basis_13) else fail-any))))) else caught-fail) in
        {1625}let v_555: bitstring = (if v_554 then catch-fail(symmetricstateunpack(ss_83)) else caught-fail) in
        {1626}let v_556: bool = (not-caught-fail(v_555) && success?(1-proj-3-tuple(v_555))) in
        {1627}let h_73: bitstring = (if v_556 then 3-proj-3-tuple(v_555) else caught-fail) in
        {1628}let ck_88: key = (if v_556 then 2-proj-3-tuple(v_555) else caught-fail) in
        {1629}let cs_73: cipherstate = (if v_556 then 1-proj-3-tuple(v_555) else caught-fail) in
        {1630}let input_key_material_17: key = (if v_556 then zero else caught-fail) in
        {1633}let output3_17: key = (if v_556 then hmac_hash3(ck_88,input_key_material_17) else caught-fail) in
        {1632}let output2_17: key = (if v_556 then hmac_hash2(ck_88,input_key_material_17) else caught-fail) in
        {1631}let output1_17: key = (if v_556 then hmac_hash1(ck_88,input_key_material_17) else caught-fail) in
        {1634}let v_557: bitstring = (if v_556 then catch-fail((output1_17,output2_17,output3_17)) else caught-fail) in
        {1635}let v_558: bool = (not-caught-fail(v_557) && success?(1-proj-3-tuple(v_557))) in
        {1636}let temp_k3_2: key = (if v_558 then 3-proj-3-tuple(v_557) else caught-fail) in
        {1637}let temp_k2_2: key = (if v_558 then 2-proj-3-tuple(v_557) else caught-fail) in
        {1638}let temp_k1_2: key = (if v_558 then 1-proj-3-tuple(v_557) else caught-fail) in
        {1640}let cs2_10: cipherstate = (if v_558 then cipherstatepack(temp_k2_2,minnonce) else caught-fail) in
        {1639}let cs1_10: cipherstate = (if v_558 then cipherstatepack(temp_k1_2,minnonce) else caught-fail) in
        {1641}let v_559: bitstring = (if v_554 then catch-fail((if v_556 then (if v_558 then (ss_83,cs1_10,cs2_10) else fail-any) else fail-any)) else caught-fail) in
        {1642}let v_560: bool = (not-caught-fail(v_559) && success?(1-proj-3-tuple(v_559))) in
        {1643}let cs2_11: cipherstate = (if v_560 then 3-proj-3-tuple(v_559) else caught-fail) in
        {1644}let cs1_11: cipherstate = (if v_560 then 2-proj-3-tuple(v_559) else caught-fail) in
        {1645}let ssi_21: symmetricstate = (if v_560 then 1-proj-3-tuple(v_559) else caught-fail) in
        {1624}let hs_44: handshakestate = (if v_554 then handshakestatepack(ss_83,s_17,m_17,e_29,rs_16,rm_16,re_18,psk_15,initiator_13) else caught-fail) in
        {1646}let (hs_45: handshakestate,plaintext_c: bitstring,valid_21: bool,cs1_12: cipherstate,cs2_12: cipherstate) = (if v_483 then (if v_485 then (if v_502 then (if v_519 then (if v_527 then (if v_535 then (if v_552 then (if undo-catch-fail(v_554) then (if v_560 then (hs_44,plaintext_25,true,cs1_11,cs2_11) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1647}event RecvMsg(me_2,them_2,stagepack_c(sid_3),plaintext_c);
        {1648}insert statestore(me_2,them_2,sid_3,statepack_d(hs_45,cs1_12,cs2_12))
    ) | (
        {1650}!
        {1708}get statestore(=me_2,=them_2,=sid_3,statepack_d(hs_46: handshakestate,cs1_13: cipherstate,cs2_13: cipherstate)) in
        {1651}let hs_47: handshakestate = handshakestatesetcs(hs_46,cs2_13) in
        {1653}let v_561: bitstring = catch-fail(handshakestateunpack(hs_47)) in
        {1654}let v_562: bool = (not-caught-fail(v_561) && success?(1-proj-9-tuple(v_561))) in
        {1655}let initiator_14: bool = (if v_562 then 9-proj-9-tuple(v_561) else caught-fail) in
        {1656}let psk_16: key = (if v_562 then 8-proj-9-tuple(v_561) else caught-fail) in
        {1657}let re_19: key = (if v_562 then 7-proj-9-tuple(v_561) else caught-fail) in
        {1658}let rm_17: key = (if v_562 then 6-proj-9-tuple(v_561) else caught-fail) in
        {1659}let rs_17: key = (if v_562 then 5-proj-9-tuple(v_561) else caught-fail) in
        {1660}let e_30: keypair = (if v_562 then 4-proj-9-tuple(v_561) else caught-fail) in
        {1661}let m_18: keypair = (if v_562 then 3-proj-9-tuple(v_561) else caught-fail) in
        {1662}let s_18: keypair = (if v_562 then 2-proj-9-tuple(v_561) else caught-fail) in
        {1663}let ss_84: symmetricstate = (if v_562 then 1-proj-9-tuple(v_561) else caught-fail) in
        {1664}let v_563: bitstring = (if v_562 then catch-fail((empty,empty,empty)) else caught-fail) in
        {1665}let v_564: bool = (not-caught-fail(v_563) && success?(1-proj-3-tuple(v_563))) in
        {1666}let ciphertext_31: bitstring = (if v_564 then 3-proj-3-tuple(v_563) else caught-fail) in
        {1667}let ns_15: bitstring = (if v_564 then 2-proj-3-tuple(v_563) else caught-fail) in
        {1668}let ne_13: bitstring = (if v_564 then 1-proj-3-tuple(v_563) else caught-fail) in
        {1669}let v_565: bitstring = (if v_564 then catch-fail(symmetricstateunpack(ss_84)) else caught-fail) in
        {1670}let v_566: bool = (not-caught-fail(v_565) && success?(1-proj-3-tuple(v_565))) in
        {1671}let h_74: bitstring = (if v_566 then 3-proj-3-tuple(v_565) else caught-fail) in
        {1672}let ck_89: key = (if v_566 then 2-proj-3-tuple(v_565) else caught-fail) in
        {1673}let cs_74: cipherstate = (if v_566 then 1-proj-3-tuple(v_565) else caught-fail) in
        {1674}let v_567: bitstring = (if v_566 then catch-fail(cipherstateunpack(cs_74)) else caught-fail) in
        {1675}let v_568: bool = (not-caught-fail(v_567) && success?(1-proj-2-tuple(v_567))) in
        {1676}let n_38: nonce = (if v_568 then 2-proj-2-tuple(v_567) else caught-fail) in
        {1677}let k_41: key = (if v_568 then 1-proj-2-tuple(v_567) else caught-fail) in
        {1680}let v_569: bitstring = (if v_568 then catch-fail(cipherstateunpack(cs_74)) else caught-fail) in
        {1681}let v_570: bool = (not-caught-fail(v_569) && success?(1-proj-2-tuple(v_569))) in
        {1682}let o_19: nonce = (if v_570 then 2-proj-2-tuple(v_569) else caught-fail) in
        {1683}let k_42: key = (if v_570 then 1-proj-2-tuple(v_569) else caught-fail) in
        {1679}let n_39: nonce = (if v_568 then increment_nonce(n_38) else caught-fail) in
        {1684}let csi_38: cipherstate = (if v_568 then catch-fail((if v_570 then cipherstatepack(k_42,n_39) else fail-any)) else caught-fail) in
        {1685}let v_571: bool = not-caught-fail(csi_38) in
        {1652}let payload_7: bitstring = msg_d(me_2,them_2,sid_3) in
        {1678}let e_31: bitstring = (if v_568 then encrypt(k_41,n_38,h_74,payload_7) else caught-fail) in
        {1686}let v_572: bitstring = (if v_566 then catch-fail((if v_568 then (if v_571 then (csi_38,e_31) else fail-any) else fail-any)) else caught-fail) in
        {1687}let v_573: bool = (not-caught-fail(v_572) && success?(1-proj-2-tuple(v_572))) in
        {1688}let ciphertext_32: bitstring = (if v_573 then 2-proj-2-tuple(v_572) else caught-fail) in
        {1689}let csi_39: cipherstate = (if v_573 then 1-proj-2-tuple(v_572) else caught-fail) in
        {1690}let ss_85: symmetricstate = (if v_573 then symmetricstatepack(csi_39,ck_89,h_74) else caught-fail) in
        {1691}let v_574: bitstring = (if v_573 then catch-fail(symmetricstateunpack(ss_85)) else caught-fail) in
        {1692}let v_575: bool = (not-caught-fail(v_574) && success?(1-proj-3-tuple(v_574))) in
        {1693}let h_75: bitstring = (if v_575 then 3-proj-3-tuple(v_574) else caught-fail) in
        {1694}let ck_90: key = (if v_575 then 2-proj-3-tuple(v_574) else caught-fail) in
        {1695}let cs_75: cipherstate = (if v_575 then 1-proj-3-tuple(v_574) else caught-fail) in
        {1696}let ssi_22: symmetricstate = (if v_573 then catch-fail((if v_575 then symmetricstatepack(cs_75,ck_90,hash(h_75,ciphertext_32)) else fail-any)) else caught-fail) in
        {1697}let v_576: bool = not-caught-fail(ssi_22) in
        {1698}let v_577: bitstring = (if v_564 then catch-fail((if v_566 then (if v_573 then (if v_576 then (ssi_22,ciphertext_32) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1699}let v_578: bool = (not-caught-fail(v_577) && success?(1-proj-2-tuple(v_577))) in
        {1700}let ciphertext_33: bitstring = (if v_578 then 2-proj-2-tuple(v_577) else caught-fail) in
        {1701}let ss_86: symmetricstate = (if v_578 then 1-proj-2-tuple(v_577) else caught-fail) in
        {1703}let message_buffer_7: bitstring = (if v_578 then concat3(ne_13,ns_15,ciphertext_33) else caught-fail) in
        {1702}let hs_48: handshakestate = (if v_578 then handshakestatepack(ss_86,s_18,m_18,e_30,rs_17,rm_17,re_19,psk_16,initiator_14) else caught-fail) in
        {1704}let (hs_49: handshakestate,message_d_2: bitstring) = (if v_562 then (if v_564 then (if v_578 then (hs_48,message_buffer_7) else fail-any) else fail-any) else fail-any) in
        {1705}event SendMsg(me_2,them_2,stagepack_d(sid_3),msg_d(me_2,them_2,sid_3));
        {1706}insert statestore(me_2,them_2,sid_3,statepack_e(hs_49,cs1_13,handshakestategetcs(hs_49)));
        {1707}out(pub, message_d_2)
    ) | (
        {1709}!
        {1775}get statestore(=me_2,=them_2,=sid_3,statepack_e(hs_50: handshakestate,cs1_14: cipherstate,cs2_14: cipherstate)) in
        {1710}let hs_51: handshakestate = handshakestatesetcs(hs_50,cs1_14) in
        {1711}in(pub, message_e_2: bitstring);
        {1712}let v_579: bitstring = catch-fail(handshakestateunpack(hs_51)) in
        {1713}let v_580: bool = (not-caught-fail(v_579) && success?(1-proj-9-tuple(v_579))) in
        {1714}let initiator_15: bool = (if v_580 then 9-proj-9-tuple(v_579) else caught-fail) in
        {1715}let psk_17: key = (if v_580 then 8-proj-9-tuple(v_579) else caught-fail) in
        {1716}let re_20: key = (if v_580 then 7-proj-9-tuple(v_579) else caught-fail) in
        {1717}let rm_18: key = (if v_580 then 6-proj-9-tuple(v_579) else caught-fail) in
        {1718}let rs_18: key = (if v_580 then 5-proj-9-tuple(v_579) else caught-fail) in
        {1719}let e_32: keypair = (if v_580 then 4-proj-9-tuple(v_579) else caught-fail) in
        {1720}let m_19: keypair = (if v_580 then 3-proj-9-tuple(v_579) else caught-fail) in
        {1721}let s_19: keypair = (if v_580 then 2-proj-9-tuple(v_579) else caught-fail) in
        {1722}let ss_87: symmetricstate = (if v_580 then 1-proj-9-tuple(v_579) else caught-fail) in
        {1723}let v_581: bitstring = (if v_580 then catch-fail(deconcat3(message_e_2)) else caught-fail) in
        {1724}let v_582: bool = (not-caught-fail(v_581) && success?(1-proj-3-tuple(v_581))) in
        {1725}let ciphertext_34: bitstring = (if v_582 then 3-proj-3-tuple(v_581) else caught-fail) in
        {1726}let ns_16: bitstring = (if v_582 then 2-proj-3-tuple(v_581) else caught-fail) in
        {1727}let ne_14: bitstring = (if v_582 then 1-proj-3-tuple(v_581) else caught-fail) in
        {1729}let v_583: bitstring = (if v_582 then catch-fail(symmetricstateunpack(ss_87)) else caught-fail) in
        {1730}let v_584: bool = (not-caught-fail(v_583) && success?(1-proj-3-tuple(v_583))) in
        {1731}let h_76: bitstring = (if v_584 then 3-proj-3-tuple(v_583) else caught-fail) in
        {1732}let ck_91: key = (if v_584 then 2-proj-3-tuple(v_583) else caught-fail) in
        {1733}let cs_76: cipherstate = (if v_584 then 1-proj-3-tuple(v_583) else caught-fail) in
        {1734}let v_585: bitstring = (if v_584 then catch-fail(cipherstateunpack(cs_76)) else caught-fail) in
        {1735}let v_586: bool = (not-caught-fail(v_585) && success?(1-proj-2-tuple(v_585))) in
        {1736}let n_40: nonce = (if v_586 then 2-proj-2-tuple(v_585) else caught-fail) in
        {1737}let k_43: key = (if v_586 then 1-proj-2-tuple(v_585) else caught-fail) in
        {1738}let d_8: aead = (if v_586 then catch-fail(decrypt(k_43,n_40,h_76,ciphertext_34)) else caught-fail) in
        {1739}let v_587: bool = not-caught-fail(d_8) in
        {1740}let v_588: bitstring = (if v_587 then catch-fail(aeadunpack(d_8)) else caught-fail) in
        {1741}let v_589: bool = (not-caught-fail(v_588) && success?(1-proj-3-tuple(v_588))) in
        {1742}let plaintext_26: bitstring = (if v_589 then 3-proj-3-tuple(v_588) else caught-fail) in
        {1743}let adi_8: bitstring = (if v_589 then 2-proj-3-tuple(v_588) else caught-fail) in
        {1744}let valid_22: bool = (if v_589 then 1-proj-3-tuple(v_588) else caught-fail) in
        {1746}let v_590: bitstring = (if v_589 then catch-fail(cipherstateunpack(cs_76)) else caught-fail) in
        {1747}let v_591: bool = (not-caught-fail(v_590) && success?(1-proj-2-tuple(v_590))) in
        {1748}let o_20: nonce = (if v_591 then 2-proj-2-tuple(v_590) else caught-fail) in
        {1749}let k_44: key = (if v_591 then 1-proj-2-tuple(v_590) else caught-fail) in
        {1745}let n_41: nonce = (if v_589 then increment_nonce(n_40) else caught-fail) in
        {1750}let csi_40: cipherstate = (if v_589 then catch-fail((if v_591 then cipherstatepack(k_44,n_41) else fail-any)) else caught-fail) in
        {1751}let v_592: bool = not-caught-fail(csi_40) in
        {1752}let v_593: bitstring = (if v_584 then catch-fail((if v_586 then (if v_587 then (if v_589 then (if v_592 then (csi_40,plaintext_26,valid_22) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1753}let v_594: bool = (not-caught-fail(v_593) && success?(1-proj-3-tuple(v_593))) in
        {1754}let valid_23: bool = (if v_594 then 3-proj-3-tuple(v_593) else caught-fail) in
        {1755}let plaintext_27: bitstring = (if v_594 then 2-proj-3-tuple(v_593) else caught-fail) in
        {1756}let csi_41: cipherstate = (if v_594 then 1-proj-3-tuple(v_593) else caught-fail) in
        {1757}let ss_88: symmetricstate = (if v_594 then symmetricstatepack(csi_41,ck_91,h_76) else caught-fail) in
        {1758}let v_595: bitstring = (if v_594 then catch-fail(symmetricstateunpack(ss_88)) else caught-fail) in
        {1759}let v_596: bool = (not-caught-fail(v_595) && success?(1-proj-3-tuple(v_595))) in
        {1760}let h_77: bitstring = (if v_596 then 3-proj-3-tuple(v_595) else caught-fail) in
        {1761}let ck_92: key = (if v_596 then 2-proj-3-tuple(v_595) else caught-fail) in
        {1762}let cs_77: cipherstate = (if v_596 then 1-proj-3-tuple(v_595) else caught-fail) in
        {1763}let ssi_23: symmetricstate = (if v_594 then catch-fail((if v_596 then symmetricstatepack(cs_77,ck_92,hash(h_77,ciphertext_34)) else fail-any)) else caught-fail) in
        {1764}let v_597: bool = not-caught-fail(ssi_23) in
        {1765}let v_598: bitstring = (if v_582 then catch-fail((if v_584 then (if v_594 then (if v_597 then (ssi_23,plaintext_27,valid_23) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1766}let v_599: bool = (not-caught-fail(v_598) && success?(1-proj-3-tuple(v_598))) in
        {1767}let valid2_7: bool = (if v_599 then 3-proj-3-tuple(v_598) else caught-fail) in
        {1768}let plaintext_28: bitstring = (if v_599 then 2-proj-3-tuple(v_598) else caught-fail) in
        {1769}let ss_89: symmetricstate = (if v_599 then 1-proj-3-tuple(v_598) else caught-fail) in
        {1728}let valid1_7: bool = (if v_582 then true else caught-fail) in
        {1770}let v_600: bool = (if v_599 then catch-fail((valid1_7 && valid2_7)) else caught-fail) in
        {1771}let hs_52: handshakestate = (if v_600 then handshakestatepack(ss_89,s_19,m_19,e_32,rs_18,rm_18,re_20,psk_17,initiator_15) else caught-fail) in
        {1772}let (hs_53: handshakestate,plaintext_e: bitstring,valid_24: bool) = (if v_580 then (if v_582 then (if v_599 then (if undo-catch-fail(v_600) then (hs_52,plaintext_28,true) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1773}event RecvMsg(me_2,them_2,stagepack_e(sid_3),plaintext_e);
        {1774}event RecvEnd(valid_24)
    ) | (
        {1776}event LeakS(phase0,me_2);
        {1777}event LeakM(phase0,me_2);
        {1778}out(pub, (key_s(me_2),key_m(me_2)))
    ) | (
        {1779}phase 1;
        {1780}event LeakS(phase1,me_2);
        {1781}event LeakM(phase1,me_2);
        {1782}out(pub, (key_s(me_2),key_m(me_2)))
    )
) | (
    {1783}let me_3: principal = bob in
    {1786}let basis_14: key = key_s(me_3) in
    {1787}let public_key_14: key = catch-fail(dhexp(basis_14,validkey(g))) in
    {1788}let v_601: bool = not-caught-fail(public_key_14) in
    {1789}let s_20: keypair = (if v_601 then keypairpack(validkey(public_key_14),basis_14) else fail-any) in
    {1790}let basis_15: key = key_m(me_3) in
    {1791}let public_key_15: key = catch-fail(dhexp(basis_15,validkey(g))) in
    {1792}let v_602: bool = not-caught-fail(public_key_15) in
    {1793}let m_20: keypair = (if v_602 then keypairpack(validkey(public_key_15),basis_15) else fail-any) in
    {1794}out(pub, (getpublickey(s_20),getpublickey(m_20)));
    {1785}let sid_4: sessionid = sid in
    {1784}let them_3: principal = charlie in
    (
        {1804}let k_45: key = empty in
        {1805}let cs_78: cipherstate = cipherstatepack(k_45,minnonce) in
        {1801}let protocol_name_3: bitstring = somename in
        {1802}let h_78: bitstring = hash(protocol_name_3,empty) in
        {1803}let ck_93: key = h_78 in
        {1806}let ss_90: symmetricstate = symmetricstatepack(cs_78,ck_93,h_78) in
        {1807}let v_603: bitstring = catch-fail(symmetricstateunpack(ss_90)) in
        {1808}let v_604: bool = (not-caught-fail(v_603) && success?(1-proj-3-tuple(v_603))) in
        {1809}let h_79: bitstring = (if v_604 then 3-proj-3-tuple(v_603) else caught-fail) in
        {1810}let ck_94: key = (if v_604 then 2-proj-3-tuple(v_603) else caught-fail) in
        {1811}let cs_79: cipherstate = (if v_604 then 1-proj-3-tuple(v_603) else caught-fail) in
        {1799}let prologue_3: bitstring = empty in
        {1812}let ss_91: symmetricstate = catch-fail((if v_604 then symmetricstatepack(cs_79,ck_94,hash(h_79,prologue_3)) else fail-any)) in
        {1813}let v_605: bool = not-caught-fail(ss_91) in
        {1814}let data_2: bitstring = (if v_605 then catch-fail(getpublickey(s_20)) else caught-fail) in
        {1815}let v_606: bool = not-caught-fail(data_2) in
        {1816}let v_607: bitstring = (if v_606 then catch-fail(symmetricstateunpack(ss_91)) else caught-fail) in
        {1817}let v_608: bool = (not-caught-fail(v_607) && success?(1-proj-3-tuple(v_607))) in
        {1818}let h_80: bitstring = (if v_608 then 3-proj-3-tuple(v_607) else caught-fail) in
        {1819}let ck_95: key = (if v_608 then 2-proj-3-tuple(v_607) else caught-fail) in
        {1820}let cs_80: cipherstate = (if v_608 then 1-proj-3-tuple(v_607) else caught-fail) in
        {1821}let ss_92: symmetricstate = (if v_605 then catch-fail((if v_606 then (if v_608 then symmetricstatepack(cs_80,ck_95,hash(h_80,data_2)) else fail-any) else fail-any)) else caught-fail) in
        {1822}let v_609: bool = not-caught-fail(ss_92) in
        {1823}let data_3: bitstring = (if v_609 then catch-fail(getpublickey(m_20)) else caught-fail) in
        {1824}let v_610: bool = not-caught-fail(data_3) in
        {1825}let v_611: bitstring = (if v_610 then catch-fail(symmetricstateunpack(ss_92)) else caught-fail) in
        {1826}let v_612: bool = (not-caught-fail(v_611) && success?(1-proj-3-tuple(v_611))) in
        {1827}let h_81: bitstring = (if v_612 then 3-proj-3-tuple(v_611) else caught-fail) in
        {1828}let ck_96: key = (if v_612 then 2-proj-3-tuple(v_611) else caught-fail) in
        {1829}let cs_81: cipherstate = (if v_612 then 1-proj-3-tuple(v_611) else caught-fail) in
        {1830}let ss_93: symmetricstate = (if v_609 then catch-fail((if v_610 then (if v_612 then symmetricstatepack(cs_81,ck_96,hash(h_81,data_3)) else fail-any) else fail-any)) else caught-fail) in
        {1831}let v_613: bool = not-caught-fail(ss_93) in
        {1800}let psk_18: key = empty in
        {1798}let re_21: key = empty in
        {1797}let rm_19: key = empty in
        {1796}let rs_19: key = empty in
        {1795}let e_33: keypair = keypairpack(empty,empty) in
        {1832}let hs_54: handshakestate = (if v_605 then (if v_609 then (if v_613 then handshakestatepack(ss_93,s_20,m_20,e_33,rs_19,rm_19,re_21,psk_18,false) else fail-any) else fail-any) else fail-any) in
        {1833}insert statestore(me_3,them_3,sid_4,statepack_a(hs_54))
    ) | (
        {1948}get statestore(=me_3,=them_3,=sid_4,statepack_a(hs_55: handshakestate)) in
        {1834}in(pub, message_a_3: bitstring);
        {1835}let v_614: bitstring = catch-fail(handshakestateunpack(hs_55)) in
        {1836}let v_615: bool = (not-caught-fail(v_614) && success?(1-proj-9-tuple(v_614))) in
        {1837}let initiator_16: bool = (if v_615 then 9-proj-9-tuple(v_614) else caught-fail) in
        {1838}let psk_19: key = (if v_615 then 8-proj-9-tuple(v_614) else caught-fail) in
        {1839}let re_22: key = (if v_615 then 7-proj-9-tuple(v_614) else caught-fail) in
        {1840}let rm_20: key = (if v_615 then 6-proj-9-tuple(v_614) else caught-fail) in
        {1841}let rs_20: key = (if v_615 then 5-proj-9-tuple(v_614) else caught-fail) in
        {1842}let e_34: keypair = (if v_615 then 4-proj-9-tuple(v_614) else caught-fail) in
        {1843}let m_21: keypair = (if v_615 then 3-proj-9-tuple(v_614) else caught-fail) in
        {1844}let s_21: keypair = (if v_615 then 2-proj-9-tuple(v_614) else caught-fail) in
        {1845}let ss_94: symmetricstate = (if v_615 then 1-proj-9-tuple(v_614) else caught-fail) in
        {1846}let v_616: bitstring = (if v_615 then catch-fail(deconcat3(message_a_3)) else caught-fail) in
        {1847}let v_617: bool = (not-caught-fail(v_616) && success?(1-proj-3-tuple(v_616))) in
        {1848}let ciphertext_35: bitstring = (if v_617 then 3-proj-3-tuple(v_616) else caught-fail) in
        {1849}let ns_17: bitstring = (if v_617 then 2-proj-3-tuple(v_616) else caught-fail) in
        {1850}let ne_15: bitstring = (if v_617 then 1-proj-3-tuple(v_616) else caught-fail) in
        {1853}let v_618: bitstring = (if v_617 then catch-fail(symmetricstateunpack(ss_94)) else caught-fail) in
        {1854}let v_619: bool = (not-caught-fail(v_618) && success?(1-proj-3-tuple(v_618))) in
        {1855}let h_82: bitstring = (if v_619 then 3-proj-3-tuple(v_618) else caught-fail) in
        {1856}let ck_97: key = (if v_619 then 2-proj-3-tuple(v_618) else caught-fail) in
        {1857}let cs_82: cipherstate = (if v_619 then 1-proj-3-tuple(v_618) else caught-fail) in
        {1852}let re_23: key = (if v_617 then ne_15 else caught-fail) in
        {1858}let ss_95: symmetricstate = (if v_617 then catch-fail((if v_619 then symmetricstatepack(cs_82,ck_97,hash(h_82,re_23)) else fail-any)) else caught-fail) in
        {1859}let v_620: bool = not-caught-fail(ss_95) in
        {1860}let v_621: bitstring = (if v_620 then catch-fail(keypairunpack(s_21)) else caught-fail) in
        {1861}let v_622: bool = (not-caught-fail(v_621) && success?(1-proj-2-tuple(v_621))) in
        {1862}let my_private_key_15: key = (if v_622 then 2-proj-2-tuple(v_621) else caught-fail) in
        {1863}let my_public_key_15: key = (if v_622 then 1-proj-2-tuple(v_621) else caught-fail) in
        {1864}let input_key_material_18: key = (if v_620 then catch-fail((if v_622 then dhexp(my_private_key_15,re_23) else fail-any)) else caught-fail) in
        {1865}let v_623: bool = not-caught-fail(input_key_material_18) in
        {1866}let v_624: bitstring = (if v_623 then catch-fail(symmetricstateunpack(ss_95)) else caught-fail) in
        {1867}let v_625: bool = (not-caught-fail(v_624) && success?(1-proj-3-tuple(v_624))) in
        {1868}let h_83: bitstring = (if v_625 then 3-proj-3-tuple(v_624) else caught-fail) in
        {1869}let ck_98: key = (if v_625 then 2-proj-3-tuple(v_624) else caught-fail) in
        {1870}let cs_83: cipherstate = (if v_625 then 1-proj-3-tuple(v_624) else caught-fail) in
        {1873}let output3_18: key = (if v_625 then hmac_hash3(ck_98,input_key_material_18) else caught-fail) in
        {1872}let output2_18: key = (if v_625 then hmac_hash2(ck_98,input_key_material_18) else caught-fail) in
        {1871}let output1_18: key = (if v_625 then hmac_hash1(ck_98,input_key_material_18) else caught-fail) in
        {1874}let v_626: bitstring = (if v_625 then catch-fail((output1_18,output2_18,output3_18)) else caught-fail) in
        {1875}let v_627: bool = (not-caught-fail(v_626) && success?(1-proj-3-tuple(v_626))) in
        {1876}let output_15: key = (if v_627 then 3-proj-3-tuple(v_626) else caught-fail) in
        {1877}let temp_k_15: key = (if v_627 then 2-proj-3-tuple(v_626) else caught-fail) in
        {1878}let ck_99: key = (if v_627 then 1-proj-3-tuple(v_626) else caught-fail) in
        {1879}let ss_96: symmetricstate = (if v_620 then catch-fail((if v_623 then (if v_625 then (if v_627 then symmetricstatepack(cipherstatepack(temp_k_15,minnonce),ck_99,h_83) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1880}let v_628: bool = not-caught-fail(ss_96) in
        {1881}let v_629: bitstring = (if v_628 then catch-fail(keypairunpack(m_21)) else caught-fail) in
        {1882}let v_630: bool = (not-caught-fail(v_629) && success?(1-proj-2-tuple(v_629))) in
        {1883}let my_private_key_16: key = (if v_630 then 2-proj-2-tuple(v_629) else caught-fail) in
        {1884}let my_public_key_16: key = (if v_630 then 1-proj-2-tuple(v_629) else caught-fail) in
        {1885}let input_key_material_19: key = (if v_628 then catch-fail((if v_630 then dhexp(my_private_key_16,re_23) else fail-any)) else caught-fail) in
        {1886}let v_631: bool = not-caught-fail(input_key_material_19) in
        {1887}let v_632: bitstring = (if v_631 then catch-fail(symmetricstateunpack(ss_96)) else caught-fail) in
        {1888}let v_633: bool = (not-caught-fail(v_632) && success?(1-proj-3-tuple(v_632))) in
        {1889}let h_84: bitstring = (if v_633 then 3-proj-3-tuple(v_632) else caught-fail) in
        {1890}let ck_100: key = (if v_633 then 2-proj-3-tuple(v_632) else caught-fail) in
        {1891}let cs_84: cipherstate = (if v_633 then 1-proj-3-tuple(v_632) else caught-fail) in
        {1894}let output3_19: key = (if v_633 then hmac_hash3(ck_100,input_key_material_19) else caught-fail) in
        {1893}let output2_19: key = (if v_633 then hmac_hash2(ck_100,input_key_material_19) else caught-fail) in
        {1892}let output1_19: key = (if v_633 then hmac_hash1(ck_100,input_key_material_19) else caught-fail) in
        {1895}let v_634: bitstring = (if v_633 then catch-fail((output1_19,output2_19,output3_19)) else caught-fail) in
        {1896}let v_635: bool = (not-caught-fail(v_634) && success?(1-proj-3-tuple(v_634))) in
        {1897}let output_16: key = (if v_635 then 3-proj-3-tuple(v_634) else caught-fail) in
        {1898}let temp_k_16: key = (if v_635 then 2-proj-3-tuple(v_634) else caught-fail) in
        {1899}let ck_101: key = (if v_635 then 1-proj-3-tuple(v_634) else caught-fail) in
        {1900}let ss_97: symmetricstate = (if v_628 then catch-fail((if v_631 then (if v_633 then (if v_635 then symmetricstatepack(cipherstatepack(temp_k_16,minnonce),ck_101,h_84) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1901}let v_636: bool = not-caught-fail(ss_97) in
        {1902}let v_637: bitstring = (if v_636 then catch-fail(symmetricstateunpack(ss_97)) else caught-fail) in
        {1903}let v_638: bool = (not-caught-fail(v_637) && success?(1-proj-3-tuple(v_637))) in
        {1904}let h_85: bitstring = (if v_638 then 3-proj-3-tuple(v_637) else caught-fail) in
        {1905}let ck_102: key = (if v_638 then 2-proj-3-tuple(v_637) else caught-fail) in
        {1906}let cs_85: cipherstate = (if v_638 then 1-proj-3-tuple(v_637) else caught-fail) in
        {1907}let v_639: bitstring = (if v_638 then catch-fail(cipherstateunpack(cs_85)) else caught-fail) in
        {1908}let v_640: bool = (not-caught-fail(v_639) && success?(1-proj-2-tuple(v_639))) in
        {1909}let n_42: nonce = (if v_640 then 2-proj-2-tuple(v_639) else caught-fail) in
        {1910}let k_46: key = (if v_640 then 1-proj-2-tuple(v_639) else caught-fail) in
        {1911}let d_9: aead = (if v_640 then catch-fail(decrypt(k_46,n_42,h_85,ciphertext_35)) else caught-fail) in
        {1912}let v_641: bool = not-caught-fail(d_9) in
        {1913}let v_642: bitstring = (if v_641 then catch-fail(aeadunpack(d_9)) else caught-fail) in
        {1914}let v_643: bool = (not-caught-fail(v_642) && success?(1-proj-3-tuple(v_642))) in
        {1915}let plaintext_29: bitstring = (if v_643 then 3-proj-3-tuple(v_642) else caught-fail) in
        {1916}let adi_9: bitstring = (if v_643 then 2-proj-3-tuple(v_642) else caught-fail) in
        {1917}let valid_25: bool = (if v_643 then 1-proj-3-tuple(v_642) else caught-fail) in
        {1919}let v_644: bitstring = (if v_643 then catch-fail(cipherstateunpack(cs_85)) else caught-fail) in
        {1920}let v_645: bool = (not-caught-fail(v_644) && success?(1-proj-2-tuple(v_644))) in
        {1921}let o_21: nonce = (if v_645 then 2-proj-2-tuple(v_644) else caught-fail) in
        {1922}let k_47: key = (if v_645 then 1-proj-2-tuple(v_644) else caught-fail) in
        {1918}let n_43: nonce = (if v_643 then increment_nonce(n_42) else caught-fail) in
        {1923}let csi_42: cipherstate = (if v_643 then catch-fail((if v_645 then cipherstatepack(k_47,n_43) else fail-any)) else caught-fail) in
        {1924}let v_646: bool = not-caught-fail(csi_42) in
        {1925}let v_647: bitstring = (if v_638 then catch-fail((if v_640 then (if v_641 then (if v_643 then (if v_646 then (csi_42,plaintext_29,valid_25) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1926}let v_648: bool = (not-caught-fail(v_647) && success?(1-proj-3-tuple(v_647))) in
        {1927}let valid_26: bool = (if v_648 then 3-proj-3-tuple(v_647) else caught-fail) in
        {1928}let plaintext_30: bitstring = (if v_648 then 2-proj-3-tuple(v_647) else caught-fail) in
        {1929}let csi_43: cipherstate = (if v_648 then 1-proj-3-tuple(v_647) else caught-fail) in
        {1930}let ss_98: symmetricstate = (if v_648 then symmetricstatepack(csi_43,ck_102,h_85) else caught-fail) in
        {1931}let v_649: bitstring = (if v_648 then catch-fail(symmetricstateunpack(ss_98)) else caught-fail) in
        {1932}let v_650: bool = (not-caught-fail(v_649) && success?(1-proj-3-tuple(v_649))) in
        {1933}let h_86: bitstring = (if v_650 then 3-proj-3-tuple(v_649) else caught-fail) in
        {1934}let ck_103: key = (if v_650 then 2-proj-3-tuple(v_649) else caught-fail) in
        {1935}let cs_86: cipherstate = (if v_650 then 1-proj-3-tuple(v_649) else caught-fail) in
        {1936}let ssi_24: symmetricstate = (if v_648 then catch-fail((if v_650 then symmetricstatepack(cs_86,ck_103,hash(h_86,ciphertext_35)) else fail-any)) else caught-fail) in
        {1937}let v_651: bool = not-caught-fail(ssi_24) in
        {1938}let v_652: bitstring = (if v_636 then catch-fail((if v_638 then (if v_648 then (if v_651 then (ssi_24,plaintext_30,valid_26) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {1939}let v_653: bool = (not-caught-fail(v_652) && success?(1-proj-3-tuple(v_652))) in
        {1940}let valid2_8: bool = (if v_653 then 3-proj-3-tuple(v_652) else caught-fail) in
        {1941}let plaintext_31: bitstring = (if v_653 then 2-proj-3-tuple(v_652) else caught-fail) in
        {1942}let ss_99: symmetricstate = (if v_653 then 1-proj-3-tuple(v_652) else caught-fail) in
        {1851}let valid1_8: bool = (if v_617 then true else caught-fail) in
        {1943}let v_654: bool = (if v_653 then catch-fail((valid1_8 && valid2_8)) else caught-fail) in
        {1944}let hs_56: handshakestate = (if v_654 then handshakestatepack(ss_99,s_21,m_21,e_34,rs_20,rm_20,re_23,psk_19,initiator_16) else caught-fail) in
        {1945}let (hs_57: handshakestate,plaintext_a_1: bitstring,valid_27: bool) = (if v_615 then (if v_617 then (if v_620 then (if v_628 then (if v_636 then (if v_653 then (if undo-catch-fail(v_654) then (hs_56,plaintext_31,true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {1946}event RecvMsg(me_3,them_3,stagepack_a(sid_4),plaintext_a_1);
        {1947}insert statestore(me_3,them_3,sid_4,statepack_b(hs_57))
    ) | (
        {2040}get statestore(=me_3,=them_3,=sid_4,statepack_b(hs_58: handshakestate)) in
        {1950}let v_655: bitstring = catch-fail(handshakestateunpack(hs_58)) in
        {1951}let v_656: bool = (not-caught-fail(v_655) && success?(1-proj-9-tuple(v_655))) in
        {1952}let initiator_17: bool = (if v_656 then 9-proj-9-tuple(v_655) else caught-fail) in
        {1953}let psk_20: key = (if v_656 then 8-proj-9-tuple(v_655) else caught-fail) in
        {1954}let re_24: key = (if v_656 then 7-proj-9-tuple(v_655) else caught-fail) in
        {1955}let rm_21: key = (if v_656 then 6-proj-9-tuple(v_655) else caught-fail) in
        {1956}let rs_21: key = (if v_656 then 5-proj-9-tuple(v_655) else caught-fail) in
        {1957}let e_35: keypair = (if v_656 then 4-proj-9-tuple(v_655) else caught-fail) in
        {1958}let m_22: keypair = (if v_656 then 3-proj-9-tuple(v_655) else caught-fail) in
        {1959}let s_22: keypair = (if v_656 then 2-proj-9-tuple(v_655) else caught-fail) in
        {1960}let ss_100: symmetricstate = (if v_656 then 1-proj-9-tuple(v_655) else caught-fail) in
        {1961}let v_657: bitstring = (if v_656 then catch-fail((empty,empty,empty)) else caught-fail) in
        {1962}let v_658: bool = (not-caught-fail(v_657) && success?(1-proj-3-tuple(v_657))) in
        {1963}let ciphertext_36: bitstring = (if v_658 then 3-proj-3-tuple(v_657) else caught-fail) in
        {1964}let ns_18: bitstring = (if v_658 then 2-proj-3-tuple(v_657) else caught-fail) in
        {1965}let ne_16: bitstring = (if v_658 then 1-proj-3-tuple(v_657) else caught-fail) in
        {1966}let basis_16: key = (if v_658 then key_e(me_3,them_3,sid_4) else caught-fail) in
        {1967}let public_key_16: key = (if v_658 then catch-fail(dhexp(basis_16,validkey(g))) else caught-fail) in
        {1968}let v_659: bool = not-caught-fail(public_key_16) in
        {1969}let e_36: keypair = (if v_658 then catch-fail((if v_659 then keypairpack(validkey(public_key_16),basis_16) else fail-any)) else caught-fail) in
        {1970}let v_660: bool = not-caught-fail(e_36) in
        {1971}let ne_17: bitstring = (if v_660 then catch-fail(getpublickey(e_36)) else caught-fail) in
        {1972}let v_661: bool = not-caught-fail(ne_17) in
        {1973}let v_662: bitstring = (if v_661 then catch-fail(symmetricstateunpack(ss_100)) else caught-fail) in
        {1974}let v_663: bool = (not-caught-fail(v_662) && success?(1-proj-3-tuple(v_662))) in
        {1975}let h_87: bitstring = (if v_663 then 3-proj-3-tuple(v_662) else caught-fail) in
        {1976}let ck_104: key = (if v_663 then 2-proj-3-tuple(v_662) else caught-fail) in
        {1977}let cs_87: cipherstate = (if v_663 then 1-proj-3-tuple(v_662) else caught-fail) in
        {1978}let ss_101: symmetricstate = (if v_661 then catch-fail((if v_663 then symmetricstatepack(cs_87,ck_104,hash(h_87,ne_17)) else fail-any)) else caught-fail) in
        {1979}let v_664: bool = not-caught-fail(ss_101) in
        {1980}let v_665: bitstring = (if v_664 then catch-fail(keypairunpack(e_36)) else caught-fail) in
        {1981}let v_666: bool = (not-caught-fail(v_665) && success?(1-proj-2-tuple(v_665))) in
        {1982}let my_private_key_17: key = (if v_666 then 2-proj-2-tuple(v_665) else caught-fail) in
        {1983}let my_public_key_17: key = (if v_666 then 1-proj-2-tuple(v_665) else caught-fail) in
        {1984}let input_key_material_20: key = (if v_664 then catch-fail((if v_666 then dhexp(my_private_key_17,re_24) else fail-any)) else caught-fail) in
        {1985}let v_667: bool = not-caught-fail(input_key_material_20) in
        {1986}let v_668: bitstring = (if v_667 then catch-fail(symmetricstateunpack(ss_101)) else caught-fail) in
        {1987}let v_669: bool = (not-caught-fail(v_668) && success?(1-proj-3-tuple(v_668))) in
        {1988}let h_88: bitstring = (if v_669 then 3-proj-3-tuple(v_668) else caught-fail) in
        {1989}let ck_105: key = (if v_669 then 2-proj-3-tuple(v_668) else caught-fail) in
        {1990}let cs_88: cipherstate = (if v_669 then 1-proj-3-tuple(v_668) else caught-fail) in
        {1993}let output3_20: key = (if v_669 then hmac_hash3(ck_105,input_key_material_20) else caught-fail) in
        {1992}let output2_20: key = (if v_669 then hmac_hash2(ck_105,input_key_material_20) else caught-fail) in
        {1991}let output1_20: key = (if v_669 then hmac_hash1(ck_105,input_key_material_20) else caught-fail) in
        {1994}let v_670: bitstring = (if v_669 then catch-fail((output1_20,output2_20,output3_20)) else caught-fail) in
        {1995}let v_671: bool = (not-caught-fail(v_670) && success?(1-proj-3-tuple(v_670))) in
        {1996}let output_17: key = (if v_671 then 3-proj-3-tuple(v_670) else caught-fail) in
        {1997}let temp_k_17: key = (if v_671 then 2-proj-3-tuple(v_670) else caught-fail) in
        {1998}let ck_106: key = (if v_671 then 1-proj-3-tuple(v_670) else caught-fail) in
        {1999}let ss_102: symmetricstate = (if v_664 then catch-fail((if v_667 then (if v_669 then (if v_671 then symmetricstatepack(cipherstatepack(temp_k_17,minnonce),ck_106,h_88) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {2000}let v_672: bool = not-caught-fail(ss_102) in
        {2001}let v_673: bitstring = (if v_672 then catch-fail(symmetricstateunpack(ss_102)) else caught-fail) in
        {2002}let v_674: bool = (not-caught-fail(v_673) && success?(1-proj-3-tuple(v_673))) in
        {2003}let h_89: bitstring = (if v_674 then 3-proj-3-tuple(v_673) else caught-fail) in
        {2004}let ck_107: key = (if v_674 then 2-proj-3-tuple(v_673) else caught-fail) in
        {2005}let cs_89: cipherstate = (if v_674 then 1-proj-3-tuple(v_673) else caught-fail) in
        {2006}let v_675: bitstring = (if v_674 then catch-fail(cipherstateunpack(cs_89)) else caught-fail) in
        {2007}let v_676: bool = (not-caught-fail(v_675) && success?(1-proj-2-tuple(v_675))) in
        {2008}let n_44: nonce = (if v_676 then 2-proj-2-tuple(v_675) else caught-fail) in
        {2009}let k_48: key = (if v_676 then 1-proj-2-tuple(v_675) else caught-fail) in
        {2012}let v_677: bitstring = (if v_676 then catch-fail(cipherstateunpack(cs_89)) else caught-fail) in
        {2013}let v_678: bool = (not-caught-fail(v_677) && success?(1-proj-2-tuple(v_677))) in
        {2014}let o_22: nonce = (if v_678 then 2-proj-2-tuple(v_677) else caught-fail) in
        {2015}let k_49: key = (if v_678 then 1-proj-2-tuple(v_677) else caught-fail) in
        {2011}let n_45: nonce = (if v_676 then increment_nonce(n_44) else caught-fail) in
        {2016}let csi_44: cipherstate = (if v_676 then catch-fail((if v_678 then cipherstatepack(k_49,n_45) else fail-any)) else caught-fail) in
        {2017}let v_679: bool = not-caught-fail(csi_44) in
        {1949}let payload_8: bitstring = msg_b(me_3,them_3,sid_4) in
        {2010}let e_37: bitstring = (if v_676 then encrypt(k_48,n_44,h_89,payload_8) else caught-fail) in
        {2018}let v_680: bitstring = (if v_674 then catch-fail((if v_676 then (if v_679 then (csi_44,e_37) else fail-any) else fail-any)) else caught-fail) in
        {2019}let v_681: bool = (not-caught-fail(v_680) && success?(1-proj-2-tuple(v_680))) in
        {2020}let ciphertext_37: bitstring = (if v_681 then 2-proj-2-tuple(v_680) else caught-fail) in
        {2021}let csi_45: cipherstate = (if v_681 then 1-proj-2-tuple(v_680) else caught-fail) in
        {2022}let ss_103: symmetricstate = (if v_681 then symmetricstatepack(csi_45,ck_107,h_89) else caught-fail) in
        {2023}let v_682: bitstring = (if v_681 then catch-fail(symmetricstateunpack(ss_103)) else caught-fail) in
        {2024}let v_683: bool = (not-caught-fail(v_682) && success?(1-proj-3-tuple(v_682))) in
        {2025}let h_90: bitstring = (if v_683 then 3-proj-3-tuple(v_682) else caught-fail) in
        {2026}let ck_108: key = (if v_683 then 2-proj-3-tuple(v_682) else caught-fail) in
        {2027}let cs_90: cipherstate = (if v_683 then 1-proj-3-tuple(v_682) else caught-fail) in
        {2028}let ssi_25: symmetricstate = (if v_681 then catch-fail((if v_683 then symmetricstatepack(cs_90,ck_108,hash(h_90,ciphertext_37)) else fail-any)) else caught-fail) in
        {2029}let v_684: bool = not-caught-fail(ssi_25) in
        {2030}let v_685: bitstring = (if v_672 then catch-fail((if v_674 then (if v_681 then (if v_684 then (ssi_25,ciphertext_37) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {2031}let v_686: bool = (not-caught-fail(v_685) && success?(1-proj-2-tuple(v_685))) in
        {2032}let ciphertext_38: bitstring = (if v_686 then 2-proj-2-tuple(v_685) else caught-fail) in
        {2033}let ss_104: symmetricstate = (if v_686 then 1-proj-2-tuple(v_685) else caught-fail) in
        {2035}let message_buffer_8: bitstring = (if v_686 then concat3(ne_17,ns_18,ciphertext_38) else caught-fail) in
        {2034}let hs_59: handshakestate = (if v_686 then handshakestatepack(ss_104,s_22,m_22,e_36,rs_21,rm_21,re_24,psk_20,initiator_17) else caught-fail) in
        {2036}let (hs_60: handshakestate,message_b_3: bitstring) = (if v_656 then (if v_658 then (if v_660 then (if v_661 then (if v_664 then (if v_672 then (if v_686 then (hs_59,message_buffer_8) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {2037}event SendMsg(me_3,them_3,stagepack_b(sid_4),msg_b(me_3,them_3,sid_4));
        {2038}insert statestore(me_3,them_3,sid_4,statepack_c(hs_60));
        {2039}out(pub, message_b_3)
    ) | (
        {2256}get statestore(=me_3,=them_3,=sid_4,statepack_c(hs_61: handshakestate)) in
        {2041}in(pub, message_c_3: bitstring);
        {2042}let v_687: bitstring = catch-fail(handshakestateunpack(hs_61)) in
        {2043}let v_688: bool = (not-caught-fail(v_687) && success?(1-proj-9-tuple(v_687))) in
        {2044}let initiator_18: bool = (if v_688 then 9-proj-9-tuple(v_687) else caught-fail) in
        {2045}let psk_21: key = (if v_688 then 8-proj-9-tuple(v_687) else caught-fail) in
        {2046}let re_25: key = (if v_688 then 7-proj-9-tuple(v_687) else caught-fail) in
        {2047}let rm_22: key = (if v_688 then 6-proj-9-tuple(v_687) else caught-fail) in
        {2048}let rs_22: key = (if v_688 then 5-proj-9-tuple(v_687) else caught-fail) in
        {2049}let e_38: keypair = (if v_688 then 4-proj-9-tuple(v_687) else caught-fail) in
        {2050}let m_23: keypair = (if v_688 then 3-proj-9-tuple(v_687) else caught-fail) in
        {2051}let s_23: keypair = (if v_688 then 2-proj-9-tuple(v_687) else caught-fail) in
        {2052}let ss_105: symmetricstate = (if v_688 then 1-proj-9-tuple(v_687) else caught-fail) in
        {2053}let v_689: bitstring = (if v_688 then catch-fail(deconcat3(message_c_3)) else caught-fail) in
        {2054}let v_690: bool = (not-caught-fail(v_689) && success?(1-proj-3-tuple(v_689))) in
        {2055}let ciphertext_39: bitstring = (if v_690 then 3-proj-3-tuple(v_689) else caught-fail) in
        {2056}let nm_5: bitstring = (if v_690 then 2-proj-3-tuple(v_689) else caught-fail) in
        {2057}let ns_19: bitstring = (if v_690 then 1-proj-3-tuple(v_689) else caught-fail) in
        {2060}let v_691: bitstring = (if v_690 then catch-fail(symmetricstateunpack(ss_105)) else caught-fail) in
        {2061}let v_692: bool = (not-caught-fail(v_691) && success?(1-proj-3-tuple(v_691))) in
        {2062}let h_91: bitstring = (if v_692 then 3-proj-3-tuple(v_691) else caught-fail) in
        {2063}let ck_109: key = (if v_692 then 2-proj-3-tuple(v_691) else caught-fail) in
        {2064}let cs_91: cipherstate = (if v_692 then 1-proj-3-tuple(v_691) else caught-fail) in
        {2065}let v_693: bitstring = (if v_692 then catch-fail(cipherstateunpack(cs_91)) else caught-fail) in
        {2066}let v_694: bool = (not-caught-fail(v_693) && success?(1-proj-2-tuple(v_693))) in
        {2067}let n_46: nonce = (if v_694 then 2-proj-2-tuple(v_693) else caught-fail) in
        {2068}let k_50: key = (if v_694 then 1-proj-2-tuple(v_693) else caught-fail) in
        {2069}let d_10: aead = (if v_694 then catch-fail(decrypt(k_50,n_46,h_91,ns_19)) else caught-fail) in
        {2070}let v_695: bool = not-caught-fail(d_10) in
        {2071}let v_696: bitstring = (if v_695 then catch-fail(aeadunpack(d_10)) else caught-fail) in
        {2072}let v_697: bool = (not-caught-fail(v_696) && success?(1-proj-3-tuple(v_696))) in
        {2073}let plaintext_32: bitstring = (if v_697 then 3-proj-3-tuple(v_696) else caught-fail) in
        {2074}let adi_10: bitstring = (if v_697 then 2-proj-3-tuple(v_696) else caught-fail) in
        {2075}let valid_28: bool = (if v_697 then 1-proj-3-tuple(v_696) else caught-fail) in
        {2077}let v_698: bitstring = (if v_697 then catch-fail(cipherstateunpack(cs_91)) else caught-fail) in
        {2078}let v_699: bool = (not-caught-fail(v_698) && success?(1-proj-2-tuple(v_698))) in
        {2079}let o_23: nonce = (if v_699 then 2-proj-2-tuple(v_698) else caught-fail) in
        {2080}let k_51: key = (if v_699 then 1-proj-2-tuple(v_698) else caught-fail) in
        {2076}let n_47: nonce = (if v_697 then increment_nonce(n_46) else caught-fail) in
        {2081}let csi_46: cipherstate = (if v_697 then catch-fail((if v_699 then cipherstatepack(k_51,n_47) else fail-any)) else caught-fail) in
        {2082}let v_700: bool = not-caught-fail(csi_46) in
        {2083}let v_701: bitstring = (if v_692 then catch-fail((if v_694 then (if v_695 then (if v_697 then (if v_700 then (csi_46,plaintext_32,valid_28) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {2084}let v_702: bool = (not-caught-fail(v_701) && success?(1-proj-3-tuple(v_701))) in
        {2085}let valid_29: bool = (if v_702 then 3-proj-3-tuple(v_701) else caught-fail) in
        {2086}let plaintext_33: bitstring = (if v_702 then 2-proj-3-tuple(v_701) else caught-fail) in
        {2087}let csi_47: cipherstate = (if v_702 then 1-proj-3-tuple(v_701) else caught-fail) in
        {2088}let ss_106: symmetricstate = (if v_702 then symmetricstatepack(csi_47,ck_109,h_91) else caught-fail) in
        {2089}let v_703: bitstring = (if v_702 then catch-fail(symmetricstateunpack(ss_106)) else caught-fail) in
        {2090}let v_704: bool = (not-caught-fail(v_703) && success?(1-proj-3-tuple(v_703))) in
        {2091}let h_92: bitstring = (if v_704 then 3-proj-3-tuple(v_703) else caught-fail) in
        {2092}let ck_110: key = (if v_704 then 2-proj-3-tuple(v_703) else caught-fail) in
        {2093}let cs_92: cipherstate = (if v_704 then 1-proj-3-tuple(v_703) else caught-fail) in
        {2094}let ssi_26: symmetricstate = (if v_702 then catch-fail((if v_704 then symmetricstatepack(cs_92,ck_110,hash(h_92,ns_19)) else fail-any)) else caught-fail) in
        {2095}let v_705: bool = not-caught-fail(ssi_26) in
        {2096}let v_706: bitstring = (if v_690 then catch-fail((if v_692 then (if v_702 then (if v_705 then (ssi_26,plaintext_33,valid_29) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {2097}let v_707: bool = (not-caught-fail(v_706) && success?(1-proj-3-tuple(v_706))) in
        {2098}let valid1_10: bool = (if v_707 then 3-proj-3-tuple(v_706) else caught-fail) in
        {2099}let nes_1: bitstring = (if v_707 then 2-proj-3-tuple(v_706) else caught-fail) in
        {2100}let ss_107: symmetricstate = (if v_707 then 1-proj-3-tuple(v_706) else caught-fail) in
        {2102}let v_708: bitstring = (if v_707 then catch-fail(symmetricstateunpack(ss_107)) else caught-fail) in
        {2103}let v_709: bool = (not-caught-fail(v_708) && success?(1-proj-3-tuple(v_708))) in
        {2104}let h_93: bitstring = (if v_709 then 3-proj-3-tuple(v_708) else caught-fail) in
        {2105}let ck_111: key = (if v_709 then 2-proj-3-tuple(v_708) else caught-fail) in
        {2106}let cs_93: cipherstate = (if v_709 then 1-proj-3-tuple(v_708) else caught-fail) in
        {2107}let v_710: bitstring = (if v_709 then catch-fail(cipherstateunpack(cs_93)) else caught-fail) in
        {2108}let v_711: bool = (not-caught-fail(v_710) && success?(1-proj-2-tuple(v_710))) in
        {2109}let n_48: nonce = (if v_711 then 2-proj-2-tuple(v_710) else caught-fail) in
        {2110}let k_52: key = (if v_711 then 1-proj-2-tuple(v_710) else caught-fail) in
        {2111}let d_11: aead = (if v_711 then catch-fail(decrypt(k_52,n_48,h_93,nm_5)) else caught-fail) in
        {2112}let v_712: bool = not-caught-fail(d_11) in
        {2113}let v_713: bitstring = (if v_712 then catch-fail(aeadunpack(d_11)) else caught-fail) in
        {2114}let v_714: bool = (not-caught-fail(v_713) && success?(1-proj-3-tuple(v_713))) in
        {2115}let plaintext_34: bitstring = (if v_714 then 3-proj-3-tuple(v_713) else caught-fail) in
        {2116}let adi_11: bitstring = (if v_714 then 2-proj-3-tuple(v_713) else caught-fail) in
        {2117}let valid_30: bool = (if v_714 then 1-proj-3-tuple(v_713) else caught-fail) in
        {2119}let v_715: bitstring = (if v_714 then catch-fail(cipherstateunpack(cs_93)) else caught-fail) in
        {2120}let v_716: bool = (not-caught-fail(v_715) && success?(1-proj-2-tuple(v_715))) in
        {2121}let o_24: nonce = (if v_716 then 2-proj-2-tuple(v_715) else caught-fail) in
        {2122}let k_53: key = (if v_716 then 1-proj-2-tuple(v_715) else caught-fail) in
        {2118}let n_49: nonce = (if v_714 then increment_nonce(n_48) else caught-fail) in
        {2123}let csi_48: cipherstate = (if v_714 then catch-fail((if v_716 then cipherstatepack(k_53,n_49) else fail-any)) else caught-fail) in
        {2124}let v_717: bool = not-caught-fail(csi_48) in
        {2125}let v_718: bitstring = (if v_709 then catch-fail((if v_711 then (if v_712 then (if v_714 then (if v_717 then (csi_48,plaintext_34,valid_30) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {2126}let v_719: bool = (not-caught-fail(v_718) && success?(1-proj-3-tuple(v_718))) in
        {2127}let valid_31: bool = (if v_719 then 3-proj-3-tuple(v_718) else caught-fail) in
        {2128}let plaintext_35: bitstring = (if v_719 then 2-proj-3-tuple(v_718) else caught-fail) in
        {2129}let csi_49: cipherstate = (if v_719 then 1-proj-3-tuple(v_718) else caught-fail) in
        {2130}let ss_108: symmetricstate = (if v_719 then symmetricstatepack(csi_49,ck_111,h_93) else caught-fail) in
        {2131}let v_720: bitstring = (if v_719 then catch-fail(symmetricstateunpack(ss_108)) else caught-fail) in
        {2132}let v_721: bool = (not-caught-fail(v_720) && success?(1-proj-3-tuple(v_720))) in
        {2133}let h_94: bitstring = (if v_721 then 3-proj-3-tuple(v_720) else caught-fail) in
        {2134}let ck_112: key = (if v_721 then 2-proj-3-tuple(v_720) else caught-fail) in
        {2135}let cs_94: cipherstate = (if v_721 then 1-proj-3-tuple(v_720) else caught-fail) in
        {2136}let ssi_27: symmetricstate = (if v_719 then catch-fail((if v_721 then symmetricstatepack(cs_94,ck_112,hash(h_94,nm_5)) else fail-any)) else caught-fail) in
        {2137}let v_722: bool = not-caught-fail(ssi_27) in
        {2138}let v_723: bitstring = (if v_707 then catch-fail((if v_709 then (if v_719 then (if v_722 then (ssi_27,plaintext_35,valid_31) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {2139}let v_724: bool = (not-caught-fail(v_723) && success?(1-proj-3-tuple(v_723))) in
        {2140}let valid2_10: bool = (if v_724 then 3-proj-3-tuple(v_723) else caught-fail) in
        {2141}let nem_1: bitstring = (if v_724 then 2-proj-3-tuple(v_723) else caught-fail) in
        {2142}let ss_109: symmetricstate = (if v_724 then 1-proj-3-tuple(v_723) else caught-fail) in
        {2144}let v_725: bitstring = (if v_724 then catch-fail(keypairunpack(e_38)) else caught-fail) in
        {2145}let v_726: bool = (not-caught-fail(v_725) && success?(1-proj-2-tuple(v_725))) in
        {2146}let my_private_key_18: key = (if v_726 then 2-proj-2-tuple(v_725) else caught-fail) in
        {2147}let my_public_key_18: key = (if v_726 then 1-proj-2-tuple(v_725) else caught-fail) in
        {2101}let rs_23: key = (if v_707 then nes_1 else caught-fail) in
        {2148}let input_key_material_21: key = (if v_724 then catch-fail((if v_726 then dhexp(my_private_key_18,rs_23) else fail-any)) else caught-fail) in
        {2149}let v_727: bool = not-caught-fail(input_key_material_21) in
        {2150}let v_728: bitstring = (if v_727 then catch-fail(symmetricstateunpack(ss_109)) else caught-fail) in
        {2151}let v_729: bool = (not-caught-fail(v_728) && success?(1-proj-3-tuple(v_728))) in
        {2152}let h_95: bitstring = (if v_729 then 3-proj-3-tuple(v_728) else caught-fail) in
        {2153}let ck_113: key = (if v_729 then 2-proj-3-tuple(v_728) else caught-fail) in
        {2154}let cs_95: cipherstate = (if v_729 then 1-proj-3-tuple(v_728) else caught-fail) in
        {2157}let output3_21: key = (if v_729 then hmac_hash3(ck_113,input_key_material_21) else caught-fail) in
        {2156}let output2_21: key = (if v_729 then hmac_hash2(ck_113,input_key_material_21) else caught-fail) in
        {2155}let output1_21: key = (if v_729 then hmac_hash1(ck_113,input_key_material_21) else caught-fail) in
        {2158}let v_730: bitstring = (if v_729 then catch-fail((output1_21,output2_21,output3_21)) else caught-fail) in
        {2159}let v_731: bool = (not-caught-fail(v_730) && success?(1-proj-3-tuple(v_730))) in
        {2160}let output_18: key = (if v_731 then 3-proj-3-tuple(v_730) else caught-fail) in
        {2161}let temp_k_18: key = (if v_731 then 2-proj-3-tuple(v_730) else caught-fail) in
        {2162}let ck_114: key = (if v_731 then 1-proj-3-tuple(v_730) else caught-fail) in
        {2163}let ss_110: symmetricstate = (if v_724 then catch-fail((if v_727 then (if v_729 then (if v_731 then symmetricstatepack(cipherstatepack(temp_k_18,minnonce),ck_114,h_95) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {2164}let v_732: bool = not-caught-fail(ss_110) in
        {2165}let v_733: bitstring = (if v_732 then catch-fail(keypairunpack(e_38)) else caught-fail) in
        {2166}let v_734: bool = (not-caught-fail(v_733) && success?(1-proj-2-tuple(v_733))) in
        {2167}let my_private_key_19: key = (if v_734 then 2-proj-2-tuple(v_733) else caught-fail) in
        {2168}let my_public_key_19: key = (if v_734 then 1-proj-2-tuple(v_733) else caught-fail) in
        {2143}let rm_23: key = (if v_724 then nem_1 else caught-fail) in
        {2169}let input_key_material_22: key = (if v_732 then catch-fail((if v_734 then dhexp(my_private_key_19,rm_23) else fail-any)) else caught-fail) in
        {2170}let v_735: bool = not-caught-fail(input_key_material_22) in
        {2171}let v_736: bitstring = (if v_735 then catch-fail(symmetricstateunpack(ss_110)) else caught-fail) in
        {2172}let v_737: bool = (not-caught-fail(v_736) && success?(1-proj-3-tuple(v_736))) in
        {2173}let h_96: bitstring = (if v_737 then 3-proj-3-tuple(v_736) else caught-fail) in
        {2174}let ck_115: key = (if v_737 then 2-proj-3-tuple(v_736) else caught-fail) in
        {2175}let cs_96: cipherstate = (if v_737 then 1-proj-3-tuple(v_736) else caught-fail) in
        {2178}let output3_22: key = (if v_737 then hmac_hash3(ck_115,input_key_material_22) else caught-fail) in
        {2177}let output2_22: key = (if v_737 then hmac_hash2(ck_115,input_key_material_22) else caught-fail) in
        {2176}let output1_22: key = (if v_737 then hmac_hash1(ck_115,input_key_material_22) else caught-fail) in
        {2179}let v_738: bitstring = (if v_737 then catch-fail((output1_22,output2_22,output3_22)) else caught-fail) in
        {2180}let v_739: bool = (not-caught-fail(v_738) && success?(1-proj-3-tuple(v_738))) in
        {2181}let output_19: key = (if v_739 then 3-proj-3-tuple(v_738) else caught-fail) in
        {2182}let temp_k_19: key = (if v_739 then 2-proj-3-tuple(v_738) else caught-fail) in
        {2183}let ck_116: key = (if v_739 then 1-proj-3-tuple(v_738) else caught-fail) in
        {2184}let ss_111: symmetricstate = (if v_732 then catch-fail((if v_735 then (if v_737 then (if v_739 then symmetricstatepack(cipherstatepack(temp_k_19,minnonce),ck_116,h_96) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {2185}let v_740: bool = not-caught-fail(ss_111) in
        {2186}let v_741: bitstring = (if v_740 then catch-fail(symmetricstateunpack(ss_111)) else caught-fail) in
        {2187}let v_742: bool = (not-caught-fail(v_741) && success?(1-proj-3-tuple(v_741))) in
        {2188}let h_97: bitstring = (if v_742 then 3-proj-3-tuple(v_741) else caught-fail) in
        {2189}let ck_117: key = (if v_742 then 2-proj-3-tuple(v_741) else caught-fail) in
        {2190}let cs_97: cipherstate = (if v_742 then 1-proj-3-tuple(v_741) else caught-fail) in
        {2191}let v_743: bitstring = (if v_742 then catch-fail(cipherstateunpack(cs_97)) else caught-fail) in
        {2192}let v_744: bool = (not-caught-fail(v_743) && success?(1-proj-2-tuple(v_743))) in
        {2193}let n_50: nonce = (if v_744 then 2-proj-2-tuple(v_743) else caught-fail) in
        {2194}let k_54: key = (if v_744 then 1-proj-2-tuple(v_743) else caught-fail) in
        {2195}let d_12: aead = (if v_744 then catch-fail(decrypt(k_54,n_50,h_97,ciphertext_39)) else caught-fail) in
        {2196}let v_745: bool = not-caught-fail(d_12) in
        {2197}let v_746: bitstring = (if v_745 then catch-fail(aeadunpack(d_12)) else caught-fail) in
        {2198}let v_747: bool = (not-caught-fail(v_746) && success?(1-proj-3-tuple(v_746))) in
        {2199}let plaintext_36: bitstring = (if v_747 then 3-proj-3-tuple(v_746) else caught-fail) in
        {2200}let adi_12: bitstring = (if v_747 then 2-proj-3-tuple(v_746) else caught-fail) in
        {2201}let valid_32: bool = (if v_747 then 1-proj-3-tuple(v_746) else caught-fail) in
        {2203}let v_748: bitstring = (if v_747 then catch-fail(cipherstateunpack(cs_97)) else caught-fail) in
        {2204}let v_749: bool = (not-caught-fail(v_748) && success?(1-proj-2-tuple(v_748))) in
        {2205}let o_25: nonce = (if v_749 then 2-proj-2-tuple(v_748) else caught-fail) in
        {2206}let k_55: key = (if v_749 then 1-proj-2-tuple(v_748) else caught-fail) in
        {2202}let n_51: nonce = (if v_747 then increment_nonce(n_50) else caught-fail) in
        {2207}let csi_50: cipherstate = (if v_747 then catch-fail((if v_749 then cipherstatepack(k_55,n_51) else fail-any)) else caught-fail) in
        {2208}let v_750: bool = not-caught-fail(csi_50) in
        {2209}let v_751: bitstring = (if v_742 then catch-fail((if v_744 then (if v_745 then (if v_747 then (if v_750 then (csi_50,plaintext_36,valid_32) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {2210}let v_752: bool = (not-caught-fail(v_751) && success?(1-proj-3-tuple(v_751))) in
        {2211}let valid_33: bool = (if v_752 then 3-proj-3-tuple(v_751) else caught-fail) in
        {2212}let plaintext_37: bitstring = (if v_752 then 2-proj-3-tuple(v_751) else caught-fail) in
        {2213}let csi_51: cipherstate = (if v_752 then 1-proj-3-tuple(v_751) else caught-fail) in
        {2214}let ss_112: symmetricstate = (if v_752 then symmetricstatepack(csi_51,ck_117,h_97) else caught-fail) in
        {2215}let v_753: bitstring = (if v_752 then catch-fail(symmetricstateunpack(ss_112)) else caught-fail) in
        {2216}let v_754: bool = (not-caught-fail(v_753) && success?(1-proj-3-tuple(v_753))) in
        {2217}let h_98: bitstring = (if v_754 then 3-proj-3-tuple(v_753) else caught-fail) in
        {2218}let ck_118: key = (if v_754 then 2-proj-3-tuple(v_753) else caught-fail) in
        {2219}let cs_98: cipherstate = (if v_754 then 1-proj-3-tuple(v_753) else caught-fail) in
        {2220}let ssi_28: symmetricstate = (if v_752 then catch-fail((if v_754 then symmetricstatepack(cs_98,ck_118,hash(h_98,ciphertext_39)) else fail-any)) else caught-fail) in
        {2221}let v_755: bool = not-caught-fail(ssi_28) in
        {2222}let v_756: bitstring = (if v_740 then catch-fail((if v_742 then (if v_752 then (if v_755 then (ssi_28,plaintext_37,valid_33) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {2223}let v_757: bool = (not-caught-fail(v_756) && success?(1-proj-3-tuple(v_756))) in
        {2224}let valid3_1: bool = (if v_757 then 3-proj-3-tuple(v_756) else caught-fail) in
        {2225}let plaintext_38: bitstring = (if v_757 then 2-proj-3-tuple(v_756) else caught-fail) in
        {2226}let ss_113: symmetricstate = (if v_757 then 1-proj-3-tuple(v_756) else caught-fail) in
        {2227}let basis_17: key = (if v_757 then key_s(them_3) else caught-fail) in
        {2228}let public_key_17: key = (if v_757 then catch-fail(dhexp(basis_17,validkey(g))) else caught-fail) in
        {2229}let v_758: bool = not-caught-fail(public_key_17) in
        {2230}let v_759: bool = (if v_757 then catch-fail(((valid1_10 && (valid2_10 && valid3_1)) && (rs_23 = getpublickey((if v_758 then keypairpack(validkey(public_key_17),basis_17) else fail-any))))) else caught-fail) in
        {2232}let v_760: bitstring = (if v_759 then catch-fail(symmetricstateunpack(ss_113)) else caught-fail) in
        {2233}let v_761: bool = (not-caught-fail(v_760) && success?(1-proj-3-tuple(v_760))) in
        {2234}let h_99: bitstring = (if v_761 then 3-proj-3-tuple(v_760) else caught-fail) in
        {2235}let ck_119: key = (if v_761 then 2-proj-3-tuple(v_760) else caught-fail) in
        {2236}let cs_99: cipherstate = (if v_761 then 1-proj-3-tuple(v_760) else caught-fail) in
        {2237}let input_key_material_23: key = (if v_761 then zero else caught-fail) in
        {2240}let output3_23: key = (if v_761 then hmac_hash3(ck_119,input_key_material_23) else caught-fail) in
        {2239}let output2_23: key = (if v_761 then hmac_hash2(ck_119,input_key_material_23) else caught-fail) in
        {2238}let output1_23: key = (if v_761 then hmac_hash1(ck_119,input_key_material_23) else caught-fail) in
        {2241}let v_762: bitstring = (if v_761 then catch-fail((output1_23,output2_23,output3_23)) else caught-fail) in
        {2242}let v_763: bool = (not-caught-fail(v_762) && success?(1-proj-3-tuple(v_762))) in
        {2243}let temp_k3_3: key = (if v_763 then 3-proj-3-tuple(v_762) else caught-fail) in
        {2244}let temp_k2_3: key = (if v_763 then 2-proj-3-tuple(v_762) else caught-fail) in
        {2245}let temp_k1_3: key = (if v_763 then 1-proj-3-tuple(v_762) else caught-fail) in
        {2247}let cs2_15: cipherstate = (if v_763 then cipherstatepack(temp_k2_3,minnonce) else caught-fail) in
        {2246}let cs1_15: cipherstate = (if v_763 then cipherstatepack(temp_k1_3,minnonce) else caught-fail) in
        {2248}let v_764: bitstring = (if v_759 then catch-fail((if v_761 then (if v_763 then (ss_113,cs1_15,cs2_15) else fail-any) else fail-any)) else caught-fail) in
        {2249}let v_765: bool = (not-caught-fail(v_764) && success?(1-proj-3-tuple(v_764))) in
        {2250}let cs2_16: cipherstate = (if v_765 then 3-proj-3-tuple(v_764) else caught-fail) in
        {2251}let cs1_16: cipherstate = (if v_765 then 2-proj-3-tuple(v_764) else caught-fail) in
        {2252}let ssi_29: symmetricstate = (if v_765 then 1-proj-3-tuple(v_764) else caught-fail) in
        {2231}let hs_62: handshakestate = (if v_759 then handshakestatepack(ss_113,s_23,m_23,e_38,rs_23,rm_23,re_25,psk_21,initiator_18) else caught-fail) in
        {2253}let (hs_63: handshakestate,plaintext_c_1: bitstring,valid_34: bool,cs1_17: cipherstate,cs2_17: cipherstate) = (if v_688 then (if v_690 then (if v_707 then (if v_724 then (if v_732 then (if v_740 then (if v_757 then (if undo-catch-fail(v_759) then (if v_765 then (hs_62,plaintext_38,true,cs1_16,cs2_16) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {2254}event RecvMsg(me_3,them_3,stagepack_c(sid_4),plaintext_c_1);
        {2255}insert statestore(me_3,them_3,sid_4,statepack_d(hs_63,cs1_17,cs2_17))
    ) | (
        {2257}!
        {2315}get statestore(=me_3,=them_3,=sid_4,statepack_d(hs_64: handshakestate,cs1_18: cipherstate,cs2_18: cipherstate)) in
        {2258}let hs_65: handshakestate = handshakestatesetcs(hs_64,cs2_18) in
        {2260}let v_766: bitstring = catch-fail(handshakestateunpack(hs_65)) in
        {2261}let v_767: bool = (not-caught-fail(v_766) && success?(1-proj-9-tuple(v_766))) in
        {2262}let initiator_19: bool = (if v_767 then 9-proj-9-tuple(v_766) else caught-fail) in
        {2263}let psk_22: key = (if v_767 then 8-proj-9-tuple(v_766) else caught-fail) in
        {2264}let re_26: key = (if v_767 then 7-proj-9-tuple(v_766) else caught-fail) in
        {2265}let rm_24: key = (if v_767 then 6-proj-9-tuple(v_766) else caught-fail) in
        {2266}let rs_24: key = (if v_767 then 5-proj-9-tuple(v_766) else caught-fail) in
        {2267}let e_39: keypair = (if v_767 then 4-proj-9-tuple(v_766) else caught-fail) in
        {2268}let m_24: keypair = (if v_767 then 3-proj-9-tuple(v_766) else caught-fail) in
        {2269}let s_24: keypair = (if v_767 then 2-proj-9-tuple(v_766) else caught-fail) in
        {2270}let ss_114: symmetricstate = (if v_767 then 1-proj-9-tuple(v_766) else caught-fail) in
        {2271}let v_768: bitstring = (if v_767 then catch-fail((empty,empty,empty)) else caught-fail) in
        {2272}let v_769: bool = (not-caught-fail(v_768) && success?(1-proj-3-tuple(v_768))) in
        {2273}let ciphertext_40: bitstring = (if v_769 then 3-proj-3-tuple(v_768) else caught-fail) in
        {2274}let ns_20: bitstring = (if v_769 then 2-proj-3-tuple(v_768) else caught-fail) in
        {2275}let ne_18: bitstring = (if v_769 then 1-proj-3-tuple(v_768) else caught-fail) in
        {2276}let v_770: bitstring = (if v_769 then catch-fail(symmetricstateunpack(ss_114)) else caught-fail) in
        {2277}let v_771: bool = (not-caught-fail(v_770) && success?(1-proj-3-tuple(v_770))) in
        {2278}let h_100: bitstring = (if v_771 then 3-proj-3-tuple(v_770) else caught-fail) in
        {2279}let ck_120: key = (if v_771 then 2-proj-3-tuple(v_770) else caught-fail) in
        {2280}let cs_100: cipherstate = (if v_771 then 1-proj-3-tuple(v_770) else caught-fail) in
        {2281}let v_772: bitstring = (if v_771 then catch-fail(cipherstateunpack(cs_100)) else caught-fail) in
        {2282}let v_773: bool = (not-caught-fail(v_772) && success?(1-proj-2-tuple(v_772))) in
        {2283}let n_52: nonce = (if v_773 then 2-proj-2-tuple(v_772) else caught-fail) in
        {2284}let k_56: key = (if v_773 then 1-proj-2-tuple(v_772) else caught-fail) in
        {2287}let v_774: bitstring = (if v_773 then catch-fail(cipherstateunpack(cs_100)) else caught-fail) in
        {2288}let v_775: bool = (not-caught-fail(v_774) && success?(1-proj-2-tuple(v_774))) in
        {2289}let o_26: nonce = (if v_775 then 2-proj-2-tuple(v_774) else caught-fail) in
        {2290}let k_57: key = (if v_775 then 1-proj-2-tuple(v_774) else caught-fail) in
        {2286}let n_53: nonce = (if v_773 then increment_nonce(n_52) else caught-fail) in
        {2291}let csi_52: cipherstate = (if v_773 then catch-fail((if v_775 then cipherstatepack(k_57,n_53) else fail-any)) else caught-fail) in
        {2292}let v_776: bool = not-caught-fail(csi_52) in
        {2259}let payload_9: bitstring = msg_d(me_3,them_3,sid_4) in
        {2285}let e_40: bitstring = (if v_773 then encrypt(k_56,n_52,h_100,payload_9) else caught-fail) in
        {2293}let v_777: bitstring = (if v_771 then catch-fail((if v_773 then (if v_776 then (csi_52,e_40) else fail-any) else fail-any)) else caught-fail) in
        {2294}let v_778: bool = (not-caught-fail(v_777) && success?(1-proj-2-tuple(v_777))) in
        {2295}let ciphertext_41: bitstring = (if v_778 then 2-proj-2-tuple(v_777) else caught-fail) in
        {2296}let csi_53: cipherstate = (if v_778 then 1-proj-2-tuple(v_777) else caught-fail) in
        {2297}let ss_115: symmetricstate = (if v_778 then symmetricstatepack(csi_53,ck_120,h_100) else caught-fail) in
        {2298}let v_779: bitstring = (if v_778 then catch-fail(symmetricstateunpack(ss_115)) else caught-fail) in
        {2299}let v_780: bool = (not-caught-fail(v_779) && success?(1-proj-3-tuple(v_779))) in
        {2300}let h_101: bitstring = (if v_780 then 3-proj-3-tuple(v_779) else caught-fail) in
        {2301}let ck_121: key = (if v_780 then 2-proj-3-tuple(v_779) else caught-fail) in
        {2302}let cs_101: cipherstate = (if v_780 then 1-proj-3-tuple(v_779) else caught-fail) in
        {2303}let ssi_30: symmetricstate = (if v_778 then catch-fail((if v_780 then symmetricstatepack(cs_101,ck_121,hash(h_101,ciphertext_41)) else fail-any)) else caught-fail) in
        {2304}let v_781: bool = not-caught-fail(ssi_30) in
        {2305}let v_782: bitstring = (if v_769 then catch-fail((if v_771 then (if v_778 then (if v_781 then (ssi_30,ciphertext_41) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {2306}let v_783: bool = (not-caught-fail(v_782) && success?(1-proj-2-tuple(v_782))) in
        {2307}let ciphertext_42: bitstring = (if v_783 then 2-proj-2-tuple(v_782) else caught-fail) in
        {2308}let ss_116: symmetricstate = (if v_783 then 1-proj-2-tuple(v_782) else caught-fail) in
        {2310}let message_buffer_9: bitstring = (if v_783 then concat3(ne_18,ns_20,ciphertext_42) else caught-fail) in
        {2309}let hs_66: handshakestate = (if v_783 then handshakestatepack(ss_116,s_24,m_24,e_39,rs_24,rm_24,re_26,psk_22,initiator_19) else caught-fail) in
        {2311}let (hs_67: handshakestate,message_d_3: bitstring) = (if v_767 then (if v_769 then (if v_783 then (hs_66,message_buffer_9) else fail-any) else fail-any) else fail-any) in
        {2312}event SendMsg(me_3,them_3,stagepack_d(sid_4),msg_d(me_3,them_3,sid_4));
        {2313}insert statestore(me_3,them_3,sid_4,statepack_e(hs_67,cs1_18,handshakestategetcs(hs_67)));
        {2314}out(pub, message_d_3)
    ) | (
        {2316}!
        {2382}get statestore(=me_3,=them_3,=sid_4,statepack_e(hs_68: handshakestate,cs1_19: cipherstate,cs2_19: cipherstate)) in
        {2317}let hs_69: handshakestate = handshakestatesetcs(hs_68,cs1_19) in
        {2318}in(pub, message_e_3: bitstring);
        {2319}let v_784: bitstring = catch-fail(handshakestateunpack(hs_69)) in
        {2320}let v_785: bool = (not-caught-fail(v_784) && success?(1-proj-9-tuple(v_784))) in
        {2321}let initiator_20: bool = (if v_785 then 9-proj-9-tuple(v_784) else caught-fail) in
        {2322}let psk_23: key = (if v_785 then 8-proj-9-tuple(v_784) else caught-fail) in
        {2323}let re_27: key = (if v_785 then 7-proj-9-tuple(v_784) else caught-fail) in
        {2324}let rm_25: key = (if v_785 then 6-proj-9-tuple(v_784) else caught-fail) in
        {2325}let rs_25: key = (if v_785 then 5-proj-9-tuple(v_784) else caught-fail) in
        {2326}let e_41: keypair = (if v_785 then 4-proj-9-tuple(v_784) else caught-fail) in
        {2327}let m_25: keypair = (if v_785 then 3-proj-9-tuple(v_784) else caught-fail) in
        {2328}let s_25: keypair = (if v_785 then 2-proj-9-tuple(v_784) else caught-fail) in
        {2329}let ss_117: symmetricstate = (if v_785 then 1-proj-9-tuple(v_784) else caught-fail) in
        {2330}let v_786: bitstring = (if v_785 then catch-fail(deconcat3(message_e_3)) else caught-fail) in
        {2331}let v_787: bool = (not-caught-fail(v_786) && success?(1-proj-3-tuple(v_786))) in
        {2332}let ciphertext_43: bitstring = (if v_787 then 3-proj-3-tuple(v_786) else caught-fail) in
        {2333}let ns_21: bitstring = (if v_787 then 2-proj-3-tuple(v_786) else caught-fail) in
        {2334}let ne_19: bitstring = (if v_787 then 1-proj-3-tuple(v_786) else caught-fail) in
        {2336}let v_788: bitstring = (if v_787 then catch-fail(symmetricstateunpack(ss_117)) else caught-fail) in
        {2337}let v_789: bool = (not-caught-fail(v_788) && success?(1-proj-3-tuple(v_788))) in
        {2338}let h_102: bitstring = (if v_789 then 3-proj-3-tuple(v_788) else caught-fail) in
        {2339}let ck_122: key = (if v_789 then 2-proj-3-tuple(v_788) else caught-fail) in
        {2340}let cs_102: cipherstate = (if v_789 then 1-proj-3-tuple(v_788) else caught-fail) in
        {2341}let v_790: bitstring = (if v_789 then catch-fail(cipherstateunpack(cs_102)) else caught-fail) in
        {2342}let v_791: bool = (not-caught-fail(v_790) && success?(1-proj-2-tuple(v_790))) in
        {2343}let n_54: nonce = (if v_791 then 2-proj-2-tuple(v_790) else caught-fail) in
        {2344}let k_58: key = (if v_791 then 1-proj-2-tuple(v_790) else caught-fail) in
        {2345}let d_13: aead = (if v_791 then catch-fail(decrypt(k_58,n_54,h_102,ciphertext_43)) else caught-fail) in
        {2346}let v_792: bool = not-caught-fail(d_13) in
        {2347}let v_793: bitstring = (if v_792 then catch-fail(aeadunpack(d_13)) else caught-fail) in
        {2348}let v_794: bool = (not-caught-fail(v_793) && success?(1-proj-3-tuple(v_793))) in
        {2349}let plaintext_39: bitstring = (if v_794 then 3-proj-3-tuple(v_793) else caught-fail) in
        {2350}let adi_13: bitstring = (if v_794 then 2-proj-3-tuple(v_793) else caught-fail) in
        {2351}let valid_35: bool = (if v_794 then 1-proj-3-tuple(v_793) else caught-fail) in
        {2353}let v_795: bitstring = (if v_794 then catch-fail(cipherstateunpack(cs_102)) else caught-fail) in
        {2354}let v_796: bool = (not-caught-fail(v_795) && success?(1-proj-2-tuple(v_795))) in
        {2355}let o_27: nonce = (if v_796 then 2-proj-2-tuple(v_795) else caught-fail) in
        {2356}let k_59: key = (if v_796 then 1-proj-2-tuple(v_795) else caught-fail) in
        {2352}let n_55: nonce = (if v_794 then increment_nonce(n_54) else caught-fail) in
        {2357}let csi_54: cipherstate = (if v_794 then catch-fail((if v_796 then cipherstatepack(k_59,n_55) else fail-any)) else caught-fail) in
        {2358}let v_797: bool = not-caught-fail(csi_54) in
        {2359}let v_798: bitstring = (if v_789 then catch-fail((if v_791 then (if v_792 then (if v_794 then (if v_797 then (csi_54,plaintext_39,valid_35) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {2360}let v_799: bool = (not-caught-fail(v_798) && success?(1-proj-3-tuple(v_798))) in
        {2361}let valid_36: bool = (if v_799 then 3-proj-3-tuple(v_798) else caught-fail) in
        {2362}let plaintext_40: bitstring = (if v_799 then 2-proj-3-tuple(v_798) else caught-fail) in
        {2363}let csi_55: cipherstate = (if v_799 then 1-proj-3-tuple(v_798) else caught-fail) in
        {2364}let ss_118: symmetricstate = (if v_799 then symmetricstatepack(csi_55,ck_122,h_102) else caught-fail) in
        {2365}let v_800: bitstring = (if v_799 then catch-fail(symmetricstateunpack(ss_118)) else caught-fail) in
        {2366}let v_801: bool = (not-caught-fail(v_800) && success?(1-proj-3-tuple(v_800))) in
        {2367}let h_103: bitstring = (if v_801 then 3-proj-3-tuple(v_800) else caught-fail) in
        {2368}let ck_123: key = (if v_801 then 2-proj-3-tuple(v_800) else caught-fail) in
        {2369}let cs_103: cipherstate = (if v_801 then 1-proj-3-tuple(v_800) else caught-fail) in
        {2370}let ssi_31: symmetricstate = (if v_799 then catch-fail((if v_801 then symmetricstatepack(cs_103,ck_123,hash(h_103,ciphertext_43)) else fail-any)) else caught-fail) in
        {2371}let v_802: bool = not-caught-fail(ssi_31) in
        {2372}let v_803: bitstring = (if v_787 then catch-fail((if v_789 then (if v_799 then (if v_802 then (ssi_31,plaintext_40,valid_36) else fail-any) else fail-any) else fail-any)) else caught-fail) in
        {2373}let v_804: bool = (not-caught-fail(v_803) && success?(1-proj-3-tuple(v_803))) in
        {2374}let valid2_11: bool = (if v_804 then 3-proj-3-tuple(v_803) else caught-fail) in
        {2375}let plaintext_41: bitstring = (if v_804 then 2-proj-3-tuple(v_803) else caught-fail) in
        {2376}let ss_119: symmetricstate = (if v_804 then 1-proj-3-tuple(v_803) else caught-fail) in
        {2335}let valid1_11: bool = (if v_787 then true else caught-fail) in
        {2377}let v_805: bool = (if v_804 then catch-fail((valid1_11 && valid2_11)) else caught-fail) in
        {2378}let hs_70: handshakestate = (if v_805 then handshakestatepack(ss_119,s_25,m_25,e_41,rs_25,rm_25,re_27,psk_23,initiator_20) else caught-fail) in
        {2379}let (hs_71: handshakestate,plaintext_e_1: bitstring,valid_37: bool) = (if v_785 then (if v_787 then (if v_804 then (if undo-catch-fail(v_805) then (hs_70,plaintext_41,true) else fail-any) else fail-any) else fail-any) else fail-any) in
        {2380}event RecvMsg(me_3,them_3,stagepack_e(sid_4),plaintext_e_1);
        {2381}event RecvEnd(valid_37)
    ) | (
        {2383}event LeakS(phase0,me_3);
        {2384}event LeakM(phase0,me_3);
        {2385}out(pub, (key_s(me_3),key_m(me_3)))
    ) | (
        {2386}phase 1;
        {2387}event LeakS(phase1,me_3);
        {2388}event LeakM(phase1,me_3);
        {2389}out(pub, (key_s(me_3),key_m(me_3)))
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m_26)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m_26)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m_26)) ==> event(SendMsg(alice,c,stagepack_a(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))); event(RecvMsg(bob,alice,stagepack_a(sid_b),m_26)) ==> event(SendMsg(alice,c,stagepack_a(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))); event(RecvMsg(bob,alice,stagepack_a(sid_b),m_26)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))); event(RecvMsg(bob,alice,stagepack_a(sid_b),m_26)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakM(px,bob)); attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(px,bob)) && event(LeakM(px,bob)) && event(LeakS(pz,alice)) && event(LeakM(pz,alice))); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m_26)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m_26)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m_26)) ==> event(SendMsg(bob,c,stagepack_b(sid_b),m_26)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))); event(RecvMsg(alice,bob,stagepack_b(sid_a),m_26)) ==> event(SendMsg(bob,c,stagepack_b(sid_b),m_26)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))); event(RecvMsg(alice,bob,stagepack_b(sid_a),m_26)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m_26)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))); event(RecvMsg(alice,bob,stagepack_b(sid_a),m_26)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m_26)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))); not attacker_p1(msg_b(bob,alice,sid_b)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(px,alice)) && event(LeakM(px,alice)); attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(px,alice)) && event(LeakM(px,alice)) && event(LeakS(pz,bob)) && event(LeakM(pz,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) && event(LeakM(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m_26)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m_26)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m_26)) ==> event(SendMsg(alice,c,stagepack_c(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))); event(RecvMsg(bob,alice,stagepack_c(sid_b),m_26)) ==> event(SendMsg(alice,c,stagepack_c(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))); event(RecvMsg(bob,alice,stagepack_c(sid_b),m_26)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))); event(RecvMsg(bob,alice,stagepack_c(sid_b),m_26)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))); not attacker_p1(msg_c(alice,bob,sid_a)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakM(px,bob)); attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(px,bob)) && event(LeakM(px,bob)) && event(LeakS(pz,alice)) && event(LeakM(pz,alice))); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m_26)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m_26)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m_26)) ==> event(SendMsg(bob,c,stagepack_d(sid_b),m_26)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))); event(RecvMsg(alice,bob,stagepack_d(sid_a),m_26)) ==> event(SendMsg(bob,c,stagepack_d(sid_b),m_26)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))); event(RecvMsg(alice,bob,stagepack_d(sid_a),m_26)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m_26)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))); event(RecvMsg(alice,bob,stagepack_d(sid_a),m_26)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m_26)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))); not attacker_p1(msg_d(bob,alice,sid_b)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(px,alice)) && event(LeakM(px,alice)); attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(px,alice)) && event(LeakM(px,alice)) && event(LeakS(pz,bob)) && event(LeakM(pz,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) && event(LeakM(phase0,alice)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m_26)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m_26)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m_26)) ==> event(SendMsg(alice,c,stagepack_e(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))); event(RecvMsg(bob,alice,stagepack_e(sid_b),m_26)) ==> event(SendMsg(alice,c,stagepack_e(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))); event(RecvMsg(bob,alice,stagepack_e(sid_b),m_26)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))); event(RecvMsg(bob,alice,stagepack_e(sid_b),m_26)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))); not attacker_p1(msg_e(alice,bob,sid_a)); attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakM(px,bob)); attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakM(px,bob)) && event(LeakS(pz,alice)) && event(LeakM(pz,alice))); attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)); not event(RecvEnd(true)) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 200 rules (89 with conclusion selected). Queue: 179 rules.
400 rules inserted. Base: 398 rules (124 with conclusion selected). Queue: 49 rules.
600 rules inserted. Base: 595 rules (231 with conclusion selected). Queue: 112 rules.
800 rules inserted. Base: 795 rules (286 with conclusion selected). Queue: 254 rules.
1000 rules inserted. Base: 995 rules (413 with conclusion selected). Queue: 479 rules.
1200 rules inserted. Base: 1191 rules (478 with conclusion selected). Queue: 485 rules.
1400 rules inserted. Base: 1384 rules (548 with conclusion selected). Queue: 434 rules.
1600 rules inserted. Base: 1574 rules (590 with conclusion selected). Queue: 420 rules.
1800 rules inserted. Base: 1727 rules (608 with conclusion selected). Queue: 525 rules.
2000 rules inserted. Base: 1895 rules (623 with conclusion selected). Queue: 611 rules.
2200 rules inserted. Base: 2038 rules (654 with conclusion selected). Queue: 693 rules.
2400 rules inserted. Base: 2191 rules (695 with conclusion selected). Queue: 770 rules.
2600 rules inserted. Base: 2346 rules (719 with conclusion selected). Queue: 849 rules.
2800 rules inserted. Base: 2429 rules (744 with conclusion selected). Queue: 838 rules.
3000 rules inserted. Base: 2507 rules (768 with conclusion selected). Queue: 826 rules.
3200 rules inserted. Base: 2579 rules (792 with conclusion selected). Queue: 821 rules.
3400 rules inserted. Base: 2682 rules (816 with conclusion selected). Queue: 815 rules.
3600 rules inserted. Base: 2808 rules (832 with conclusion selected). Queue: 830 rules.
3800 rules inserted. Base: 2931 rules (848 with conclusion selected). Queue: 865 rules.
4000 rules inserted. Base: 3062 rules (864 with conclusion selected). Queue: 904 rules.
4200 rules inserted. Base: 3152 rules (880 with conclusion selected). Queue: 889 rules.
4400 rules inserted. Base: 3260 rules (890 with conclusion selected). Queue: 917 rules.
4600 rules inserted. Base: 3368 rules (898 with conclusion selected). Queue: 954 rules.
4800 rules inserted. Base: 3480 rules (906 with conclusion selected). Queue: 994 rules.
5000 rules inserted. Base: 3592 rules (914 with conclusion selected). Queue: 1034 rules.
5200 rules inserted. Base: 3650 rules (914 with conclusion selected). Queue: 1047 rules.
5400 rules inserted. Base: 3715 rules (914 with conclusion selected). Queue: 1084 rules.
5600 rules inserted. Base: 3779 rules (914 with conclusion selected). Queue: 1132 rules.
5800 rules inserted. Base: 3841 rules (914 with conclusion selected). Queue: 1176 rules.
6000 rules inserted. Base: 3899 rules (914 with conclusion selected). Queue: 1222 rules.
6200 rules inserted. Base: 3989 rules (914 with conclusion selected). Queue: 1267 rules.
6400 rules inserted. Base: 4083 rules (915 with conclusion selected). Queue: 1322 rules.
6600 rules inserted. Base: 4182 rules (915 with conclusion selected). Queue: 1388 rules.
6800 rules inserted. Base: 4274 rules (915 with conclusion selected). Queue: 1449 rules.
7000 rules inserted. Base: 4371 rules (915 with conclusion selected). Queue: 1511 rules.
7200 rules inserted. Base: 4464 rules (915 with conclusion selected). Queue: 1574 rules.
7400 rules inserted. Base: 4545 rules (915 with conclusion selected). Queue: 1614 rules.
7600 rules inserted. Base: 4633 rules (915 with conclusion selected). Queue: 1657 rules.
7800 rules inserted. Base: 4719 rules (916 with conclusion selected). Queue: 1700 rules.
8000 rules inserted. Base: 4804 rules (916 with conclusion selected). Queue: 1742 rules.
8200 rules inserted. Base: 4902 rules (916 with conclusion selected). Queue: 1783 rules.
8400 rules inserted. Base: 4979 rules (916 with conclusion selected). Queue: 1831 rules.
8600 rules inserted. Base: 5079 rules (916 with conclusion selected). Queue: 1865 rules.
8800 rules inserted. Base: 5152 rules (916 with conclusion selected). Queue: 1919 rules.
9000 rules inserted. Base: 5195 rules (916 with conclusion selected). Queue: 1954 rules.
9200 rules inserted. Base: 5271 rules (916 with conclusion selected). Queue: 2000 rules.
9400 rules inserted. Base: 5328 rules (916 with conclusion selected). Queue: 2059 rules.
9600 rules inserted. Base: 5394 rules (916 with conclusion selected). Queue: 2105 rules.
9800 rules inserted. Base: 5473 rules (916 with conclusion selected). Queue: 2150 rules.
10000 rules inserted. Base: 5547 rules (916 with conclusion selected). Queue: 2205 rules.
10200 rules inserted. Base: 5618 rules (916 with conclusion selected). Queue: 2264 rules.
10400 rules inserted. Base: 5694 rules (916 with conclusion selected). Queue: 2318 rules.
10600 rules inserted. Base: 5770 rules (916 with conclusion selected). Queue: 2369 rules.
10800 rules inserted. Base: 5792 rules (917 with conclusion selected). Queue: 2421 rules.
11000 rules inserted. Base: 5865 rules (917 with conclusion selected). Queue: 2463 rules.
11200 rules inserted. Base: 5942 rules (917 with conclusion selected). Queue: 2504 rules.
11400 rules inserted. Base: 5984 rules (917 with conclusion selected). Queue: 2585 rules.
11600 rules inserted. Base: 6062 rules (917 with conclusion selected). Queue: 2641 rules.
11800 rules inserted. Base: 6142 rules (917 with conclusion selected). Queue: 2694 rules.
12000 rules inserted. Base: 6179 rules (917 with conclusion selected). Queue: 2779 rules.
12200 rules inserted. Base: 6251 rules (917 with conclusion selected). Queue: 2818 rules.
12400 rules inserted. Base: 6326 rules (917 with conclusion selected). Queue: 2864 rules.
12600 rules inserted. Base: 6381 rules (917 with conclusion selected). Queue: 2937 rules.
12800 rules inserted. Base: 6442 rules (917 with conclusion selected). Queue: 2988 rules.
13000 rules inserted. Base: 6520 rules (917 with conclusion selected). Queue: 3034 rules.
13200 rules inserted. Base: 6281 rules (917 with conclusion selected). Queue: 3116 rules.
13400 rules inserted. Base: 6333 rules (917 with conclusion selected). Queue: 3141 rules.
13600 rules inserted. Base: 6367 rules (917 with conclusion selected). Queue: 3212 rules.
13800 rules inserted. Base: 6420 rules (917 with conclusion selected). Queue: 3224 rules.
14000 rules inserted. Base: 6453 rules (917 with conclusion selected). Queue: 3308 rules.
14200 rules inserted. Base: 6524 rules (917 with conclusion selected). Queue: 3360 rules.
14400 rules inserted. Base: 6571 rules (917 with conclusion selected). Queue: 3425 rules.
14600 rules inserted. Base: 6619 rules (917 with conclusion selected). Queue: 3473 rules.
14800 rules inserted. Base: 6677 rules (917 with conclusion selected). Queue: 3531 rules.
15000 rules inserted. Base: 6711 rules (917 with conclusion selected). Queue: 3611 rules.
15200 rules inserted. Base: 6762 rules (917 with conclusion selected). Queue: 3657 rules.
15400 rules inserted. Base: 6793 rules (917 with conclusion selected). Queue: 3734 rules.
15600 rules inserted. Base: 6846 rules (917 with conclusion selected). Queue: 3798 rules.
15800 rules inserted. Base: 6878 rules (917 with conclusion selected). Queue: 3871 rules.
16000 rules inserted. Base: 6933 rules (917 with conclusion selected). Queue: 3920 rules.
16200 rules inserted. Base: 6968 rules (917 with conclusion selected). Queue: 3995 rules.
16400 rules inserted. Base: 7008 rules (917 with conclusion selected). Queue: 4032 rules.
16600 rules inserted. Base: 7046 rules (917 with conclusion selected). Queue: 4108 rules.
16800 rules inserted. Base: 7074 rules (917 with conclusion selected). Queue: 4192 rules.
17000 rules inserted. Base: 7108 rules (917 with conclusion selected). Queue: 4222 rules.
17200 rules inserted. Base: 7145 rules (917 with conclusion selected). Queue: 4296 rules.
17400 rules inserted. Base: 7197 rules (917 with conclusion selected). Queue: 4349 rules.
17600 rules inserted. Base: 7233 rules (917 with conclusion selected). Queue: 4426 rules.
17800 rules inserted. Base: 7261 rules (917 with conclusion selected). Queue: 4502 rules.
18000 rules inserted. Base: 7306 rules (917 with conclusion selected). Queue: 4553 rules.
18200 rules inserted. Base: 7346 rules (917 with conclusion selected). Queue: 4630 rules.
18400 rules inserted. Base: 7383 rules (917 with conclusion selected). Queue: 4703 rules.
18600 rules inserted. Base: 7418 rules (917 with conclusion selected). Queue: 4780 rules.
18800 rules inserted. Base: 7452 rules (917 with conclusion selected). Queue: 4850 rules.
19000 rules inserted. Base: 7476 rules (917 with conclusion selected). Queue: 4924 rules.
19200 rules inserted. Base: 7513 rules (917 with conclusion selected). Queue: 5005 rules.
19400 rules inserted. Base: 7550 rules (917 with conclusion selected). Queue: 5078 rules.
19600 rules inserted. Base: 7590 rules (917 with conclusion selected). Queue: 5152 rules.
19800 rules inserted. Base: 7628 rules (917 with conclusion selected). Queue: 5215 rules.
20000 rules inserted. Base: 7658 rules (917 with conclusion selected). Queue: 5306 rules.
20200 rules inserted. Base: 7692 rules (917 with conclusion selected). Queue: 5372 rules.
20400 rules inserted. Base: 7694 rules (917 with conclusion selected). Queue: 5408 rules.
20600 rules inserted. Base: 7723 rules (917 with conclusion selected). Queue: 5481 rules.
20800 rules inserted. Base: 7769 rules (917 with conclusion selected). Queue: 5556 rules.
21000 rules inserted. Base: 7764 rules (917 with conclusion selected). Queue: 5617 rules.
21200 rules inserted. Base: 7806 rules (917 with conclusion selected). Queue: 5655 rules.
21400 rules inserted. Base: 7848 rules (917 with conclusion selected). Queue: 5736 rules.
21600 rules inserted. Base: 7882 rules (917 with conclusion selected). Queue: 5802 rules.
21800 rules inserted. Base: 7924 rules (917 with conclusion selected). Queue: 5845 rules.
22000 rules inserted. Base: 7971 rules (917 with conclusion selected). Queue: 5925 rules.
22200 rules inserted. Base: 7999 rules (917 with conclusion selected). Queue: 5989 rules.
22400 rules inserted. Base: 8056 rules (917 with conclusion selected). Queue: 6025 rules.
22600 rules inserted. Base: 8080 rules (917 with conclusion selected). Queue: 6096 rules.
22800 rules inserted. Base: 8130 rules (917 with conclusion selected). Queue: 6170 rules.
23000 rules inserted. Base: 8172 rules (917 with conclusion selected). Queue: 6222 rules.
23200 rules inserted. Base: 8193 rules (917 with conclusion selected). Queue: 6294 rules.
23400 rules inserted. Base: 8246 rules (917 with conclusion selected). Queue: 6366 rules.
23600 rules inserted. Base: 8270 rules (917 with conclusion selected). Queue: 6436 rules.
23800 rules inserted. Base: 8316 rules (917 with conclusion selected). Queue: 6479 rules.
24000 rules inserted. Base: 8366 rules (917 with conclusion selected). Queue: 6561 rules.
24200 rules inserted. Base: 8394 rules (917 with conclusion selected). Queue: 6626 rules.
24400 rules inserted. Base: 8432 rules (917 with conclusion selected). Queue: 6675 rules.
24600 rules inserted. Base: 8474 rules (917 with conclusion selected). Queue: 6750 rules.
24800 rules inserted. Base: 8506 rules (917 with conclusion selected). Queue: 6820 rules.
25000 rules inserted. Base: 8551 rules (917 with conclusion selected). Queue: 6862 rules.
25200 rules inserted. Base: 8586 rules (917 with conclusion selected). Queue: 6929 rules.
25400 rules inserted. Base: 8638 rules (917 with conclusion selected). Queue: 6998 rules.
25600 rules inserted. Base: 8662 rules (917 with conclusion selected). Queue: 7049 rules.
25800 rules inserted. Base: 8622 rules (917 with conclusion selected). Queue: 7061 rules.
26000 rules inserted. Base: 8643 rules (917 with conclusion selected). Queue: 7113 rules.
26200 rules inserted. Base: 8691 rules (917 with conclusion selected). Queue: 7178 rules.
26400 rules inserted. Base: 8707 rules (917 with conclusion selected). Queue: 7233 rules.
26600 rules inserted. Base: 8717 rules (917 with conclusion selected). Queue: 7282 rules.
26800 rules inserted. Base: 8691 rules (917 with conclusion selected). Queue: 7303 rules.
27000 rules inserted. Base: 8707 rules (917 with conclusion selected). Queue: 7358 rules.
27200 rules inserted. Base: 8762 rules (917 with conclusion selected). Queue: 7420 rules.
27400 rules inserted. Base: 8775 rules (917 with conclusion selected). Queue: 7475 rules.
27600 rules inserted. Base: 8809 rules (917 with conclusion selected). Queue: 7508 rules.
27800 rules inserted. Base: 8824 rules (917 with conclusion selected). Queue: 7560 rules.
28000 rules inserted. Base: 8873 rules (917 with conclusion selected). Queue: 7625 rules.
28200 rules inserted. Base: 8889 rules (917 with conclusion selected). Queue: 7679 rules.
28400 rules inserted. Base: 8922 rules (917 with conclusion selected). Queue: 7717 rules.
28600 rules inserted. Base: 8942 rules (917 with conclusion selected). Queue: 7772 rules.
28800 rules inserted. Base: 8976 rules (917 with conclusion selected). Queue: 7831 rules.
29000 rules inserted. Base: 9013 rules (917 with conclusion selected). Queue: 7889 rules.
29200 rules inserted. Base: 9044 rules (917 with conclusion selected). Queue: 7924 rules.
29400 rules inserted. Base: 9066 rules (917 with conclusion selected). Queue: 7974 rules.
29600 rules inserted. Base: 9098 rules (917 with conclusion selected). Queue: 8041 rules.
29800 rules inserted. Base: 9124 rules (917 with conclusion selected). Queue: 8097 rules.
30000 rules inserted. Base: 9140 rules (917 with conclusion selected). Queue: 8151 rules.
30200 rules inserted. Base: 9175 rules (917 with conclusion selected). Queue: 8188 rules.
30400 rules inserted. Base: 9193 rules (917 with conclusion selected). Queue: 8244 rules.
30600 rules inserted. Base: 9247 rules (917 with conclusion selected). Queue: 8307 rules.
30800 rules inserted. Base: 9260 rules (917 with conclusion selected). Queue: 8362 rules.
31000 rules inserted. Base: 9294 rules (917 with conclusion selected). Queue: 8395 rules.
31200 rules inserted. Base: 9309 rules (917 with conclusion selected). Queue: 8447 rules.
31400 rules inserted. Base: 9358 rules (917 with conclusion selected). Queue: 8515 rules.
31600 rules inserted. Base: 9375 rules (917 with conclusion selected). Queue: 8569 rules.
31800 rules inserted. Base: 9410 rules (917 with conclusion selected). Queue: 8605 rules.
32000 rules inserted. Base: 9426 rules (917 with conclusion selected). Queue: 8660 rules.
32200 rules inserted. Base: 9461 rules (917 with conclusion selected). Queue: 8705 rules.
32400 rules inserted. Base: 9502 rules (917 with conclusion selected). Queue: 8754 rules.
32600 rules inserted. Base: 9514 rules (917 with conclusion selected). Queue: 8796 rules.
32800 rules inserted. Base: 9514 rules (917 with conclusion selected). Queue: 8770 rules.
33000 rules inserted. Base: 9526 rules (917 with conclusion selected). Queue: 8810 rules.
33200 rules inserted. Base: 9539 rules (917 with conclusion selected). Queue: 8852 rules.
33400 rules inserted. Base: 9596 rules (917 with conclusion selected). Queue: 8898 rules.
33600 rules inserted. Base: 9607 rules (917 with conclusion selected). Queue: 8956 rules.
33800 rules inserted. Base: 9630 rules (917 with conclusion selected). Queue: 9000 rules.
34000 rules inserted. Base: 9615 rules (917 with conclusion selected). Queue: 8986 rules.
34200 rules inserted. Base: 9626 rules (917 with conclusion selected). Queue: 9037 rules.
34400 rules inserted. Base: 9646 rules (917 with conclusion selected). Queue: 9089 rules.
34600 rules inserted. Base: 9701 rules (917 with conclusion selected). Queue: 9145 rules.
34800 rules inserted. Base: 9711 rules (917 with conclusion selected). Queue: 9185 rules.
35000 rules inserted. Base: 9742 rules (917 with conclusion selected). Queue: 9205 rules.
35200 rules inserted. Base: 9752 rules (917 with conclusion selected). Queue: 9244 rules.
35400 rules inserted. Base: 9768 rules (917 with conclusion selected). Queue: 9288 rules.
35600 rules inserted. Base: 9826 rules (917 with conclusion selected). Queue: 9346 rules.
35800 rules inserted. Base: 9835 rules (917 with conclusion selected). Queue: 9404 rules.
36000 rules inserted. Base: 9839 rules (917 with conclusion selected). Queue: 9449 rules.
36200 rules inserted. Base: 9871 rules (917 with conclusion selected). Queue: 9479 rules.
36400 rules inserted. Base: 9887 rules (917 with conclusion selected). Queue: 9535 rules.
36600 rules inserted. Base: 9920 rules (917 with conclusion selected). Queue: 9570 rules.
36800 rules inserted. Base: 9957 rules (917 with conclusion selected). Queue: 9626 rules.
37000 rules inserted. Base: 9971 rules (917 with conclusion selected). Queue: 9666 rules.
37200 rules inserted. Base: 9994 rules (917 with conclusion selected). Queue: 9682 rules.
37400 rules inserted. Base: 10006 rules (917 with conclusion selected). Queue: 9724 rules.
37600 rules inserted. Base: 10058 rules (917 with conclusion selected). Queue: 9758 rules.
37800 rules inserted. Base: 10079 rules (917 with conclusion selected). Queue: 9824 rules.
38000 rules inserted. Base: 10086 rules (917 with conclusion selected). Queue: 9869 rules.
38200 rules inserted. Base: 10123 rules (917 with conclusion selected). Queue: 9907 rules.
38400 rules inserted. Base: 10132 rules (917 with conclusion selected). Queue: 9955 rules.
38600 rules inserted. Base: 10144 rules (917 with conclusion selected). Queue: 10009 rules.
38800 rules inserted. Base: 10203 rules (917 with conclusion selected). Queue: 10047 rules.
39000 rules inserted. Base: 10209 rules (917 with conclusion selected). Queue: 10092 rules.
39200 rules inserted. Base: 10236 rules (917 with conclusion selected). Queue: 10117 rules.
39400 rules inserted. Base: 10257 rules (917 with conclusion selected). Queue: 10151 rules.
39600 rules inserted. Base: 10258 rules (917 with conclusion selected). Queue: 10190 rules.
39800 rules inserted. Base: 10325 rules (917 with conclusion selected). Queue: 10242 rules.
40000 rules inserted. Base: 10333 rules (917 with conclusion selected). Queue: 10290 rules.
40200 rules inserted. Base: 10347 rules (917 with conclusion selected). Queue: 10347 rules.
40400 rules inserted. Base: 10378 rules (917 with conclusion selected). Queue: 10374 rules.
40600 rules inserted. Base: 10387 rules (917 with conclusion selected). Queue: 10431 rules.
40800 rules inserted. Base: 10408 rules (917 with conclusion selected). Queue: 10478 rules.
41000 rules inserted. Base: 10458 rules (917 with conclusion selected). Queue: 10481 rules.
41200 rules inserted. Base: 10485 rules (917 with conclusion selected). Queue: 10497 rules.
41400 rules inserted. Base: 10506 rules (917 with conclusion selected). Queue: 10481 rules.
41600 rules inserted. Base: 10537 rules (917 with conclusion selected). Queue: 10427 rules.
41800 rules inserted. Base: 10560 rules (917 with conclusion selected). Queue: 10429 rules.
42000 rules inserted. Base: 10581 rules (917 with conclusion selected). Queue: 10419 rules.
42200 rules inserted. Base: 10638 rules (917 with conclusion selected). Queue: 10418 rules.
42400 rules inserted. Base: 10660 rules (917 with conclusion selected). Queue: 10441 rules.
42600 rules inserted. Base: 10685 rules (917 with conclusion selected). Queue: 10462 rules.
42800 rules inserted. Base: 10702 rules (917 with conclusion selected). Queue: 10428 rules.
43000 rules inserted. Base: 10728 rules (917 with conclusion selected). Queue: 10422 rules.
43200 rules inserted. Base: 10754 rules (917 with conclusion selected). Queue: 10442 rules.
43400 rules inserted. Base: 10773 rules (917 with conclusion selected). Queue: 10467 rules.
43600 rules inserted. Base: 10848 rules (917 with conclusion selected). Queue: 10456 rules.
43800 rules inserted. Base: 10864 rules (917 with conclusion selected). Queue: 10487 rules.
44000 rules inserted. Base: 10884 rules (917 with conclusion selected). Queue: 10472 rules.
44200 rules inserted. Base: 10913 rules (917 with conclusion selected). Queue: 10458 rules.
44400 rules inserted. Base: 10940 rules (917 with conclusion selected). Queue: 10441 rules.
44600 rules inserted. Base: 10957 rules (917 with conclusion selected). Queue: 10426 rules.
44800 rules inserted. Base: 11026 rules (917 with conclusion selected). Queue: 10469 rules.
45000 rules inserted. Base: 11051 rules (917 with conclusion selected). Queue: 10489 rules.
45200 rules inserted. Base: 11071 rules (917 with conclusion selected). Queue: 10511 rules.
45400 rules inserted. Base: 11086 rules (917 with conclusion selected). Queue: 10499 rules.
45600 rules inserted. Base: 11111 rules (917 with conclusion selected). Queue: 10492 rules.
45800 rules inserted. Base: 11138 rules (917 with conclusion selected). Queue: 10513 rules.
46000 rules inserted. Base: 11156 rules (917 with conclusion selected). Queue: 10537 rules.
46200 rules inserted. Base: 11226 rules (917 with conclusion selected). Queue: 10538 rules.
46400 rules inserted. Base: 11241 rules (917 with conclusion selected). Queue: 10556 rules.
46600 rules inserted. Base: 11269 rules (917 with conclusion selected). Queue: 10539 rules.
46800 rules inserted. Base: 11298 rules (917 with conclusion selected). Queue: 10527 rules.
47000 rules inserted. Base: 11318 rules (917 with conclusion selected). Queue: 10511 rules.
47200 rules inserted. Base: 11336 rules (917 with conclusion selected). Queue: 10498 rules.
47400 rules inserted. Base: 11399 rules (917 with conclusion selected). Queue: 10533 rules.
47600 rules inserted. Base: 11423 rules (917 with conclusion selected). Queue: 10527 rules.
47800 rules inserted. Base: 11443 rules (917 with conclusion selected). Queue: 10543 rules.
48000 rules inserted. Base: 11467 rules (917 with conclusion selected). Queue: 10559 rules.
48200 rules inserted. Base: 11489 rules (917 with conclusion selected). Queue: 10560 rules.
48400 rules inserted. Base: 11515 rules (917 with conclusion selected). Queue: 10580 rules.
48600 rules inserted. Base: 11538 rules (917 with conclusion selected). Queue: 10602 rules.
48800 rules inserted. Base: 11597 rules (917 with conclusion selected). Queue: 10603 rules.
49000 rules inserted. Base: 11617 rules (917 with conclusion selected). Queue: 10588 rules.
49200 rules inserted. Base: 11636 rules (917 with conclusion selected). Queue: 10573 rules.
49400 rules inserted. Base: 11673 rules (917 with conclusion selected). Queue: 10557 rules.
49600 rules inserted. Base: 11689 rules (917 with conclusion selected). Queue: 10538 rules.
49800 rules inserted. Base: 11743 rules (917 with conclusion selected). Queue: 10527 rules.
50000 rules inserted. Base: 11772 rules (917 with conclusion selected). Queue: 10567 rules.
50200 rules inserted. Base: 11794 rules (917 with conclusion selected). Queue: 10592 rules.
50400 rules inserted. Base: 11817 rules (917 with conclusion selected). Queue: 10610 rules.
50600 rules inserted. Base: 11843 rules (917 with conclusion selected). Queue: 10601 rules.
50800 rules inserted. Base: 11865 rules (917 with conclusion selected). Queue: 10625 rules.
51000 rules inserted. Base: 11895 rules (917 with conclusion selected). Queue: 10630 rules.
51200 rules inserted. Base: 11919 rules (917 with conclusion selected). Queue: 10639 rules.
51400 rules inserted. Base: 11944 rules (917 with conclusion selected). Queue: 10613 rules.
51600 rules inserted. Base: 11985 rules (917 with conclusion selected). Queue: 10595 rules.
51800 rules inserted. Base: 12009 rules (917 with conclusion selected). Queue: 10525 rules.
52000 rules inserted. Base: 12035 rules (917 with conclusion selected). Queue: 10430 rules.
52200 rules inserted. Base: 12063 rules (917 with conclusion selected). Queue: 10361 rules.
52400 rules inserted. Base: 12102 rules (917 with conclusion selected). Queue: 10327 rules.
52600 rules inserted. Base: 12124 rules (917 with conclusion selected). Queue: 10324 rules.
52800 rules inserted. Base: 12149 rules (917 with conclusion selected). Queue: 10311 rules.
53000 rules inserted. Base: 12177 rules (917 with conclusion selected). Queue: 10299 rules.
53200 rules inserted. Base: 12191 rules (917 with conclusion selected). Queue: 10237 rules.
53400 rules inserted. Base: 12220 rules (917 with conclusion selected). Queue: 10201 rules.
53600 rules inserted. Base: 12240 rules (917 with conclusion selected). Queue: 10187 rules.
53800 rules inserted. Base: 12267 rules (917 with conclusion selected). Queue: 10170 rules.
54000 rules inserted. Base: 12326 rules (917 with conclusion selected). Queue: 10119 rules.
54200 rules inserted. Base: 12338 rules (917 with conclusion selected). Queue: 10120 rules.
54400 rules inserted. Base: 12378 rules (917 with conclusion selected). Queue: 10099 rules.
54600 rules inserted. Base: 12407 rules (917 with conclusion selected). Queue: 10012 rules.
54800 rules inserted. Base: 12429 rules (917 with conclusion selected). Queue: 9940 rules.
55000 rules inserted. Base: 12460 rules (917 with conclusion selected). Queue: 9881 rules.
55200 rules inserted. Base: 12510 rules (917 with conclusion selected). Queue: 9901 rules.
55400 rules inserted. Base: 12540 rules (917 with conclusion selected). Queue: 9879 rules.
55600 rules inserted. Base: 12550 rules (917 with conclusion selected). Queue: 9862 rules.
55800 rules inserted. Base: 12577 rules (917 with conclusion selected). Queue: 9850 rules.
56000 rules inserted. Base: 12607 rules (917 with conclusion selected). Queue: 9815 rules.
56200 rules inserted. Base: 12632 rules (917 with conclusion selected). Queue: 9792 rules.
56400 rules inserted. Base: 12647 rules (917 with conclusion selected). Queue: 9740 rules.
56600 rules inserted. Base: 12698 rules (917 with conclusion selected). Queue: 9697 rules.
56800 rules inserted. Base: 12719 rules (917 with conclusion selected). Queue: 9690 rules.
57000 rules inserted. Base: 12739 rules (917 with conclusion selected). Queue: 9625 rules.
57200 rules inserted. Base: 12782 rules (917 with conclusion selected). Queue: 9581 rules.
57400 rules inserted. Base: 12808 rules (917 with conclusion selected). Queue: 9513 rules.
57600 rules inserted. Base: 12830 rules (917 with conclusion selected). Queue: 9453 rules.
57800 rules inserted. Base: 12873 rules (917 with conclusion selected). Queue: 9461 rules.
58000 rules inserted. Base: 12899 rules (917 with conclusion selected). Queue: 9448 rules.
58200 rules inserted. Base: 12917 rules (917 with conclusion selected). Queue: 9411 rules.
58400 rules inserted. Base: 12940 rules (917 with conclusion selected). Queue: 9381 rules.
58600 rules inserted. Base: 12969 rules (917 with conclusion selected). Queue: 9343 rules.
58800 rules inserted. Base: 12990 rules (917 with conclusion selected). Queue: 9326 rules.
59000 rules inserted. Base: 13010 rules (917 with conclusion selected). Queue: 9308 rules.
59200 rules inserted. Base: 13073 rules (917 with conclusion selected). Queue: 9267 rules.
59400 rules inserted. Base: 13079 rules (917 with conclusion selected). Queue: 9252 rules.
59600 rules inserted. Base: 13106 rules (917 with conclusion selected). Queue: 9187 rules.
59800 rules inserted. Base: 13148 rules (917 with conclusion selected). Queue: 9103 rules.
60000 rules inserted. Base: 13173 rules (917 with conclusion selected). Queue: 9036 rules.
60200 rules inserted. Base: 13214 rules (917 with conclusion selected). Queue: 9000 rules.
60400 rules inserted. Base: 13235 rules (917 with conclusion selected). Queue: 8989 rules.
60600 rules inserted. Base: 13262 rules (917 with conclusion selected). Queue: 8980 rules.
60800 rules inserted. Base: 13284 rules (917 with conclusion selected). Queue: 8964 rules.
61000 rules inserted. Base: 13302 rules (917 with conclusion selected). Queue: 8949 rules.
61200 rules inserted. Base: 13332 rules (917 with conclusion selected). Queue: 8912 rules.
61400 rules inserted. Base: 13356 rules (917 with conclusion selected). Queue: 8892 rules.
61600 rules inserted. Base: 13369 rules (917 with conclusion selected). Queue: 8873 rules.
61800 rules inserted. Base: 13385 rules (917 with conclusion selected). Queue: 8815 rules.
62000 rules inserted. Base: 13402 rules (917 with conclusion selected). Queue: 8784 rules.
62200 rules inserted. Base: 13468 rules (917 with conclusion selected). Queue: 8763 rules.
62400 rules inserted. Base: 13503 rules (917 with conclusion selected). Queue: 8734 rules.
62600 rules inserted. Base: 13521 rules (917 with conclusion selected). Queue: 8734 rules.
62800 rules inserted. Base: 13557 rules (917 with conclusion selected). Queue: 8683 rules.
63000 rules inserted. Base: 13553 rules (917 with conclusion selected). Queue: 8685 rules.
63200 rules inserted. Base: 13586 rules (917 with conclusion selected). Queue: 8686 rules.
63400 rules inserted. Base: 13610 rules (917 with conclusion selected). Queue: 8687 rules.
63600 rules inserted. Base: 13645 rules (917 with conclusion selected). Queue: 8692 rules.
63800 rules inserted. Base: 13674 rules (917 with conclusion selected). Queue: 8692 rules.
64000 rules inserted. Base: 13707 rules (917 with conclusion selected). Queue: 8693 rules.
64200 rules inserted. Base: 13754 rules (917 with conclusion selected). Queue: 8670 rules.
64400 rules inserted. Base: 13811 rules (917 with conclusion selected). Queue: 8648 rules.
64600 rules inserted. Base: 13855 rules (917 with conclusion selected). Queue: 8621 rules.
64800 rules inserted. Base: 13881 rules (917 with conclusion selected). Queue: 8606 rules.
65000 rules inserted. Base: 13958 rules (917 with conclusion selected). Queue: 8586 rules.
65200 rules inserted. Base: 13970 rules (917 with conclusion selected). Queue: 8591 rules.
65400 rules inserted. Base: 14005 rules (917 with conclusion selected). Queue: 8588 rules.
65600 rules inserted. Base: 14023 rules (917 with conclusion selected). Queue: 8605 rules.
65800 rules inserted. Base: 14059 rules (917 with conclusion selected). Queue: 8602 rules.
66000 rules inserted. Base: 14087 rules (917 with conclusion selected). Queue: 8599 rules.
66200 rules inserted. Base: 14108 rules (917 with conclusion selected). Queue: 8596 rules.
66400 rules inserted. Base: 14165 rules (917 with conclusion selected). Queue: 8561 rules.
66600 rules inserted. Base: 14202 rules (917 with conclusion selected). Queue: 8542 rules.
66800 rules inserted. Base: 14267 rules (917 with conclusion selected). Queue: 8513 rules.
67000 rules inserted. Base: 14294 rules (917 with conclusion selected). Queue: 8495 rules.
67200 rules inserted. Base: 14329 rules (917 with conclusion selected). Queue: 8487 rules.
67400 rules inserted. Base: 14358 rules (917 with conclusion selected). Queue: 8490 rules.
67600 rules inserted. Base: 14393 rules (917 with conclusion selected). Queue: 8492 rules.
67800 rules inserted. Base: 14417 rules (917 with conclusion selected). Queue: 8484 rules.
68000 rules inserted. Base: 14446 rules (917 with conclusion selected). Queue: 8496 rules.
68200 rules inserted. Base: 14468 rules (917 with conclusion selected). Queue: 8500 rules.
68400 rules inserted. Base: 14523 rules (917 with conclusion selected). Queue: 8460 rules.
68600 rules inserted. Base: 14562 rules (917 with conclusion selected). Queue: 8445 rules.
68800 rules inserted. Base: 14626 rules (917 with conclusion selected). Queue: 8416 rules.
69000 rules inserted. Base: 14645 rules (917 with conclusion selected). Queue: 8403 rules.
69200 rules inserted. Base: 14701 rules (917 with conclusion selected). Queue: 8375 rules.
69400 rules inserted. Base: 14715 rules (917 with conclusion selected). Queue: 8380 rules.
69600 rules inserted. Base: 14744 rules (917 with conclusion selected). Queue: 8390 rules.
69800 rules inserted. Base: 14777 rules (917 with conclusion selected). Queue: 8390 rules.
70000 rules inserted. Base: 14821 rules (917 with conclusion selected). Queue: 8385 rules.
70200 rules inserted. Base: 14832 rules (917 with conclusion selected). Queue: 8389 rules.
70400 rules inserted. Base: 14860 rules (917 with conclusion selected). Queue: 8397 rules.
70600 rules inserted. Base: 14833 rules (917 with conclusion selected). Queue: 8311 rules.
70800 rules inserted. Base: 14881 rules (917 with conclusion selected). Queue: 8318 rules.
71000 rules inserted. Base: 14940 rules (917 with conclusion selected). Queue: 8314 rules.
71200 rules inserted. Base: 14981 rules (917 with conclusion selected). Queue: 8322 rules.
71400 rules inserted. Base: 14956 rules (917 with conclusion selected). Queue: 8289 rules.
71600 rules inserted. Base: 14980 rules (917 with conclusion selected). Queue: 8257 rules.
71800 rules inserted. Base: 15019 rules (917 with conclusion selected). Queue: 8294 rules.
72000 rules inserted. Base: 15060 rules (917 with conclusion selected). Queue: 8330 rules.
72200 rules inserted. Base: 15093 rules (917 with conclusion selected). Queue: 8353 rules.
72400 rules inserted. Base: 15120 rules (917 with conclusion selected). Queue: 8371 rules.
72600 rules inserted. Base: 15155 rules (917 with conclusion selected). Queue: 8392 rules.
72800 rules inserted. Base: 15210 rules (917 with conclusion selected). Queue: 8354 rules.
73000 rules inserted. Base: 15271 rules (917 with conclusion selected). Queue: 8375 rules.
73200 rules inserted. Base: 15335 rules (917 with conclusion selected). Queue: 8370 rules.
73400 rules inserted. Base: 15366 rules (917 with conclusion selected). Queue: 8371 rules.
73600 rules inserted. Base: 15426 rules (917 with conclusion selected). Queue: 8351 rules.
73800 rules inserted. Base: 15459 rules (917 with conclusion selected). Queue: 8392 rules.
74000 rules inserted. Base: 15495 rules (917 with conclusion selected). Queue: 8425 rules.
74200 rules inserted. Base: 15539 rules (917 with conclusion selected). Queue: 8462 rules.
74400 rules inserted. Base: 15567 rules (917 with conclusion selected). Queue: 8463 rules.
74600 rules inserted. Base: 15596 rules (917 with conclusion selected). Queue: 8491 rules.
74800 rules inserted. Base: 15664 rules (917 with conclusion selected). Queue: 8462 rules.
75000 rules inserted. Base: 15729 rules (917 with conclusion selected). Queue: 8488 rules.
75200 rules inserted. Base: 15788 rules (917 with conclusion selected). Queue: 8483 rules.
75400 rules inserted. Base: 15823 rules (917 with conclusion selected). Queue: 8455 rules.
75600 rules inserted. Base: 15859 rules (917 with conclusion selected). Queue: 8465 rules.
75800 rules inserted. Base: 15919 rules (917 with conclusion selected). Queue: 8510 rules.
76000 rules inserted. Base: 15941 rules (917 with conclusion selected). Queue: 8538 rules.
76200 rules inserted. Base: 15974 rules (917 with conclusion selected). Queue: 8561 rules.
76400 rules inserted. Base: 15999 rules (917 with conclusion selected). Queue: 8579 rules.
76600 rules inserted. Base: 16059 rules (917 with conclusion selected). Queue: 8606 rules.
76800 rules inserted. Base: 16118 rules (917 with conclusion selected). Queue: 8568 rules.
77000 rules inserted. Base: 16163 rules (917 with conclusion selected). Queue: 8577 rules.
77200 rules inserted. Base: 16219 rules (917 with conclusion selected). Queue: 8557 rules.
77400 rules inserted. Base: 16287 rules (917 with conclusion selected). Queue: 8551 rules.
77600 rules inserted. Base: 16308 rules (917 with conclusion selected). Queue: 8582 rules.
77800 rules inserted. Base: 16344 rules (917 with conclusion selected). Queue: 8619 rules.
78000 rules inserted. Base: 16379 rules (917 with conclusion selected). Queue: 8649 rules.
78200 rules inserted. Base: 16439 rules (917 with conclusion selected). Queue: 8678 rules.
78400 rules inserted. Base: 16446 rules (917 with conclusion selected). Queue: 8682 rules.
78600 rules inserted. Base: 16475 rules (917 with conclusion selected). Queue: 8681 rules.
78800 rules inserted. Base: 16429 rules (917 with conclusion selected). Queue: 8562 rules.
79000 rules inserted. Base: 16493 rules (917 with conclusion selected). Queue: 8656 rules.
79200 rules inserted. Base: 16555 rules (917 with conclusion selected). Queue: 8694 rules.
79400 rules inserted. Base: 16585 rules (917 with conclusion selected). Queue: 8729 rules.
79600 rules inserted. Base: 16586 rules (917 with conclusion selected). Queue: 8673 rules.
79800 rules inserted. Base: 16577 rules (917 with conclusion selected). Queue: 8655 rules.
80000 rules inserted. Base: 16614 rules (917 with conclusion selected). Queue: 8717 rules.
80200 rules inserted. Base: 16649 rules (917 with conclusion selected). Queue: 8783 rules.
80400 rules inserted. Base: 16681 rules (917 with conclusion selected). Queue: 8850 rules.
80600 rules inserted. Base: 16709 rules (917 with conclusion selected). Queue: 8892 rules.
80800 rules inserted. Base: 16732 rules (917 with conclusion selected). Queue: 8935 rules.
81000 rules inserted. Base: 16774 rules (917 with conclusion selected). Queue: 8967 rules.
81200 rules inserted. Base: 16839 rules (917 with conclusion selected). Queue: 8985 rules.
81400 rules inserted. Base: 16911 rules (917 with conclusion selected). Queue: 9059 rules.
81600 rules inserted. Base: 16949 rules (917 with conclusion selected). Queue: 9078 rules.
81800 rules inserted. Base: 16998 rules (917 with conclusion selected). Queue: 9080 rules.
82000 rules inserted. Base: 17043 rules (917 with conclusion selected). Queue: 9147 rules.
82200 rules inserted. Base: 17075 rules (917 with conclusion selected). Queue: 9217 rules.
82400 rules inserted. Base: 17120 rules (917 with conclusion selected). Queue: 9285 rules.
82600 rules inserted. Base: 17142 rules (917 with conclusion selected). Queue: 9329 rules.
82800 rules inserted. Base: 17166 rules (917 with conclusion selected). Queue: 9373 rules.
83000 rules inserted. Base: 17189 rules (917 with conclusion selected). Queue: 9419 rules.
83200 rules inserted. Base: 17236 rules (917 with conclusion selected). Queue: 9453 rules.
83400 rules inserted. Base: 17325 rules (917 with conclusion selected). Queue: 9544 rules.
83600 rules inserted. Base: 17372 rules (917 with conclusion selected). Queue: 9557 rules.
83800 rules inserted. Base: 17415 rules (917 with conclusion selected). Queue: 9594 rules.
84000 rules inserted. Base: 17451 rules (917 with conclusion selected). Queue: 9664 rules.
84200 rules inserted. Base: 17497 rules (917 with conclusion selected). Queue: 9735 rules.
84400 rules inserted. Base: 17511 rules (917 with conclusion selected). Queue: 9805 rules.
84600 rules inserted. Base: 17550 rules (917 with conclusion selected). Queue: 9843 rules.
84800 rules inserted. Base: 17572 rules (917 with conclusion selected). Queue: 9890 rules.
85000 rules inserted. Base: 17597 rules (917 with conclusion selected). Queue: 9932 rules.
85200 rules inserted. Base: 17660 rules (917 with conclusion selected). Queue: 9973 rules.
85400 rules inserted. Base: 17722 rules (917 with conclusion selected). Queue: 10060 rules.
85600 rules inserted. Base: 17787 rules (917 with conclusion selected). Queue: 10070 rules.
85800 rules inserted. Base: 17829 rules (917 with conclusion selected). Queue: 10117 rules.
86000 rules inserted. Base: 17854 rules (917 with conclusion selected). Queue: 10188 rules.
86200 rules inserted. Base: 17888 rules (917 with conclusion selected). Queue: 10252 rules.
86400 rules inserted. Base: 17933 rules (917 with conclusion selected). Queue: 10316 rules.
86600 rules inserted. Base: 17957 rules (917 with conclusion selected). Queue: 10366 rules.
86800 rules inserted. Base: 17978 rules (917 with conclusion selected). Queue: 10407 rules.
87000 rules inserted. Base: 18004 rules (917 with conclusion selected). Queue: 10451 rules.
87200 rules inserted. Base: 18038 rules (917 with conclusion selected). Queue: 10452 rules.
87400 rules inserted. Base: 18027 rules (917 with conclusion selected). Queue: 10492 rules.
87600 rules inserted. Base: 18073 rules (917 with conclusion selected). Queue: 10593 rules.
87800 rules inserted. Base: 18148 rules (917 with conclusion selected). Queue: 10607 rules.
88000 rules inserted. Base: 18171 rules (917 with conclusion selected). Queue: 10566 rules.
88200 rules inserted. Base: 18193 rules (917 with conclusion selected). Queue: 10581 rules.
88400 rules inserted. Base: 18171 rules (917 with conclusion selected). Queue: 10606 rules.
88600 rules inserted. Base: 18216 rules (917 with conclusion selected). Queue: 10694 rules.
88800 rules inserted. Base: 18225 rules (917 with conclusion selected). Queue: 10731 rules.
89000 rules inserted. Base: 18255 rules (917 with conclusion selected). Queue: 10790 rules.
89200 rules inserted. Base: 18283 rules (917 with conclusion selected). Queue: 10864 rules.
89400 rules inserted. Base: 18308 rules (917 with conclusion selected). Queue: 10874 rules.
89600 rules inserted. Base: 18337 rules (917 with conclusion selected). Queue: 10878 rules.
89800 rules inserted. Base: 18361 rules (917 with conclusion selected). Queue: 10882 rules.
90000 rules inserted. Base: 18394 rules (917 with conclusion selected). Queue: 10869 rules.
90200 rules inserted. Base: 18445 rules (917 with conclusion selected). Queue: 10997 rules.
90400 rules inserted. Base: 18498 rules (917 with conclusion selected). Queue: 11117 rules.
90600 rules inserted. Base: 18567 rules (917 with conclusion selected). Queue: 11043 rules.
90800 rules inserted. Base: 18585 rules (917 with conclusion selected). Queue: 11055 rules.
91000 rules inserted. Base: 18628 rules (917 with conclusion selected). Queue: 11110 rules.
91200 rules inserted. Base: 18665 rules (917 with conclusion selected). Queue: 11198 rules.
91400 rules inserted. Base: 18716 rules (917 with conclusion selected). Queue: 11280 rules.
91600 rules inserted. Base: 18726 rules (917 with conclusion selected). Queue: 11322 rules.
91800 rules inserted. Base: 18743 rules (917 with conclusion selected). Queue: 11386 rules.
92000 rules inserted. Base: 18775 rules (917 with conclusion selected). Queue: 11390 rules.
92200 rules inserted. Base: 18797 rules (917 with conclusion selected). Queue: 11395 rules.
92400 rules inserted. Base: 18824 rules (917 with conclusion selected). Queue: 11400 rules.
92600 rules inserted. Base: 18869 rules (917 with conclusion selected). Queue: 11462 rules.
92800 rules inserted. Base: 18921 rules (917 with conclusion selected). Queue: 11576 rules.
93000 rules inserted. Base: 18982 rules (917 with conclusion selected). Queue: 11588 rules.
93200 rules inserted. Base: 19017 rules (917 with conclusion selected). Queue: 11546 rules.
93400 rules inserted. Base: 19052 rules (917 with conclusion selected). Queue: 11624 rules.
93600 rules inserted. Base: 19084 rules (917 with conclusion selected). Queue: 11699 rules.
93800 rules inserted. Base: 19097 rules (917 with conclusion selected). Queue: 11741 rules.
94000 rules inserted. Base: 19132 rules (917 with conclusion selected). Queue: 11808 rules.
94200 rules inserted. Base: 19161 rules (917 with conclusion selected). Queue: 11883 rules.
94400 rules inserted. Base: 19185 rules (917 with conclusion selected). Queue: 11892 rules.
94600 rules inserted. Base: 19215 rules (917 with conclusion selected). Queue: 11900 rules.
94800 rules inserted. Base: 19238 rules (917 with conclusion selected). Queue: 11904 rules.
95000 rules inserted. Base: 19282 rules (917 with conclusion selected). Queue: 11920 rules.
95200 rules inserted. Base: 19336 rules (917 with conclusion selected). Queue: 12038 rules.
95400 rules inserted. Base: 19383 rules (917 with conclusion selected). Queue: 12117 rules.
95600 rules inserted. Base: 19438 rules (917 with conclusion selected). Queue: 12049 rules.
95800 rules inserted. Base: 19469 rules (917 with conclusion selected). Queue: 12107 rules.
96000 rules inserted. Base: 19476 rules (917 with conclusion selected). Queue: 12159 rules.
96200 rules inserted. Base: 19516 rules (917 with conclusion selected). Queue: 12232 rules.
96400 rules inserted. Base: 19544 rules (917 with conclusion selected). Queue: 12312 rules.
96600 rules inserted. Base: 19570 rules (917 with conclusion selected). Queue: 12389 rules.
96800 rules inserted. Base: 19607 rules (917 with conclusion selected). Queue: 12397 rules.
97000 rules inserted. Base: 19640 rules (917 with conclusion selected). Queue: 12404 rules.
97200 rules inserted. Base: 19658 rules (917 with conclusion selected). Queue: 12413 rules.
97400 rules inserted. Base: 19678 rules (917 with conclusion selected). Queue: 12421 rules.
97600 rules inserted. Base: 19673 rules (917 with conclusion selected). Queue: 12323 rules.
97800 rules inserted. Base: 19728 rules (917 with conclusion selected). Queue: 12472 rules.
98000 rules inserted. Base: 19774 rules (917 with conclusion selected). Queue: 12581 rules.
98200 rules inserted. Base: 19804 rules (917 with conclusion selected). Queue: 12671 rules.
98400 rules inserted. Base: 19846 rules (917 with conclusion selected). Queue: 12609 rules.
98600 rules inserted. Base: 19861 rules (917 with conclusion selected). Queue: 12604 rules.
98800 rules inserted. Base: 19892 rules (917 with conclusion selected). Queue: 12552 rules.
99000 rules inserted. Base: 19879 rules (917 with conclusion selected). Queue: 12627 rules.
99200 rules inserted. Base: 19933 rules (917 with conclusion selected). Queue: 12720 rules.
99400 rules inserted. Base: 19927 rules (917 with conclusion selected). Queue: 12763 rules.
99600 rules inserted. Base: 19973 rules (917 with conclusion selected). Queue: 12842 rules.
99800 rules inserted. Base: 19959 rules (917 with conclusion selected). Queue: 12852 rules.
100000 rules inserted. Base: 19997 rules (917 with conclusion selected). Queue: 12922 rules.
100200 rules inserted. Base: 20023 rules (917 with conclusion selected). Queue: 12904 rules.
100400 rules inserted. Base: 20046 rules (917 with conclusion selected). Queue: 12889 rules.
100600 rules inserted. Base: 20073 rules (917 with conclusion selected). Queue: 12884 rules.
100800 rules inserted. Base: 20091 rules (917 with conclusion selected). Queue: 12876 rules.
101000 rules inserted. Base: 20137 rules (917 with conclusion selected). Queue: 12984 rules.
101200 rules inserted. Base: 20202 rules (917 with conclusion selected). Queue: 13117 rules.
101400 rules inserted. Base: 20237 rules (917 with conclusion selected). Queue: 13206 rules.
101600 rules inserted. Base: 20287 rules (917 with conclusion selected). Queue: 13162 rules.
101800 rules inserted. Base: 20316 rules (917 with conclusion selected). Queue: 13151 rules.
102000 rules inserted. Base: 20349 rules (917 with conclusion selected). Queue: 13281 rules.
102200 rules inserted. Base: 20397 rules (917 with conclusion selected). Queue: 13325 rules.
102400 rules inserted. Base: 20391 rules (917 with conclusion selected). Queue: 13399 rules.
102600 rules inserted. Base: 20454 rules (917 with conclusion selected). Queue: 13467 rules.
102800 rules inserted. Base: 20435 rules (917 with conclusion selected). Queue: 13498 rules.
103000 rules inserted. Base: 20465 rules (917 with conclusion selected). Queue: 13572 rules.
103200 rules inserted. Base: 20486 rules (917 with conclusion selected). Queue: 13563 rules.
103400 rules inserted. Base: 20511 rules (917 with conclusion selected). Queue: 13557 rules.
103600 rules inserted. Base: 20526 rules (917 with conclusion selected). Queue: 13550 rules.
103800 rules inserted. Base: 20564 rules (917 with conclusion selected). Queue: 13533 rules.
104000 rules inserted. Base: 20624 rules (917 with conclusion selected). Queue: 13637 rules.
104200 rules inserted. Base: 20650 rules (917 with conclusion selected). Queue: 13778 rules.
104400 rules inserted. Base: 20683 rules (917 with conclusion selected). Queue: 13878 rules.
104600 rules inserted. Base: 20733 rules (917 with conclusion selected). Queue: 13834 rules.
104800 rules inserted. Base: 20748 rules (917 with conclusion selected). Queue: 13828 rules.
105000 rules inserted. Base: 20776 rules (917 with conclusion selected). Queue: 13970 rules.
105200 rules inserted. Base: 20838 rules (917 with conclusion selected). Queue: 14025 rules.
105400 rules inserted. Base: 20815 rules (917 with conclusion selected). Queue: 14098 rules.
105600 rules inserted. Base: 20902 rules (917 with conclusion selected). Queue: 14173 rules.
105800 rules inserted. Base: 20845 rules (917 with conclusion selected). Queue: 14197 rules.
106000 rules inserted. Base: 20877 rules (917 with conclusion selected). Queue: 14276 rules.
106200 rules inserted. Base: 20905 rules (917 with conclusion selected). Queue: 14258 rules.
106400 rules inserted. Base: 20929 rules (917 with conclusion selected). Queue: 14241 rules.
106600 rules inserted. Base: 20955 rules (917 with conclusion selected). Queue: 14224 rules.
106800 rules inserted. Base: 20979 rules (917 with conclusion selected). Queue: 14220 rules.
107000 rules inserted. Base: 21033 rules (917 with conclusion selected). Queue: 14368 rules.
107200 rules inserted. Base: 21072 rules (917 with conclusion selected). Queue: 14499 rules.
107400 rules inserted. Base: 21129 rules (917 with conclusion selected). Queue: 14602 rules.
107600 rules inserted. Base: 21151 rules (917 with conclusion selected). Queue: 14519 rules.
107800 rules inserted. Base: 21196 rules (917 with conclusion selected). Queue: 14567 rules.
108000 rules inserted. Base: 21190 rules (917 with conclusion selected). Queue: 14656 rules.
108200 rules inserted. Base: 21247 rules (917 with conclusion selected). Queue: 14762 rules.
108400 rules inserted. Base: 21228 rules (917 with conclusion selected). Queue: 14804 rules.
108600 rules inserted. Base: 21248 rules (917 with conclusion selected). Queue: 14888 rules.
108800 rules inserted. Base: 21293 rules (917 with conclusion selected). Queue: 14912 rules.
109000 rules inserted. Base: 21282 rules (917 with conclusion selected). Queue: 14965 rules.
109200 rules inserted. Base: 21315 rules (917 with conclusion selected). Queue: 14950 rules.
109400 rules inserted. Base: 21343 rules (917 with conclusion selected). Queue: 14941 rules.
109600 rules inserted. Base: 21367 rules (917 with conclusion selected). Queue: 14929 rules.
109800 rules inserted. Base: 21394 rules (917 with conclusion selected). Queue: 14906 rules.
110000 rules inserted. Base: 21480 rules (917 with conclusion selected). Queue: 15039 rules.
110200 rules inserted. Base: 21546 rules (917 with conclusion selected). Queue: 15198 rules.
110400 rules inserted. Base: 21587 rules (917 with conclusion selected). Queue: 15327 rules.
110600 rules inserted. Base: 21690 rules (917 with conclusion selected). Queue: 15374 rules.
110800 rules inserted. Base: 21719 rules (917 with conclusion selected). Queue: 15381 rules.
111000 rules inserted. Base: 21761 rules (917 with conclusion selected). Queue: 15363 rules.
111200 rules inserted. Base: 21774 rules (917 with conclusion selected). Queue: 15348 rules.
111400 rules inserted. Base: 21876 rules (917 with conclusion selected). Queue: 15487 rules.
111600 rules inserted. Base: 21885 rules (917 with conclusion selected). Queue: 15589 rules.
111800 rules inserted. Base: 21972 rules (917 with conclusion selected). Queue: 15622 rules.
112000 rules inserted. Base: 21966 rules (917 with conclusion selected). Queue: 15752 rules.
112200 rules inserted. Base: 21999 rules (917 with conclusion selected). Queue: 15753 rules.
112400 rules inserted. Base: 22140 rules (917 with conclusion selected). Queue: 15788 rules.
112600 rules inserted. Base: 22091 rules (917 with conclusion selected). Queue: 15800 rules.
112800 rules inserted. Base: 22205 rules (917 with conclusion selected). Queue: 15775 rules.
113000 rules inserted. Base: 22179 rules (917 with conclusion selected). Queue: 15783 rules.
113200 rules inserted. Base: 22206 rules (917 with conclusion selected). Queue: 15755 rules.
113400 rules inserted. Base: 22233 rules (917 with conclusion selected). Queue: 15727 rules.
113600 rules inserted. Base: 22258 rules (917 with conclusion selected). Queue: 15698 rules.
113800 rules inserted. Base: 22380 rules (917 with conclusion selected). Queue: 15779 rules.
114000 rules inserted. Base: 22366 rules (917 with conclusion selected). Queue: 15946 rules.
114200 rules inserted. Base: 22485 rules (917 with conclusion selected). Queue: 16080 rules.
114400 rules inserted. Base: 22510 rules (917 with conclusion selected). Queue: 16119 rules.
114600 rules inserted. Base: 22540 rules (917 with conclusion selected). Queue: 16131 rules.
114800 rules inserted. Base: 22574 rules (917 with conclusion selected). Queue: 16114 rules.
115000 rules inserted. Base: 22630 rules (917 with conclusion selected). Queue: 16145 rules.
115200 rules inserted. Base: 22736 rules (917 with conclusion selected). Queue: 16344 rules.
115400 rules inserted. Base: 22681 rules (917 with conclusion selected). Queue: 16368 rules.
115600 rules inserted. Base: 22759 rules (917 with conclusion selected). Queue: 16436 rules.
115800 rules inserted. Base: 22761 rules (917 with conclusion selected). Queue: 16497 rules.
116000 rules inserted. Base: 22841 rules (917 with conclusion selected). Queue: 16497 rules.
116200 rules inserted. Base: 22843 rules (917 with conclusion selected). Queue: 16528 rules.
116400 rules inserted. Base: 22919 rules (917 with conclusion selected). Queue: 16498 rules.
116600 rules inserted. Base: 22916 rules (917 with conclusion selected). Queue: 16527 rules.
116800 rules inserted. Base: 22943 rules (917 with conclusion selected). Queue: 16498 rules.
117000 rules inserted. Base: 22970 rules (917 with conclusion selected). Queue: 16468 rules.
117200 rules inserted. Base: 22994 rules (917 with conclusion selected). Queue: 16439 rules.
117400 rules inserted. Base: 23055 rules (917 with conclusion selected). Queue: 16443 rules.
117600 rules inserted. Base: 23166 rules (917 with conclusion selected). Queue: 16627 rules.
117800 rules inserted. Base: 23171 rules (917 with conclusion selected). Queue: 16724 rules.
118000 rules inserted. Base: 23237 rules (917 with conclusion selected). Queue: 16792 rules.
118200 rules inserted. Base: 23289 rules (917 with conclusion selected). Queue: 16822 rules.
118400 rules inserted. Base: 23316 rules (917 with conclusion selected). Queue: 16814 rules.
118600 rules inserted. Base: 23346 rules (917 with conclusion selected). Queue: 16797 rules.
118800 rules inserted. Base: 23456 rules (917 with conclusion selected). Queue: 16982 rules.
119000 rules inserted. Base: 23433 rules (917 with conclusion selected). Queue: 17032 rules.
119200 rules inserted. Base: 23509 rules (917 with conclusion selected). Queue: 17073 rules.
119400 rules inserted. Base: 23518 rules (917 with conclusion selected). Queue: 17159 rules.
119600 rules inserted. Base: 23597 rules (917 with conclusion selected). Queue: 17141 rules.
119800 rules inserted. Base: 23593 rules (917 with conclusion selected). Queue: 17186 rules.
120000 rules inserted. Base: 23669 rules (917 with conclusion selected). Queue: 17152 rules.
120200 rules inserted. Base: 23665 rules (917 with conclusion selected). Queue: 17187 rules.
120400 rules inserted. Base: 23691 rules (917 with conclusion selected). Queue: 17158 rules.
120600 rules inserted. Base: 23718 rules (917 with conclusion selected). Queue: 17128 rules.
120800 rules inserted. Base: 23745 rules (917 with conclusion selected). Queue: 17100 rules.
121000 rules inserted. Base: 23815 rules (917 with conclusion selected). Queue: 17115 rules.
121200 rules inserted. Base: 23902 rules (917 with conclusion selected). Queue: 17293 rules.
121400 rules inserted. Base: 23931 rules (917 with conclusion selected). Queue: 17393 rules.
121600 rules inserted. Base: 23986 rules (917 with conclusion selected). Queue: 17455 rules.
121800 rules inserted. Base: 24047 rules (917 with conclusion selected). Queue: 17476 rules.
122000 rules inserted. Base: 24072 rules (917 with conclusion selected). Queue: 17474 rules.
122200 rules inserted. Base: 24106 rules (917 with conclusion selected). Queue: 17467 rules.
122400 rules inserted. Base: 24216 rules (917 with conclusion selected). Queue: 17648 rules.
122600 rules inserted. Base: 24175 rules (917 with conclusion selected). Queue: 17693 rules.
122800 rules inserted. Base: 24253 rules (917 with conclusion selected). Queue: 17742 rules.
123000 rules inserted. Base: 24262 rules (917 with conclusion selected). Queue: 17817 rules.
123200 rules inserted. Base: 24347 rules (917 with conclusion selected). Queue: 17803 rules.
123400 rules inserted. Base: 24345 rules (917 with conclusion selected). Queue: 17841 rules.
123600 rules inserted. Base: 24423 rules (917 with conclusion selected). Queue: 17810 rules.
123800 rules inserted. Base: 24422 rules (917 with conclusion selected). Queue: 17844 rules.
124000 rules inserted. Base: 24449 rules (917 with conclusion selected). Queue: 17814 rules.
124200 rules inserted. Base: 24476 rules (917 with conclusion selected). Queue: 17784 rules.
124400 rules inserted. Base: 24499 rules (917 with conclusion selected). Queue: 17754 rules.
124600 rules inserted. Base: 24560 rules (917 with conclusion selected). Queue: 17756 rules.
124800 rules inserted. Base: 24687 rules (917 with conclusion selected). Queue: 17860 rules.
125000 rules inserted. Base: 24770 rules (917 with conclusion selected). Queue: 18076 rules.
125200 rules inserted. Base: 24856 rules (917 with conclusion selected). Queue: 18161 rules.
125400 rules inserted. Base: 24940 rules (917 with conclusion selected). Queue: 18198 rules.
125600 rules inserted. Base: 25070 rules (917 with conclusion selected). Queue: 18271 rules.
125800 rules inserted. Base: 25189 rules (917 with conclusion selected). Queue: 18276 rules.
126000 rules inserted. Base: 25302 rules (917 with conclusion selected). Queue: 18255 rules.
126200 rules inserted. Base: 25383 rules (917 with conclusion selected). Queue: 18218 rules.
126400 rules inserted. Base: 25431 rules (917 with conclusion selected). Queue: 18179 rules.
126600 rules inserted. Base: 25600 rules (917 with conclusion selected). Queue: 18262 rules.
126800 rules inserted. Base: 25630 rules (917 with conclusion selected). Queue: 18466 rules.
127000 rules inserted. Base: 25726 rules (917 with conclusion selected). Queue: 18583 rules.
127200 rules inserted. Base: 25769 rules (917 with conclusion selected). Queue: 18572 rules.
127400 rules inserted. Base: 25873 rules (917 with conclusion selected). Queue: 18602 rules.
127600 rules inserted. Base: 26012 rules (917 with conclusion selected). Queue: 18682 rules.
127800 rules inserted. Base: 26053 rules (917 with conclusion selected). Queue: 18668 rules.
128000 rules inserted. Base: 26153 rules (917 with conclusion selected). Queue: 18651 rules.
128200 rules inserted. Base: 26228 rules (917 with conclusion selected). Queue: 18650 rules.
128400 rules inserted. Base: 26289 rules (917 with conclusion selected). Queue: 18589 rules.
128600 rules inserted. Base: 26378 rules (917 with conclusion selected). Queue: 18553 rules.
128800 rules inserted. Base: 26411 rules (917 with conclusion selected). Queue: 18513 rules.
129000 rules inserted. Base: 26436 rules (917 with conclusion selected). Queue: 18471 rules.
129200 rules inserted. Base: 26452 rules (917 with conclusion selected). Queue: 18435 rules.
129400 rules inserted. Base: 26600 rules (917 with conclusion selected). Queue: 18486 rules.
129600 rules inserted. Base: 26626 rules (917 with conclusion selected). Queue: 18652 rules.
129800 rules inserted. Base: 26741 rules (917 with conclusion selected). Queue: 18800 rules.
130000 rules inserted. Base: 26854 rules (917 with conclusion selected). Queue: 18828 rules.
130200 rules inserted. Base: 26999 rules (917 with conclusion selected). Queue: 18921 rules.
130400 rules inserted. Base: 27084 rules (917 with conclusion selected). Queue: 18926 rules.
130600 rules inserted. Base: 27176 rules (917 with conclusion selected). Queue: 18898 rules.
130800 rules inserted. Base: 27258 rules (917 with conclusion selected). Queue: 18871 rules.
131000 rules inserted. Base: 27332 rules (917 with conclusion selected). Queue: 18859 rules.
131200 rules inserted. Base: 27417 rules (917 with conclusion selected). Queue: 19002 rules.
131400 rules inserted. Base: 27551 rules (917 with conclusion selected). Queue: 19217 rules.
131600 rules inserted. Base: 27566 rules (917 with conclusion selected). Queue: 19229 rules.
131800 rules inserted. Base: 27716 rules (917 with conclusion selected). Queue: 19193 rules.
132000 rules inserted. Base: 27801 rules (917 with conclusion selected). Queue: 19294 rules.
132200 rules inserted. Base: 27832 rules (917 with conclusion selected). Queue: 19304 rules.
132400 rules inserted. Base: 27919 rules (917 with conclusion selected). Queue: 19283 rules.
132600 rules inserted. Base: 27999 rules (917 with conclusion selected). Queue: 19287 rules.
132800 rules inserted. Base: 28059 rules (917 with conclusion selected). Queue: 19228 rules.
133000 rules inserted. Base: 28139 rules (917 with conclusion selected). Queue: 19203 rules.
133200 rules inserted. Base: 28167 rules (917 with conclusion selected). Queue: 19158 rules.
133400 rules inserted. Base: 28188 rules (917 with conclusion selected). Queue: 19120 rules.
133600 rules inserted. Base: 28219 rules (917 with conclusion selected). Queue: 19087 rules.
133800 rules inserted. Base: 28380 rules (917 with conclusion selected). Queue: 19055 rules.
134000 rules inserted. Base: 28440 rules (917 with conclusion selected). Queue: 19186 rules.
134200 rules inserted. Base: 28568 rules (917 with conclusion selected). Queue: 19223 rules.
134400 rules inserted. Base: 28666 rules (917 with conclusion selected). Queue: 19247 rules.
134600 rules inserted. Base: 28791 rules (917 with conclusion selected). Queue: 19224 rules.
134800 rules inserted. Base: 28886 rules (917 with conclusion selected). Queue: 19193 rules.
135000 rules inserted. Base: 28986 rules (917 with conclusion selected). Queue: 19129 rules.
135200 rules inserted. Base: 29039 rules (917 with conclusion selected). Queue: 19087 rules.
135400 rules inserted. Base: 29148 rules (917 with conclusion selected). Queue: 19144 rules.
135600 rules inserted. Base: 29291 rules (917 with conclusion selected). Queue: 19287 rules.
135800 rules inserted. Base: 29306 rules (917 with conclusion selected). Queue: 19287 rules.
136000 rules inserted. Base: 29433 rules (917 with conclusion selected). Queue: 19217 rules.
136200 rules inserted. Base: 29561 rules (917 with conclusion selected). Queue: 19286 rules.
136400 rules inserted. Base: 29569 rules (917 with conclusion selected). Queue: 19262 rules.
136600 rules inserted. Base: 29711 rules (917 with conclusion selected). Queue: 19200 rules.
136800 rules inserted. Base: 29726 rules (917 with conclusion selected). Queue: 19188 rules.
137000 rules inserted. Base: 29864 rules (917 with conclusion selected). Queue: 19087 rules.
137200 rules inserted. Base: 29875 rules (917 with conclusion selected). Queue: 19085 rules.
137400 rules inserted. Base: 29895 rules (917 with conclusion selected). Queue: 18996 rules.
137600 rules inserted. Base: 29922 rules (917 with conclusion selected). Queue: 18961 rules.
137800 rules inserted. Base: 30006 rules (917 with conclusion selected). Queue: 18922 rules.
138000 rules inserted. Base: 30066 rules (917 with conclusion selected). Queue: 18992 rules.
138200 rules inserted. Base: 30205 rules (917 with conclusion selected). Queue: 19118 rules.
138400 rules inserted. Base: 30319 rules (917 with conclusion selected). Queue: 19095 rules.
138600 rules inserted. Base: 30440 rules (917 with conclusion selected). Queue: 19143 rules.
138800 rules inserted. Base: 30576 rules (917 with conclusion selected). Queue: 19094 rules.
139000 rules inserted. Base: 30676 rules (917 with conclusion selected). Queue: 19026 rules.
139200 rules inserted. Base: 30710 rules (917 with conclusion selected). Queue: 18996 rules.
139400 rules inserted. Base: 30859 rules (917 with conclusion selected). Queue: 18978 rules.
139600 rules inserted. Base: 30917 rules (917 with conclusion selected). Queue: 19093 rules.
139800 rules inserted. Base: 31009 rules (917 with conclusion selected). Queue: 19157 rules.
140000 rules inserted. Base: 31098 rules (917 with conclusion selected). Queue: 19107 rules.
140200 rules inserted. Base: 31196 rules (917 with conclusion selected). Queue: 19128 rules.
140400 rules inserted. Base: 31269 rules (917 with conclusion selected). Queue: 19140 rules.
140600 rules inserted. Base: 31341 rules (917 with conclusion selected). Queue: 19069 rules.
140800 rules inserted. Base: 31429 rules (917 with conclusion selected). Queue: 19053 rules.
141000 rules inserted. Base: 31491 rules (917 with conclusion selected). Queue: 18976 rules.
141200 rules inserted. Base: 31565 rules (917 with conclusion selected). Queue: 18941 rules.
141400 rules inserted. Base: 31590 rules (917 with conclusion selected). Queue: 18902 rules.
141600 rules inserted. Base: 31621 rules (917 with conclusion selected). Queue: 18869 rules.
141800 rules inserted. Base: 31650 rules (917 with conclusion selected). Queue: 18828 rules.
142000 rules inserted. Base: 31779 rules (917 with conclusion selected). Queue: 18782 rules.
142200 rules inserted. Base: 31865 rules (917 with conclusion selected). Queue: 18757 rules.
142400 rules inserted. Base: 31874 rules (917 with conclusion selected). Queue: 18849 rules.
142600 rules inserted. Base: 32039 rules (917 with conclusion selected). Queue: 18930 rules.
142800 rules inserted. Base: 32107 rules (917 with conclusion selected). Queue: 18976 rules.
143000 rules inserted. Base: 32123 rules (917 with conclusion selected). Queue: 18848 rules.
143200 rules inserted. Base: 32193 rules (917 with conclusion selected). Queue: 18808 rules.
143400 rules inserted. Base: 32378 rules (917 with conclusion selected). Queue: 18825 rules.
143600 rules inserted. Base: 32347 rules (917 with conclusion selected). Queue: 18753 rules.
143800 rules inserted. Base: 32429 rules (917 with conclusion selected). Queue: 18781 rules.
144000 rules inserted. Base: 32500 rules (917 with conclusion selected). Queue: 18685 rules.
144200 rules inserted. Base: 32453 rules (917 with conclusion selected). Queue: 18632 rules.
144400 rules inserted. Base: 32593 rules (917 with conclusion selected). Queue: 18620 rules.
144600 rules inserted. Base: 32677 rules (917 with conclusion selected). Queue: 18600 rules.
144800 rules inserted. Base: 32689 rules (917 with conclusion selected). Queue: 18685 rules.
145000 rules inserted. Base: 32854 rules (917 with conclusion selected). Queue: 18772 rules.
145200 rules inserted. Base: 32923 rules (917 with conclusion selected). Queue: 18822 rules.
145400 rules inserted. Base: 32891 rules (917 with conclusion selected). Queue: 18706 rules.
145600 rules inserted. Base: 33015 rules (917 with conclusion selected). Queue: 18657 rules.
145800 rules inserted. Base: 33096 rules (917 with conclusion selected). Queue: 18668 rules.
146000 rules inserted. Base: 33196 rules (917 with conclusion selected). Queue: 18675 rules.
146200 rules inserted. Base: 33159 rules (917 with conclusion selected). Queue: 18610 rules.
146400 rules inserted. Base: 33280 rules (917 with conclusion selected). Queue: 18647 rules.
146600 rules inserted. Base: 33274 rules (917 with conclusion selected). Queue: 18596 rules.
146800 rules inserted. Base: 33389 rules (917 with conclusion selected). Queue: 18561 rules.
147000 rules inserted. Base: 33350 rules (917 with conclusion selected). Queue: 18508 rules.
147200 rules inserted. Base: 33379 rules (917 with conclusion selected). Queue: 18515 rules.
147400 rules inserted. Base: 33414 rules (917 with conclusion selected). Queue: 18504 rules.
147600 rules inserted. Base: 33592 rules (917 with conclusion selected). Queue: 18506 rules.
147800 rules inserted. Base: 33612 rules (917 with conclusion selected). Queue: 18560 rules.
148000 rules inserted. Base: 33766 rules (917 with conclusion selected). Queue: 18651 rules.
148200 rules inserted. Base: 33945 rules (917 with conclusion selected). Queue: 18745 rules.
148400 rules inserted. Base: 34085 rules (917 with conclusion selected). Queue: 18673 rules.
148600 rules inserted. Base: 34221 rules (917 with conclusion selected). Queue: 18682 rules.
148800 rules inserted. Base: 34384 rules (917 with conclusion selected). Queue: 18658 rules.
149000 rules inserted. Base: 34533 rules (917 with conclusion selected). Queue: 18658 rules.
149200 rules inserted. Base: 34660 rules (917 with conclusion selected). Queue: 18617 rules.
149400 rules inserted. Base: 34767 rules (917 with conclusion selected). Queue: 18609 rules.
149600 rules inserted. Base: 34890 rules (917 with conclusion selected). Queue: 18628 rules.
149800 rules inserted. Base: 34942 rules (917 with conclusion selected). Queue: 18718 rules.
150000 rules inserted. Base: 35126 rules (917 with conclusion selected). Queue: 18818 rules.
150200 rules inserted. Base: 35244 rules (917 with conclusion selected). Queue: 18857 rules.
150400 rules inserted. Base: 35372 rules (917 with conclusion selected). Queue: 18798 rules.
150600 rules inserted. Base: 35481 rules (917 with conclusion selected). Queue: 18804 rules.
150800 rules inserted. Base: 35633 rules (917 with conclusion selected). Queue: 18799 rules.
151000 rules inserted. Base: 35703 rules (917 with conclusion selected). Queue: 18795 rules.
151200 rules inserted. Base: 35841 rules (917 with conclusion selected). Queue: 18814 rules.
151400 rules inserted. Base: 35950 rules (917 with conclusion selected). Queue: 18772 rules.
151600 rules inserted. Base: 36018 rules (917 with conclusion selected). Queue: 18751 rules.
151800 rules inserted. Base: 36056 rules (917 with conclusion selected). Queue: 18761 rules.
152000 rules inserted. Base: 36096 rules (917 with conclusion selected). Queue: 18740 rules.
152200 rules inserted. Base: 36242 rules (917 with conclusion selected). Queue: 18703 rules.
152400 rules inserted. Base: 36376 rules (917 with conclusion selected). Queue: 18715 rules.
152600 rules inserted. Base: 36559 rules (917 with conclusion selected). Queue: 18671 rules.
152800 rules inserted. Base: 36684 rules (917 with conclusion selected). Queue: 18581 rules.
153000 rules inserted. Base: 36866 rules (917 with conclusion selected). Queue: 18514 rules.
153200 rules inserted. Base: 37028 rules (917 with conclusion selected). Queue: 18384 rules.
153400 rules inserted. Base: 37139 rules (917 with conclusion selected). Queue: 18328 rules.
153600 rules inserted. Base: 37292 rules (917 with conclusion selected). Queue: 18278 rules.
153800 rules inserted. Base: 37382 rules (917 with conclusion selected). Queue: 18287 rules.
154000 rules inserted. Base: 37577 rules (917 with conclusion selected). Queue: 18286 rules.
154200 rules inserted. Base: 37653 rules (917 with conclusion selected). Queue: 18255 rules.
154400 rules inserted. Base: 37780 rules (917 with conclusion selected). Queue: 18169 rules.
154600 rules inserted. Base: 37954 rules (917 with conclusion selected). Queue: 18109 rules.
154800 rules inserted. Base: 38033 rules (917 with conclusion selected). Queue: 18061 rules.
155000 rules inserted. Base: 38147 rules (917 with conclusion selected). Queue: 18017 rules.
155200 rules inserted. Base: 38247 rules (917 with conclusion selected). Queue: 17944 rules.
155400 rules inserted. Base: 38304 rules (917 with conclusion selected). Queue: 17935 rules.
155600 rules inserted. Base: 38317 rules (917 with conclusion selected). Queue: 17941 rules.
155800 rules inserted. Base: 38447 rules (917 with conclusion selected). Queue: 17889 rules.
156000 rules inserted. Base: 38536 rules (917 with conclusion selected). Queue: 17876 rules.
156200 rules inserted. Base: 38729 rules (917 with conclusion selected). Queue: 17876 rules.
156400 rules inserted. Base: 38893 rules (917 with conclusion selected). Queue: 17786 rules.
156600 rules inserted. Base: 39036 rules (917 with conclusion selected). Queue: 17726 rules.
156800 rules inserted. Base: 39202 rules (917 with conclusion selected). Queue: 17624 rules.
157000 rules inserted. Base: 39361 rules (917 with conclusion selected). Queue: 17497 rules.
157200 rules inserted. Base: 39452 rules (917 with conclusion selected). Queue: 17491 rules.
157400 rules inserted. Base: 39546 rules (917 with conclusion selected). Queue: 17474 rules.
157600 rules inserted. Base: 39735 rules (917 with conclusion selected). Queue: 17460 rules.
157800 rules inserted. Base: 39861 rules (917 with conclusion selected). Queue: 17455 rules.
158000 rules inserted. Base: 39972 rules (917 with conclusion selected). Queue: 17376 rules.
158200 rules inserted. Base: 40131 rules (917 with conclusion selected). Queue: 17316 rules.
158400 rules inserted. Base: 40209 rules (917 with conclusion selected). Queue: 17288 rules.
158600 rules inserted. Base: 40365 rules (917 with conclusion selected). Queue: 17190 rules.
158800 rules inserted. Base: 40456 rules (917 with conclusion selected). Queue: 17137 rules.
159000 rules inserted. Base: 40516 rules (917 with conclusion selected). Queue: 17113 rules.
159200 rules inserted. Base: 40558 rules (917 with conclusion selected). Queue: 17115 rules.
159400 rules inserted. Base: 40590 rules (917 with conclusion selected). Queue: 17124 rules.
159600 rules inserted. Base: 40739 rules (917 with conclusion selected). Queue: 17162 rules.
159800 rules inserted. Base: 40815 rules (917 with conclusion selected). Queue: 17013 rules.
160000 rules inserted. Base: 40811 rules (917 with conclusion selected). Queue: 17002 rules.
160200 rules inserted. Base: 40933 rules (917 with conclusion selected). Queue: 16967 rules.
160400 rules inserted. Base: 41078 rules (917 with conclusion selected). Queue: 16939 rules.
160600 rules inserted. Base: 41220 rules (917 with conclusion selected). Queue: 16895 rules.
160800 rules inserted. Base: 40803 rules (917 with conclusion selected). Queue: 16445 rules.
161000 rules inserted. Base: 40887 rules (917 with conclusion selected). Queue: 16362 rules.
161200 rules inserted. Base: 41049 rules (917 with conclusion selected). Queue: 16305 rules.
161400 rules inserted. Base: 40749 rules (917 with conclusion selected). Queue: 16193 rules.
161600 rules inserted. Base: 40875 rules (917 with conclusion selected). Queue: 16180 rules.
161800 rules inserted. Base: 40870 rules (917 with conclusion selected). Queue: 16085 rules.
162000 rules inserted. Base: 40870 rules (917 with conclusion selected). Queue: 16045 rules.
162200 rules inserted. Base: 41004 rules (917 with conclusion selected). Queue: 16085 rules.
162400 rules inserted. Base: 41091 rules (917 with conclusion selected). Queue: 15944 rules.
162600 rules inserted. Base: 41082 rules (917 with conclusion selected). Queue: 15927 rules.
162800 rules inserted. Base: 41197 rules (917 with conclusion selected). Queue: 15903 rules.
163000 rules inserted. Base: 41341 rules (917 with conclusion selected). Queue: 15859 rules.
163200 rules inserted. Base: 41489 rules (917 with conclusion selected). Queue: 15851 rules.
163400 rules inserted. Base: 41107 rules (917 with conclusion selected). Queue: 15635 rules.
163600 rules inserted. Base: 41131 rules (917 with conclusion selected). Queue: 15377 rules.
163800 rules inserted. Base: 41228 rules (917 with conclusion selected). Queue: 15320 rules.
164000 rules inserted. Base: 41393 rules (917 with conclusion selected). Queue: 15261 rules.
164200 rules inserted. Base: 41083 rules (917 with conclusion selected). Queue: 15148 rules.
164400 rules inserted. Base: 41140 rules (917 with conclusion selected). Queue: 15177 rules.
164600 rules inserted. Base: 41183 rules (917 with conclusion selected). Queue: 15117 rules.
164800 rules inserted. Base: 41237 rules (917 with conclusion selected). Queue: 15100 rules.
165000 rules inserted. Base: 41232 rules (917 with conclusion selected). Queue: 15038 rules.
165200 rules inserted. Base: 41269 rules (917 with conclusion selected). Queue: 15053 rules.
165400 rules inserted. Base: 41293 rules (917 with conclusion selected). Queue: 15084 rules.
165600 rules inserted. Base: 41430 rules (917 with conclusion selected). Queue: 15015 rules.
165800 rules inserted. Base: 41507 rules (917 with conclusion selected). Queue: 14984 rules.
166000 rules inserted. Base: 41669 rules (917 with conclusion selected). Queue: 14952 rules.
166200 rules inserted. Base: 41847 rules (917 with conclusion selected). Queue: 14920 rules.
166400 rules inserted. Base: 41997 rules (917 with conclusion selected). Queue: 14802 rules.
166600 rules inserted. Base: 42183 rules (917 with conclusion selected). Queue: 14706 rules.
166800 rules inserted. Base: 42363 rules (917 with conclusion selected). Queue: 14588 rules.
167000 rules inserted. Base: 42463 rules (917 with conclusion selected). Queue: 14569 rules.
167200 rules inserted. Base: 42621 rules (917 with conclusion selected). Queue: 14485 rules.
167400 rules inserted. Base: 42680 rules (917 with conclusion selected). Queue: 14449 rules.
167600 rules inserted. Base: 42858 rules (917 with conclusion selected). Queue: 14417 rules.
167800 rules inserted. Base: 43037 rules (917 with conclusion selected). Queue: 14384 rules.
168000 rules inserted. Base: 43121 rules (917 with conclusion selected). Queue: 14360 rules.
168200 rules inserted. Base: 43269 rules (917 with conclusion selected). Queue: 14261 rules.
168400 rules inserted. Base: 43417 rules (917 with conclusion selected). Queue: 14189 rules.
168600 rules inserted. Base: 43529 rules (917 with conclusion selected). Queue: 14135 rules.
168800 rules inserted. Base: 43615 rules (917 with conclusion selected). Queue: 14124 rules.
169000 rules inserted. Base: 43732 rules (917 with conclusion selected). Queue: 14101 rules.
169200 rules inserted. Base: 43737 rules (917 with conclusion selected). Queue: 14113 rules.
169400 rules inserted. Base: 43781 rules (917 with conclusion selected). Queue: 14146 rules.
169600 rules inserted. Base: 43903 rules (917 with conclusion selected). Queue: 14056 rules.
169800 rules inserted. Base: 44099 rules (917 with conclusion selected). Queue: 14001 rules.
170000 rules inserted. Base: 44271 rules (917 with conclusion selected). Queue: 13868 rules.
170200 rules inserted. Base: 44403 rules (917 with conclusion selected). Queue: 13774 rules.
170400 rules inserted. Base: 44521 rules (917 with conclusion selected). Queue: 13727 rules.
170600 rules inserted. Base: 44702 rules (917 with conclusion selected). Queue: 13664 rules.
170800 rules inserted. Base: 44788 rules (917 with conclusion selected). Queue: 13661 rules.
171000 rules inserted. Base: 44961 rules (917 with conclusion selected). Queue: 13531 rules.
171200 rules inserted. Base: 45047 rules (917 with conclusion selected). Queue: 13506 rules.
171400 rules inserted. Base: 45134 rules (917 with conclusion selected). Queue: 13469 rules.
171600 rules inserted. Base: 45176 rules (917 with conclusion selected). Queue: 13482 rules.
171800 rules inserted. Base: 45215 rules (917 with conclusion selected). Queue: 13510 rules.
172000 rules inserted. Base: 45280 rules (917 with conclusion selected). Queue: 13491 rules.
172200 rules inserted. Base: 45427 rules (917 with conclusion selected). Queue: 13428 rules.
172400 rules inserted. Base: 45609 rules (917 with conclusion selected). Queue: 13338 rules.
172600 rules inserted. Base: 45797 rules (917 with conclusion selected). Queue: 13192 rules.
172800 rules inserted. Base: 45884 rules (917 with conclusion selected). Queue: 13155 rules.
173000 rules inserted. Base: 46031 rules (917 with conclusion selected). Queue: 13085 rules.
173200 rules inserted. Base: 46225 rules (917 with conclusion selected). Queue: 13029 rules.
173400 rules inserted. Base: 46299 rules (917 with conclusion selected). Queue: 13002 rules.
173600 rules inserted. Base: 46466 rules (917 with conclusion selected). Queue: 12894 rules.
173800 rules inserted. Base: 46553 rules (917 with conclusion selected). Queue: 12857 rules.
174000 rules inserted. Base: 46612 rules (917 with conclusion selected). Queue: 12851 rules.
174200 rules inserted. Base: 46654 rules (917 with conclusion selected). Queue: 12880 rules.
174400 rules inserted. Base: 46665 rules (917 with conclusion selected). Queue: 12899 rules.
174600 rules inserted. Base: 46710 rules (917 with conclusion selected). Queue: 12946 rules.
174800 rules inserted. Base: 46824 rules (917 with conclusion selected). Queue: 13001 rules.
175000 rules inserted. Base: 46856 rules (917 with conclusion selected). Queue: 13011 rules.
175200 rules inserted. Base: 46940 rules (917 with conclusion selected). Queue: 13012 rules.
175400 rules inserted. Base: 47067 rules (917 with conclusion selected). Queue: 12950 rules.
175600 rules inserted. Base: 47209 rules (917 with conclusion selected). Queue: 12975 rules.
175800 rules inserted. Base: 46738 rules (917 with conclusion selected). Queue: 12720 rules.
176000 rules inserted. Base: 46771 rules (917 with conclusion selected). Queue: 12377 rules.
176200 rules inserted. Base: 46915 rules (917 with conclusion selected). Queue: 12311 rules.
176400 rules inserted. Base: 46588 rules (917 with conclusion selected). Queue: 12214 rules.
176600 rules inserted. Base: 46680 rules (917 with conclusion selected). Queue: 12135 rules.
176800 rules inserted. Base: 46763 rules (917 with conclusion selected). Queue: 12122 rules.
177000 rules inserted. Base: 46804 rules (917 with conclusion selected). Queue: 12185 rules.
177200 rules inserted. Base: 46907 rules (917 with conclusion selected). Queue: 12264 rules.
177400 rules inserted. Base: 46964 rules (917 with conclusion selected). Queue: 12267 rules.
177600 rules inserted. Base: 47018 rules (917 with conclusion selected). Queue: 12253 rules.
177800 rules inserted. Base: 47161 rules (917 with conclusion selected). Queue: 12195 rules.
178000 rules inserted. Base: 47288 rules (917 with conclusion selected). Queue: 12217 rules.
178200 rules inserted. Base: 46843 rules (917 with conclusion selected). Queue: 12201 rules.
178400 rules inserted. Base: 46852 rules (917 with conclusion selected). Queue: 11616 rules.
178600 rules inserted. Base: 46909 rules (917 with conclusion selected). Queue: 11677 rules.
178800 rules inserted. Base: 47051 rules (917 with conclusion selected). Queue: 11618 rules.
179000 rules inserted. Base: 46716 rules (917 with conclusion selected). Queue: 11503 rules.
179200 rules inserted. Base: 46765 rules (917 with conclusion selected). Queue: 11561 rules.
179400 rules inserted. Base: 46856 rules (917 with conclusion selected). Queue: 11493 rules.
179600 rules inserted. Base: 46909 rules (917 with conclusion selected). Queue: 11539 rules.
179800 rules inserted. Base: 46964 rules (917 with conclusion selected). Queue: 11523 rules.
180000 rules inserted. Base: 46990 rules (917 with conclusion selected). Queue: 11558 rules.
180200 rules inserted. Base: 47022 rules (917 with conclusion selected). Queue: 11579 rules.
180400 rules inserted. Base: 47131 rules (917 with conclusion selected). Queue: 11519 rules.
180600 rules inserted. Base: 47283 rules (917 with conclusion selected). Queue: 11433 rules.
180800 rules inserted. Base: 47461 rules (917 with conclusion selected). Queue: 11318 rules.
181000 rules inserted. Base: 47600 rules (917 with conclusion selected). Queue: 11209 rules.
181200 rules inserted. Base: 47719 rules (917 with conclusion selected). Queue: 11189 rules.
181400 rules inserted. Base: 47827 rules (917 with conclusion selected). Queue: 11122 rules.
181600 rules inserted. Base: 47989 rules (917 with conclusion selected). Queue: 11061 rules.
181800 rules inserted. Base: 48071 rules (917 with conclusion selected). Queue: 11039 rules.
182000 rules inserted. Base: 48169 rules (917 with conclusion selected). Queue: 11024 rules.
182200 rules inserted. Base: 48247 rules (917 with conclusion selected). Queue: 11003 rules.
182400 rules inserted. Base: 48303 rules (917 with conclusion selected). Queue: 11015 rules.
182600 rules inserted. Base: 48316 rules (917 with conclusion selected). Queue: 11053 rules.
182800 rules inserted. Base: 48328 rules (917 with conclusion selected). Queue: 11084 rules.
183000 rules inserted. Base: 48458 rules (917 with conclusion selected). Queue: 11033 rules.
183200 rules inserted. Base: 48568 rules (917 with conclusion selected). Queue: 10997 rules.
183400 rules inserted. Base: 48694 rules (917 with conclusion selected). Queue: 10959 rules.
183600 rules inserted. Base: 48760 rules (917 with conclusion selected). Queue: 10985 rules.
183800 rules inserted. Base: 48829 rules (917 with conclusion selected). Queue: 10994 rules.
184000 rules inserted. Base: 48874 rules (917 with conclusion selected). Queue: 11041 rules.
184200 rules inserted. Base: 48896 rules (917 with conclusion selected). Queue: 11070 rules.
184400 rules inserted. Base: 48934 rules (917 with conclusion selected). Queue: 11093 rules.
184600 rules inserted. Base: 48973 rules (917 with conclusion selected). Queue: 11092 rules.
184800 rules inserted. Base: 49146 rules (917 with conclusion selected). Queue: 11004 rules.
185000 rules inserted. Base: 49208 rules (917 with conclusion selected). Queue: 11019 rules.
185200 rules inserted. Base: 49332 rules (917 with conclusion selected). Queue: 10996 rules.
185400 rules inserted. Base: 49414 rules (917 with conclusion selected). Queue: 10985 rules.
185600 rules inserted. Base: 49436 rules (917 with conclusion selected). Queue: 11037 rules.
185800 rules inserted. Base: 49495 rules (917 with conclusion selected). Queue: 11079 rules.
186000 rules inserted. Base: 49508 rules (917 with conclusion selected). Queue: 11117 rules.
186200 rules inserted. Base: 49520 rules (917 with conclusion selected). Queue: 11148 rules.
186400 rules inserted. Base: 49570 rules (917 with conclusion selected). Queue: 11195 rules.
186600 rules inserted. Base: 49655 rules (917 with conclusion selected). Queue: 11257 rules.
186800 rules inserted. Base: 49641 rules (917 with conclusion selected). Queue: 11322 rules.
187000 rules inserted. Base: 49743 rules (917 with conclusion selected). Queue: 11416 rules.
187200 rules inserted. Base: 49854 rules (917 with conclusion selected). Queue: 11511 rules.
187400 rules inserted. Base: 49699 rules (917 with conclusion selected). Queue: 11595 rules.
187600 rules inserted. Base: 49701 rules (917 with conclusion selected). Queue: 10288 rules.
187800 rules inserted. Base: 49694 rules (917 with conclusion selected). Queue: 10349 rules.
188000 rules inserted. Base: 49710 rules (917 with conclusion selected). Queue: 10102 rules.
188200 rules inserted. Base: 49751 rules (917 with conclusion selected). Queue: 9798 rules.
188400 rules inserted. Base: 49796 rules (917 with conclusion selected). Queue: 9848 rules.
188600 rules inserted. Base: 49883 rules (917 with conclusion selected). Queue: 9916 rules.
188800 rules inserted. Base: 49917 rules (917 with conclusion selected). Queue: 9988 rules.
189000 rules inserted. Base: 49926 rules (917 with conclusion selected). Queue: 10077 rules.
189200 rules inserted. Base: 50029 rules (917 with conclusion selected). Queue: 10164 rules.
189400 rules inserted. Base: 50160 rules (917 with conclusion selected). Queue: 10259 rules.
189600 rules inserted. Base: 49965 rules (917 with conclusion selected). Queue: 9383 rules.
189800 rules inserted. Base: 49985 rules (917 with conclusion selected). Queue: 8994 rules.
190000 rules inserted. Base: 50006 rules (917 with conclusion selected). Queue: 9071 rules.
190200 rules inserted. Base: 49970 rules (917 with conclusion selected). Queue: 8786 rules.
190400 rules inserted. Base: 50001 rules (917 with conclusion selected). Queue: 8843 rules.
190600 rules inserted. Base: 50043 rules (917 with conclusion selected). Queue: 8658 rules.
190800 rules inserted. Base: 50074 rules (917 with conclusion selected). Queue: 8715 rules.
191000 rules inserted. Base: 50126 rules (917 with conclusion selected). Queue: 8656 rules.
191200 rules inserted. Base: 50163 rules (917 with conclusion selected). Queue: 8594 rules.
191400 rules inserted. Base: 50211 rules (917 with conclusion selected). Queue: 8558 rules.
191600 rules inserted. Base: 50244 rules (917 with conclusion selected). Queue: 8512 rules.
191800 rules inserted. Base: 50378 rules (917 with conclusion selected). Queue: 8472 rules.
192000 rules inserted. Base: 50470 rules (917 with conclusion selected). Queue: 8479 rules.
192200 rules inserted. Base: 50541 rules (917 with conclusion selected). Queue: 8461 rules.
192400 rules inserted. Base: 50662 rules (917 with conclusion selected). Queue: 8471 rules.
192600 rules inserted. Base: 50709 rules (917 with conclusion selected). Queue: 8511 rules.
192800 rules inserted. Base: 50754 rules (917 with conclusion selected). Queue: 8559 rules.
193000 rules inserted. Base: 50791 rules (917 with conclusion selected). Queue: 8608 rules.
193200 rules inserted. Base: 50823 rules (917 with conclusion selected). Queue: 8589 rules.
193400 rules inserted. Base: 50844 rules (917 with conclusion selected). Queue: 8538 rules.
193600 rules inserted. Base: 50898 rules (917 with conclusion selected). Queue: 8498 rules.
193800 rules inserted. Base: 51000 rules (917 with conclusion selected). Queue: 8426 rules.
194000 rules inserted. Base: 51077 rules (917 with conclusion selected). Queue: 8426 rules.
194200 rules inserted. Base: 51152 rules (917 with conclusion selected). Queue: 8450 rules.
194400 rules inserted. Base: 51190 rules (917 with conclusion selected). Queue: 8479 rules.
194600 rules inserted. Base: 51224 rules (917 with conclusion selected). Queue: 8533 rules.
194800 rules inserted. Base: 51259 rules (917 with conclusion selected). Queue: 8544 rules.
195000 rules inserted. Base: 51274 rules (917 with conclusion selected). Queue: 8515 rules.
195200 rules inserted. Base: 51316 rules (917 with conclusion selected). Queue: 8496 rules.
195400 rules inserted. Base: 51400 rules (917 with conclusion selected). Queue: 8401 rules.
195600 rules inserted. Base: 51475 rules (917 with conclusion selected). Queue: 8429 rules.
195800 rules inserted. Base: 51557 rules (917 with conclusion selected). Queue: 8392 rules.
196000 rules inserted. Base: 51594 rules (917 with conclusion selected). Queue: 8437 rules.
196200 rules inserted. Base: 51626 rules (917 with conclusion selected). Queue: 8492 rules.
196400 rules inserted. Base: 51658 rules (917 with conclusion selected). Queue: 8547 rules.
196600 rules inserted. Base: 51695 rules (917 with conclusion selected). Queue: 8529 rules.
196800 rules inserted. Base: 51732 rules (917 with conclusion selected). Queue: 8467 rules.
197000 rules inserted. Base: 51780 rules (917 with conclusion selected). Queue: 8431 rules.
197200 rules inserted. Base: 51822 rules (917 with conclusion selected). Queue: 8487 rules.
197400 rules inserted. Base: 51980 rules (917 with conclusion selected). Queue: 8539 rules.
197600 rules inserted. Base: 52093 rules (917 with conclusion selected). Queue: 8090 rules.
197800 rules inserted. Base: 52202 rules (917 with conclusion selected). Queue: 7959 rules.
198000 rules inserted. Base: 52221 rules (917 with conclusion selected). Queue: 8114 rules.
198200 rules inserted. Base: 52308 rules (917 with conclusion selected). Queue: 8184 rules.
198400 rules inserted. Base: 52429 rules (917 with conclusion selected). Queue: 8181 rules.
198600 rules inserted. Base: 52509 rules (917 with conclusion selected). Queue: 7764 rules.
198800 rules inserted. Base: 52574 rules (917 with conclusion selected). Queue: 7892 rules.
199000 rules inserted. Base: 52683 rules (917 with conclusion selected). Queue: 7821 rules.
199200 rules inserted. Base: 52705 rules (917 with conclusion selected). Queue: 7822 rules.
199400 rules inserted. Base: 52734 rules (917 with conclusion selected). Queue: 7866 rules.
199600 rules inserted. Base: 52801 rules (917 with conclusion selected). Queue: 7769 rules.
199800 rules inserted. Base: 52854 rules (917 with conclusion selected). Queue: 7722 rules.
200000 rules inserted. Base: 52898 rules (917 with conclusion selected). Queue: 7569 rules.
200200 rules inserted. Base: 53058 rules (917 with conclusion selected). Queue: 7480 rules.
200400 rules inserted. Base: 53129 rules (917 with conclusion selected). Queue: 7556 rules.
200600 rules inserted. Base: 53208 rules (917 with conclusion selected). Queue: 7510 rules.
200800 rules inserted. Base: 53317 rules (917 with conclusion selected). Queue: 7510 rules.
201000 rules inserted. Base: 53308 rules (917 with conclusion selected). Queue: 7592 rules.
201200 rules inserted. Base: 53334 rules (917 with conclusion selected). Queue: 7639 rules.
201400 rules inserted. Base: 53431 rules (917 with conclusion selected). Queue: 7672 rules.
201600 rules inserted. Base: 53409 rules (917 with conclusion selected). Queue: 7619 rules.
201800 rules inserted. Base: 53462 rules (917 with conclusion selected). Queue: 7572 rules.
202000 rules inserted. Base: 53506 rules (917 with conclusion selected). Queue: 7419 rules.
202200 rules inserted. Base: 53584 rules (917 with conclusion selected). Queue: 7450 rules.
202400 rules inserted. Base: 53600 rules (917 with conclusion selected). Queue: 7481 rules.
202600 rules inserted. Base: 53630 rules (917 with conclusion selected). Queue: 7583 rules.
202800 rules inserted. Base: 53726 rules (917 with conclusion selected). Queue: 7620 rules.
203000 rules inserted. Base: 53728 rules (917 with conclusion selected). Queue: 7631 rules.
203200 rules inserted. Base: 53726 rules (917 with conclusion selected). Queue: 7636 rules.
203400 rules inserted. Base: 53772 rules (917 with conclusion selected). Queue: 7553 rules.
203600 rules inserted. Base: 53817 rules (917 with conclusion selected). Queue: 7490 rules.
203800 rules inserted. Base: 53892 rules (917 with conclusion selected). Queue: 7398 rules.
204000 rules inserted. Base: 53922 rules (917 with conclusion selected). Queue: 7485 rules.
204200 rules inserted. Base: 54021 rules (917 with conclusion selected). Queue: 7566 rules.
204400 rules inserted. Base: 54018 rules (917 with conclusion selected). Queue: 7584 rules.
204600 rules inserted. Base: 54023 rules (917 with conclusion selected). Queue: 7607 rules.
204800 rules inserted. Base: 54045 rules (917 with conclusion selected). Queue: 7686 rules.
205000 rules inserted. Base: 54093 rules (917 with conclusion selected). Queue: 7568 rules.
205200 rules inserted. Base: 54133 rules (917 with conclusion selected). Queue: 7486 rules.
205400 rules inserted. Base: 54220 rules (917 with conclusion selected). Queue: 7416 rules.
205600 rules inserted. Base: 54349 rules (917 with conclusion selected). Queue: 7283 rules.
205800 rules inserted. Base: 54436 rules (917 with conclusion selected). Queue: 7456 rules.
206000 rules inserted. Base: 54469 rules (917 with conclusion selected). Queue: 7604 rules.
206200 rules inserted. Base: 54606 rules (917 with conclusion selected). Queue: 7488 rules.
206400 rules inserted. Base: 54697 rules (917 with conclusion selected). Queue: 7551 rules.
206600 rules inserted. Base: 54747 rules (917 with conclusion selected). Queue: 7634 rules.
206800 rules inserted. Base: 54840 rules (917 with conclusion selected). Queue: 7626 rules.
207000 rules inserted. Base: 54864 rules (917 with conclusion selected). Queue: 7646 rules.
207200 rules inserted. Base: 55007 rules (917 with conclusion selected). Queue: 7645 rules.
207400 rules inserted. Base: 54966 rules (917 with conclusion selected). Queue: 7625 rules.
207600 rules inserted. Base: 55037 rules (917 with conclusion selected). Queue: 7546 rules.
207800 rules inserted. Base: 55178 rules (917 with conclusion selected). Queue: 7558 rules.
208000 rules inserted. Base: 55265 rules (917 with conclusion selected). Queue: 7746 rules.
208200 rules inserted. Base: 55294 rules (917 with conclusion selected). Queue: 7677 rules.
208400 rules inserted. Base: 55412 rules (917 with conclusion selected). Queue: 7785 rules.
208600 rules inserted. Base: 55430 rules (917 with conclusion selected). Queue: 7836 rules.
208800 rules inserted. Base: 55458 rules (917 with conclusion selected). Queue: 7873 rules.
209000 rules inserted. Base: 55552 rules (917 with conclusion selected). Queue: 7851 rules.
209200 rules inserted. Base: 55563 rules (917 with conclusion selected). Queue: 7854 rules.
209400 rules inserted. Base: 55602 rules (917 with conclusion selected). Queue: 7807 rules.
209600 rules inserted. Base: 55733 rules (917 with conclusion selected). Queue: 7853 rules.
209800 rules inserted. Base: 55716 rules (917 with conclusion selected). Queue: 8018 rules.
210000 rules inserted. Base: 55802 rules (917 with conclusion selected). Queue: 8075 rules.
210200 rules inserted. Base: 55821 rules (917 with conclusion selected). Queue: 8156 rules.
210400 rules inserted. Base: 55937 rules (917 with conclusion selected). Queue: 8178 rules.
210600 rules inserted. Base: 55971 rules (917 with conclusion selected). Queue: 8166 rules.
210800 rules inserted. Base: 55980 rules (917 with conclusion selected). Queue: 8180 rules.
211000 rules inserted. Base: 56042 rules (917 with conclusion selected). Queue: 8134 rules.
211200 rules inserted. Base: 56146 rules (917 with conclusion selected). Queue: 8162 rules.
211400 rules inserted. Base: 56139 rules (917 with conclusion selected). Queue: 8346 rules.
211600 rules inserted. Base: 56242 rules (917 with conclusion selected). Queue: 8384 rules.
211800 rules inserted. Base: 56260 rules (917 with conclusion selected). Queue: 8481 rules.
212000 rules inserted. Base: 56385 rules (917 with conclusion selected). Queue: 8495 rules.
212200 rules inserted. Base: 56405 rules (917 with conclusion selected). Queue: 8482 rules.
212400 rules inserted. Base: 56415 rules (917 with conclusion selected). Queue: 8513 rules.
212600 rules inserted. Base: 56459 rules (917 with conclusion selected). Queue: 8456 rules.
212800 rules inserted. Base: 56526 rules (917 with conclusion selected). Queue: 8350 rules.
213000 rules inserted. Base: 56675 rules (917 with conclusion selected). Queue: 8426 rules.
213200 rules inserted. Base: 56700 rules (917 with conclusion selected). Queue: 8598 rules.
213400 rules inserted. Base: 56804 rules (917 with conclusion selected). Queue: 8711 rules.
213600 rules inserted. Base: 56864 rules (917 with conclusion selected). Queue: 8557 rules.
213800 rules inserted. Base: 57005 rules (917 with conclusion selected). Queue: 8560 rules.
214000 rules inserted. Base: 57090 rules (917 with conclusion selected). Queue: 8644 rules.
214200 rules inserted. Base: 57183 rules (917 with conclusion selected). Queue: 8640 rules.
214400 rules inserted. Base: 57284 rules (917 with conclusion selected). Queue: 8637 rules.
214600 rules inserted. Base: 57341 rules (917 with conclusion selected). Queue: 8615 rules.
214800 rules inserted. Base: 57481 rules (917 with conclusion selected). Queue: 8568 rules.
215000 rules inserted. Base: 57517 rules (917 with conclusion selected). Queue: 8552 rules.
215200 rules inserted. Base: 57587 rules (917 with conclusion selected). Queue: 8535 rules.
215400 rules inserted. Base: 57736 rules (917 with conclusion selected). Queue: 8635 rules.
215600 rules inserted. Base: 57802 rules (917 with conclusion selected). Queue: 8827 rules.
215800 rules inserted. Base: 57876 rules (917 with conclusion selected). Queue: 8857 rules.
216000 rules inserted. Base: 58001 rules (917 with conclusion selected). Queue: 8871 rules.
216200 rules inserted. Base: 58151 rules (917 with conclusion selected). Queue: 8966 rules.
216400 rules inserted. Base: 58210 rules (917 with conclusion selected). Queue: 8955 rules.
216600 rules inserted. Base: 58289 rules (917 with conclusion selected). Queue: 8975 rules.
216800 rules inserted. Base: 58403 rules (917 with conclusion selected). Queue: 8935 rules.
217000 rules inserted. Base: 58470 rules (917 with conclusion selected). Queue: 8927 rules.
217200 rules inserted. Base: 58498 rules (917 with conclusion selected). Queue: 8892 rules.
217400 rules inserted. Base: 58653 rules (917 with conclusion selected). Queue: 8922 rules.
217600 rules inserted. Base: 58751 rules (917 with conclusion selected). Queue: 9081 rules.
217800 rules inserted. Base: 58835 rules (917 with conclusion selected). Queue: 9065 rules.
218000 rules inserted. Base: 58934 rules (917 with conclusion selected). Queue: 9081 rules.
218200 rules inserted. Base: 59047 rules (917 with conclusion selected). Queue: 9121 rules.
218400 rules inserted. Base: 59174 rules (917 with conclusion selected). Queue: 9059 rules.
218600 rules inserted. Base: 59239 rules (917 with conclusion selected). Queue: 8998 rules.
218800 rules inserted. Base: 59318 rules (917 with conclusion selected). Queue: 8959 rules.
219000 rules inserted. Base: 59375 rules (917 with conclusion selected). Queue: 8964 rules.
219200 rules inserted. Base: 59532 rules (917 with conclusion selected). Queue: 8946 rules.
219400 rules inserted. Base: 59592 rules (917 with conclusion selected). Queue: 9083 rules.
219600 rules inserted. Base: 59678 rules (917 with conclusion selected). Queue: 9114 rules.
219800 rules inserted. Base: 59775 rules (917 with conclusion selected). Queue: 9109 rules.
220000 rules inserted. Base: 59905 rules (917 with conclusion selected). Queue: 9151 rules.
220200 rules inserted. Base: 60014 rules (917 with conclusion selected). Queue: 9105 rules.
220400 rules inserted. Base: 60103 rules (917 with conclusion selected). Queue: 9059 rules.
220600 rules inserted. Base: 60200 rules (917 with conclusion selected). Queue: 9012 rules.
220800 rules inserted. Base: 60243 rules (917 with conclusion selected). Queue: 9006 rules.
221000 rules inserted. Base: 60342 rules (917 with conclusion selected). Queue: 9040 rules.
221200 rules inserted. Base: 60487 rules (917 with conclusion selected). Queue: 8994 rules.
221400 rules inserted. Base: 60453 rules (917 with conclusion selected). Queue: 9070 rules.
221600 rules inserted. Base: 60625 rules (917 with conclusion selected). Queue: 9161 rules.
221800 rules inserted. Base: 60721 rules (917 with conclusion selected). Queue: 9242 rules.
222000 rules inserted. Base: 60671 rules (917 with conclusion selected). Queue: 8956 rules.
222200 rules inserted. Base: 60796 rules (917 with conclusion selected). Queue: 8897 rules.
222400 rules inserted. Base: 60912 rules (917 with conclusion selected). Queue: 8908 rules.
222600 rules inserted. Base: 60895 rules (917 with conclusion selected). Queue: 8864 rules.
222800 rules inserted. Base: 60975 rules (917 with conclusion selected). Queue: 8873 rules.
223000 rules inserted. Base: 61026 rules (917 with conclusion selected). Queue: 8828 rules.
223200 rules inserted. Base: 61138 rules (917 with conclusion selected). Queue: 8794 rules.
223400 rules inserted. Base: 61107 rules (917 with conclusion selected). Queue: 8751 rules.
223600 rules inserted. Base: 61175 rules (917 with conclusion selected). Queue: 8783 rules.
223800 rules inserted. Base: 61345 rules (917 with conclusion selected). Queue: 8762 rules.
224000 rules inserted. Base: 61361 rules (917 with conclusion selected). Queue: 8845 rules.
224200 rules inserted. Base: 61549 rules (917 with conclusion selected). Queue: 8916 rules.
224400 rules inserted. Base: 61682 rules (917 with conclusion selected). Queue: 8963 rules.
224600 rules inserted. Base: 61807 rules (917 with conclusion selected). Queue: 8901 rules.
224800 rules inserted. Base: 61967 rules (917 with conclusion selected). Queue: 8893 rules.
225000 rules inserted. Base: 62100 rules (917 with conclusion selected). Queue: 8896 rules.
225200 rules inserted. Base: 62243 rules (917 with conclusion selected). Queue: 8884 rules.
225400 rules inserted. Base: 62370 rules (917 with conclusion selected). Queue: 8854 rules.
225600 rules inserted. Base: 62459 rules (917 with conclusion selected). Queue: 8839 rules.
225800 rules inserted. Base: 62534 rules (917 with conclusion selected). Queue: 8866 rules.
226000 rules inserted. Base: 62630 rules (917 with conclusion selected). Queue: 8837 rules.
226200 rules inserted. Base: 62818 rules (917 with conclusion selected). Queue: 8809 rules.
226400 rules inserted. Base: 62957 rules (917 with conclusion selected). Queue: 8799 rules.
226600 rules inserted. Base: 63082 rules (917 with conclusion selected). Queue: 8709 rules.
226800 rules inserted. Base: 63264 rules (917 with conclusion selected). Queue: 8649 rules.
227000 rules inserted. Base: 63398 rules (917 with conclusion selected). Queue: 8590 rules.
227200 rules inserted. Base: 63519 rules (917 with conclusion selected). Queue: 8523 rules.
227400 rules inserted. Base: 63581 rules (917 with conclusion selected). Queue: 8525 rules.
227600 rules inserted. Base: 63697 rules (917 with conclusion selected). Queue: 8523 rules.
227800 rules inserted. Base: 63788 rules (917 with conclusion selected). Queue: 8496 rules.
228000 rules inserted. Base: 63981 rules (917 with conclusion selected). Queue: 8484 rules.
228200 rules inserted. Base: 64117 rules (917 with conclusion selected). Queue: 8453 rules.
228400 rules inserted. Base: 64245 rules (917 with conclusion selected). Queue: 8386 rules.
228600 rules inserted. Base: 64388 rules (917 with conclusion selected). Queue: 8358 rules.
228800 rules inserted. Base: 64547 rules (917 with conclusion selected). Queue: 8263 rules.
229000 rules inserted. Base: 64671 rules (917 with conclusion selected). Queue: 8192 rules.
229200 rules inserted. Base: 64712 rules (917 with conclusion selected). Queue: 8235 rules.
229400 rules inserted. Base: 64791 rules (917 with conclusion selected). Queue: 8372 rules.
229600 rules inserted. Base: 64932 rules (917 with conclusion selected). Queue: 8288 rules.
229800 rules inserted. Base: 64930 rules (917 with conclusion selected). Queue: 8264 rules.
230000 rules inserted. Base: 65068 rules (917 with conclusion selected). Queue: 8247 rules.
230200 rules inserted. Base: 65235 rules (917 with conclusion selected). Queue: 8226 rules.
230400 rules inserted. Base: 65305 rules (917 with conclusion selected). Queue: 8178 rules.
230600 rules inserted. Base: 64988 rules (917 with conclusion selected). Queue: 7747 rules.
230800 rules inserted. Base: 65074 rules (917 with conclusion selected). Queue: 7795 rules.
231000 rules inserted. Base: 65208 rules (917 with conclusion selected). Queue: 7705 rules.
231200 rules inserted. Base: 64930 rules (917 with conclusion selected). Queue: 7591 rules.
231400 rules inserted. Base: 65006 rules (917 with conclusion selected). Queue: 7634 rules.
231600 rules inserted. Base: 65050 rules (917 with conclusion selected). Queue: 7546 rules.
231800 rules inserted. Base: 65142 rules (917 with conclusion selected). Queue: 7541 rules.
232000 rules inserted. Base: 65137 rules (917 with conclusion selected). Queue: 7427 rules.
232200 rules inserted. Base: 65182 rules (917 with conclusion selected). Queue: 7455 rules.
232400 rules inserted. Base: 65356 rules (917 with conclusion selected). Queue: 7372 rules.
232600 rules inserted. Base: 65432 rules (917 with conclusion selected). Queue: 7330 rules.
232800 rules inserted. Base: 65614 rules (917 with conclusion selected). Queue: 7289 rules.
233000 rules inserted. Base: 65796 rules (917 with conclusion selected). Queue: 7254 rules.
233200 rules inserted. Base: 65881 rules (917 with conclusion selected). Queue: 7236 rules.
233400 rules inserted. Base: 66064 rules (917 with conclusion selected). Queue: 7136 rules.
233600 rules inserted. Base: 66171 rules (917 with conclusion selected). Queue: 7121 rules.
233800 rules inserted. Base: 66298 rules (917 with conclusion selected). Queue: 7124 rules.
234000 rules inserted. Base: 66409 rules (917 with conclusion selected). Queue: 7028 rules.
234200 rules inserted. Base: 66454 rules (917 with conclusion selected). Queue: 7057 rules.
234400 rules inserted. Base: 66602 rules (917 with conclusion selected). Queue: 6976 rules.
234600 rules inserted. Base: 66798 rules (917 with conclusion selected). Queue: 6907 rules.
234800 rules inserted. Base: 66900 rules (917 with conclusion selected). Queue: 6885 rules.
235000 rules inserted. Base: 67026 rules (917 with conclusion selected). Queue: 6869 rules.
235200 rules inserted. Base: 67146 rules (917 with conclusion selected). Queue: 6831 rules.
235400 rules inserted. Base: 67203 rules (917 with conclusion selected). Queue: 6764 rules.
235600 rules inserted. Base: 67296 rules (917 with conclusion selected). Queue: 6785 rules.
235800 rules inserted. Base: 67460 rules (917 with conclusion selected). Queue: 6700 rules.
236000 rules inserted. Base: 67584 rules (917 with conclusion selected). Queue: 6721 rules.
236200 rules inserted. Base: 67757 rules (917 with conclusion selected). Queue: 6586 rules.
236400 rules inserted. Base: 67872 rules (917 with conclusion selected). Queue: 6607 rules.
236600 rules inserted. Base: 67929 rules (917 with conclusion selected). Queue: 6566 rules.
236800 rules inserted. Base: 68001 rules (917 with conclusion selected). Queue: 6606 rules.
237000 rules inserted. Base: 68042 rules (917 with conclusion selected). Queue: 6751 rules.
237200 rules inserted. Base: 68177 rules (917 with conclusion selected). Queue: 6785 rules.
237400 rules inserted. Base: 68212 rules (917 with conclusion selected). Queue: 6739 rules.
237600 rules inserted. Base: 68365 rules (917 with conclusion selected). Queue: 6698 rules.
237800 rules inserted. Base: 68518 rules (917 with conclusion selected). Queue: 6655 rules.
238000 rules inserted. Base: 68087 rules (917 with conclusion selected). Queue: 5934 rules.
238200 rules inserted. Base: 68124 rules (917 with conclusion selected). Queue: 5917 rules.
238400 rules inserted. Base: 68266 rules (917 with conclusion selected). Queue: 5886 rules.
238600 rules inserted. Base: 68003 rules (917 with conclusion selected). Queue: 5666 rules.
238800 rules inserted. Base: 68044 rules (917 with conclusion selected). Queue: 5764 rules.
239000 rules inserted. Base: 68168 rules (917 with conclusion selected). Queue: 5641 rules.
239200 rules inserted. Base: 68238 rules (917 with conclusion selected). Queue: 5613 rules.
239400 rules inserted. Base: 68343 rules (917 with conclusion selected). Queue: 5596 rules.
239600 rules inserted. Base: 68423 rules (917 with conclusion selected). Queue: 5605 rules.
239800 rules inserted. Base: 68546 rules (917 with conclusion selected). Queue: 5529 rules.
240000 rules inserted. Base: 68736 rules (917 with conclusion selected). Queue: 5510 rules.
240200 rules inserted. Base: 68793 rules (917 with conclusion selected). Queue: 5509 rules.
240400 rules inserted. Base: 68862 rules (917 with conclusion selected). Queue: 5544 rules.
240600 rules inserted. Base: 68937 rules (917 with conclusion selected). Queue: 5567 rules.
240800 rules inserted. Base: 69057 rules (917 with conclusion selected). Queue: 5474 rules.
241000 rules inserted. Base: 69098 rules (917 with conclusion selected). Queue: 5547 rules.
241200 rules inserted. Base: 69248 rules (917 with conclusion selected). Queue: 5594 rules.
241400 rules inserted. Base: 69317 rules (917 with conclusion selected). Queue: 5622 rules.
241600 rules inserted. Base: 69386 rules (917 with conclusion selected). Queue: 5727 rules.
241800 rules inserted. Base: 69421 rules (917 with conclusion selected). Queue: 5669 rules.
242000 rules inserted. Base: 69462 rules (917 with conclusion selected). Queue: 5744 rules.
242200 rules inserted. Base: 69612 rules (917 with conclusion selected). Queue: 5788 rules.
242400 rules inserted. Base: 69683 rules (917 with conclusion selected). Queue: 5817 rules.
242600 rules inserted. Base: 69750 rules (917 with conclusion selected). Queue: 5923 rules.
242800 rules inserted. Base: 69783 rules (917 with conclusion selected). Queue: 5865 rules.
243000 rules inserted. Base: 69889 rules (917 with conclusion selected). Queue: 6061 rules.
243200 rules inserted. Base: 69868 rules (917 with conclusion selected). Queue: 6101 rules.
243400 rules inserted. Base: 69965 rules (917 with conclusion selected). Queue: 6090 rules.
243600 rules inserted. Base: 69982 rules (917 with conclusion selected). Queue: 6029 rules.
243800 rules inserted. Base: 70155 rules (917 with conclusion selected). Queue: 5785 rules.
244000 rules inserted. Base: 70143 rules (917 with conclusion selected). Queue: 5911 rules.
244200 rules inserted. Base: 70190 rules (917 with conclusion selected). Queue: 5814 rules.
244400 rules inserted. Base: 70214 rules (917 with conclusion selected). Queue: 5848 rules.
244600 rules inserted. Base: 70357 rules (917 with conclusion selected). Queue: 5794 rules.
244800 rules inserted. Base: 70414 rules (917 with conclusion selected). Queue: 5774 rules.
245000 rules inserted. Base: 70521 rules (917 with conclusion selected). Queue: 5963 rules.
245200 rules inserted. Base: 70538 rules (917 with conclusion selected). Queue: 5950 rules.
245400 rules inserted. Base: 70736 rules (917 with conclusion selected). Queue: 5975 rules.
245600 rules inserted. Base: 70731 rules (917 with conclusion selected). Queue: 6100 rules.
245800 rules inserted. Base: 70881 rules (917 with conclusion selected). Queue: 6122 rules.
246000 rules inserted. Base: 70910 rules (917 with conclusion selected). Queue: 6130 rules.
246200 rules inserted. Base: 70972 rules (917 with conclusion selected). Queue: 6160 rules.
246400 rules inserted. Base: 70966 rules (917 with conclusion selected). Queue: 6334 rules.
246600 rules inserted. Base: 71145 rules (917 with conclusion selected). Queue: 6307 rules.
246800 rules inserted. Base: 71163 rules (917 with conclusion selected). Queue: 6411 rules.
247000 rules inserted. Base: 71198 rules (917 with conclusion selected). Queue: 6447 rules.
247200 rules inserted. Base: 71266 rules (917 with conclusion selected). Queue: 6464 rules.
247400 rules inserted. Base: 71377 rules (917 with conclusion selected). Queue: 6519 rules.
247600 rules inserted. Base: 71410 rules (917 with conclusion selected). Queue: 6613 rules.
247800 rules inserted. Base: 71532 rules (917 with conclusion selected). Queue: 6666 rules.
248000 rules inserted. Base: 71608 rules (917 with conclusion selected). Queue: 6717 rules.
248200 rules inserted. Base: 71650 rules (917 with conclusion selected). Queue: 6752 rules.
248400 rules inserted. Base: 71680 rules (917 with conclusion selected). Queue: 6747 rules.
248600 rules inserted. Base: 71853 rules (917 with conclusion selected). Queue: 6822 rules.
248800 rules inserted. Base: 71885 rules (917 with conclusion selected). Queue: 7008 rules.
249000 rules inserted. Base: 71963 rules (917 with conclusion selected). Queue: 7076 rules.
249200 rules inserted. Base: 72060 rules (917 with conclusion selected). Queue: 7001 rules.
249400 rules inserted. Base: 72244 rules (917 with conclusion selected). Queue: 6890 rules.
249600 rules inserted. Base: 72328 rules (917 with conclusion selected). Queue: 6929 rules.
249800 rules inserted. Base: 72448 rules (917 with conclusion selected). Queue: 6988 rules.
250000 rules inserted. Base: 72583 rules (917 with conclusion selected). Queue: 6935 rules.
250200 rules inserted. Base: 72676 rules (917 with conclusion selected). Queue: 6912 rules.
250400 rules inserted. Base: 72816 rules (917 with conclusion selected). Queue: 6862 rules.
250600 rules inserted. Base: 72941 rules (917 with conclusion selected). Queue: 6899 rules.
250800 rules inserted. Base: 72973 rules (917 with conclusion selected). Queue: 7027 rules.
251000 rules inserted. Base: 73092 rules (917 with conclusion selected). Queue: 7159 rules.
251200 rules inserted. Base: 73257 rules (917 with conclusion selected). Queue: 7063 rules.
251400 rules inserted. Base: 73365 rules (917 with conclusion selected). Queue: 7085 rules.
251600 rules inserted. Base: 73507 rules (917 with conclusion selected). Queue: 7168 rules.
251800 rules inserted. Base: 73601 rules (917 with conclusion selected). Queue: 7159 rules.
252000 rules inserted. Base: 73688 rules (917 with conclusion selected). Queue: 7126 rules.
252200 rules inserted. Base: 73801 rules (917 with conclusion selected). Queue: 7092 rules.
252400 rules inserted. Base: 73893 rules (917 with conclusion selected). Queue: 7140 rules.
252600 rules inserted. Base: 74056 rules (917 with conclusion selected). Queue: 7266 rules.
252800 rules inserted. Base: 74184 rules (917 with conclusion selected). Queue: 7194 rules.
253000 rules inserted. Base: 74283 rules (917 with conclusion selected). Queue: 7254 rules.
253200 rules inserted. Base: 74370 rules (917 with conclusion selected). Queue: 7208 rules.
253400 rules inserted. Base: 74480 rules (917 with conclusion selected). Queue: 7156 rules.
253600 rules inserted. Base: 74601 rules (917 with conclusion selected). Queue: 7115 rules.
253800 rules inserted. Base: 74682 rules (917 with conclusion selected). Queue: 7161 rules.
254000 rules inserted. Base: 74830 rules (917 with conclusion selected). Queue: 7286 rules.
254200 rules inserted. Base: 74982 rules (917 with conclusion selected). Queue: 7208 rules.
254400 rules inserted. Base: 75084 rules (917 with conclusion selected). Queue: 7286 rules.
254600 rules inserted. Base: 75171 rules (917 with conclusion selected). Queue: 7233 rules.
254800 rules inserted. Base: 75271 rules (917 with conclusion selected). Queue: 7175 rules.
255000 rules inserted. Base: 75398 rules (917 with conclusion selected). Queue: 7174 rules.
255200 rules inserted. Base: 75552 rules (917 with conclusion selected). Queue: 7112 rules.
255400 rules inserted. Base: 75532 rules (917 with conclusion selected). Queue: 7164 rules.
255600 rules inserted. Base: 75705 rules (917 with conclusion selected). Queue: 7227 rules.
255800 rules inserted. Base: 75804 rules (917 with conclusion selected). Queue: 7286 rules.
256000 rules inserted. Base: 75767 rules (917 with conclusion selected). Queue: 7036 rules.
256200 rules inserted. Base: 75938 rules (917 with conclusion selected). Queue: 6903 rules.
256400 rules inserted. Base: 76023 rules (917 with conclusion selected). Queue: 6874 rules.
256600 rules inserted. Base: 76212 rules (917 with conclusion selected). Queue: 6876 rules.
256800 rules inserted. Base: 76146 rules (917 with conclusion selected). Queue: 6772 rules.
257000 rules inserted. Base: 76190 rules (917 with conclusion selected). Queue: 6711 rules.
257200 rules inserted. Base: 76225 rules (917 with conclusion selected). Queue: 6603 rules.
257400 rules inserted. Base: 76407 rules (917 with conclusion selected). Queue: 6574 rules.
257600 rules inserted. Base: 76417 rules (917 with conclusion selected). Queue: 6618 rules.
257800 rules inserted. Base: 76603 rules (917 with conclusion selected). Queue: 6679 rules.
258000 rules inserted. Base: 76775 rules (917 with conclusion selected). Queue: 6695 rules.
258200 rules inserted. Base: 76962 rules (917 with conclusion selected). Queue: 6572 rules.
258400 rules inserted. Base: 77057 rules (917 with conclusion selected). Queue: 6563 rules.
258600 rules inserted. Base: 77231 rules (917 with conclusion selected). Queue: 6534 rules.
258800 rules inserted. Base: 77386 rules (917 with conclusion selected). Queue: 6517 rules.
259000 rules inserted. Base: 77532 rules (917 with conclusion selected). Queue: 6443 rules.
259200 rules inserted. Base: 77697 rules (917 with conclusion selected). Queue: 6374 rules.
259400 rules inserted. Base: 77813 rules (917 with conclusion selected). Queue: 6359 rules.
259600 rules inserted. Base: 77996 rules (917 with conclusion selected). Queue: 6310 rules.
259800 rules inserted. Base: 78122 rules (917 with conclusion selected). Queue: 6212 rules.
260000 rules inserted. Base: 78314 rules (917 with conclusion selected). Queue: 6152 rules.
260200 rules inserted. Base: 78470 rules (917 with conclusion selected). Queue: 6020 rules.
260400 rules inserted. Base: 78641 rules (917 with conclusion selected). Queue: 5911 rules.
260600 rules inserted. Base: 78734 rules (917 with conclusion selected). Queue: 5874 rules.
260800 rules inserted. Base: 78927 rules (917 with conclusion selected). Queue: 5848 rules.
261000 rules inserted. Base: 79108 rules (917 with conclusion selected). Queue: 5754 rules.
261200 rules inserted. Base: 79235 rules (917 with conclusion selected). Queue: 5694 rules.
261400 rules inserted. Base: 79399 rules (917 with conclusion selected). Queue: 5593 rules.
261600 rules inserted. Base: 79575 rules (917 with conclusion selected). Queue: 5470 rules.
261800 rules inserted. Base: 79726 rules (917 with conclusion selected). Queue: 5433 rules.
262000 rules inserted. Base: 79787 rules (917 with conclusion selected). Queue: 5378 rules.
262200 rules inserted. Base: 79888 rules (917 with conclusion selected). Queue: 5315 rules.
262400 rules inserted. Base: 80056 rules (917 with conclusion selected). Queue: 5254 rules.
262600 rules inserted. Base: 79980 rules (917 with conclusion selected). Queue: 5202 rules.
262800 rules inserted. Base: 79891 rules (917 with conclusion selected). Queue: 4568 rules.
263000 rules inserted. Base: 80012 rules (917 with conclusion selected). Queue: 4480 rules.
263200 rules inserted. Base: 79978 rules (917 with conclusion selected). Queue: 4412 rules.
263400 rules inserted. Base: 79912 rules (917 with conclusion selected). Queue: 4232 rules.
263600 rules inserted. Base: 79900 rules (917 with conclusion selected). Queue: 4095 rules.
263800 rules inserted. Base: 80048 rules (917 with conclusion selected). Queue: 3958 rules.
264000 rules inserted. Base: 80121 rules (917 with conclusion selected). Queue: 3889 rules.
264200 rules inserted. Base: 80311 rules (917 with conclusion selected). Queue: 3820 rules.
264400 rules inserted. Base: 80501 rules (917 with conclusion selected). Queue: 3755 rules.
264600 rules inserted. Base: 80651 rules (917 with conclusion selected). Queue: 3621 rules.
264800 rules inserted. Base: 80841 rules (917 with conclusion selected). Queue: 3503 rules.
265000 rules inserted. Base: 81017 rules (917 with conclusion selected). Queue: 3375 rules.
265200 rules inserted. Base: 81174 rules (917 with conclusion selected). Queue: 3270 rules.
265400 rules inserted. Base: 81362 rules (917 with conclusion selected). Queue: 3182 rules.
265600 rules inserted. Base: 81535 rules (917 with conclusion selected). Queue: 3052 rules.
265800 rules inserted. Base: 81732 rules (917 with conclusion selected). Queue: 2899 rules.
266000 rules inserted. Base: 81881 rules (917 with conclusion selected). Queue: 2807 rules.
266200 rules inserted. Base: 82058 rules (917 with conclusion selected). Queue: 2700 rules.
266400 rules inserted. Base: 82251 rules (917 with conclusion selected). Queue: 2549 rules.
266600 rules inserted. Base: 82389 rules (917 with conclusion selected). Queue: 2448 rules.
266800 rules inserted. Base: 82535 rules (917 with conclusion selected). Queue: 2338 rules.
267000 rules inserted. Base: 82496 rules (917 with conclusion selected). Queue: 2282 rules.
267200 rules inserted. Base: 82474 rules (917 with conclusion selected). Queue: 1958 rules.
267400 rules inserted. Base: 82260 rules (917 with conclusion selected). Queue: 1852 rules.
267600 rules inserted. Base: 82460 rules (917 with conclusion selected). Queue: 1713 rules.
267800 rules inserted. Base: 82592 rules (917 with conclusion selected). Queue: 1631 rules.
268000 rules inserted. Base: 82788 rules (917 with conclusion selected). Queue: 1546 rules.
268200 rules inserted. Base: 82978 rules (917 with conclusion selected). Queue: 1375 rules.
268400 rules inserted. Base: 83150 rules (917 with conclusion selected). Queue: 1255 rules.
268600 rules inserted. Base: 83318 rules (917 with conclusion selected). Queue: 1139 rules.
268800 rules inserted. Base: 83491 rules (917 with conclusion selected). Queue: 1032 rules.
269000 rules inserted. Base: 83610 rules (917 with conclusion selected). Queue: 1000 rules.
269200 rules inserted. Base: 83588 rules (917 with conclusion selected). Queue: 891 rules.
269400 rules inserted. Base: 83730 rules (917 with conclusion selected). Queue: 769 rules.
269600 rules inserted. Base: 83898 rules (917 with conclusion selected). Queue: 717 rules.
269800 rules inserted. Base: 84086 rules (917 with conclusion selected). Queue: 573 rules.
270000 rules inserted. Base: 84250 rules (917 with conclusion selected). Queue: 493 rules.
270200 rules inserted. Base: 84414 rules (917 with conclusion selected). Queue: 341 rules.
270400 rules inserted. Base: 84606 rules (917 with conclusion selected). Queue: 213 rules.
270600 rules inserted. Base: 84798 rules (917 with conclusion selected). Queue: 68 rules.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m_26)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m_26))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(bob,alice,stagepack_a(sid_6),msg_a(alice,bob,sid_5)))
Abbreviations:
sid_6 = sid[!1 = @sid]
sid_5 = sid[!1 = @sid_1]
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m_26)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m_26)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m_26)) ==> event(SendMsg(alice,c,stagepack_a(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(bob,alice,stagepack_a(sid_6),msg_a(alice,bob,sid_5)))
Abbreviations:
sid_6 = sid[!1 = @sid]
sid_5 = sid[!1 = @sid_1]
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m_26)) ==> event(SendMsg(alice,c,stagepack_a(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m_26)) ==> event(SendMsg(alice,c,stagepack_a(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(bob,alice,stagepack_a(sid_6),msg_a(alice,bob,sid_5)))
Abbreviations:
sid_6 = sid[!1 = @sid]
sid_5 = sid[!1 = @sid_1]
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m_26)) ==> event(SendMsg(alice,c,stagepack_a(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m_26)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(bob,alice,stagepack_a(sid_6),msg_a(alice,bob,sid_5)))
Abbreviations:
sid_6 = sid[!1 = @sid]
sid_5 = sid[!1 = @sid_1]
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m_26)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m_26)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(bob,alice,stagepack_a(sid_6),msg_a(alice,bob,sid_5)))
Abbreviations:
sid_6 = sid[!1 = @sid]
sid_5 = sid[!1 = @sid_1]
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m_26)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) is true.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(LeakM(phase1,bob)) && begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> attacker_p1(msg_a(alice,bob,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {50}.
table(statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

3. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {163}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {160}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) may be sent on channel pub at output {162}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_5),g))).

8. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent on channel pub at output {1187}.
mess(pub,(validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

9. By 1, the attacker may have the channel pub.
By 8, the message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent on this channel.
So the attacker may obtain the message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) by listening on this channel.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

10. By 9, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

11. By 9, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 10, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g)))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g)))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_5),g))).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {1780}.
The event LeakM(phase1,bob) may be executed at {1781}.
So the message (key_s(bob),key_m(bob)) may be sent on channel pub in phase 1 at output {1782}.
mess_p1(pub,(key_s(bob),key_m(bob))).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message (key_s(bob),key_m(bob)) in phase 1 may be sent on this channel.
So the attacker may obtain the message (key_s(bob),key_m(bob)) in phase 1 by listening on this channel.
attacker_p1((key_s(bob),key_m(bob))).

25. By 24, the attacker may know (key_s(bob),key_m(bob)) in phase 1.
Using the function 2-proj-2-tuple the attacker may obtain key_m(bob) in phase 1.
attacker_p1(key_m(bob)).

26. By 25, the attacker may know key_m(bob) in phase 1.
By 21, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g)) in phase 1.
attacker_p1(dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))).

27. By 24, the attacker may know (key_s(bob),key_m(bob)) in phase 1.
Using the function 1-proj-2-tuple the attacker may obtain key_s(bob) in phase 1.
attacker_p1(key_s(bob)).

28. By 27, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g)) in phase 1.
attacker_p1(dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))).

29. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

30. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

31. By 30, the attacker may know somename in phase 1.
By 29, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

32. By 31, the attacker may know hash(somename,empty) in phase 1.
By 28, the attacker may know dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g)))).

33. By 32, the attacker may know hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))) in phase 1.
By 26, the attacker may know dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g)))).

34. By 33, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).

35. By 34, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_5) in phase 1.
attacker_p1(msg_a(alice,bob,sid_5)).

36. By 35, attacker_p1(msg_a(alice,bob,sid_5)).
The goal is reached, represented in the following fact:
attacker_p1(msg_a(alice,bob,sid_5)).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakM(px,bob))
goal reachable: begin(LeakM(phase1,bob)) && begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> attacker_p1(msg_a(alice,bob,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]
goal reachable: begin(LeakM(phase0,bob)) && begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> attacker_p1(msg_a(alice,bob,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]
RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakM(px,bob)) is true.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(px,bob)) && event(LeakM(px,bob)) && event(LeakS(pz,alice)) && event(LeakM(pz,alice)))
goal reachable: begin(LeakM(phase1,bob)) && begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> attacker_p1(msg_a(alice,bob,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {50}.
table(statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

3. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {163}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {160}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) may be sent on channel pub at output {162}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_5),g))).

8. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent on channel pub at output {1187}.
mess(pub,(validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

9. By 1, the attacker may have the channel pub.
By 8, the message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent on this channel.
So the attacker may obtain the message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) by listening on this channel.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

10. By 9, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

11. By 9, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 10, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g)))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g)))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_5),g))).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {1780}.
The event LeakM(phase1,bob) may be executed at {1781}.
So the message (key_s(bob),key_m(bob)) may be sent on channel pub in phase 1 at output {1782}.
mess_p1(pub,(key_s(bob),key_m(bob))).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message (key_s(bob),key_m(bob)) in phase 1 may be sent on this channel.
So the attacker may obtain the message (key_s(bob),key_m(bob)) in phase 1 by listening on this channel.
attacker_p1((key_s(bob),key_m(bob))).

25. By 24, the attacker may know (key_s(bob),key_m(bob)) in phase 1.
Using the function 2-proj-2-tuple the attacker may obtain key_m(bob) in phase 1.
attacker_p1(key_m(bob)).

26. By 25, the attacker may know key_m(bob) in phase 1.
By 21, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g)) in phase 1.
attacker_p1(dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))).

27. By 24, the attacker may know (key_s(bob),key_m(bob)) in phase 1.
Using the function 1-proj-2-tuple the attacker may obtain key_s(bob) in phase 1.
attacker_p1(key_s(bob)).

28. By 27, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g)) in phase 1.
attacker_p1(dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))).

29. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

30. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

31. By 30, the attacker may know somename in phase 1.
By 29, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

32. By 31, the attacker may know hash(somename,empty) in phase 1.
By 28, the attacker may know dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g)))).

33. By 32, the attacker may know hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))) in phase 1.
By 26, the attacker may know dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g)))).

34. By 33, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).

35. By 34, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_5) in phase 1.
attacker_p1(msg_a(alice,bob,sid_5)).

36. By 35, attacker_p1(msg_a(alice,bob,sid_5)).
The goal is reached, represented in the following fact:
attacker_p1(msg_a(alice,bob,sid_5)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(px,bob)) && event(LeakM(px,bob)) && event(LeakS(pz,alice)) && event(LeakM(pz,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))
goal reachable: begin(LeakM(phase1,bob)) && begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> attacker_p1(msg_a(alice,bob,sid_5))
Abbreviations:
sid_5 = sid[!1 = @sid]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {50}.
table(statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

3. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {163}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {160}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) may be sent on channel pub at output {162}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_5),g))).

8. The message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent on channel pub at output {1187}.
mess(pub,(validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

9. By 1, the attacker may have the channel pub.
By 8, the message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) may be sent on this channel.
So the attacker may obtain the message (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))) by listening on this channel.
attacker((validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)))).

10. By 9, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 2-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_m(bob),g)).
attacker(validkey(dhexp_real(key_m(bob),g))).

11. By 9, the attacker may know (validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g))).
Using the function 1-proj-2-tuple the attacker may obtain validkey(dhexp_real(key_s(bob),g)).
attacker(validkey(dhexp_real(key_s(bob),g))).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 10, the attacker may know validkey(dhexp_real(key_m(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g)))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g)))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_5),g))).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {1780}.
The event LeakM(phase1,bob) may be executed at {1781}.
So the message (key_s(bob),key_m(bob)) may be sent on channel pub in phase 1 at output {1782}.
mess_p1(pub,(key_s(bob),key_m(bob))).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message (key_s(bob),key_m(bob)) in phase 1 may be sent on this channel.
So the attacker may obtain the message (key_s(bob),key_m(bob)) in phase 1 by listening on this channel.
attacker_p1((key_s(bob),key_m(bob))).

25. By 24, the attacker may know (key_s(bob),key_m(bob)) in phase 1.
Using the function 2-proj-2-tuple the attacker may obtain key_m(bob) in phase 1.
attacker_p1(key_m(bob)).

26. By 25, the attacker may know key_m(bob) in phase 1.
By 21, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g)) in phase 1.
attacker_p1(dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))).

27. By 24, the attacker may know (key_s(bob),key_m(bob)) in phase 1.
Using the function 1-proj-2-tuple the attacker may obtain key_s(bob) in phase 1.
attacker_p1(key_s(bob)).

28. By 27, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_5),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g)) in phase 1.
attacker_p1(dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))).

29. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

30. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

31. By 30, the attacker may know somename in phase 1.
By 29, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

32. By 31, the attacker may know hash(somename,empty) in phase 1.
By 28, the attacker may know dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g)))).

33. By 32, the attacker may know hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))) in phase 1.
By 26, the attacker may know dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g)))).

34. By 33, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))).

35. By 34, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_5) in phase 1.
attacker_p1(msg_a(alice,bob,sid_5)).

36. By 35, attacker_p1(msg_a(alice,bob,sid_5)).
The goal is reached, represented in the following fact:
attacker_p1(msg_a(alice,bob,sid_5)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m_26)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m_26))
goal reachable: begin(SendMsg(bob,charlie,stagepack_b(sid_5),msg_b(bob,charlie,sid_5))) && begin(SendMsg(alice,bob,stagepack_a(sid_6),msg_a(alice,bob,sid_6))) -> end(RecvMsg(alice,bob,stagepack_b(sid_6),msg_b(bob,charlie,sid_5)))
Abbreviations:
sid_6 = sid[!1 = @sid]
sid_5 = sid[!1 = @sid_1]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]
sid_6 = sid[!1 = @sid_1]

1. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {50}.
table(statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

2. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {163}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {160}.
So the entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {161}.
table(statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

3. The entry statestore(bob,charlie,sid_6,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) may be inserted in a table at insert {1833}.
table(statestore(bob,charlie,sid_6,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false)))).

4. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {163}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {160}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) may be sent on channel pub at output {162}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

5. The entry statestore(bob,charlie,sid_6,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 3 may be read at get {1948}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) that may be sent on channel pub by 4 may be received at input {1834}.
So the entry statestore(bob,charlie,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false))) may be inserted in a table at insert {1947}.
table(statestore(bob,charlie,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false)))).

6. The entry statestore(bob,charlie,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false))) that may be in a table by 5 may be read at get {2040}.
The event SendMsg(bob,charlie,stagepack_b(sid_6),msg_b(bob,charlie,sid_6)) may be executed at {2037}.
So the message concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))) may be sent on channel pub at output {2039}.
mess(pub,concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)))).

7. The entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {257}.
The message concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))) that may be sent on channel pub by 6 may be received at input {164}.
So event RecvMsg(alice,bob,stagepack_b(sid_5),msg_b(bob,charlie,sid_6)) may be executed at {255}.
end(RecvMsg(alice,bob,stagepack_b(sid_5),msg_b(bob,charlie,sid_6))).

8. By 7, end(RecvMsg(alice,bob,stagepack_b(sid_5),msg_b(bob,charlie,sid_6))).
The goal is reached, represented in the following fact:
end(RecvMsg(alice,bob,stagepack_b(sid_5),msg_b(bob,charlie,sid_6))).


RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m_26)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m_26)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m_26)) ==> event(SendMsg(bob,c,stagepack_b(sid_b),m_26)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice)))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5))) && begin(SendMsg(alice,bob,stagepack_a(sid_6),msg_a(alice,bob,sid_6))) -> end(RecvMsg(alice,bob,stagepack_b(sid_6),msg_b(bob,alice,sid_5)))
Abbreviations:
sid_6 = sid[!1 = @sid]
sid_5 = sid[!1 = @sid_1]
goal reachable: begin(SendMsg(bob,charlie,stagepack_b(sid_5),msg_b(bob,charlie,sid_5))) && begin(SendMsg(alice,bob,stagepack_a(sid_6),msg_a(alice,bob,sid_6))) -> end(RecvMsg(alice,bob,stagepack_b(sid_6),msg_b(bob,charlie,sid_5)))
Abbreviations:
sid_6 = sid[!1 = @sid]
sid_5 = sid[!1 = @sid_1]
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m_26)) ==> event(SendMsg(bob,c,stagepack_b(sid_b),m_26)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m_26)) ==> event(SendMsg(bob,c,stagepack_b(sid_b),m_26)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5))) && begin(SendMsg(alice,bob,stagepack_a(sid_6),msg_a(alice,bob,sid_6))) -> end(RecvMsg(alice,bob,stagepack_b(sid_6),msg_b(bob,alice,sid_5)))
Abbreviations:
sid_6 = sid[!1 = @sid]
sid_5 = sid[!1 = @sid_1]
goal reachable: begin(SendMsg(bob,charlie,stagepack_b(sid_5),msg_b(bob,charlie,sid_5))) && begin(SendMsg(alice,bob,stagepack_a(sid_6),msg_a(alice,bob,sid_6))) -> end(RecvMsg(alice,bob,stagepack_b(sid_6),msg_b(bob,charlie,sid_5)))
Abbreviations:
sid_6 = sid[!1 = @sid]
sid_5 = sid[!1 = @sid_1]
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m_26)) ==> event(SendMsg(bob,c,stagepack_b(sid_b),m_26)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m_26)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m_26)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice)))
goal reachable: begin(SendMsg(bob,charlie,stagepack_b(sid_5),msg_b(bob,charlie,sid_5))) && begin(SendMsg(alice,bob,stagepack_a(sid_6),msg_a(alice,bob,sid_6))) -> end(RecvMsg(alice,bob,stagepack_b(sid_6),msg_b(bob,charlie,sid_5)))
Abbreviations:
sid_6 = sid[!1 = @sid]
sid_5 = sid[!1 = @sid_1]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]
sid_6 = sid[!1 = @sid_1]

1. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {50}.
table(statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

2. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {163}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {160}.
So the entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {161}.
table(statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

3. The entry statestore(bob,charlie,sid_6,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) may be inserted in a table at insert {1833}.
table(statestore(bob,charlie,sid_6,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false)))).

4. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {163}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {160}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) may be sent on channel pub at output {162}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

5. The entry statestore(bob,charlie,sid_6,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 3 may be read at get {1948}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) that may be sent on channel pub by 4 may be received at input {1834}.
So the entry statestore(bob,charlie,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false))) may be inserted in a table at insert {1947}.
table(statestore(bob,charlie,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false)))).

6. The entry statestore(bob,charlie,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false))) that may be in a table by 5 may be read at get {2040}.
The event SendMsg(bob,charlie,stagepack_b(sid_6),msg_b(bob,charlie,sid_6)) may be executed at {2037}.
So the message concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))) may be sent on channel pub at output {2039}.
mess(pub,concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)))).

7. The entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {257}.
The message concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))) that may be sent on channel pub by 6 may be received at input {164}.
So event RecvMsg(alice,bob,stagepack_b(sid_5),msg_b(bob,charlie,sid_6)) may be executed at {255}.
end(RecvMsg(alice,bob,stagepack_b(sid_5),msg_b(bob,charlie,sid_6))).

8. By 7, end(RecvMsg(alice,bob,stagepack_b(sid_5),msg_b(bob,charlie,sid_6))).
The goal is reached, represented in the following fact:
end(RecvMsg(alice,bob,stagepack_b(sid_5),msg_b(bob,charlie,sid_6))).


RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m_26)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m_26)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m_26)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m_26)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)))
goal reachable: begin(SendMsg(bob,charlie,stagepack_b(sid_5),msg_b(bob,charlie,sid_5))) && begin(SendMsg(alice,bob,stagepack_a(sid_6),msg_a(alice,bob,sid_6))) -> end(RecvMsg(alice,bob,stagepack_b(sid_6),msg_b(bob,charlie,sid_5)))
Abbreviations:
sid_6 = sid[!1 = @sid]
sid_5 = sid[!1 = @sid_1]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]
sid_6 = sid[!1 = @sid_1]

1. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {50}.
table(statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

2. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {163}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {160}.
So the entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {161}.
table(statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

3. The entry statestore(bob,charlie,sid_6,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) may be inserted in a table at insert {1833}.
table(statestore(bob,charlie,sid_6,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false)))).

4. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 1 may be read at get {163}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {160}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) may be sent on channel pub at output {162}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

5. The entry statestore(bob,charlie,sid_6,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 3 may be read at get {1948}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) that may be sent on channel pub by 4 may be received at input {1834}.
So the entry statestore(bob,charlie,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false))) may be inserted in a table at insert {1947}.
table(statestore(bob,charlie,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false)))).

6. The entry statestore(bob,charlie,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false))) that may be in a table by 5 may be read at get {2040}.
The event SendMsg(bob,charlie,stagepack_b(sid_6),msg_b(bob,charlie,sid_6)) may be executed at {2037}.
So the message concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))) may be sent on channel pub at output {2039}.
mess(pub,concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6)))).

7. The entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {257}.
The message concat3(validkey(dhexp_real(key_e(bob,charlie,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,charlie,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,charlie,sid_6),g))),msg_b(bob,charlie,sid_6))) that may be sent on channel pub by 6 may be received at input {164}.
So event RecvMsg(alice,bob,stagepack_b(sid_5),msg_b(bob,charlie,sid_6)) may be executed at {255}.
end(RecvMsg(alice,bob,stagepack_b(sid_5),msg_b(bob,charlie,sid_6))).

8. By 7, end(RecvMsg(alice,bob,stagepack_b(sid_5),msg_b(bob,charlie,sid_6))).
The goal is reached, represented in the following fact:
end(RecvMsg(alice,bob,stagepack_b(sid_5),msg_b(bob,charlie,sid_6))).


RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m_26)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m_26)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) cannot be proved.
Starting query not attacker_p1(msg_b(bob,alice,sid_b))
RESULT not attacker_p1(msg_b(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(px,alice)) && event(LeakM(px,alice))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(px,alice)) && event(LeakM(px,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(px,alice)) && event(LeakM(px,alice)) && event(LeakS(pz,bob)) && event(LeakM(pz,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(px,alice)) && event(LeakM(px,alice)) && event(LeakS(pz,bob)) && event(LeakM(pz,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) && event(LeakM(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m_26)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m_26))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5))) && begin(SendMsg(bob,alice,stagepack_b(sid_6),msg_b(bob,alice,sid_6))) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(bob,alice,stagepack_c(sid_6),msg_c(alice,bob,sid_5)))
Abbreviations:
sid_6 = sid[!1 = @sid]
sid_5 = sid[!1 = @sid_1]
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m_26)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m_26)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m_26)) ==> event(SendMsg(alice,c,stagepack_c(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5))) && begin(SendMsg(bob,alice,stagepack_b(sid_6),msg_b(bob,alice,sid_6))) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(bob,alice,stagepack_c(sid_6),msg_c(alice,bob,sid_5)))
Abbreviations:
sid_6 = sid[!1 = @sid]
sid_5 = sid[!1 = @sid_1]
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m_26)) ==> event(SendMsg(alice,c,stagepack_c(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m_26)) ==> event(SendMsg(alice,c,stagepack_c(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice)))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5))) && begin(SendMsg(bob,alice,stagepack_b(sid_6),msg_b(bob,alice,sid_6))) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(bob,alice,stagepack_c(sid_6),msg_c(alice,bob,sid_5)))
Abbreviations:
sid_6 = sid[!1 = @sid]
sid_5 = sid[!1 = @sid_1]
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m_26)) ==> event(SendMsg(alice,c,stagepack_c(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m_26)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5))) && begin(SendMsg(bob,alice,stagepack_b(sid_6),msg_b(bob,alice,sid_6))) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(bob,alice,stagepack_c(sid_6),msg_c(alice,bob,sid_5)))
Abbreviations:
sid_6 = sid[!1 = @sid]
sid_5 = sid[!1 = @sid_1]
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m_26)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m_26)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice)))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5))) && begin(SendMsg(bob,alice,stagepack_b(sid_6),msg_b(bob,alice,sid_6))) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(bob,alice,stagepack_c(sid_6),msg_c(alice,bob,sid_5)))
Abbreviations:
sid_6 = sid[!1 = @sid]
sid_5 = sid[!1 = @sid_1]
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m_26)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) is true.
Starting query not attacker_p1(msg_c(alice,bob,sid_a))
RESULT not attacker_p1(msg_c(alice,bob,sid_a)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakM(px,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakM(px,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(px,bob)) && event(LeakM(px,bob)) && event(LeakS(pz,alice)) && event(LeakM(pz,alice)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(px,bob)) && event(LeakM(px,bob)) && event(LeakS(pz,alice)) && event(LeakM(pz,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m_26)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m_26))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid_5),msg_d(bob,alice,sid_5))) && begin(SendMsg(alice,bob,stagepack_c(sid_6),msg_c(alice,bob,sid_6))) && begin(SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5))) && begin(SendMsg(alice,bob,stagepack_a(sid_6),msg_a(alice,bob,sid_6))) -> end(RecvMsg(alice,bob,stagepack_d(sid_6),msg_d(bob,alice,sid_5)))
Abbreviations:
sid_6 = sid[!1 = @sid]
sid_5 = sid[!1 = @sid_1]
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m_26)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m_26)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m_26)) ==> event(SendMsg(bob,c,stagepack_d(sid_b),m_26)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice)))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid_5),msg_d(bob,alice,sid_5))) && begin(SendMsg(alice,bob,stagepack_c(sid_6),msg_c(alice,bob,sid_6))) && begin(SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5))) && begin(SendMsg(alice,bob,stagepack_a(sid_6),msg_a(alice,bob,sid_6))) -> end(RecvMsg(alice,bob,stagepack_d(sid_6),msg_d(bob,alice,sid_5)))
Abbreviations:
sid_6 = sid[!1 = @sid]
sid_5 = sid[!1 = @sid_1]
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m_26)) ==> event(SendMsg(bob,c,stagepack_d(sid_b),m_26)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m_26)) ==> event(SendMsg(bob,c,stagepack_d(sid_b),m_26)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid_5),msg_d(bob,alice,sid_5))) && begin(SendMsg(alice,bob,stagepack_c(sid_6),msg_c(alice,bob,sid_6))) && begin(SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5))) && begin(SendMsg(alice,bob,stagepack_a(sid_6),msg_a(alice,bob,sid_6))) -> end(RecvMsg(alice,bob,stagepack_d(sid_6),msg_d(bob,alice,sid_5)))
Abbreviations:
sid_6 = sid[!1 = @sid]
sid_5 = sid[!1 = @sid_1]
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m_26)) ==> event(SendMsg(bob,c,stagepack_d(sid_b),m_26)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m_26)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m_26)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice)))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid_5),msg_d(bob,alice,sid_5))) && begin(SendMsg(alice,bob,stagepack_c(sid_6),msg_c(alice,bob,sid_6))) && begin(SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5))) && begin(SendMsg(alice,bob,stagepack_a(sid_6),msg_a(alice,bob,sid_6))) -> end(RecvMsg(alice,bob,stagepack_d(sid_6),msg_d(bob,alice,sid_5)))
Abbreviations:
sid_6 = sid[!1 = @sid]
sid_5 = sid[!1 = @sid_1]
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m_26)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m_26)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m_26)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m_26)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid_5),msg_d(bob,alice,sid_5))) && begin(SendMsg(alice,bob,stagepack_c(sid_6),msg_c(alice,bob,sid_6))) && begin(SendMsg(bob,alice,stagepack_b(sid_5),msg_b(bob,alice,sid_5))) && begin(SendMsg(alice,bob,stagepack_a(sid_6),msg_a(alice,bob,sid_6))) -> end(RecvMsg(alice,bob,stagepack_d(sid_6),msg_d(bob,alice,sid_5)))
Abbreviations:
sid_6 = sid[!1 = @sid]
sid_5 = sid[!1 = @sid_1]
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m_26)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m_26)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.
Starting query not attacker_p1(msg_d(bob,alice,sid_b))
RESULT not attacker_p1(msg_d(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(px,alice)) && event(LeakM(px,alice))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(px,alice)) && event(LeakM(px,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(px,alice)) && event(LeakM(px,alice)) && event(LeakS(pz,bob)) && event(LeakM(pz,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(px,alice)) && event(LeakM(px,alice)) && event(LeakS(pz,bob)) && event(LeakM(pz,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) && event(LeakM(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_e(sid_b),m_26)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m_26))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid_5),msg_e(alice,bob,sid_5))) && begin(SendMsg(bob,alice,stagepack_d(sid_6),msg_d(bob,alice,sid_6))) && begin(SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5))) && begin(SendMsg(bob,alice,stagepack_b(sid_6),msg_b(bob,alice,sid_6))) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(bob,alice,stagepack_e(sid_6),msg_e(alice,bob,sid_5)))
Abbreviations:
sid_6 = sid[!1 = @sid]
sid_5 = sid[!1 = @sid_1]
RESULT event(RecvMsg(bob,alice,stagepack_e(sid_b),m_26)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m_26)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_e(sid_b),m_26)) ==> event(SendMsg(alice,c,stagepack_e(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid_5),msg_e(alice,bob,sid_5))) && begin(SendMsg(bob,alice,stagepack_d(sid_6),msg_d(bob,alice,sid_6))) && begin(SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5))) && begin(SendMsg(bob,alice,stagepack_b(sid_6),msg_b(bob,alice,sid_6))) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(bob,alice,stagepack_e(sid_6),msg_e(alice,bob,sid_5)))
Abbreviations:
sid_6 = sid[!1 = @sid]
sid_5 = sid[!1 = @sid_1]
RESULT event(RecvMsg(bob,alice,stagepack_e(sid_b),m_26)) ==> event(SendMsg(alice,c,stagepack_e(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_e(sid_b),m_26)) ==> event(SendMsg(alice,c,stagepack_e(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice)))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid_5),msg_e(alice,bob,sid_5))) && begin(SendMsg(bob,alice,stagepack_d(sid_6),msg_d(bob,alice,sid_6))) && begin(SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5))) && begin(SendMsg(bob,alice,stagepack_b(sid_6),msg_b(bob,alice,sid_6))) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(bob,alice,stagepack_e(sid_6),msg_e(alice,bob,sid_5)))
Abbreviations:
sid_6 = sid[!1 = @sid]
sid_5 = sid[!1 = @sid_1]
RESULT event(RecvMsg(bob,alice,stagepack_e(sid_b),m_26)) ==> event(SendMsg(alice,c,stagepack_e(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_e(sid_b),m_26)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid_5),msg_e(alice,bob,sid_5))) && begin(SendMsg(bob,alice,stagepack_d(sid_6),msg_d(bob,alice,sid_6))) && begin(SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5))) && begin(SendMsg(bob,alice,stagepack_b(sid_6),msg_b(bob,alice,sid_6))) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(bob,alice,stagepack_e(sid_6),msg_e(alice,bob,sid_5)))
Abbreviations:
sid_6 = sid[!1 = @sid]
sid_5 = sid[!1 = @sid_1]
RESULT event(RecvMsg(bob,alice,stagepack_e(sid_b),m_26)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_e(sid_b),m_26)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice)))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid_5),msg_e(alice,bob,sid_5))) && begin(SendMsg(bob,alice,stagepack_d(sid_6),msg_d(bob,alice,sid_6))) && begin(SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5))) && begin(SendMsg(bob,alice,stagepack_b(sid_6),msg_b(bob,alice,sid_6))) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvMsg(bob,alice,stagepack_e(sid_6),msg_e(alice,bob,sid_5)))
Abbreviations:
sid_6 = sid[!1 = @sid]
sid_5 = sid[!1 = @sid_1]
RESULT event(RecvMsg(bob,alice,stagepack_e(sid_b),m_26)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) is true.
Starting query not attacker_p1(msg_e(alice,bob,sid_a))
RESULT not attacker_p1(msg_e(alice,bob,sid_a)) is true.
Starting query attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakM(px,bob))
RESULT attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakM(px,bob)) is true.
Starting query attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakM(px,bob)) && event(LeakS(pz,alice)) && event(LeakM(pz,alice)))
RESULT attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakM(px,bob)) && event(LeakS(pz,alice)) && event(LeakM(pz,alice))) is true.
Starting query attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))
RESULT attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid_5),msg_e(alice,bob,sid_5))) && begin(SendMsg(bob,alice,stagepack_d(sid_6),msg_d(bob,alice,sid_6))) && begin(SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5))) && begin(SendMsg(bob,alice,stagepack_b(sid_6),msg_b(bob,alice,sid_6))) && begin(SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5))) -> end(RecvEnd(true))
Abbreviations:
sid_5 = sid[!1 = @sid]
sid_6 = sid[!1 = @sid_1]

Derivation:
Abbreviations:
sid_5 = sid[!1 = @sid]
sid_6 = sid[!1 = @sid_1]

1. The entry statestore(bob,alice,sid_6,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) may be inserted in a table at insert {1226}.
table(statestore(bob,alice,sid_6,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false)))).

2. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {50}.
table(statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

3. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {163}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {160}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) may be sent on channel pub at output {162}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))).

4. The entry statestore(bob,alice,sid_6,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,empty,empty,false))) that may be in a table by 1 may be read at get {1341}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))) that may be sent on channel pub by 3 may be received at input {1227}.
So the entry statestore(bob,alice,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false))) may be inserted in a table at insert {1340}.
table(statestore(bob,alice,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false)))).

5. The entry statestore(bob,alice,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false))) that may be in a table by 4 may be read at get {1433}.
The event SendMsg(bob,alice,stagepack_b(sid_6),msg_b(bob,alice,sid_6)) may be executed at {1430}.
So the entry statestore(bob,alice,sid_6,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_6),g)),key_e(bob,alice,sid_6)),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false))) may be inserted in a table at insert {1431}.
table(statestore(bob,alice,sid_6,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_6),g)),key_e(bob,alice,sid_6)),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false)))).

6. The entry statestore(alice,bob,sid_5,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 2 may be read at get {163}.
The event SendMsg(alice,bob,stagepack_a(sid_5),msg_a(alice,bob,sid_5)) may be executed at {160}.
So the entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) may be inserted in a table at insert {161}.
table(statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true)))).

7. The entry statestore(bob,alice,sid_6,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(empty,empty),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false))) that may be in a table by 4 may be read at get {1433}.
The event SendMsg(bob,alice,stagepack_b(sid_6),msg_b(bob,alice,sid_6)) may be executed at {1430}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))) may be sent on channel pub at output {1432}.
mess(pub,concat3(validkey(dhexp_real(key_e(bob,alice,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6)))).

8. The entry statestore(alice,bob,sid_5,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),empty,empty,true))) that may be in a table by 6 may be read at get {257}.
The message concat3(validkey(dhexp_real(key_e(bob,alice,sid_6),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))) that may be sent on channel pub by 7 may be received at input {164}.
So the entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_6),g)),empty,true))) may be inserted in a table at insert {256}.
table(statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_6),g)),empty,true)))).

9. The entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_6),g)),empty,true))) that may be in a table by 8 may be read at get {457}.
The event SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5)) may be executed at {454}.
So the message concat3(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_c(alice,bob,sid_5))) may be sent on channel pub at output {456}.
mess(pub,concat3(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_c(alice,bob,sid_5)))).

10. The entry statestore(bob,alice,sid_6,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_6),g)),key_e(bob,alice,sid_6)),empty,empty,validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false))) that may be in a table by 5 may be read at get {1649}.
The message concat3(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_c(alice,bob,sid_5))) that may be sent on channel pub by 9 may be received at input {1434}.
So the entry statestore(bob,alice,sid_6,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_c(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_6),g)),key_e(bob,alice,sid_6)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),minnonce))) may be inserted in a table at insert {1648}.
table(statestore(bob,alice,sid_6,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_c(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_6),g)),key_e(bob,alice,sid_6)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),minnonce)))).

11. The entry statestore(bob,alice,sid_6,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_c(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_6),g)),key_e(bob,alice,sid_6)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),minnonce))) that may be in a table by 10 may be read at get {1708}.
The event SendMsg(bob,alice,stagepack_d(sid_6),msg_d(bob,alice,sid_6)) may be executed at {1705}.
So the entry statestore(bob,alice,sid_6,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_c(alice,bob,sid_5))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_c(alice,bob,sid_5))),msg_d(bob,alice,sid_6)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_6),g)),key_e(bob,alice,sid_6)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),increment_nonce(minnonce)))) may be inserted in a table at insert {1706}.
table(statestore(bob,alice,sid_6,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_c(alice,bob,sid_5))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_c(alice,bob,sid_5))),msg_d(bob,alice,sid_6)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_6),g)),key_e(bob,alice,sid_6)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),increment_nonce(minnonce))))).

12. The entry statestore(alice,bob,sid_5,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6)))),keypairpack(empty,empty),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_6),g)),empty,true))) that may be in a table by 8 may be read at get {457}.
The event SendMsg(alice,bob,stagepack_c(sid_5),msg_c(alice,bob,sid_5)) may be executed at {454}.
So the entry statestore(alice,bob,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_c(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_6),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),minnonce))) may be inserted in a table at insert {455}.
table(statestore(alice,bob,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_c(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_6),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),minnonce)))).

13. The entry statestore(bob,alice,sid_6,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_c(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_6),g)),key_e(bob,alice,sid_6)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),minnonce))) that may be in a table by 10 may be read at get {1708}.
The event SendMsg(bob,alice,stagepack_d(sid_6),msg_d(bob,alice,sid_6)) may be executed at {1705}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_c(alice,bob,sid_5))),msg_d(bob,alice,sid_6))) may be sent on channel pub at output {1707}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_c(alice,bob,sid_5))),msg_d(bob,alice,sid_6)))).

14. The entry statestore(alice,bob,sid_5,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_c(alice,bob,sid_5)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_6),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),minnonce))) that may be in a table by 12 may be read at get {524}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_c(alice,bob,sid_5))),msg_d(bob,alice,sid_6))) that may be sent on channel pub by 13 may be received at input {460}.
So the entry statestore(alice,bob,sid_5,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_c(alice,bob,sid_5))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_c(alice,bob,sid_5))),msg_d(bob,alice,sid_6)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_6),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),increment_nonce(minnonce)))) may be inserted in a table at insert {523}.
table(statestore(alice,bob,sid_5,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_c(alice,bob,sid_5))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_c(alice,bob,sid_5))),msg_d(bob,alice,sid_6)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_6),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),increment_nonce(minnonce))))).

15. The entry statestore(alice,bob,sid_5,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_c(alice,bob,sid_5))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_c(alice,bob,sid_5))),msg_d(bob,alice,sid_6)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_m(alice),g)),key_m(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_5),g)),key_e(alice,bob,sid_5)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_m(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_6),g)),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),increment_nonce(minnonce)))) that may be in a table by 14 may be read at get {582}.
The event SendMsg(alice,bob,stagepack_e(sid_5),msg_e(alice,bob,sid_5)) may be executed at {580}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_c(alice,bob,sid_5))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_c(alice,bob,sid_5))),msg_d(bob,alice,sid_6))),msg_e(alice,bob,sid_5))) may be sent on channel pub at output {581}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_c(alice,bob,sid_5))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_c(alice,bob,sid_5))),msg_d(bob,alice,sid_6))),msg_e(alice,bob,sid_5)))).

16. The entry statestore(bob,alice,sid_6,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_c(alice,bob,sid_5))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_c(alice,bob,sid_5))),msg_d(bob,alice,sid_6)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_m(bob),g)),key_m(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_6),g)),key_e(bob,alice,sid_6)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_m(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_5),g)),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),increment_nonce(minnonce)))) that may be in a table by 11 may be read at get {1775}.
The message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_c(alice,bob,sid_5))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_s(alice),g))),dhexp_real(key_e(bob,alice,sid_6),dhexp_real(key_m(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_e(bob,alice,sid_6),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_s(bob),g))),dhexp_real(key_e(alice,bob,sid_5),dhexp_real(key_m(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_m(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_5),g))),msg_a(alice,bob,sid_5))),validkey(dhexp_real(key_e(bob,alice,sid_6),g))),msg_b(bob,alice,sid_6))),validkey(dhexp_real(key_s(alice),g)))),validkey(dhexp_real(key_m(alice),g)))),msg_c(alice,bob,sid_5))),msg_d(bob,alice,sid_6))),msg_e(alice,bob,sid_5))) that may be sent on channel pub by 15 may be received at input {1711}.
So event RecvEnd(true) may be executed at {1774}.
end(RecvEnd(true)).

17. By 16, end(RecvEnd(true)).
The goal is reached, represented in the following fact:
end(RecvEnd(true)).


RESULT not event(RecvEnd(true)) cannot be proved.

--------------------------------------------------------------
Verification summary:

Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m_26)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m_26)) is true.

Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m_26)) ==> event(SendMsg(alice,c,stagepack_a(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.

Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m_26)) ==> event(SendMsg(alice,c,stagepack_a(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) is true.

Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m_26)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.

Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m_26)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) is true.

Query not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.

Query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakM(px,bob)) is true.

Query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(px,bob)) && event(LeakM(px,bob)) && event(LeakS(pz,alice)) && event(LeakM(pz,alice))) cannot be proved.

Query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)) cannot be proved.

Query event(RecvMsg(alice,bob,stagepack_b(sid_a),m_26)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m_26)) cannot be proved.

Query event(RecvMsg(alice,bob,stagepack_b(sid_a),m_26)) ==> event(SendMsg(bob,c,stagepack_b(sid_b),m_26)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) is true.

Query event(RecvMsg(alice,bob,stagepack_b(sid_a),m_26)) ==> event(SendMsg(bob,c,stagepack_b(sid_b),m_26)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.

Query event(RecvMsg(alice,bob,stagepack_b(sid_a),m_26)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m_26)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) cannot be proved.

Query event(RecvMsg(alice,bob,stagepack_b(sid_a),m_26)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m_26)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) cannot be proved.

Query not attacker_p1(msg_b(bob,alice,sid_b)) is true.

Query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(px,alice)) && event(LeakM(px,alice)) is true.

Query attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(px,alice)) && event(LeakM(px,alice)) && event(LeakS(pz,bob)) && event(LeakM(pz,bob))) is true.

Query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) && event(LeakM(phase0,alice)) is true.

Query event(RecvMsg(bob,alice,stagepack_c(sid_b),m_26)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m_26)) is true.

Query event(RecvMsg(bob,alice,stagepack_c(sid_b),m_26)) ==> event(SendMsg(alice,c,stagepack_c(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.

Query event(RecvMsg(bob,alice,stagepack_c(sid_b),m_26)) ==> event(SendMsg(alice,c,stagepack_c(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) is true.

Query event(RecvMsg(bob,alice,stagepack_c(sid_b),m_26)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.

Query event(RecvMsg(bob,alice,stagepack_c(sid_b),m_26)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) is true.

Query not attacker_p1(msg_c(alice,bob,sid_a)) is true.

Query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakM(px,bob)) is true.

Query attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(px,bob)) && event(LeakM(px,bob)) && event(LeakS(pz,alice)) && event(LeakM(pz,alice))) is true.

Query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)) is true.

Query event(RecvMsg(alice,bob,stagepack_d(sid_a),m_26)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m_26)) is true.

Query event(RecvMsg(alice,bob,stagepack_d(sid_a),m_26)) ==> event(SendMsg(bob,c,stagepack_d(sid_b),m_26)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) is true.

Query event(RecvMsg(alice,bob,stagepack_d(sid_a),m_26)) ==> event(SendMsg(bob,c,stagepack_d(sid_b),m_26)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.

Query event(RecvMsg(alice,bob,stagepack_d(sid_a),m_26)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m_26)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) is true.

Query event(RecvMsg(alice,bob,stagepack_d(sid_a),m_26)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m_26)) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.

Query not attacker_p1(msg_d(bob,alice,sid_b)) is true.

Query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(px,alice)) && event(LeakM(px,alice)) is true.

Query attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(px,alice)) && event(LeakM(px,alice)) && event(LeakS(pz,bob)) && event(LeakM(pz,bob))) is true.

Query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) && event(LeakM(phase0,alice)) is true.

Query event(RecvMsg(bob,alice,stagepack_e(sid_b),m_26)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m_26)) is true.

Query event(RecvMsg(bob,alice,stagepack_e(sid_b),m_26)) ==> event(SendMsg(alice,c,stagepack_e(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.

Query event(RecvMsg(bob,alice,stagepack_e(sid_b),m_26)) ==> event(SendMsg(alice,c,stagepack_e(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) is true.

Query event(RecvMsg(bob,alice,stagepack_e(sid_b),m_26)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) || (event(LeakS(phase0,bob)) && event(LeakM(phase0,bob))) is true.

Query event(RecvMsg(bob,alice,stagepack_e(sid_b),m_26)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m_26)) || (event(LeakS(phase0,alice)) && event(LeakM(phase0,alice))) is true.

Query not attacker_p1(msg_e(alice,bob,sid_a)) is true.

Query attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(px,bob)) && event(LeakM(px,bob)) is true.

Query attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(px,bob)) && event(LeakM(px,bob)) && event(LeakS(pz,alice)) && event(LeakM(pz,alice))) is true.

Query attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) && event(LeakM(phase0,bob)) is true.

Query not event(RecvEnd(true)) cannot be proved.

--------------------------------------------------------------

